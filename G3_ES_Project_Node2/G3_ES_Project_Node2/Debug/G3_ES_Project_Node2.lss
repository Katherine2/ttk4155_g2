
G3_ES_Project_Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b18  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080b18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  20000434  00080f4c  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004c8  00080fe0  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c8  000813e0  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00003dff  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b53  00000000  00000000  000242b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001056  00000000  00000000  00024e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000150  00000000  00000000  00025e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00025fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000109b9  00000000  00000000  000260ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000029cc  00000000  00000000  00036a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054166  00000000  00000000  00039453  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000004b0  00000000  00000000  0008d5bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c8 08 00 20 69 03 08 00 65 03 08 00 65 03 08 00     ... i...e...e...
   80010:	65 03 08 00 65 03 08 00 65 03 08 00 00 00 00 00     e...e...e.......
	...
   8002c:	65 03 08 00 65 03 08 00 00 00 00 00 65 03 08 00     e...e.......e...
   8003c:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   8004c:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   8005c:	65 03 08 00 71 08 08 00 65 03 08 00 00 00 00 00     e...q...e.......
   8006c:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
	...
   80084:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   80094:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   800a4:	00 00 00 00 65 03 08 00 65 03 08 00 65 03 08 00     ....e...e...e...
   800b4:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   800c4:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   800d4:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   800e4:	65 03 08 00 65 03 08 00 e5 02 08 00 65 03 08 00     e...e.......e...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080b18 	.word	0x00080b18

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080b18 	.word	0x00080b18
   80154:	20000438 	.word	0x20000438
   80158:	00080b18 	.word	0x00080b18
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \param num_rx_mb Number of receive mailboxes, 	rx mb indexes: [num_tx_mb, num_rx_mb-1]
 *
 * \retval Success(0) or failure(1)
 */
uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8){
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>
	}
	
	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	//bit timing: BRP = 3 & 16TQ => SyncSeg = 1, PropSeg = 2, PS1 = 7, PS2 = 6, SJW = 1
	//can_br = 0b00000000000000110001001001110110;
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_init_def_tx_rx_mb>:
{
   80250:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80252:	2202      	movs	r2, #2
   80254:	2101      	movs	r1, #1
   80256:	4b01      	ldr	r3, [pc, #4]	; (8025c <can_init_def_tx_rx_mb+0xc>)
   80258:	4798      	blx	r3
}
   8025a:	bd08      	pop	{r3, pc}
   8025c:	00080161 	.word	0x00080161

00080260 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80260:	014b      	lsls	r3, r1, #5
   80262:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80266:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8026a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80272:	d033      	beq.n	802dc <can_receive+0x7c>
{
   80274:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80276:	014b      	lsls	r3, r1, #5
   80278:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80280:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80284:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80288:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8028c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80290:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80296:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8029a:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8029c:	461d      	mov	r5, r3
   8029e:	b15b      	cbz	r3, 802b8 <can_receive+0x58>
   802a0:	3003      	adds	r0, #3
   802a2:	2300      	movs	r3, #0
		{
			if(i < 4)
   802a4:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   802a6:	bfd9      	ittee	le
   802a8:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   802aa:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802ac:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   802ae:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802b0:	3301      	adds	r3, #1
   802b2:	3001      	adds	r0, #1
   802b4:	42ab      	cmp	r3, r5
   802b6:	d1f5      	bne.n	802a4 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802b8:	4b09      	ldr	r3, [pc, #36]	; (802e0 <can_receive+0x80>)
   802ba:	f101 0210 	add.w	r2, r1, #16
   802be:	0152      	lsls	r2, r2, #5
   802c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802c4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802d2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802d6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802d8:	bc30      	pop	{r4, r5}
   802da:	4770      	bx	lr
		return 1;
   802dc:	2001      	movs	r0, #1
   802de:	4770      	bx	lr
   802e0:	400b4000 	.word	0x400b4000

000802e4 <CAN0_Handler>:
{
   802e4:	b510      	push	{r4, lr}
	char can_sr = CAN0->CAN_SR;
   802e6:	4b18      	ldr	r3, [pc, #96]	; (80348 <CAN0_Handler+0x64>)
   802e8:	691c      	ldr	r4, [r3, #16]
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802ea:	f014 0f06 	tst.w	r4, #6
   802ee:	d013      	beq.n	80318 <CAN0_Handler+0x34>
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802f0:	f014 0f02 	tst.w	r4, #2
   802f4:	d11c      	bne.n	80330 <CAN0_Handler+0x4c>
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802f6:	f014 0f04 	tst.w	r4, #4
   802fa:	d021      	beq.n	80340 <CAN0_Handler+0x5c>
			can_receive(&message, 2);
   802fc:	2102      	movs	r1, #2
   802fe:	4813      	ldr	r0, [pc, #76]	; (8034c <CAN0_Handler+0x68>)
   80300:	4b13      	ldr	r3, [pc, #76]	; (80350 <CAN0_Handler+0x6c>)
   80302:	4798      	blx	r3
			newMessage = 1;
   80304:	2201      	movs	r2, #1
   80306:	4b13      	ldr	r3, [pc, #76]	; (80354 <CAN0_Handler+0x70>)
   80308:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < message.data_length; i++)
   8030a:	4b10      	ldr	r3, [pc, #64]	; (8034c <CAN0_Handler+0x68>)
   8030c:	789a      	ldrb	r2, [r3, #2]
   8030e:	b11a      	cbz	r2, 80318 <CAN0_Handler+0x34>
   80310:	2300      	movs	r3, #0
   80312:	3301      	adds	r3, #1
   80314:	4293      	cmp	r3, r2
   80316:	d1fc      	bne.n	80312 <CAN0_Handler+0x2e>
	if(can_sr & CAN_SR_MB0)
   80318:	f014 0f01 	tst.w	r4, #1
   8031c:	d002      	beq.n	80324 <CAN0_Handler+0x40>
		CAN0->CAN_IDR = CAN_IER_MB0;
   8031e:	2201      	movs	r2, #1
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <CAN0_Handler+0x64>)
   80322:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80324:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80328:	4b0b      	ldr	r3, [pc, #44]	; (80358 <CAN0_Handler+0x74>)
   8032a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8032e:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   80330:	2101      	movs	r1, #1
   80332:	4806      	ldr	r0, [pc, #24]	; (8034c <CAN0_Handler+0x68>)
   80334:	4b06      	ldr	r3, [pc, #24]	; (80350 <CAN0_Handler+0x6c>)
   80336:	4798      	blx	r3
			 newMessage = 1;
   80338:	2201      	movs	r2, #1
   8033a:	4b06      	ldr	r3, [pc, #24]	; (80354 <CAN0_Handler+0x70>)
   8033c:	601a      	str	r2, [r3, #0]
   8033e:	e7e4      	b.n	8030a <CAN0_Handler+0x26>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80340:	4806      	ldr	r0, [pc, #24]	; (8035c <CAN0_Handler+0x78>)
   80342:	4b07      	ldr	r3, [pc, #28]	; (80360 <CAN0_Handler+0x7c>)
   80344:	4798      	blx	r3
   80346:	e7e0      	b.n	8030a <CAN0_Handler+0x26>
   80348:	400b4000 	.word	0x400b4000
   8034c:	20000454 	.word	0x20000454
   80350:	00080261 	.word	0x00080261
   80354:	20000450 	.word	0x20000450
   80358:	e000e100 	.word	0xe000e100
   8035c:	00080a48 	.word	0x00080a48
   80360:	000807c1 	.word	0x000807c1

00080364 <Dummy_Handler>:
   80364:	e7fe      	b.n	80364 <Dummy_Handler>
	...

00080368 <Reset_Handler>:
   80368:	b508      	push	{r3, lr}
   8036a:	4b18      	ldr	r3, [pc, #96]	; (803cc <Reset_Handler+0x64>)
   8036c:	4a18      	ldr	r2, [pc, #96]	; (803d0 <Reset_Handler+0x68>)
   8036e:	429a      	cmp	r2, r3
   80370:	d010      	beq.n	80394 <Reset_Handler+0x2c>
   80372:	4b18      	ldr	r3, [pc, #96]	; (803d4 <Reset_Handler+0x6c>)
   80374:	4a15      	ldr	r2, [pc, #84]	; (803cc <Reset_Handler+0x64>)
   80376:	429a      	cmp	r2, r3
   80378:	d20c      	bcs.n	80394 <Reset_Handler+0x2c>
   8037a:	3b01      	subs	r3, #1
   8037c:	1a9b      	subs	r3, r3, r2
   8037e:	f023 0303 	bic.w	r3, r3, #3
   80382:	3304      	adds	r3, #4
   80384:	4413      	add	r3, r2
   80386:	4912      	ldr	r1, [pc, #72]	; (803d0 <Reset_Handler+0x68>)
   80388:	f851 0b04 	ldr.w	r0, [r1], #4
   8038c:	f842 0b04 	str.w	r0, [r2], #4
   80390:	429a      	cmp	r2, r3
   80392:	d1f9      	bne.n	80388 <Reset_Handler+0x20>
   80394:	4b10      	ldr	r3, [pc, #64]	; (803d8 <Reset_Handler+0x70>)
   80396:	4a11      	ldr	r2, [pc, #68]	; (803dc <Reset_Handler+0x74>)
   80398:	429a      	cmp	r2, r3
   8039a:	d20a      	bcs.n	803b2 <Reset_Handler+0x4a>
   8039c:	3b01      	subs	r3, #1
   8039e:	1a9b      	subs	r3, r3, r2
   803a0:	f023 0303 	bic.w	r3, r3, #3
   803a4:	3304      	adds	r3, #4
   803a6:	4413      	add	r3, r2
   803a8:	2100      	movs	r1, #0
   803aa:	f842 1b04 	str.w	r1, [r2], #4
   803ae:	4293      	cmp	r3, r2
   803b0:	d1fb      	bne.n	803aa <Reset_Handler+0x42>
   803b2:	4b0b      	ldr	r3, [pc, #44]	; (803e0 <Reset_Handler+0x78>)
   803b4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803bc:	4a09      	ldr	r2, [pc, #36]	; (803e4 <Reset_Handler+0x7c>)
   803be:	6093      	str	r3, [r2, #8]
   803c0:	4b09      	ldr	r3, [pc, #36]	; (803e8 <Reset_Handler+0x80>)
   803c2:	4798      	blx	r3
   803c4:	4b09      	ldr	r3, [pc, #36]	; (803ec <Reset_Handler+0x84>)
   803c6:	4798      	blx	r3
   803c8:	e7fe      	b.n	803c8 <Reset_Handler+0x60>
   803ca:	bf00      	nop
   803cc:	20000000 	.word	0x20000000
   803d0:	00080b18 	.word	0x00080b18
   803d4:	20000434 	.word	0x20000434
   803d8:	200004c8 	.word	0x200004c8
   803dc:	20000434 	.word	0x20000434
   803e0:	00080000 	.word	0x00080000
   803e4:	e000ed00 	.word	0xe000ed00
   803e8:	000808d9 	.word	0x000808d9
   803ec:	00080495 	.word	0x00080495

000803f0 <SystemInit>:
   803f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803f4:	4a20      	ldr	r2, [pc, #128]	; (80478 <SystemInit+0x88>)
   803f6:	6013      	str	r3, [r2, #0]
   803f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   803fc:	6013      	str	r3, [r2, #0]
   803fe:	4b1f      	ldr	r3, [pc, #124]	; (8047c <SystemInit+0x8c>)
   80400:	6a1b      	ldr	r3, [r3, #32]
   80402:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80406:	d107      	bne.n	80418 <SystemInit+0x28>
   80408:	4a1d      	ldr	r2, [pc, #116]	; (80480 <SystemInit+0x90>)
   8040a:	4b1c      	ldr	r3, [pc, #112]	; (8047c <SystemInit+0x8c>)
   8040c:	621a      	str	r2, [r3, #32]
   8040e:	461a      	mov	r2, r3
   80410:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80412:	f013 0f01 	tst.w	r3, #1
   80416:	d0fb      	beq.n	80410 <SystemInit+0x20>
   80418:	4a1a      	ldr	r2, [pc, #104]	; (80484 <SystemInit+0x94>)
   8041a:	4b18      	ldr	r3, [pc, #96]	; (8047c <SystemInit+0x8c>)
   8041c:	621a      	str	r2, [r3, #32]
   8041e:	461a      	mov	r2, r3
   80420:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80422:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80426:	d0fb      	beq.n	80420 <SystemInit+0x30>
   80428:	4a14      	ldr	r2, [pc, #80]	; (8047c <SystemInit+0x8c>)
   8042a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8042c:	f023 0303 	bic.w	r3, r3, #3
   80430:	f043 0301 	orr.w	r3, r3, #1
   80434:	6313      	str	r3, [r2, #48]	; 0x30
   80436:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80438:	f013 0f08 	tst.w	r3, #8
   8043c:	d0fb      	beq.n	80436 <SystemInit+0x46>
   8043e:	4a12      	ldr	r2, [pc, #72]	; (80488 <SystemInit+0x98>)
   80440:	4b0e      	ldr	r3, [pc, #56]	; (8047c <SystemInit+0x8c>)
   80442:	629a      	str	r2, [r3, #40]	; 0x28
   80444:	461a      	mov	r2, r3
   80446:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80448:	f013 0f02 	tst.w	r3, #2
   8044c:	d0fb      	beq.n	80446 <SystemInit+0x56>
   8044e:	2211      	movs	r2, #17
   80450:	4b0a      	ldr	r3, [pc, #40]	; (8047c <SystemInit+0x8c>)
   80452:	631a      	str	r2, [r3, #48]	; 0x30
   80454:	461a      	mov	r2, r3
   80456:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80458:	f013 0f08 	tst.w	r3, #8
   8045c:	d0fb      	beq.n	80456 <SystemInit+0x66>
   8045e:	2212      	movs	r2, #18
   80460:	4b06      	ldr	r3, [pc, #24]	; (8047c <SystemInit+0x8c>)
   80462:	631a      	str	r2, [r3, #48]	; 0x30
   80464:	461a      	mov	r2, r3
   80466:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80468:	f013 0f08 	tst.w	r3, #8
   8046c:	d0fb      	beq.n	80466 <SystemInit+0x76>
   8046e:	4a07      	ldr	r2, [pc, #28]	; (8048c <SystemInit+0x9c>)
   80470:	4b07      	ldr	r3, [pc, #28]	; (80490 <SystemInit+0xa0>)
   80472:	601a      	str	r2, [r3, #0]
   80474:	4770      	bx	lr
   80476:	bf00      	nop
   80478:	400e0a00 	.word	0x400e0a00
   8047c:	400e0600 	.word	0x400e0600
   80480:	00370809 	.word	0x00370809
   80484:	01370809 	.word	0x01370809
   80488:	200d3f01 	.word	0x200d3f01
   8048c:	0501bd00 	.word	0x0501bd00
   80490:	20000000 	.word	0x20000000

00080494 <main>:
#define TQ (2*(BRP+1))/FOSC		//500ns
#define BITTIME 1/(TQ*CANBAUD)	//13TQ => SyncSeg = 1, PropSeg = 1, PS1 = 6, PS2 = 5, SJW = 1
*/

int main(void)
{
   80494:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   80496:	4b11      	ldr	r3, [pc, #68]	; (804dc <main+0x48>)
   80498:	4798      	blx	r3
    WDT->WDT_MR = WDT_MR_WDDIS;		//disable the watchdog timer
   8049a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8049e:	4b10      	ldr	r3, [pc, #64]	; (804e0 <main+0x4c>)
   804a0:	605a      	str	r2, [r3, #4]
	configure_uart();
   804a2:	4b10      	ldr	r3, [pc, #64]	; (804e4 <main+0x50>)
   804a4:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561);
   804a6:	4810      	ldr	r0, [pc, #64]	; (804e8 <main+0x54>)
   804a8:	4b10      	ldr	r3, [pc, #64]	; (804ec <main+0x58>)
   804aa:	4798      	blx	r3
		goal = is_goal(adc, goal);
	}
	
	/*************************** MOTOR BOX *************************************/
	//DAC
	PMC->PMC_PCER1 |= PMC_PCER1_PID38; //enable clock for DACC
   804ac:	4a10      	ldr	r2, [pc, #64]	; (804f0 <main+0x5c>)
   804ae:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   804b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   804b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	REG_DACC_MR = DACC_MR_REFRESH(10) | DACC_MR_USER_SEL_CHANNEL1;
   804ba:	f44f 3285 	mov.w	r2, #68096	; 0x10a00
   804be:	4b0d      	ldr	r3, [pc, #52]	; (804f4 <main+0x60>)
   804c0:	601a      	str	r2, [r3, #0]
	REG_DACC_CHER = DACC_CHER_CH1;
   804c2:	2202      	movs	r2, #2
   804c4:	330c      	adds	r3, #12
   804c6:	601a      	str	r2, [r3, #0]
	//REG_DACC_CDR //USE THIS TO SEND JOYSTICK POS
	
	//MotorBox
	PIOD -> PIO_PER = PIO_PD0;		//enables input/output function
   804c8:	f503 33c9 	add.w	r3, r3, #102912	; 0x19200
   804cc:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
   804d0:	2201      	movs	r2, #1
   804d2:	601a      	str	r2, [r3, #0]
	PIOD -> PIO_OER = PIO_PD0;		//sets pin PA19 (pin 42) as output
   804d4:	611a      	str	r2, [r3, #16]
	PIOD -> PIO_PUDR = PIO_PD0;		//disables pull-ups
   804d6:	661a      	str	r2, [r3, #96]	; 0x60
		UART_Handler();
		char c;
		uart_getchar(&c);
		printf("character received: %c\r\n", c);
	}*/
}
   804d8:	2000      	movs	r0, #0
   804da:	bd08      	pop	{r3, pc}
   804dc:	000803f1 	.word	0x000803f1
   804e0:	400e1a50 	.word	0x400e1a50
   804e4:	000807e5 	.word	0x000807e5
   804e8:	00290561 	.word	0x00290561
   804ec:	00080251 	.word	0x00080251
   804f0:	400e0600 	.word	0x400e0600
   804f4:	400c8004 	.word	0x400c8004

000804f8 <prints>:
   804f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   804fc:	460d      	mov	r5, r1
   804fe:	1e16      	subs	r6, r2, #0
   80500:	dd48      	ble.n	80594 <prints+0x9c>
   80502:	780a      	ldrb	r2, [r1, #0]
   80504:	2a00      	cmp	r2, #0
   80506:	d035      	beq.n	80574 <prints+0x7c>
   80508:	460a      	mov	r2, r1
   8050a:	2400      	movs	r4, #0
   8050c:	3401      	adds	r4, #1
   8050e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80512:	2900      	cmp	r1, #0
   80514:	d1fa      	bne.n	8050c <prints+0x14>
   80516:	42a6      	cmp	r6, r4
   80518:	dc2d      	bgt.n	80576 <prints+0x7e>
   8051a:	2400      	movs	r4, #0
   8051c:	f003 0202 	and.w	r2, r3, #2
   80520:	2a00      	cmp	r2, #0
   80522:	bf0c      	ite	eq
   80524:	f04f 0820 	moveq.w	r8, #32
   80528:	f04f 0830 	movne.w	r8, #48	; 0x30
   8052c:	f013 0301 	ands.w	r3, r3, #1
   80530:	d123      	bne.n	8057a <prints+0x82>
   80532:	2c00      	cmp	r4, #0
   80534:	dd28      	ble.n	80588 <prints+0x90>
   80536:	4626      	mov	r6, r4
   80538:	fa5f f988 	uxtb.w	r9, r8
   8053c:	4f18      	ldr	r7, [pc, #96]	; (805a0 <prints+0xa8>)
   8053e:	4648      	mov	r0, r9
   80540:	47b8      	blx	r7
   80542:	3e01      	subs	r6, #1
   80544:	d1fb      	bne.n	8053e <prints+0x46>
   80546:	7828      	ldrb	r0, [r5, #0]
   80548:	b188      	cbz	r0, 8056e <prints+0x76>
   8054a:	4f15      	ldr	r7, [pc, #84]	; (805a0 <prints+0xa8>)
   8054c:	47b8      	blx	r7
   8054e:	3401      	adds	r4, #1
   80550:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80554:	2800      	cmp	r0, #0
   80556:	d1f9      	bne.n	8054c <prints+0x54>
   80558:	2e00      	cmp	r6, #0
   8055a:	dd08      	ble.n	8056e <prints+0x76>
   8055c:	4635      	mov	r5, r6
   8055e:	fa5f f888 	uxtb.w	r8, r8
   80562:	4f0f      	ldr	r7, [pc, #60]	; (805a0 <prints+0xa8>)
   80564:	4640      	mov	r0, r8
   80566:	47b8      	blx	r7
   80568:	3d01      	subs	r5, #1
   8056a:	d1fb      	bne.n	80564 <prints+0x6c>
   8056c:	4434      	add	r4, r6
   8056e:	4620      	mov	r0, r4
   80570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80574:	2400      	movs	r4, #0
   80576:	1b34      	subs	r4, r6, r4
   80578:	e7d0      	b.n	8051c <prints+0x24>
   8057a:	4626      	mov	r6, r4
   8057c:	7828      	ldrb	r0, [r5, #0]
   8057e:	b108      	cbz	r0, 80584 <prints+0x8c>
   80580:	2400      	movs	r4, #0
   80582:	e7e2      	b.n	8054a <prints+0x52>
   80584:	2400      	movs	r4, #0
   80586:	e7e7      	b.n	80558 <prints+0x60>
   80588:	4626      	mov	r6, r4
   8058a:	461c      	mov	r4, r3
   8058c:	e7db      	b.n	80546 <prints+0x4e>
   8058e:	f04f 0820 	mov.w	r8, #32
   80592:	e7d8      	b.n	80546 <prints+0x4e>
   80594:	f013 0401 	ands.w	r4, r3, #1
   80598:	d0f9      	beq.n	8058e <prints+0x96>
   8059a:	f04f 0820 	mov.w	r8, #32
   8059e:	e7ed      	b.n	8057c <prints+0x84>
   805a0:	0008084d 	.word	0x0008084d

000805a4 <printi>:
   805a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   805a6:	b085      	sub	sp, #20
   805a8:	4607      	mov	r7, r0
   805aa:	b381      	cbz	r1, 8060e <printi+0x6a>
   805ac:	460c      	mov	r4, r1
   805ae:	b10b      	cbz	r3, 805b4 <printi+0x10>
   805b0:	2a0a      	cmp	r2, #10
   805b2:	d038      	beq.n	80626 <printi+0x82>
   805b4:	2300      	movs	r3, #0
   805b6:	f88d 300f 	strb.w	r3, [sp, #15]
   805ba:	2600      	movs	r6, #0
   805bc:	2900      	cmp	r1, #0
   805be:	d046      	beq.n	8064e <printi+0xaa>
   805c0:	f10d 050f 	add.w	r5, sp, #15
   805c4:	990c      	ldr	r1, [sp, #48]	; 0x30
   805c6:	393a      	subs	r1, #58	; 0x3a
   805c8:	fbb4 f3f2 	udiv	r3, r4, r2
   805cc:	fb02 4313 	mls	r3, r2, r3, r4
   805d0:	2b09      	cmp	r3, #9
   805d2:	bfc8      	it	gt
   805d4:	185b      	addgt	r3, r3, r1
   805d6:	3330      	adds	r3, #48	; 0x30
   805d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
   805dc:	fbb4 f4f2 	udiv	r4, r4, r2
   805e0:	2c00      	cmp	r4, #0
   805e2:	d1f1      	bne.n	805c8 <printi+0x24>
   805e4:	b156      	cbz	r6, 805fc <printi+0x58>
   805e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   805e8:	b11b      	cbz	r3, 805f2 <printi+0x4e>
   805ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   805ec:	f013 0f02 	tst.w	r3, #2
   805f0:	d125      	bne.n	8063e <printi+0x9a>
   805f2:	232d      	movs	r3, #45	; 0x2d
   805f4:	f805 3c01 	strb.w	r3, [r5, #-1]
   805f8:	3d01      	subs	r5, #1
   805fa:	2600      	movs	r6, #0
   805fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   805fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80600:	4629      	mov	r1, r5
   80602:	4638      	mov	r0, r7
   80604:	4c14      	ldr	r4, [pc, #80]	; (80658 <printi+0xb4>)
   80606:	47a0      	blx	r4
   80608:	4430      	add	r0, r6
   8060a:	b005      	add	sp, #20
   8060c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8060e:	2330      	movs	r3, #48	; 0x30
   80610:	f88d 3004 	strb.w	r3, [sp, #4]
   80614:	2300      	movs	r3, #0
   80616:	f88d 3005 	strb.w	r3, [sp, #5]
   8061a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8061c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8061e:	a901      	add	r1, sp, #4
   80620:	4c0d      	ldr	r4, [pc, #52]	; (80658 <printi+0xb4>)
   80622:	47a0      	blx	r4
   80624:	e7f1      	b.n	8060a <printi+0x66>
   80626:	2900      	cmp	r1, #0
   80628:	dac4      	bge.n	805b4 <printi+0x10>
   8062a:	424c      	negs	r4, r1
   8062c:	2300      	movs	r3, #0
   8062e:	f88d 300f 	strb.w	r3, [sp, #15]
   80632:	f10d 050f 	add.w	r5, sp, #15
   80636:	2c00      	cmp	r4, #0
   80638:	d0d5      	beq.n	805e6 <printi+0x42>
   8063a:	2601      	movs	r6, #1
   8063c:	e7c0      	b.n	805c0 <printi+0x1c>
   8063e:	202d      	movs	r0, #45	; 0x2d
   80640:	4b06      	ldr	r3, [pc, #24]	; (8065c <printi+0xb8>)
   80642:	4798      	blx	r3
   80644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80646:	3b01      	subs	r3, #1
   80648:	930a      	str	r3, [sp, #40]	; 0x28
   8064a:	2601      	movs	r6, #1
   8064c:	e7d6      	b.n	805fc <printi+0x58>
   8064e:	461e      	mov	r6, r3
   80650:	f10d 050f 	add.w	r5, sp, #15
   80654:	e7d2      	b.n	805fc <printi+0x58>
   80656:	bf00      	nop
   80658:	000804f9 	.word	0x000804f9
   8065c:	0008084d 	.word	0x0008084d

00080660 <print>:
   80660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80664:	b087      	sub	sp, #28
   80666:	4680      	mov	r8, r0
   80668:	780b      	ldrb	r3, [r1, #0]
   8066a:	2b00      	cmp	r3, #0
   8066c:	f000 8094 	beq.w	80798 <print+0x138>
   80670:	468b      	mov	fp, r1
   80672:	4617      	mov	r7, r2
   80674:	2500      	movs	r5, #0
   80676:	4e4e      	ldr	r6, [pc, #312]	; (807b0 <print+0x150>)
   80678:	f8df a13c 	ldr.w	sl, [pc, #316]	; 807b8 <print+0x158>
   8067c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 807bc <print+0x15c>
   80680:	e046      	b.n	80710 <print+0xb0>
   80682:	2200      	movs	r2, #0
   80684:	e070      	b.n	80768 <print+0x108>
   80686:	6839      	ldr	r1, [r7, #0]
   80688:	3704      	adds	r7, #4
   8068a:	484a      	ldr	r0, [pc, #296]	; (807b4 <print+0x154>)
   8068c:	2900      	cmp	r1, #0
   8068e:	bf08      	it	eq
   80690:	4601      	moveq	r1, r0
   80692:	4640      	mov	r0, r8
   80694:	47d0      	blx	sl
   80696:	4405      	add	r5, r0
   80698:	e035      	b.n	80706 <print+0xa6>
   8069a:	6839      	ldr	r1, [r7, #0]
   8069c:	3704      	adds	r7, #4
   8069e:	2061      	movs	r0, #97	; 0x61
   806a0:	9002      	str	r0, [sp, #8]
   806a2:	9301      	str	r3, [sp, #4]
   806a4:	9200      	str	r2, [sp, #0]
   806a6:	2301      	movs	r3, #1
   806a8:	220a      	movs	r2, #10
   806aa:	4640      	mov	r0, r8
   806ac:	47c8      	blx	r9
   806ae:	4405      	add	r5, r0
   806b0:	e029      	b.n	80706 <print+0xa6>
   806b2:	6839      	ldr	r1, [r7, #0]
   806b4:	3704      	adds	r7, #4
   806b6:	2061      	movs	r0, #97	; 0x61
   806b8:	9002      	str	r0, [sp, #8]
   806ba:	9301      	str	r3, [sp, #4]
   806bc:	9200      	str	r2, [sp, #0]
   806be:	2300      	movs	r3, #0
   806c0:	2210      	movs	r2, #16
   806c2:	4640      	mov	r0, r8
   806c4:	47c8      	blx	r9
   806c6:	4405      	add	r5, r0
   806c8:	e01d      	b.n	80706 <print+0xa6>
   806ca:	6839      	ldr	r1, [r7, #0]
   806cc:	3704      	adds	r7, #4
   806ce:	2041      	movs	r0, #65	; 0x41
   806d0:	9002      	str	r0, [sp, #8]
   806d2:	9301      	str	r3, [sp, #4]
   806d4:	9200      	str	r2, [sp, #0]
   806d6:	2300      	movs	r3, #0
   806d8:	2210      	movs	r2, #16
   806da:	4640      	mov	r0, r8
   806dc:	47c8      	blx	r9
   806de:	4405      	add	r5, r0
   806e0:	e011      	b.n	80706 <print+0xa6>
   806e2:	6839      	ldr	r1, [r7, #0]
   806e4:	3704      	adds	r7, #4
   806e6:	2061      	movs	r0, #97	; 0x61
   806e8:	9002      	str	r0, [sp, #8]
   806ea:	9301      	str	r3, [sp, #4]
   806ec:	9200      	str	r2, [sp, #0]
   806ee:	2300      	movs	r3, #0
   806f0:	220a      	movs	r2, #10
   806f2:	4640      	mov	r0, r8
   806f4:	47c8      	blx	r9
   806f6:	4405      	add	r5, r0
   806f8:	e005      	b.n	80706 <print+0xa6>
   806fa:	46a3      	mov	fp, r4
   806fc:	f89b 0000 	ldrb.w	r0, [fp]
   80700:	47b0      	blx	r6
   80702:	3501      	adds	r5, #1
   80704:	465c      	mov	r4, fp
   80706:	f104 0b01 	add.w	fp, r4, #1
   8070a:	7863      	ldrb	r3, [r4, #1]
   8070c:	2b00      	cmp	r3, #0
   8070e:	d044      	beq.n	8079a <print+0x13a>
   80710:	2b25      	cmp	r3, #37	; 0x25
   80712:	d1f3      	bne.n	806fc <print+0x9c>
   80714:	f10b 0401 	add.w	r4, fp, #1
   80718:	f89b 3001 	ldrb.w	r3, [fp, #1]
   8071c:	2b00      	cmp	r3, #0
   8071e:	d03c      	beq.n	8079a <print+0x13a>
   80720:	2b25      	cmp	r3, #37	; 0x25
   80722:	d0ea      	beq.n	806fa <print+0x9a>
   80724:	2b2d      	cmp	r3, #45	; 0x2d
   80726:	bf06      	itte	eq
   80728:	f10b 0402 	addeq.w	r4, fp, #2
   8072c:	2301      	moveq	r3, #1
   8072e:	2300      	movne	r3, #0
   80730:	7822      	ldrb	r2, [r4, #0]
   80732:	2a30      	cmp	r2, #48	; 0x30
   80734:	d105      	bne.n	80742 <print+0xe2>
   80736:	f043 0302 	orr.w	r3, r3, #2
   8073a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   8073e:	2a30      	cmp	r2, #48	; 0x30
   80740:	d0f9      	beq.n	80736 <print+0xd6>
   80742:	7821      	ldrb	r1, [r4, #0]
   80744:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80748:	b2d2      	uxtb	r2, r2
   8074a:	2a09      	cmp	r2, #9
   8074c:	d899      	bhi.n	80682 <print+0x22>
   8074e:	2200      	movs	r2, #0
   80750:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80754:	3930      	subs	r1, #48	; 0x30
   80756:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   8075a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   8075e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80762:	b2c0      	uxtb	r0, r0
   80764:	2809      	cmp	r0, #9
   80766:	d9f3      	bls.n	80750 <print+0xf0>
   80768:	2973      	cmp	r1, #115	; 0x73
   8076a:	d08c      	beq.n	80686 <print+0x26>
   8076c:	2964      	cmp	r1, #100	; 0x64
   8076e:	d094      	beq.n	8069a <print+0x3a>
   80770:	2978      	cmp	r1, #120	; 0x78
   80772:	d09e      	beq.n	806b2 <print+0x52>
   80774:	2958      	cmp	r1, #88	; 0x58
   80776:	d0a8      	beq.n	806ca <print+0x6a>
   80778:	2975      	cmp	r1, #117	; 0x75
   8077a:	d0b2      	beq.n	806e2 <print+0x82>
   8077c:	2963      	cmp	r1, #99	; 0x63
   8077e:	d1c2      	bne.n	80706 <print+0xa6>
   80780:	6839      	ldr	r1, [r7, #0]
   80782:	3704      	adds	r7, #4
   80784:	f88d 1014 	strb.w	r1, [sp, #20]
   80788:	2100      	movs	r1, #0
   8078a:	f88d 1015 	strb.w	r1, [sp, #21]
   8078e:	a905      	add	r1, sp, #20
   80790:	4640      	mov	r0, r8
   80792:	47d0      	blx	sl
   80794:	4405      	add	r5, r0
   80796:	e7b6      	b.n	80706 <print+0xa6>
   80798:	2500      	movs	r5, #0
   8079a:	f1b8 0f00 	cmp.w	r8, #0
   8079e:	d003      	beq.n	807a8 <print+0x148>
   807a0:	f8d8 3000 	ldr.w	r3, [r8]
   807a4:	2200      	movs	r2, #0
   807a6:	701a      	strb	r2, [r3, #0]
   807a8:	4628      	mov	r0, r5
   807aa:	b007      	add	sp, #28
   807ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807b0:	0008084d 	.word	0x0008084d
   807b4:	00080ac8 	.word	0x00080ac8
   807b8:	000804f9 	.word	0x000804f9
   807bc:	000805a5 	.word	0x000805a5

000807c0 <printf>:
   807c0:	b40f      	push	{r0, r1, r2, r3}
   807c2:	b500      	push	{lr}
   807c4:	b083      	sub	sp, #12
   807c6:	aa04      	add	r2, sp, #16
   807c8:	f852 1b04 	ldr.w	r1, [r2], #4
   807cc:	9201      	str	r2, [sp, #4]
   807ce:	2000      	movs	r0, #0
   807d0:	4b03      	ldr	r3, [pc, #12]	; (807e0 <printf+0x20>)
   807d2:	4798      	blx	r3
   807d4:	b003      	add	sp, #12
   807d6:	f85d eb04 	ldr.w	lr, [sp], #4
   807da:	b004      	add	sp, #16
   807dc:	4770      	bx	lr
   807de:	bf00      	nop
   807e0:	00080661 	.word	0x00080661

000807e4 <configure_uart>:
   807e4:	4b16      	ldr	r3, [pc, #88]	; (80840 <configure_uart+0x5c>)
   807e6:	2200      	movs	r2, #0
   807e8:	701a      	strb	r2, [r3, #0]
   807ea:	705a      	strb	r2, [r3, #1]
   807ec:	4b15      	ldr	r3, [pc, #84]	; (80844 <configure_uart+0x60>)
   807ee:	f44f 7140 	mov.w	r1, #768	; 0x300
   807f2:	6459      	str	r1, [r3, #68]	; 0x44
   807f4:	6059      	str	r1, [r3, #4]
   807f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   807f8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   807fa:	4002      	ands	r2, r0
   807fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80800:	671a      	str	r2, [r3, #112]	; 0x70
   80802:	6659      	str	r1, [r3, #100]	; 0x64
   80804:	f44f 7280 	mov.w	r2, #256	; 0x100
   80808:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8080c:	611a      	str	r2, [r3, #16]
   8080e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80812:	21ac      	movs	r1, #172	; 0xac
   80814:	6019      	str	r1, [r3, #0]
   80816:	f240 2123 	movw	r1, #547	; 0x223
   8081a:	6219      	str	r1, [r3, #32]
   8081c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80820:	6059      	str	r1, [r3, #4]
   80822:	f240 2102 	movw	r1, #514	; 0x202
   80826:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   8082a:	f04f 31ff 	mov.w	r1, #4294967295
   8082e:	60d9      	str	r1, [r3, #12]
   80830:	21e1      	movs	r1, #225	; 0xe1
   80832:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80834:	4904      	ldr	r1, [pc, #16]	; (80848 <configure_uart+0x64>)
   80836:	600a      	str	r2, [r1, #0]
   80838:	2250      	movs	r2, #80	; 0x50
   8083a:	601a      	str	r2, [r3, #0]
   8083c:	4770      	bx	lr
   8083e:	bf00      	nop
   80840:	20000460 	.word	0x20000460
   80844:	400e0e00 	.word	0x400e0e00
   80848:	e000e100 	.word	0xe000e100

0008084c <uart_putchar>:
   8084c:	4b07      	ldr	r3, [pc, #28]	; (8086c <uart_putchar+0x20>)
   8084e:	695b      	ldr	r3, [r3, #20]
   80850:	f013 0f02 	tst.w	r3, #2
   80854:	d008      	beq.n	80868 <uart_putchar+0x1c>
   80856:	4b05      	ldr	r3, [pc, #20]	; (8086c <uart_putchar+0x20>)
   80858:	61d8      	str	r0, [r3, #28]
   8085a:	461a      	mov	r2, r3
   8085c:	6953      	ldr	r3, [r2, #20]
   8085e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80862:	d0fb      	beq.n	8085c <uart_putchar+0x10>
   80864:	2000      	movs	r0, #0
   80866:	4770      	bx	lr
   80868:	2001      	movs	r0, #1
   8086a:	4770      	bx	lr
   8086c:	400e0800 	.word	0x400e0800

00080870 <UART_Handler>:
   80870:	b508      	push	{r3, lr}
   80872:	4b15      	ldr	r3, [pc, #84]	; (808c8 <UART_Handler+0x58>)
   80874:	695b      	ldr	r3, [r3, #20]
   80876:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   8087a:	d003      	beq.n	80884 <UART_Handler+0x14>
   8087c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80880:	4a11      	ldr	r2, [pc, #68]	; (808c8 <UART_Handler+0x58>)
   80882:	6011      	str	r1, [r2, #0]
   80884:	f013 0f01 	tst.w	r3, #1
   80888:	d012      	beq.n	808b0 <UART_Handler+0x40>
   8088a:	4810      	ldr	r0, [pc, #64]	; (808cc <UART_Handler+0x5c>)
   8088c:	7842      	ldrb	r2, [r0, #1]
   8088e:	1c53      	adds	r3, r2, #1
   80890:	4259      	negs	r1, r3
   80892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80896:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   8089a:	bf58      	it	pl
   8089c:	424b      	negpl	r3, r1
   8089e:	7801      	ldrb	r1, [r0, #0]
   808a0:	428b      	cmp	r3, r1
   808a2:	d006      	beq.n	808b2 <UART_Handler+0x42>
   808a4:	4908      	ldr	r1, [pc, #32]	; (808c8 <UART_Handler+0x58>)
   808a6:	6988      	ldr	r0, [r1, #24]
   808a8:	4908      	ldr	r1, [pc, #32]	; (808cc <UART_Handler+0x5c>)
   808aa:	440a      	add	r2, r1
   808ac:	7090      	strb	r0, [r2, #2]
   808ae:	704b      	strb	r3, [r1, #1]
   808b0:	bd08      	pop	{r3, pc}
   808b2:	4807      	ldr	r0, [pc, #28]	; (808d0 <UART_Handler+0x60>)
   808b4:	4b07      	ldr	r3, [pc, #28]	; (808d4 <UART_Handler+0x64>)
   808b6:	4798      	blx	r3
   808b8:	4b03      	ldr	r3, [pc, #12]	; (808c8 <UART_Handler+0x58>)
   808ba:	699a      	ldr	r2, [r3, #24]
   808bc:	4b03      	ldr	r3, [pc, #12]	; (808cc <UART_Handler+0x5c>)
   808be:	7859      	ldrb	r1, [r3, #1]
   808c0:	440b      	add	r3, r1
   808c2:	709a      	strb	r2, [r3, #2]
   808c4:	bd08      	pop	{r3, pc}
   808c6:	bf00      	nop
   808c8:	400e0800 	.word	0x400e0800
   808cc:	20000460 	.word	0x20000460
   808d0:	00080ad0 	.word	0x00080ad0
   808d4:	000807c1 	.word	0x000807c1

000808d8 <__libc_init_array>:
   808d8:	b570      	push	{r4, r5, r6, lr}
   808da:	4e0f      	ldr	r6, [pc, #60]	; (80918 <__libc_init_array+0x40>)
   808dc:	4d0f      	ldr	r5, [pc, #60]	; (8091c <__libc_init_array+0x44>)
   808de:	1b76      	subs	r6, r6, r5
   808e0:	10b6      	asrs	r6, r6, #2
   808e2:	bf18      	it	ne
   808e4:	2400      	movne	r4, #0
   808e6:	d005      	beq.n	808f4 <__libc_init_array+0x1c>
   808e8:	3401      	adds	r4, #1
   808ea:	f855 3b04 	ldr.w	r3, [r5], #4
   808ee:	4798      	blx	r3
   808f0:	42a6      	cmp	r6, r4
   808f2:	d1f9      	bne.n	808e8 <__libc_init_array+0x10>
   808f4:	4e0a      	ldr	r6, [pc, #40]	; (80920 <__libc_init_array+0x48>)
   808f6:	4d0b      	ldr	r5, [pc, #44]	; (80924 <__libc_init_array+0x4c>)
   808f8:	f000 f8fc 	bl	80af4 <_init>
   808fc:	1b76      	subs	r6, r6, r5
   808fe:	10b6      	asrs	r6, r6, #2
   80900:	bf18      	it	ne
   80902:	2400      	movne	r4, #0
   80904:	d006      	beq.n	80914 <__libc_init_array+0x3c>
   80906:	3401      	adds	r4, #1
   80908:	f855 3b04 	ldr.w	r3, [r5], #4
   8090c:	4798      	blx	r3
   8090e:	42a6      	cmp	r6, r4
   80910:	d1f9      	bne.n	80906 <__libc_init_array+0x2e>
   80912:	bd70      	pop	{r4, r5, r6, pc}
   80914:	bd70      	pop	{r4, r5, r6, pc}
   80916:	bf00      	nop
   80918:	00080b00 	.word	0x00080b00
   8091c:	00080b00 	.word	0x00080b00
   80920:	00080b08 	.word	0x00080b08
   80924:	00080b00 	.word	0x00080b00

00080928 <register_fini>:
   80928:	4b02      	ldr	r3, [pc, #8]	; (80934 <register_fini+0xc>)
   8092a:	b113      	cbz	r3, 80932 <register_fini+0xa>
   8092c:	4802      	ldr	r0, [pc, #8]	; (80938 <register_fini+0x10>)
   8092e:	f000 b805 	b.w	8093c <atexit>
   80932:	4770      	bx	lr
   80934:	00000000 	.word	0x00000000
   80938:	00080949 	.word	0x00080949

0008093c <atexit>:
   8093c:	2300      	movs	r3, #0
   8093e:	4601      	mov	r1, r0
   80940:	461a      	mov	r2, r3
   80942:	4618      	mov	r0, r3
   80944:	f000 b81e 	b.w	80984 <__register_exitproc>

00080948 <__libc_fini_array>:
   80948:	b538      	push	{r3, r4, r5, lr}
   8094a:	4c0a      	ldr	r4, [pc, #40]	; (80974 <__libc_fini_array+0x2c>)
   8094c:	4d0a      	ldr	r5, [pc, #40]	; (80978 <__libc_fini_array+0x30>)
   8094e:	1b64      	subs	r4, r4, r5
   80950:	10a4      	asrs	r4, r4, #2
   80952:	d00a      	beq.n	8096a <__libc_fini_array+0x22>
   80954:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80958:	3b01      	subs	r3, #1
   8095a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8095e:	3c01      	subs	r4, #1
   80960:	f855 3904 	ldr.w	r3, [r5], #-4
   80964:	4798      	blx	r3
   80966:	2c00      	cmp	r4, #0
   80968:	d1f9      	bne.n	8095e <__libc_fini_array+0x16>
   8096a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8096e:	f000 b8cb 	b.w	80b08 <_fini>
   80972:	bf00      	nop
   80974:	00080b18 	.word	0x00080b18
   80978:	00080b14 	.word	0x00080b14

0008097c <__retarget_lock_acquire_recursive>:
   8097c:	4770      	bx	lr
   8097e:	bf00      	nop

00080980 <__retarget_lock_release_recursive>:
   80980:	4770      	bx	lr
   80982:	bf00      	nop

00080984 <__register_exitproc>:
   80984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80988:	4d2c      	ldr	r5, [pc, #176]	; (80a3c <__register_exitproc+0xb8>)
   8098a:	4606      	mov	r6, r0
   8098c:	6828      	ldr	r0, [r5, #0]
   8098e:	4698      	mov	r8, r3
   80990:	460f      	mov	r7, r1
   80992:	4691      	mov	r9, r2
   80994:	f7ff fff2 	bl	8097c <__retarget_lock_acquire_recursive>
   80998:	4b29      	ldr	r3, [pc, #164]	; (80a40 <__register_exitproc+0xbc>)
   8099a:	681c      	ldr	r4, [r3, #0]
   8099c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   809a0:	2b00      	cmp	r3, #0
   809a2:	d03e      	beq.n	80a22 <__register_exitproc+0x9e>
   809a4:	685a      	ldr	r2, [r3, #4]
   809a6:	2a1f      	cmp	r2, #31
   809a8:	dc1c      	bgt.n	809e4 <__register_exitproc+0x60>
   809aa:	f102 0e01 	add.w	lr, r2, #1
   809ae:	b176      	cbz	r6, 809ce <__register_exitproc+0x4a>
   809b0:	2101      	movs	r1, #1
   809b2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   809b6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   809ba:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   809be:	4091      	lsls	r1, r2
   809c0:	4308      	orrs	r0, r1
   809c2:	2e02      	cmp	r6, #2
   809c4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   809c8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   809cc:	d023      	beq.n	80a16 <__register_exitproc+0x92>
   809ce:	3202      	adds	r2, #2
   809d0:	f8c3 e004 	str.w	lr, [r3, #4]
   809d4:	6828      	ldr	r0, [r5, #0]
   809d6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   809da:	f7ff ffd1 	bl	80980 <__retarget_lock_release_recursive>
   809de:	2000      	movs	r0, #0
   809e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   809e4:	4b17      	ldr	r3, [pc, #92]	; (80a44 <__register_exitproc+0xc0>)
   809e6:	b30b      	cbz	r3, 80a2c <__register_exitproc+0xa8>
   809e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   809ec:	f3af 8000 	nop.w
   809f0:	4603      	mov	r3, r0
   809f2:	b1d8      	cbz	r0, 80a2c <__register_exitproc+0xa8>
   809f4:	2000      	movs	r0, #0
   809f6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   809fa:	f04f 0e01 	mov.w	lr, #1
   809fe:	6058      	str	r0, [r3, #4]
   80a00:	6019      	str	r1, [r3, #0]
   80a02:	4602      	mov	r2, r0
   80a04:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80a08:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80a0c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80a10:	2e00      	cmp	r6, #0
   80a12:	d0dc      	beq.n	809ce <__register_exitproc+0x4a>
   80a14:	e7cc      	b.n	809b0 <__register_exitproc+0x2c>
   80a16:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80a1a:	4301      	orrs	r1, r0
   80a1c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80a20:	e7d5      	b.n	809ce <__register_exitproc+0x4a>
   80a22:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80a26:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80a2a:	e7bb      	b.n	809a4 <__register_exitproc+0x20>
   80a2c:	6828      	ldr	r0, [r5, #0]
   80a2e:	f7ff ffa7 	bl	80980 <__retarget_lock_release_recursive>
   80a32:	f04f 30ff 	mov.w	r0, #4294967295
   80a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80a3a:	bf00      	nop
   80a3c:	20000430 	.word	0x20000430
   80a40:	00080af0 	.word	0x00080af0
   80a44:	00000000 	.word	0x00000000
   80a48:	304e4143 	.word	0x304e4143
   80a4c:	73656d20 	.word	0x73656d20
   80a50:	65676173 	.word	0x65676173
   80a54:	72726120 	.word	0x72726120
   80a58:	64657669 	.word	0x64657669
   80a5c:	206e6920 	.word	0x206e6920
   80a60:	2d6e6f6e 	.word	0x2d6e6f6e
   80a64:	64657375 	.word	0x64657375
   80a68:	69616d20 	.word	0x69616d20
   80a6c:	786f626c 	.word	0x786f626c
   80a70:	00000d0a 	.word	0x00000d0a
   80a74:	2077656e 	.word	0x2077656e
   80a78:	7373656d 	.word	0x7373656d
   80a7c:	3a656761 	.word	0x3a656761
   80a80:	000d0a20 	.word	0x000d0a20
   80a84:	7373656d 	.word	0x7373656d
   80a88:	20656761 	.word	0x20656761
   80a8c:	203a6469 	.word	0x203a6469
   80a90:	0d0a6425 	.word	0x0d0a6425
   80a94:	00000000 	.word	0x00000000
   80a98:	7373656d 	.word	0x7373656d
   80a9c:	20656761 	.word	0x20656761
   80aa0:	61746164 	.word	0x61746164
   80aa4:	6e656c20 	.word	0x6e656c20
   80aa8:	3a687467 	.word	0x3a687467
   80aac:	0a642520 	.word	0x0a642520
   80ab0:	73656d0d 	.word	0x73656d0d
   80ab4:	65676173 	.word	0x65676173
   80ab8:	74616420 	.word	0x74616420
   80abc:	00203a61 	.word	0x00203a61
   80ac0:	00206425 	.word	0x00206425
   80ac4:	000d0a0a 	.word	0x000d0a0a
   80ac8:	6c756e28 	.word	0x6c756e28
   80acc:	0000296c 	.word	0x0000296c
   80ad0:	3a525245 	.word	0x3a525245
   80ad4:	52415520 	.word	0x52415520
   80ad8:	58522054 	.word	0x58522054
   80adc:	66756220 	.word	0x66756220
   80ae0:	20726566 	.word	0x20726566
   80ae4:	66207369 	.word	0x66207369
   80ae8:	0a6c6c75 	.word	0x0a6c6c75
   80aec:	0000000d 	.word	0x0000000d

00080af0 <_global_impure_ptr>:
   80af0:	20000008                                ... 

00080af4 <_init>:
   80af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80af6:	bf00      	nop
   80af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80afa:	bc08      	pop	{r3}
   80afc:	469e      	mov	lr, r3
   80afe:	4770      	bx	lr

00080b00 <__init_array_start>:
   80b00:	00080929 	.word	0x00080929

00080b04 <__frame_dummy_init_array_entry>:
   80b04:	00080119                                ....

00080b08 <_fini>:
   80b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b0a:	bf00      	nop
   80b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b0e:	bc08      	pop	{r3}
   80b10:	469e      	mov	lr, r3
   80b12:	4770      	bx	lr

00080b14 <__fini_array_start>:
   80b14:	000800f5 	.word	0x000800f5
