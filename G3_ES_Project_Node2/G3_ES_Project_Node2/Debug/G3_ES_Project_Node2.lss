
G3_ES_Project_Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001540  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081540  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  20000434  00081974  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004e4  00081a24  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008e8  00081e28  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000075a4  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000168d  00000000  00000000  00027a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000015cd  00000000  00000000  000290e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000278  00000000  00000000  0002a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  0002a92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011e15  00000000  00000000  0002ab14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000052a8  00000000  00000000  0003c929  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005474a  00000000  00000000  00041bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000076c  00000000  00000000  0009631c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 08 00 20 c9 04 08 00 c5 04 08 00 c5 04 08 00     ... ............
   80010:	c5 04 08 00 c5 04 08 00 c5 04 08 00 00 00 00 00     ................
	...
   8002c:	c5 04 08 00 c5 04 08 00 00 00 00 00 c5 04 08 00     ................
   8003c:	a5 04 08 00 c5 04 08 00 c5 04 08 00 c5 04 08 00     ................
   8004c:	c5 04 08 00 c5 04 08 00 c5 04 08 00 c5 04 08 00     ................
   8005c:	c5 04 08 00 15 0d 08 00 c5 04 08 00 00 00 00 00     ................
   8006c:	c5 04 08 00 c5 04 08 00 c5 04 08 00 c5 04 08 00     ................
	...
   80084:	c5 04 08 00 c5 04 08 00 c5 04 08 00 c5 04 08 00     ................
   80094:	c5 04 08 00 c5 04 08 00 c5 04 08 00 c5 04 08 00     ................
   800a4:	00 00 00 00 c5 04 08 00 c5 04 08 00 c5 04 08 00     ................
   800b4:	c5 04 08 00 c5 04 08 00 c5 04 08 00 c5 04 08 00     ................
   800c4:	c5 04 08 00 c5 04 08 00 c5 04 08 00 c5 04 08 00     ................
   800d4:	c5 04 08 00 c5 04 08 00 c5 04 08 00 c5 04 08 00     ................
   800e4:	c5 04 08 00 c5 04 08 00 e5 02 08 00 c5 04 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081540 	.word	0x00081540

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081540 	.word	0x00081540
   80154:	20000438 	.word	0x20000438
   80158:	00081540 	.word	0x00081540
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
   8017e:	6913      	ldr	r3, [r2, #16]
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
   80194:	665c      	str	r4, [r3, #100]	; 0x64
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   801ac:	6150      	str	r0, [r2, #20]
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
   801b6:	46a1      	mov	r9, r4
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
   80238:	2001      	movs	r0, #1
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_init_def_tx_rx_mb>:
   80250:	b508      	push	{r3, lr}
   80252:	2202      	movs	r2, #2
   80254:	2101      	movs	r1, #1
   80256:	4b01      	ldr	r3, [pc, #4]	; (8025c <can_init_def_tx_rx_mb+0xc>)
   80258:	4798      	blx	r3
   8025a:	bd08      	pop	{r3, pc}
   8025c:	00080161 	.word	0x00080161

00080260 <can_receive>:
   80260:	014b      	lsls	r3, r1, #5
   80262:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80266:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8026a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80272:	d033      	beq.n	802dc <can_receive+0x7c>
   80274:	b430      	push	{r4, r5}
   80276:	014b      	lsls	r3, r1, #5
   80278:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80280:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   80284:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   80288:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8028c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80290:	8005      	strh	r5, [r0, #0]
   80292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80296:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8029a:	7083      	strb	r3, [r0, #2]
   8029c:	461d      	mov	r5, r3
   8029e:	b15b      	cbz	r3, 802b8 <can_receive+0x58>
   802a0:	3003      	adds	r0, #3
   802a2:	2300      	movs	r3, #0
   802a4:	2b03      	cmp	r3, #3
   802a6:	bfd9      	ittee	le
   802a8:	7002      	strble	r2, [r0, #0]
   802aa:	0a12      	lsrle	r2, r2, #8
   802ac:	7004      	strbgt	r4, [r0, #0]
   802ae:	0a24      	lsrgt	r4, r4, #8
   802b0:	3301      	adds	r3, #1
   802b2:	3001      	adds	r0, #1
   802b4:	42ab      	cmp	r3, r5
   802b6:	d1f5      	bne.n	802a4 <can_receive+0x44>
   802b8:	4b09      	ldr	r3, [pc, #36]	; (802e0 <can_receive+0x80>)
   802ba:	f101 0210 	add.w	r2, r1, #16
   802be:	0152      	lsls	r2, r2, #5
   802c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802c4:	5098      	str	r0, [r3, r2]
   802c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802d2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   802d6:	2000      	movs	r0, #0
   802d8:	bc30      	pop	{r4, r5}
   802da:	4770      	bx	lr
   802dc:	2001      	movs	r0, #1
   802de:	4770      	bx	lr
   802e0:	400b4000 	.word	0x400b4000

000802e4 <CAN0_Handler>:
   802e4:	b510      	push	{r4, lr}
   802e6:	4b18      	ldr	r3, [pc, #96]	; (80348 <CAN0_Handler+0x64>)
   802e8:	691c      	ldr	r4, [r3, #16]
   802ea:	f014 0f06 	tst.w	r4, #6
   802ee:	d013      	beq.n	80318 <CAN0_Handler+0x34>
   802f0:	f014 0f02 	tst.w	r4, #2
   802f4:	d11c      	bne.n	80330 <CAN0_Handler+0x4c>
   802f6:	f014 0f04 	tst.w	r4, #4
   802fa:	d021      	beq.n	80340 <CAN0_Handler+0x5c>
   802fc:	2102      	movs	r1, #2
   802fe:	4813      	ldr	r0, [pc, #76]	; (8034c <CAN0_Handler+0x68>)
   80300:	4b13      	ldr	r3, [pc, #76]	; (80350 <CAN0_Handler+0x6c>)
   80302:	4798      	blx	r3
   80304:	2201      	movs	r2, #1
   80306:	4b13      	ldr	r3, [pc, #76]	; (80354 <CAN0_Handler+0x70>)
   80308:	601a      	str	r2, [r3, #0]
   8030a:	4b10      	ldr	r3, [pc, #64]	; (8034c <CAN0_Handler+0x68>)
   8030c:	789a      	ldrb	r2, [r3, #2]
   8030e:	b11a      	cbz	r2, 80318 <CAN0_Handler+0x34>
   80310:	2300      	movs	r3, #0
   80312:	3301      	adds	r3, #1
   80314:	4293      	cmp	r3, r2
   80316:	d1fc      	bne.n	80312 <CAN0_Handler+0x2e>
   80318:	f014 0f01 	tst.w	r4, #1
   8031c:	d002      	beq.n	80324 <CAN0_Handler+0x40>
   8031e:	2201      	movs	r2, #1
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <CAN0_Handler+0x64>)
   80322:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80324:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80328:	4b0b      	ldr	r3, [pc, #44]	; (80358 <CAN0_Handler+0x74>)
   8032a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8032e:	bd10      	pop	{r4, pc}
   80330:	2101      	movs	r1, #1
   80332:	4806      	ldr	r0, [pc, #24]	; (8034c <CAN0_Handler+0x68>)
   80334:	4b06      	ldr	r3, [pc, #24]	; (80350 <CAN0_Handler+0x6c>)
   80336:	4798      	blx	r3
   80338:	2201      	movs	r2, #1
   8033a:	4b06      	ldr	r3, [pc, #24]	; (80354 <CAN0_Handler+0x70>)
   8033c:	601a      	str	r2, [r3, #0]
   8033e:	e7e4      	b.n	8030a <CAN0_Handler+0x26>
   80340:	4806      	ldr	r0, [pc, #24]	; (8035c <CAN0_Handler+0x78>)
   80342:	4b07      	ldr	r3, [pc, #28]	; (80360 <CAN0_Handler+0x7c>)
   80344:	4798      	blx	r3
   80346:	e7e0      	b.n	8030a <CAN0_Handler+0x26>
   80348:	400b4000 	.word	0x400b4000
   8034c:	2000045c 	.word	0x2000045c
   80350:	00080261 	.word	0x00080261
   80354:	20000450 	.word	0x20000450
   80358:	e000e100 	.word	0xe000e100
   8035c:	000813f4 	.word	0x000813f4
   80360:	00080b85 	.word	0x00080b85

00080364 <new_message_received>:
   80364:	4b01      	ldr	r3, [pc, #4]	; (8036c <new_message_received+0x8>)
   80366:	6818      	ldr	r0, [r3, #0]
   80368:	4770      	bx	lr
   8036a:	bf00      	nop
   8036c:	20000450 	.word	0x20000450

00080370 <get_message>:
   80370:	b410      	push	{r4}
   80372:	2100      	movs	r1, #0
   80374:	4a05      	ldr	r2, [pc, #20]	; (8038c <get_message+0x1c>)
   80376:	6011      	str	r1, [r2, #0]
   80378:	4a05      	ldr	r2, [pc, #20]	; (80390 <get_message+0x20>)
   8037a:	6814      	ldr	r4, [r2, #0]
   8037c:	6851      	ldr	r1, [r2, #4]
   8037e:	6892      	ldr	r2, [r2, #8]
   80380:	6004      	str	r4, [r0, #0]
   80382:	6041      	str	r1, [r0, #4]
   80384:	6082      	str	r2, [r0, #8]
   80386:	bc10      	pop	{r4}
   80388:	4770      	bx	lr
   8038a:	bf00      	nop
   8038c:	20000450 	.word	0x20000450
   80390:	2000045c 	.word	0x2000045c

00080394 <start_game>:
#define GAME_OVER 5

int playing = 1, game_end= 0;
CAN_MESSAGE msg;

void start_game(){
   80394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80398:	b084      	sub	sp, #16
	int goal = 0, adc;
   8039a:	f04f 0800 	mov.w	r8, #0
	while(1) {
		if(playing && !game_end){
   8039e:	4d19      	ldr	r5, [pc, #100]	; (80404 <start_game+0x70>)
			//uint16_t data = receive_data();
			//printf("data: %d\n\r", data);
			//delay_us(1000000000);
		}
		else{
			if(new_message_received()){
   803a0:	4e19      	ldr	r6, [pc, #100]	; (80408 <start_game+0x74>)
				msg = get_message();
   803a2:	4c1a      	ldr	r4, [pc, #104]	; (8040c <start_game+0x78>)
   803a4:	e001      	b.n	803aa <start_game+0x16>
			if(new_message_received()){
   803a6:	47b0      	blx	r6
   803a8:	b9e0      	cbnz	r0, 803e4 <start_game+0x50>
		if(playing && !game_end){
   803aa:	682b      	ldr	r3, [r5, #0]
   803ac:	2b00      	cmp	r3, #0
   803ae:	d0fa      	beq.n	803a6 <start_game+0x12>
   803b0:	4b17      	ldr	r3, [pc, #92]	; (80410 <start_game+0x7c>)
   803b2:	681b      	ldr	r3, [r3, #0]
   803b4:	2b00      	cmp	r3, #0
   803b6:	d1f6      	bne.n	803a6 <start_game+0x12>
			adc = adc_read();
   803b8:	4b16      	ldr	r3, [pc, #88]	; (80414 <start_game+0x80>)
   803ba:	4798      	blx	r3
   803bc:	4607      	mov	r7, r0
			printf("ir value: %d\n\r", adc);
   803be:	4601      	mov	r1, r0
   803c0:	4815      	ldr	r0, [pc, #84]	; (80418 <start_game+0x84>)
   803c2:	4b16      	ldr	r3, [pc, #88]	; (8041c <start_game+0x88>)
   803c4:	4798      	blx	r3
			goal = is_goal(adc, goal);
   803c6:	4641      	mov	r1, r8
   803c8:	4638      	mov	r0, r7
   803ca:	4b15      	ldr	r3, [pc, #84]	; (80420 <start_game+0x8c>)
   803cc:	4798      	blx	r3
   803ce:	4680      	mov	r8, r0
			msg = get_positions();
   803d0:	4668      	mov	r0, sp
   803d2:	4b14      	ldr	r3, [pc, #80]	; (80424 <start_game+0x90>)
   803d4:	4798      	blx	r3
   803d6:	9900      	ldr	r1, [sp, #0]
   803d8:	9a01      	ldr	r2, [sp, #4]
   803da:	9b02      	ldr	r3, [sp, #8]
   803dc:	6021      	str	r1, [r4, #0]
   803de:	6062      	str	r2, [r4, #4]
   803e0:	60a3      	str	r3, [r4, #8]
		if(playing && !game_end){
   803e2:	e7e2      	b.n	803aa <start_game+0x16>
				msg = get_message();
   803e4:	4668      	mov	r0, sp
   803e6:	4b10      	ldr	r3, [pc, #64]	; (80428 <start_game+0x94>)
   803e8:	4798      	blx	r3
   803ea:	9900      	ldr	r1, [sp, #0]
   803ec:	9a01      	ldr	r2, [sp, #4]
   803ee:	9b02      	ldr	r3, [sp, #8]
   803f0:	6021      	str	r1, [r4, #0]
   803f2:	6062      	str	r2, [r4, #4]
   803f4:	60a3      	str	r3, [r4, #8]
				if(!msg.data[2]){
   803f6:	7963      	ldrb	r3, [r4, #5]
   803f8:	2b00      	cmp	r3, #0
   803fa:	d1d6      	bne.n	803aa <start_game+0x16>
					playing = 1;
   803fc:	2301      	movs	r3, #1
   803fe:	602b      	str	r3, [r5, #0]
   80400:	e7d3      	b.n	803aa <start_game+0x16>
   80402:	bf00      	nop
   80404:	20000000 	.word	0x20000000
   80408:	00080365 	.word	0x00080365
   8040c:	20000468 	.word	0x20000468
   80410:	20000454 	.word	0x20000454
   80414:	00080629 	.word	0x00080629
   80418:	00081474 	.word	0x00081474
   8041c:	00080b85 	.word	0x00080b85
   80420:	00080635 	.word	0x00080635
   80424:	00080701 	.word	0x00080701
   80428:	00080371 	.word	0x00080371

0008042c <game_over>:
	if(score >= GAME_OVER){
		game_over();
	}
}

void game_over(){
   8042c:	b508      	push	{r3, lr}
	playing = 0;
   8042e:	2200      	movs	r2, #0
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <game_over+0x18>)
   80432:	601a      	str	r2, [r3, #0]
	game_end = 1;
   80434:	2201      	movs	r2, #1
   80436:	4b04      	ldr	r3, [pc, #16]	; (80448 <game_over+0x1c>)
   80438:	601a      	str	r2, [r3, #0]
	printf("game over\n\r");
   8043a:	4804      	ldr	r0, [pc, #16]	; (8044c <game_over+0x20>)
   8043c:	4b04      	ldr	r3, [pc, #16]	; (80450 <game_over+0x24>)
   8043e:	4798      	blx	r3
   80440:	bd08      	pop	{r3, pc}
   80442:	bf00      	nop
   80444:	20000000 	.word	0x20000000
   80448:	20000454 	.word	0x20000454
   8044c:	00081484 	.word	0x00081484
   80450:	00080b85 	.word	0x00080b85

00080454 <pause_game>:
void pause_game(int score){
   80454:	b508      	push	{r3, lr}
	playing = 0;
   80456:	2200      	movs	r2, #0
   80458:	4b03      	ldr	r3, [pc, #12]	; (80468 <pause_game+0x14>)
   8045a:	601a      	str	r2, [r3, #0]
	if(score >= GAME_OVER){
   8045c:	2804      	cmp	r0, #4
   8045e:	dc00      	bgt.n	80462 <pause_game+0xe>
   80460:	bd08      	pop	{r3, pc}
		game_over();
   80462:	4b02      	ldr	r3, [pc, #8]	; (8046c <pause_game+0x18>)
   80464:	4798      	blx	r3
}
   80466:	e7fb      	b.n	80460 <pause_game+0xc>
   80468:	20000000 	.word	0x20000000
   8046c:	0008042d 	.word	0x0008042d

00080470 <delay_us>:
#define US_TO_TICKS_CONVERTER (84 & SysTick_LOAD_RELOAD_Msk)		//https://www.at91.com/viewtopic.php?t=22349

static volatile uint16_t ticks;

void delay_us(uint16_t us) {
	ticks = us;
   80470:	4b09      	ldr	r3, [pc, #36]	; (80498 <delay_us+0x28>)
   80472:	8018      	strh	r0, [r3, #0]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
   80474:	4b09      	ldr	r3, [pc, #36]	; (8049c <delay_us+0x2c>)
   80476:	2253      	movs	r2, #83	; 0x53
   80478:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   8047a:	21f0      	movs	r1, #240	; 0xf0
   8047c:	4a08      	ldr	r2, [pc, #32]	; (804a0 <delay_us+0x30>)
   8047e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
   80482:	2200      	movs	r2, #0
   80484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   80486:	2207      	movs	r2, #7
   80488:	601a      	str	r2, [r3, #0]
	SysTick_Config(1 * US_TO_TICKS_CONVERTER);
	
	while (ticks > 0);
   8048a:	4a03      	ldr	r2, [pc, #12]	; (80498 <delay_us+0x28>)
   8048c:	8813      	ldrh	r3, [r2, #0]
   8048e:	b29b      	uxth	r3, r3
   80490:	2b00      	cmp	r3, #0
   80492:	d1fb      	bne.n	8048c <delay_us+0x1c>
}
   80494:	4770      	bx	lr
   80496:	bf00      	nop
   80498:	20000458 	.word	0x20000458
   8049c:	e000e010 	.word	0xe000e010
   804a0:	e000ed00 	.word	0xe000ed00

000804a4 <SysTick_Handler>:

void SysTick_Handler() {
	ticks--;
   804a4:	4a05      	ldr	r2, [pc, #20]	; (804bc <SysTick_Handler+0x18>)
   804a6:	8813      	ldrh	r3, [r2, #0]
   804a8:	3b01      	subs	r3, #1
   804aa:	b29b      	uxth	r3, r3
   804ac:	8013      	strh	r3, [r2, #0]
	if (ticks == 0) {
   804ae:	8813      	ldrh	r3, [r2, #0]
   804b0:	b29b      	uxth	r3, r3
   804b2:	b913      	cbnz	r3, 804ba <SysTick_Handler+0x16>
		SysTick->CTRL = 0;
   804b4:	2200      	movs	r2, #0
   804b6:	4b02      	ldr	r3, [pc, #8]	; (804c0 <SysTick_Handler+0x1c>)
   804b8:	601a      	str	r2, [r3, #0]
   804ba:	4770      	bx	lr
   804bc:	20000458 	.word	0x20000458
   804c0:	e000e010 	.word	0xe000e010

000804c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   804c4:	e7fe      	b.n	804c4 <Dummy_Handler>
	...

000804c8 <Reset_Handler>:
{
   804c8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   804ca:	4b18      	ldr	r3, [pc, #96]	; (8052c <Reset_Handler+0x64>)
   804cc:	4a18      	ldr	r2, [pc, #96]	; (80530 <Reset_Handler+0x68>)
   804ce:	429a      	cmp	r2, r3
   804d0:	d010      	beq.n	804f4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   804d2:	4b18      	ldr	r3, [pc, #96]	; (80534 <Reset_Handler+0x6c>)
   804d4:	4a15      	ldr	r2, [pc, #84]	; (8052c <Reset_Handler+0x64>)
   804d6:	429a      	cmp	r2, r3
   804d8:	d20c      	bcs.n	804f4 <Reset_Handler+0x2c>
   804da:	3b01      	subs	r3, #1
   804dc:	1a9b      	subs	r3, r3, r2
   804de:	f023 0303 	bic.w	r3, r3, #3
   804e2:	3304      	adds	r3, #4
   804e4:	4413      	add	r3, r2
   804e6:	4912      	ldr	r1, [pc, #72]	; (80530 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   804e8:	f851 0b04 	ldr.w	r0, [r1], #4
   804ec:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   804f0:	429a      	cmp	r2, r3
   804f2:	d1f9      	bne.n	804e8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   804f4:	4b10      	ldr	r3, [pc, #64]	; (80538 <Reset_Handler+0x70>)
   804f6:	4a11      	ldr	r2, [pc, #68]	; (8053c <Reset_Handler+0x74>)
   804f8:	429a      	cmp	r2, r3
   804fa:	d20a      	bcs.n	80512 <Reset_Handler+0x4a>
   804fc:	3b01      	subs	r3, #1
   804fe:	1a9b      	subs	r3, r3, r2
   80500:	f023 0303 	bic.w	r3, r3, #3
   80504:	3304      	adds	r3, #4
   80506:	4413      	add	r3, r2
                *pDest++ = 0;
   80508:	2100      	movs	r1, #0
   8050a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8050e:	4293      	cmp	r3, r2
   80510:	d1fb      	bne.n	8050a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80512:	4b0b      	ldr	r3, [pc, #44]	; (80540 <Reset_Handler+0x78>)
   80514:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80518:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8051c:	4a09      	ldr	r2, [pc, #36]	; (80544 <Reset_Handler+0x7c>)
   8051e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80520:	4b09      	ldr	r3, [pc, #36]	; (80548 <Reset_Handler+0x80>)
   80522:	4798      	blx	r3
        main();
   80524:	4b09      	ldr	r3, [pc, #36]	; (8054c <Reset_Handler+0x84>)
   80526:	4798      	blx	r3
   80528:	e7fe      	b.n	80528 <Reset_Handler+0x60>
   8052a:	bf00      	nop
   8052c:	20000000 	.word	0x20000000
   80530:	00081540 	.word	0x00081540
   80534:	20000434 	.word	0x20000434
   80538:	200004e4 	.word	0x200004e4
   8053c:	20000434 	.word	0x20000434
   80540:	00080000 	.word	0x00080000
   80544:	e000ed00 	.word	0xe000ed00
   80548:	00081285 	.word	0x00081285
   8054c:	00080781 	.word	0x00080781

00080550 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80550:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80554:	4a20      	ldr	r2, [pc, #128]	; (805d8 <SystemInit+0x88>)
   80556:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80558:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8055c:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   8055e:	4b1f      	ldr	r3, [pc, #124]	; (805dc <SystemInit+0x8c>)
   80560:	6a1b      	ldr	r3, [r3, #32]
   80562:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80566:	d107      	bne.n	80578 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80568:	4a1d      	ldr	r2, [pc, #116]	; (805e0 <SystemInit+0x90>)
   8056a:	4b1c      	ldr	r3, [pc, #112]	; (805dc <SystemInit+0x8c>)
   8056c:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8056e:	461a      	mov	r2, r3
   80570:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80572:	f013 0f01 	tst.w	r3, #1
   80576:	d0fb      	beq.n	80570 <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80578:	4a1a      	ldr	r2, [pc, #104]	; (805e4 <SystemInit+0x94>)
   8057a:	4b18      	ldr	r3, [pc, #96]	; (805dc <SystemInit+0x8c>)
   8057c:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8057e:	461a      	mov	r2, r3
   80580:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80582:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80586:	d0fb      	beq.n	80580 <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80588:	4a14      	ldr	r2, [pc, #80]	; (805dc <SystemInit+0x8c>)
   8058a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8058c:	f023 0303 	bic.w	r3, r3, #3
   80590:	f043 0301 	orr.w	r3, r3, #1
   80594:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80596:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80598:	f013 0f08 	tst.w	r3, #8
   8059c:	d0fb      	beq.n	80596 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8059e:	4a12      	ldr	r2, [pc, #72]	; (805e8 <SystemInit+0x98>)
   805a0:	4b0e      	ldr	r3, [pc, #56]	; (805dc <SystemInit+0x8c>)
   805a2:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   805a4:	461a      	mov	r2, r3
   805a6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805a8:	f013 0f02 	tst.w	r3, #2
   805ac:	d0fb      	beq.n	805a6 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   805ae:	2211      	movs	r2, #17
   805b0:	4b0a      	ldr	r3, [pc, #40]	; (805dc <SystemInit+0x8c>)
   805b2:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   805b4:	461a      	mov	r2, r3
   805b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805b8:	f013 0f08 	tst.w	r3, #8
   805bc:	d0fb      	beq.n	805b6 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   805be:	2212      	movs	r2, #18
   805c0:	4b06      	ldr	r3, [pc, #24]	; (805dc <SystemInit+0x8c>)
   805c2:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   805c4:	461a      	mov	r2, r3
   805c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805c8:	f013 0f08 	tst.w	r3, #8
   805cc:	d0fb      	beq.n	805c6 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   805ce:	4a07      	ldr	r2, [pc, #28]	; (805ec <SystemInit+0x9c>)
   805d0:	4b07      	ldr	r3, [pc, #28]	; (805f0 <SystemInit+0xa0>)
   805d2:	601a      	str	r2, [r3, #0]
   805d4:	4770      	bx	lr
   805d6:	bf00      	nop
   805d8:	400e0a00 	.word	0x400e0a00
   805dc:	400e0600 	.word	0x400e0600
   805e0:	00370809 	.word	0x00370809
   805e4:	01370809 	.word	0x01370809
   805e8:	200d3f01 	.word	0x200d3f01
   805ec:	0501bd00 	.word	0x0501bd00
   805f0:	20000004 	.word	0x20000004

000805f4 <adc_init>:

#define PASSWD_PIO_ADC 0x41444300
#define IR_THRESHOLD 300

void adc_init(void){
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;//(1 << 6);		//enable ADC clock
   805f4:	4a0a      	ldr	r2, [pc, #40]	; (80620 <adc_init+0x2c>)
   805f6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   805fa:	f043 0320 	orr.w	r3, r3, #32
   805fe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	SLEEP = 0 => Normal Mode (because we don't know otherwise)
	LOWRES = 0 => 12-bit resolution (because it makes more sense)
	TRGSEL = 000 => don't care about the value since TRGEN is 0
	TRGEN = 0 => Hardware triggers are disabled (because we don't know otherwise)
	*/
	ADC->ADC_MR |= ADC_MR_FREERUN_ON;//0b00010000000000001000000010000000;
   80602:	4b08      	ldr	r3, [pc, #32]	; (80624 <adc_init+0x30>)
   80604:	685a      	ldr	r2, [r3, #4]
   80606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8060a:	605a      	str	r2, [r3, #4]
	ADC->ADC_CHER |= ADC_CHER_CH0;//0x00000001;		//enables channel 0
   8060c:	691a      	ldr	r2, [r3, #16]
   8060e:	f042 0201 	orr.w	r2, r2, #1
   80612:	611a      	str	r2, [r3, #16]
	ADC->ADC_CR |= ADC_CR_START;//0x00000002;		//starts analog-to-digital conversion
   80614:	681a      	ldr	r2, [r3, #0]
   80616:	f042 0202 	orr.w	r2, r2, #2
   8061a:	601a      	str	r2, [r3, #0]
   8061c:	4770      	bx	lr
   8061e:	bf00      	nop
   80620:	400e0600 	.word	0x400e0600
   80624:	400c0000 	.word	0x400c0000

00080628 <adc_read>:
	//channel and pin numbre are inverted, that is pin A0 is channel 7 and channel 0 is pin A7
}

int adc_read(void){
	//printf("adc value: %d\n\r", (int)ADC->ADC_CDR[0]);
	return ADC->ADC_CDR[0];
   80628:	4b01      	ldr	r3, [pc, #4]	; (80630 <adc_read+0x8>)
   8062a:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
   8062c:	4770      	bx	lr
   8062e:	bf00      	nop
   80630:	400c0000 	.word	0x400c0000

00080634 <is_goal>:

int is_goal(int value, int score){
   80634:	b510      	push	{r4, lr}
   80636:	460c      	mov	r4, r1
	//printf("value: %d\n\r", value);
	if(value < IR_THRESHOLD){
   80638:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   8063c:	db05      	blt.n	8064a <is_goal+0x16>
		score++;
		pause_game(score);
	}
	printf("score: %d\n\r", score);
   8063e:	4621      	mov	r1, r4
   80640:	4804      	ldr	r0, [pc, #16]	; (80654 <is_goal+0x20>)
   80642:	4b05      	ldr	r3, [pc, #20]	; (80658 <is_goal+0x24>)
   80644:	4798      	blx	r3
	return score;
}
   80646:	4620      	mov	r0, r4
   80648:	bd10      	pop	{r4, pc}
		score++;
   8064a:	3401      	adds	r4, #1
		pause_game(score);
   8064c:	4620      	mov	r0, r4
   8064e:	4b03      	ldr	r3, [pc, #12]	; (8065c <is_goal+0x28>)
   80650:	4798      	blx	r3
   80652:	e7f4      	b.n	8063e <is_goal+0xa>
   80654:	00081490 	.word	0x00081490
   80658:	00080b85 	.word	0x00080b85
   8065c:	00080455 	.word	0x00080455

00080660 <button_pressed>:
	return msg;
}

void button_pressed(char d){
	//printf("button\n\r");
	PIOC -> PIO_PER = PIO_PC16;		//enables input/output function
   80660:	4b06      	ldr	r3, [pc, #24]	; (8067c <button_pressed+0x1c>)
   80662:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80666:	601a      	str	r2, [r3, #0]
	PIOC -> PIO_OER = PIO_PC16;		//sets pin PC16 (pin 47) as output
   80668:	611a      	str	r2, [r3, #16]
	PIOC -> PIO_PUDR = PIO_PC16;	//disables pull-ups
   8066a:	661a      	str	r2, [r3, #96]	; 0x60
	if((int)d == 0){
   8066c:	b120      	cbz	r0, 80678 <button_pressed+0x18>
		//printf("button pressed\n\r");
		PIOC -> PIO_SODR = PIO_PC16;	//sets output data register
	}
	else{
		PIOC -> PIO_CODR = PIO_PC16;	//clear output data register
   8066e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80672:	4b02      	ldr	r3, [pc, #8]	; (8067c <button_pressed+0x1c>)
   80674:	635a      	str	r2, [r3, #52]	; 0x34
   80676:	4770      	bx	lr
		PIOC -> PIO_SODR = PIO_PC16;	//sets output data register
   80678:	631a      	str	r2, [r3, #48]	; 0x30
   8067a:	4770      	bx	lr
   8067c:	400e1200 	.word	0x400e1200

00080680 <normalize_position>:
	}
}

int normalize_position(char d, int center){
   80680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80682:	460c      	mov	r4, r1
		int value = (int)d;
		int position = 0;
		if((int)value <= center){
   80684:	4288      	cmp	r0, r1
   80686:	dd18      	ble.n	806ba <normalize_position+0x3a>
			position = (((float)value/(float)center)*100);
		}
		else if((int)value > center){
			position = ((((255-(float)value)/(255-(float) center))*(-100)))+200;
   80688:	4e13      	ldr	r6, [pc, #76]	; (806d8 <normalize_position+0x58>)
   8068a:	47b0      	blx	r6
   8068c:	4d13      	ldr	r5, [pc, #76]	; (806dc <normalize_position+0x5c>)
   8068e:	4601      	mov	r1, r0
   80690:	4813      	ldr	r0, [pc, #76]	; (806e0 <normalize_position+0x60>)
   80692:	47a8      	blx	r5
   80694:	4607      	mov	r7, r0
   80696:	4620      	mov	r0, r4
   80698:	47b0      	blx	r6
   8069a:	4601      	mov	r1, r0
   8069c:	4810      	ldr	r0, [pc, #64]	; (806e0 <normalize_position+0x60>)
   8069e:	47a8      	blx	r5
   806a0:	4601      	mov	r1, r0
   806a2:	4638      	mov	r0, r7
   806a4:	4b0f      	ldr	r3, [pc, #60]	; (806e4 <normalize_position+0x64>)
   806a6:	4798      	blx	r3
   806a8:	490f      	ldr	r1, [pc, #60]	; (806e8 <normalize_position+0x68>)
   806aa:	4b10      	ldr	r3, [pc, #64]	; (806ec <normalize_position+0x6c>)
   806ac:	4798      	blx	r3
   806ae:	4910      	ldr	r1, [pc, #64]	; (806f0 <normalize_position+0x70>)
   806b0:	4b10      	ldr	r3, [pc, #64]	; (806f4 <normalize_position+0x74>)
   806b2:	4798      	blx	r3
   806b4:	4b10      	ldr	r3, [pc, #64]	; (806f8 <normalize_position+0x78>)
   806b6:	4798      	blx	r3
		}
		return position;
}
   806b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			position = (((float)value/(float)center)*100);
   806ba:	4d07      	ldr	r5, [pc, #28]	; (806d8 <normalize_position+0x58>)
   806bc:	47a8      	blx	r5
   806be:	4606      	mov	r6, r0
   806c0:	4620      	mov	r0, r4
   806c2:	47a8      	blx	r5
   806c4:	4601      	mov	r1, r0
   806c6:	4630      	mov	r0, r6
   806c8:	4b06      	ldr	r3, [pc, #24]	; (806e4 <normalize_position+0x64>)
   806ca:	4798      	blx	r3
   806cc:	490b      	ldr	r1, [pc, #44]	; (806fc <normalize_position+0x7c>)
   806ce:	4b07      	ldr	r3, [pc, #28]	; (806ec <normalize_position+0x6c>)
   806d0:	4798      	blx	r3
   806d2:	4b09      	ldr	r3, [pc, #36]	; (806f8 <normalize_position+0x78>)
   806d4:	4798      	blx	r3
   806d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806d8:	00080ef1 	.word	0x00080ef1
   806dc:	00080d85 	.word	0x00080d85
   806e0:	437f0000 	.word	0x437f0000
   806e4:	00081101 	.word	0x00081101
   806e8:	c2c80000 	.word	0xc2c80000
   806ec:	00080f99 	.word	0x00080f99
   806f0:	43480000 	.word	0x43480000
   806f4:	00080d89 	.word	0x00080d89
   806f8:	00081239 	.word	0x00081239
   806fc:	42c80000 	.word	0x42c80000

00080700 <get_positions>:
CAN_MESSAGE get_positions(void){
   80700:	b5f0      	push	{r4, r5, r6, r7, lr}
   80702:	b085      	sub	sp, #20
   80704:	4604      	mov	r4, r0
	if(new_message_received()){
   80706:	4b15      	ldr	r3, [pc, #84]	; (8075c <get_positions+0x5c>)
   80708:	4798      	blx	r3
   8070a:	b948      	cbnz	r0, 80720 <get_positions+0x20>
	return msg;
   8070c:	4b14      	ldr	r3, [pc, #80]	; (80760 <get_positions+0x60>)
   8070e:	6819      	ldr	r1, [r3, #0]
   80710:	685a      	ldr	r2, [r3, #4]
   80712:	689b      	ldr	r3, [r3, #8]
   80714:	6021      	str	r1, [r4, #0]
   80716:	6062      	str	r2, [r4, #4]
   80718:	60a3      	str	r3, [r4, #8]
}
   8071a:	4620      	mov	r0, r4
   8071c:	b005      	add	sp, #20
   8071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg = get_message();
   80720:	4d0f      	ldr	r5, [pc, #60]	; (80760 <get_positions+0x60>)
   80722:	4668      	mov	r0, sp
   80724:	4b0f      	ldr	r3, [pc, #60]	; (80764 <get_positions+0x64>)
   80726:	4798      	blx	r3
   80728:	9900      	ldr	r1, [sp, #0]
   8072a:	9a01      	ldr	r2, [sp, #4]
   8072c:	9b02      	ldr	r3, [sp, #8]
   8072e:	6029      	str	r1, [r5, #0]
   80730:	606a      	str	r2, [r5, #4]
   80732:	60ab      	str	r3, [r5, #8]
		centerH = (int)msg.data[3];
   80734:	79a9      	ldrb	r1, [r5, #6]
   80736:	4b0c      	ldr	r3, [pc, #48]	; (80768 <get_positions+0x68>)
   80738:	6019      	str	r1, [r3, #0]
		centerV = (int)msg.data[4];
   8073a:	4f0c      	ldr	r7, [pc, #48]	; (8076c <get_positions+0x6c>)
   8073c:	79eb      	ldrb	r3, [r5, #7]
   8073e:	603b      	str	r3, [r7, #0]
		int new_data_H = normalize_position(msg.data[0], centerH);
   80740:	78e8      	ldrb	r0, [r5, #3]
   80742:	4e0b      	ldr	r6, [pc, #44]	; (80770 <get_positions+0x70>)
   80744:	47b0      	blx	r6
		move_motor(new_data_H);
   80746:	4b0b      	ldr	r3, [pc, #44]	; (80774 <get_positions+0x74>)
   80748:	4798      	blx	r3
		int new_data_V = normalize_position(msg.data[1], centerV);
   8074a:	6839      	ldr	r1, [r7, #0]
   8074c:	7928      	ldrb	r0, [r5, #4]
   8074e:	47b0      	blx	r6
		move_servo(new_data_V);
   80750:	4b09      	ldr	r3, [pc, #36]	; (80778 <get_positions+0x78>)
   80752:	4798      	blx	r3
		button_pressed(msg.data[2]);
   80754:	7968      	ldrb	r0, [r5, #5]
   80756:	4b09      	ldr	r3, [pc, #36]	; (8077c <get_positions+0x7c>)
   80758:	4798      	blx	r3
   8075a:	e7d7      	b.n	8070c <get_positions+0xc>
   8075c:	00080365 	.word	0x00080365
   80760:	20000468 	.word	0x20000468
   80764:	00080371 	.word	0x00080371
   80768:	20000474 	.word	0x20000474
   8076c:	20000478 	.word	0x20000478
   80770:	00080681 	.word	0x00080681
   80774:	0008087d 	.word	0x0008087d
   80778:	00080c2d 	.word	0x00080c2d
   8077c:	00080661 	.word	0x00080661

00080780 <main>:
#define BITTIME 1/(TQ*CANBAUD)	//13TQ => SyncSeg = 1, PropSeg = 1, PS1 = 6, PS2 = 5, SJW = 1
*/

CAN_MESSAGE message;

int main(void) {
   80780:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   80782:	4b0d      	ldr	r3, [pc, #52]	; (807b8 <main+0x38>)
   80784:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;		//disable the watchdog timer
   80786:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8078a:	4b0c      	ldr	r3, [pc, #48]	; (807bc <main+0x3c>)
   8078c:	605a      	str	r2, [r3, #4]
	configure_uart();
   8078e:	4b0c      	ldr	r3, [pc, #48]	; (807c0 <main+0x40>)
   80790:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561);
   80792:	480c      	ldr	r0, [pc, #48]	; (807c4 <main+0x44>)
   80794:	4b0c      	ldr	r3, [pc, #48]	; (807c8 <main+0x48>)
   80796:	4798      	blx	r3
	motorbox_init();
   80798:	4b0c      	ldr	r3, [pc, #48]	; (807cc <main+0x4c>)
   8079a:	4798      	blx	r3
	dac_init();
   8079c:	4b0c      	ldr	r3, [pc, #48]	; (807d0 <main+0x50>)
   8079e:	4798      	blx	r3
	pwm_init();
   807a0:	4b0c      	ldr	r3, [pc, #48]	; (807d4 <main+0x54>)
   807a2:	4798      	blx	r3
	adc_init();
   807a4:	4b0c      	ldr	r3, [pc, #48]	; (807d8 <main+0x58>)
   807a6:	4798      	blx	r3
	delay_us(1000000);
   807a8:	f244 2040 	movw	r0, #16960	; 0x4240
   807ac:	4b0b      	ldr	r3, [pc, #44]	; (807dc <main+0x5c>)
   807ae:	4798      	blx	r3
	start_game();
   807b0:	4b0b      	ldr	r3, [pc, #44]	; (807e0 <main+0x60>)
   807b2:	4798      	blx	r3
		//uint16_t data = receive_data();
		//printf("data: %d\n\r", data);
		//delay_us(1000000000);
	}
	return 0;*/
}
   807b4:	2000      	movs	r0, #0
   807b6:	bd08      	pop	{r3, pc}
   807b8:	00080551 	.word	0x00080551
   807bc:	400e1a50 	.word	0x400e1a50
   807c0:	00080c89 	.word	0x00080c89
   807c4:	00290561 	.word	0x00290561
   807c8:	00080251 	.word	0x00080251
   807cc:	0008080d 	.word	0x0008080d
   807d0:	000807e5 	.word	0x000807e5
   807d4:	00080ba9 	.word	0x00080ba9
   807d8:	000805f5 	.word	0x000805f5
   807dc:	00080471 	.word	0x00080471
   807e0:	00080395 	.word	0x00080395

000807e4 <dac_init>:

#define LEFT_CUTOFF	70
#define RIGHT_CUTOFF 130

void dac_init(void){
	PMC->PMC_PCER1 |= PMC_PCER1_PID38; //enable clock for DACC
   807e4:	4a07      	ldr	r2, [pc, #28]	; (80804 <dac_init+0x20>)
   807e6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   807ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   807ee:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	REG_DACC_MR = DACC_MR_REFRESH(10) | DACC_MR_USER_SEL_CHANNEL1;
   807f2:	f44f 3285 	mov.w	r2, #68096	; 0x10a00
   807f6:	4b04      	ldr	r3, [pc, #16]	; (80808 <dac_init+0x24>)
   807f8:	601a      	str	r2, [r3, #0]
	REG_DACC_CHER = DACC_CHER_CH1;
   807fa:	2202      	movs	r2, #2
   807fc:	330c      	adds	r3, #12
   807fe:	601a      	str	r2, [r3, #0]
   80800:	4770      	bx	lr
   80802:	bf00      	nop
   80804:	400e0600 	.word	0x400e0600
   80808:	400c8004 	.word	0x400c8004

0008080c <motorbox_init>:
	//REG_DACC_CDR //USE THIS TO SEND JOYSTICK POS
}

void motorbox_init(void){
   8080c:	b538      	push	{r3, r4, r5, lr}
	PIOC -> PIO_WPMR = (0x50494F << 8);	//disables write protect
   8080e:	4916      	ldr	r1, [pc, #88]	; (80868 <motorbox_init+0x5c>)
   80810:	4b16      	ldr	r3, [pc, #88]	; (8086c <motorbox_init+0x60>)
   80812:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4

	PMC->PMC_PCER0 |= (1 << ID_PIOC);//PMC_PCER0_PID13; //enable clock for 
   80816:	4b16      	ldr	r3, [pc, #88]	; (80870 <motorbox_init+0x64>)
   80818:	691a      	ldr	r2, [r3, #16]
   8081a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8081e:	611a      	str	r2, [r3, #16]
	//PMC->PMC_PCER0 |= PMC_PCER0_PID14; //enable clock for 
	PMC->PMC_PCER0 |= (1 << ID_PIOD);
   80820:	691a      	ldr	r2, [r3, #16]
   80822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80826:	611a      	str	r2, [r3, #16]
	
	//!OE
	PIOD -> PIO_PER = PIO_PD0;		//enables input/output function
   80828:	4c12      	ldr	r4, [pc, #72]	; (80874 <motorbox_init+0x68>)
   8082a:	2201      	movs	r2, #1
   8082c:	6022      	str	r2, [r4, #0]
	PIOD -> PIO_OER = PIO_PD0;		//enables output
   8082e:	6122      	str	r2, [r4, #16]
	//SEL
	PIOD -> PIO_PER = PIO_PD2;		//enables input/output function
   80830:	2304      	movs	r3, #4
   80832:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD2;		//enables output
   80834:	6123      	str	r3, [r4, #16]
	//DIR
	PIOD -> PIO_PER = PIO_PD10;		//enables input/output function
   80836:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8083a:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD10;		//enables output	
   8083c:	6123      	str	r3, [r4, #16]
	//!RES
	PIOD -> PIO_PER = PIO_PD1;		//enables input/output function
   8083e:	2502      	movs	r5, #2
   80840:	6025      	str	r5, [r4, #0]
	PIOD -> PIO_OER = PIO_PD1;		//enables output	
   80842:	6125      	str	r5, [r4, #16]
	//EN
	PIOD -> PIO_PER = PIO_PD9;		//enables input/output function
   80844:	f44f 7300 	mov.w	r3, #512	; 0x200
   80848:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD9;		//enables output
   8084a:	6123      	str	r3, [r4, #16]
	PIOC -> PIO_PER = PIO_PC2;		//enables input/output function
	//PIOC -> PIO_ODR = PIO_PC2;		//disables output
	PIOC -> PIO_PER = PIO_PC1;		//enables input/output function
	//PIOC -> PIO_ODR = PIO_PC1;		//disables output
	*/
	PIOC -> PIO_IFER = (0xFF << 1);
   8084c:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
   80850:	6208      	str	r0, [r1, #32]
	PIOC -> PIO_PUDR = (0xFF << 1);		//disables pull down register
   80852:	6608      	str	r0, [r1, #96]	; 0x60
	
	PIOD -> PIO_CODR = PIO_PD0;		//set !OE to low
   80854:	6362      	str	r2, [r4, #52]	; 0x34
	PIOD -> PIO_SODR = PIO_PD9;		//set EN to high
   80856:	6323      	str	r3, [r4, #48]	; 0x30
	PIOD -> PIO_CODR = PIO_PD1;		//set !RES to low
   80858:	6365      	str	r5, [r4, #52]	; 0x34
	delay_us(1000000);	
   8085a:	f244 2040 	movw	r0, #16960	; 0x4240
   8085e:	4b06      	ldr	r3, [pc, #24]	; (80878 <motorbox_init+0x6c>)
   80860:	4798      	blx	r3
	PIOD -> PIO_SODR = PIO_PD1;		//set !RES to high
   80862:	6325      	str	r5, [r4, #48]	; 0x30
   80864:	bd38      	pop	{r3, r4, r5, pc}
   80866:	bf00      	nop
   80868:	400e1200 	.word	0x400e1200
   8086c:	50494f00 	.word	0x50494f00
   80870:	400e0600 	.word	0x400e0600
   80874:	400e1400 	.word	0x400e1400
   80878:	00080471 	.word	0x00080471

0008087c <move_motor>:
	//set !OE to high
	PIOD -> PIO_SODR = PIO_PD0;
}*/

void move_motor(int joystick_position){
	if((joystick_position) < LEFT_CUTOFF){
   8087c:	2845      	cmp	r0, #69	; 0x45
   8087e:	dd0e      	ble.n	8089e <move_motor+0x22>
		PIOD -> PIO_CODR = PIO_PD10;
		REG_DACC_CDR = 0xFFF - (joystick_position << 5);
	}
	else if ((joystick_position) > RIGHT_CUTOFF){
   80880:	2882      	cmp	r0, #130	; 0x82
   80882:	dd0b      	ble.n	8089c <move_motor+0x20>
		PIOD -> PIO_SODR = PIO_PD10;
   80884:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80888:	4b0a      	ldr	r3, [pc, #40]	; (808b4 <move_motor+0x38>)
   8088a:	631a      	str	r2, [r3, #48]	; 0x30
		REG_DACC_CDR = (joystick_position << 5) - 0xFFF;
   8088c:	0140      	lsls	r0, r0, #5
   8088e:	f6a0 70ff 	subw	r0, r0, #4095	; 0xfff
   80892:	f5a3 33c9 	sub.w	r3, r3, #102912	; 0x19200
   80896:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
   8089a:	6018      	str	r0, [r3, #0]
   8089c:	4770      	bx	lr
		PIOD -> PIO_CODR = PIO_PD10;
   8089e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   808a2:	4b04      	ldr	r3, [pc, #16]	; (808b4 <move_motor+0x38>)
   808a4:	635a      	str	r2, [r3, #52]	; 0x34
		REG_DACC_CDR = 0xFFF - (joystick_position << 5);
   808a6:	f640 73ff 	movw	r3, #4095	; 0xfff
   808aa:	eba3 1040 	sub.w	r0, r3, r0, lsl #5
   808ae:	4b02      	ldr	r3, [pc, #8]	; (808b8 <move_motor+0x3c>)
   808b0:	6018      	str	r0, [r3, #0]
   808b2:	4770      	bx	lr
   808b4:	400e1400 	.word	0x400e1400
   808b8:	400c8020 	.word	0x400c8020

000808bc <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   808bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   808c0:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   808c2:	1e16      	subs	r6, r2, #0
   808c4:	dd48      	ble.n	80958 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   808c6:	780a      	ldrb	r2, [r1, #0]
   808c8:	2a00      	cmp	r2, #0
   808ca:	d035      	beq.n	80938 <prints+0x7c>
   808cc:	460a      	mov	r2, r1
   808ce:	2400      	movs	r4, #0
   808d0:	3401      	adds	r4, #1
   808d2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   808d6:	2900      	cmp	r1, #0
   808d8:	d1fa      	bne.n	808d0 <prints+0x14>
		if (len >= width) width = 0;
   808da:	42a6      	cmp	r6, r4
   808dc:	dc2d      	bgt.n	8093a <prints+0x7e>
   808de:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   808e0:	f003 0202 	and.w	r2, r3, #2
   808e4:	2a00      	cmp	r2, #0
   808e6:	bf0c      	ite	eq
   808e8:	f04f 0820 	moveq.w	r8, #32
   808ec:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   808f0:	f013 0301 	ands.w	r3, r3, #1
   808f4:	d123      	bne.n	8093e <prints+0x82>
		for ( ; width > 0; --width) {
   808f6:	2c00      	cmp	r4, #0
   808f8:	dd28      	ble.n	8094c <prints+0x90>
   808fa:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   808fc:	fa5f f988 	uxtb.w	r9, r8
   80900:	4f18      	ldr	r7, [pc, #96]	; (80964 <prints+0xa8>)
   80902:	4648      	mov	r0, r9
   80904:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80906:	3e01      	subs	r6, #1
   80908:	d1fb      	bne.n	80902 <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   8090a:	7828      	ldrb	r0, [r5, #0]
   8090c:	b188      	cbz	r0, 80932 <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   8090e:	4f15      	ldr	r7, [pc, #84]	; (80964 <prints+0xa8>)
   80910:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80912:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80914:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80918:	2800      	cmp	r0, #0
   8091a:	d1f9      	bne.n	80910 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   8091c:	2e00      	cmp	r6, #0
   8091e:	dd08      	ble.n	80932 <prints+0x76>
   80920:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80922:	fa5f f888 	uxtb.w	r8, r8
   80926:	4f0f      	ldr	r7, [pc, #60]	; (80964 <prints+0xa8>)
   80928:	4640      	mov	r0, r8
   8092a:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   8092c:	3d01      	subs	r5, #1
   8092e:	d1fb      	bne.n	80928 <prints+0x6c>
   80930:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80932:	4620      	mov	r0, r4
   80934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80938:	2400      	movs	r4, #0
		else width -= len;
   8093a:	1b34      	subs	r4, r6, r4
   8093c:	e7d0      	b.n	808e0 <prints+0x24>
   8093e:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80940:	7828      	ldrb	r0, [r5, #0]
   80942:	b108      	cbz	r0, 80948 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80944:	2400      	movs	r4, #0
   80946:	e7e2      	b.n	8090e <prints+0x52>
   80948:	2400      	movs	r4, #0
   8094a:	e7e7      	b.n	8091c <prints+0x60>
		for ( ; width > 0; --width) {
   8094c:	4626      	mov	r6, r4
   8094e:	461c      	mov	r4, r3
   80950:	e7db      	b.n	8090a <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80952:	f04f 0820 	mov.w	r8, #32
   80956:	e7d8      	b.n	8090a <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80958:	f013 0401 	ands.w	r4, r3, #1
   8095c:	d0f9      	beq.n	80952 <prints+0x96>
	register int pc = 0, padchar = ' ';
   8095e:	f04f 0820 	mov.w	r8, #32
   80962:	e7ed      	b.n	80940 <prints+0x84>
   80964:	00080cf1 	.word	0x00080cf1

00080968 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80968:	b5f0      	push	{r4, r5, r6, r7, lr}
   8096a:	b085      	sub	sp, #20
   8096c:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   8096e:	b381      	cbz	r1, 809d2 <printi+0x6a>
   80970:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80972:	b10b      	cbz	r3, 80978 <printi+0x10>
   80974:	2a0a      	cmp	r2, #10
   80976:	d038      	beq.n	809ea <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80978:	2300      	movs	r3, #0
   8097a:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   8097e:	2600      	movs	r6, #0
   80980:	2900      	cmp	r1, #0
   80982:	d046      	beq.n	80a12 <printi+0xaa>
   80984:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80988:	990c      	ldr	r1, [sp, #48]	; 0x30
   8098a:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   8098c:	fbb4 f3f2 	udiv	r3, r4, r2
   80990:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80994:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   80996:	bfc8      	it	gt
   80998:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   8099a:	3330      	adds	r3, #48	; 0x30
   8099c:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   809a0:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   809a4:	2c00      	cmp	r4, #0
   809a6:	d1f1      	bne.n	8098c <printi+0x24>
	}

	if (neg) {
   809a8:	b156      	cbz	r6, 809c0 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   809aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   809ac:	b11b      	cbz	r3, 809b6 <printi+0x4e>
   809ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809b0:	f013 0f02 	tst.w	r3, #2
   809b4:	d125      	bne.n	80a02 <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   809b6:	232d      	movs	r3, #45	; 0x2d
   809b8:	f805 3c01 	strb.w	r3, [r5, #-1]
   809bc:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   809be:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   809c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   809c4:	4629      	mov	r1, r5
   809c6:	4638      	mov	r0, r7
   809c8:	4c14      	ldr	r4, [pc, #80]	; (80a1c <printi+0xb4>)
   809ca:	47a0      	blx	r4
   809cc:	4430      	add	r0, r6
}
   809ce:	b005      	add	sp, #20
   809d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   809d2:	2330      	movs	r3, #48	; 0x30
   809d4:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   809d8:	2300      	movs	r3, #0
   809da:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   809de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   809e2:	a901      	add	r1, sp, #4
   809e4:	4c0d      	ldr	r4, [pc, #52]	; (80a1c <printi+0xb4>)
   809e6:	47a0      	blx	r4
   809e8:	e7f1      	b.n	809ce <printi+0x66>
	if (sg && b == 10 && i < 0) {
   809ea:	2900      	cmp	r1, #0
   809ec:	dac4      	bge.n	80978 <printi+0x10>
		u = -i;
   809ee:	424c      	negs	r4, r1
	*s = '\0';
   809f0:	2300      	movs	r3, #0
   809f2:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   809f6:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   809fa:	2c00      	cmp	r4, #0
   809fc:	d0d5      	beq.n	809aa <printi+0x42>
		neg = 1;
   809fe:	2601      	movs	r6, #1
   80a00:	e7c0      	b.n	80984 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80a02:	202d      	movs	r0, #45	; 0x2d
   80a04:	4b06      	ldr	r3, [pc, #24]	; (80a20 <printi+0xb8>)
   80a06:	4798      	blx	r3
			--width;
   80a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a0a:	3b01      	subs	r3, #1
   80a0c:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80a0e:	2601      	movs	r6, #1
			--width;
   80a10:	e7d6      	b.n	809c0 <printi+0x58>
	register int t, neg = 0, pc = 0;
   80a12:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80a14:	f10d 050f 	add.w	r5, sp, #15
   80a18:	e7d2      	b.n	809c0 <printi+0x58>
   80a1a:	bf00      	nop
   80a1c:	000808bd 	.word	0x000808bd
   80a20:	00080cf1 	.word	0x00080cf1

00080a24 <print>:

static int print( char **out, const char *format, va_list args )
{
   80a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a28:	b087      	sub	sp, #28
   80a2a:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80a2c:	780b      	ldrb	r3, [r1, #0]
   80a2e:	2b00      	cmp	r3, #0
   80a30:	f000 8094 	beq.w	80b5c <print+0x138>
   80a34:	468b      	mov	fp, r1
   80a36:	4617      	mov	r7, r2
   80a38:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80a3a:	4e4e      	ldr	r6, [pc, #312]	; (80b74 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80a3c:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80b7c <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80a40:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80b80 <print+0x15c>
   80a44:	e046      	b.n	80ad4 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80a46:	2200      	movs	r2, #0
   80a48:	e070      	b.n	80b2c <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80a4a:	6839      	ldr	r1, [r7, #0]
   80a4c:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80a4e:	484a      	ldr	r0, [pc, #296]	; (80b78 <print+0x154>)
   80a50:	2900      	cmp	r1, #0
   80a52:	bf08      	it	eq
   80a54:	4601      	moveq	r1, r0
   80a56:	4640      	mov	r0, r8
   80a58:	47d0      	blx	sl
   80a5a:	4405      	add	r5, r0
				continue;
   80a5c:	e035      	b.n	80aca <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80a5e:	6839      	ldr	r1, [r7, #0]
   80a60:	3704      	adds	r7, #4
   80a62:	2061      	movs	r0, #97	; 0x61
   80a64:	9002      	str	r0, [sp, #8]
   80a66:	9301      	str	r3, [sp, #4]
   80a68:	9200      	str	r2, [sp, #0]
   80a6a:	2301      	movs	r3, #1
   80a6c:	220a      	movs	r2, #10
   80a6e:	4640      	mov	r0, r8
   80a70:	47c8      	blx	r9
   80a72:	4405      	add	r5, r0
				continue;
   80a74:	e029      	b.n	80aca <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80a76:	6839      	ldr	r1, [r7, #0]
   80a78:	3704      	adds	r7, #4
   80a7a:	2061      	movs	r0, #97	; 0x61
   80a7c:	9002      	str	r0, [sp, #8]
   80a7e:	9301      	str	r3, [sp, #4]
   80a80:	9200      	str	r2, [sp, #0]
   80a82:	2300      	movs	r3, #0
   80a84:	2210      	movs	r2, #16
   80a86:	4640      	mov	r0, r8
   80a88:	47c8      	blx	r9
   80a8a:	4405      	add	r5, r0
				continue;
   80a8c:	e01d      	b.n	80aca <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80a8e:	6839      	ldr	r1, [r7, #0]
   80a90:	3704      	adds	r7, #4
   80a92:	2041      	movs	r0, #65	; 0x41
   80a94:	9002      	str	r0, [sp, #8]
   80a96:	9301      	str	r3, [sp, #4]
   80a98:	9200      	str	r2, [sp, #0]
   80a9a:	2300      	movs	r3, #0
   80a9c:	2210      	movs	r2, #16
   80a9e:	4640      	mov	r0, r8
   80aa0:	47c8      	blx	r9
   80aa2:	4405      	add	r5, r0
				continue;
   80aa4:	e011      	b.n	80aca <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80aa6:	6839      	ldr	r1, [r7, #0]
   80aa8:	3704      	adds	r7, #4
   80aaa:	2061      	movs	r0, #97	; 0x61
   80aac:	9002      	str	r0, [sp, #8]
   80aae:	9301      	str	r3, [sp, #4]
   80ab0:	9200      	str	r2, [sp, #0]
   80ab2:	2300      	movs	r3, #0
   80ab4:	220a      	movs	r2, #10
   80ab6:	4640      	mov	r0, r8
   80ab8:	47c8      	blx	r9
   80aba:	4405      	add	r5, r0
				continue;
   80abc:	e005      	b.n	80aca <print+0xa6>
			++format;
   80abe:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80ac0:	f89b 0000 	ldrb.w	r0, [fp]
   80ac4:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80ac6:	3501      	adds	r5, #1
   80ac8:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80aca:	f104 0b01 	add.w	fp, r4, #1
   80ace:	7863      	ldrb	r3, [r4, #1]
   80ad0:	2b00      	cmp	r3, #0
   80ad2:	d044      	beq.n	80b5e <print+0x13a>
		if (*format == '%') {
   80ad4:	2b25      	cmp	r3, #37	; 0x25
   80ad6:	d1f3      	bne.n	80ac0 <print+0x9c>
			++format;
   80ad8:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80adc:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80ae0:	2b00      	cmp	r3, #0
   80ae2:	d03c      	beq.n	80b5e <print+0x13a>
			if (*format == '%') goto out;
   80ae4:	2b25      	cmp	r3, #37	; 0x25
   80ae6:	d0ea      	beq.n	80abe <print+0x9a>
			if (*format == '-') {
   80ae8:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80aea:	bf06      	itte	eq
   80aec:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80af0:	2301      	moveq	r3, #1
			width = pad = 0;
   80af2:	2300      	movne	r3, #0
			while (*format == '0') {
   80af4:	7822      	ldrb	r2, [r4, #0]
   80af6:	2a30      	cmp	r2, #48	; 0x30
   80af8:	d105      	bne.n	80b06 <print+0xe2>
				pad |= PAD_ZERO;
   80afa:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80afe:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80b02:	2a30      	cmp	r2, #48	; 0x30
   80b04:	d0f9      	beq.n	80afa <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80b06:	7821      	ldrb	r1, [r4, #0]
   80b08:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80b0c:	b2d2      	uxtb	r2, r2
   80b0e:	2a09      	cmp	r2, #9
   80b10:	d899      	bhi.n	80a46 <print+0x22>
   80b12:	2200      	movs	r2, #0
				width *= 10;
   80b14:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80b18:	3930      	subs	r1, #48	; 0x30
   80b1a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80b1e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80b22:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80b26:	b2c0      	uxtb	r0, r0
   80b28:	2809      	cmp	r0, #9
   80b2a:	d9f3      	bls.n	80b14 <print+0xf0>
			if( *format == 's' ) {
   80b2c:	2973      	cmp	r1, #115	; 0x73
   80b2e:	d08c      	beq.n	80a4a <print+0x26>
			if( *format == 'd' ) {
   80b30:	2964      	cmp	r1, #100	; 0x64
   80b32:	d094      	beq.n	80a5e <print+0x3a>
			if( *format == 'x' ) {
   80b34:	2978      	cmp	r1, #120	; 0x78
   80b36:	d09e      	beq.n	80a76 <print+0x52>
			if( *format == 'X' ) {
   80b38:	2958      	cmp	r1, #88	; 0x58
   80b3a:	d0a8      	beq.n	80a8e <print+0x6a>
			if( *format == 'u' ) {
   80b3c:	2975      	cmp	r1, #117	; 0x75
   80b3e:	d0b2      	beq.n	80aa6 <print+0x82>
			if( *format == 'c' ) {
   80b40:	2963      	cmp	r1, #99	; 0x63
   80b42:	d1c2      	bne.n	80aca <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80b44:	6839      	ldr	r1, [r7, #0]
   80b46:	3704      	adds	r7, #4
   80b48:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80b4c:	2100      	movs	r1, #0
   80b4e:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80b52:	a905      	add	r1, sp, #20
   80b54:	4640      	mov	r0, r8
   80b56:	47d0      	blx	sl
   80b58:	4405      	add	r5, r0
				continue;
   80b5a:	e7b6      	b.n	80aca <print+0xa6>
	register int pc = 0;
   80b5c:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80b5e:	f1b8 0f00 	cmp.w	r8, #0
   80b62:	d003      	beq.n	80b6c <print+0x148>
   80b64:	f8d8 3000 	ldr.w	r3, [r8]
   80b68:	2200      	movs	r2, #0
   80b6a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80b6c:	4628      	mov	r0, r5
   80b6e:	b007      	add	sp, #28
   80b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80b74:	00080cf1 	.word	0x00080cf1
   80b78:	0008149c 	.word	0x0008149c
   80b7c:	000808bd 	.word	0x000808bd
   80b80:	00080969 	.word	0x00080969

00080b84 <printf>:

int printf(const char *format, ...)
{
   80b84:	b40f      	push	{r0, r1, r2, r3}
   80b86:	b500      	push	{lr}
   80b88:	b083      	sub	sp, #12
   80b8a:	aa04      	add	r2, sp, #16
   80b8c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80b90:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80b92:	2000      	movs	r0, #0
   80b94:	4b03      	ldr	r3, [pc, #12]	; (80ba4 <printf+0x20>)
   80b96:	4798      	blx	r3
}
   80b98:	b003      	add	sp, #12
   80b9a:	f85d eb04 	ldr.w	lr, [sp], #4
   80b9e:	b004      	add	sp, #16
   80ba0:	4770      	bx	lr
   80ba2:	bf00      	nop
   80ba4:	00080a25 	.word	0x00080a25

00080ba8 <pwm_init>:
#define CENTER 1.5
#define RIGHT 1.25
#define COMPLETE_RIGHT 1.0

void pwm_init(void){
	PIOC -> PIO_PDR |= PIO_PDR_P18;		//enable peripheral control of the pin
   80ba8:	4b11      	ldr	r3, [pc, #68]	; (80bf0 <pwm_init+0x48>)
   80baa:	685a      	ldr	r2, [r3, #4]
   80bac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80bb0:	605a      	str	r2, [r3, #4]
	PIOC -> PIO_ABSR |= PIO_ABSR_P18;	//set it to peripheral B mode
   80bb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80bb4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80bb8:	671a      	str	r2, [r3, #112]	; 0x70
	//need to clear WPEN bit in PMC Write Protect Register (we are assuming it defaults to 0)
	//PIOC -> PMC_PCER0 = PIO_PC18;
	PIOC->PIO_WPMR = PASSWD_PIO_PWM;	//disable write protection
   80bba:	4a0e      	ldr	r2, [pc, #56]	; (80bf4 <pwm_init+0x4c>)
   80bbc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER1 |= (1 << 4);		//enable PWM clock
   80bc0:	4a0d      	ldr	r2, [pc, #52]	; (80bf8 <pwm_init+0x50>)
   80bc2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80bc6:	f043 0310 	orr.w	r3, r3, #16
   80bca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	//REG_PMC_PCER0 = 0x00002000;
	REG_PWM_CMR6 = 0xC;
   80bce:	220c      	movs	r2, #12
   80bd0:	4b0a      	ldr	r3, [pc, #40]	; (80bfc <pwm_init+0x54>)
   80bd2:	601a      	str	r2, [r3, #0]
	PWM->PWM_CLK = 0x00540000;
   80bd4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
   80bd8:	f44f 02a8 	mov.w	r2, #5505024	; 0x540000
   80bdc:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD6 = 20000;//0x00004E20;
   80bde:	f644 6120 	movw	r1, #20000	; 0x4e20
   80be2:	4a07      	ldr	r2, [pc, #28]	; (80c00 <pwm_init+0x58>)
   80be4:	6011      	str	r1, [r2, #0]
	//REG_PWM_CDTY6 = dty;
	//REG_PWM_CDTY6 = 10000;
	//REG_PWM_CDTY6 = 10000;//0x00002710; //need to vary this with joystick
	//REG_PWM_ENA = 0x00000040;

	PWM->PWM_ENA |= PWM_ENA_CHID6; // enable PWM channel 6
   80be6:	685a      	ldr	r2, [r3, #4]
   80be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80bec:	605a      	str	r2, [r3, #4]
   80bee:	4770      	bx	lr
   80bf0:	400e1200 	.word	0x400e1200
   80bf4:	50494f00 	.word	0x50494f00
   80bf8:	400e0600 	.word	0x400e0600
   80bfc:	400942c0 	.word	0x400942c0
   80c00:	400942cc 	.word	0x400942cc

00080c04 <set_duty_cycle>:
		printf("ERROR! Invalid position");
	}
	set_duty_cycle(dty);
}

void set_duty_cycle(int dty){
   80c04:	b508      	push	{r3, lr}
	//calculates what value to set the REG_PWM_CDTY6 register to and then sets it to that value
	//the range of the CDTY6 must be between 18000 (2 ms duty cycle) and 19000 (1 ms duty cycle)
	//printf("cycle: %d\n\r", dutyCycle);
	//int dty = 20000 - 1000*dutyCycle;
	//printf("duty cycle: %d\n\r", dty);
	if((MAX_DUTY_CYCLE <= dty) && (dty <= MIN_DUTY_CYCLE)){
   80c06:	f5a0 438c 	sub.w	r3, r0, #17920	; 0x4600
   80c0a:	3b50      	subs	r3, #80	; 0x50
   80c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   80c10:	d802      	bhi.n	80c18 <set_duty_cycle+0x14>
		REG_PWM_CDTY6 = dty;
   80c12:	4b03      	ldr	r3, [pc, #12]	; (80c20 <set_duty_cycle+0x1c>)
   80c14:	6018      	str	r0, [r3, #0]
   80c16:	bd08      	pop	{r3, pc}
	}
	else{
		printf("ERROR! Duty cycle out of range. Must be between 1 and 2\n\r");
   80c18:	4802      	ldr	r0, [pc, #8]	; (80c24 <set_duty_cycle+0x20>)
   80c1a:	4b03      	ldr	r3, [pc, #12]	; (80c28 <set_duty_cycle+0x24>)
   80c1c:	4798      	blx	r3
   80c1e:	bd08      	pop	{r3, pc}
   80c20:	400942c4 	.word	0x400942c4
   80c24:	000814a4 	.word	0x000814a4
   80c28:	00080b85 	.word	0x00080b85

00080c2c <move_servo>:
void move_servo(int pos){
   80c2c:	b508      	push	{r3, lr}
	if (pos < MAX_BOTTOM_CUTOFF){
   80c2e:	281d      	cmp	r0, #29
   80c30:	dd16      	ble.n	80c60 <move_servo+0x34>
	else if ((MAX_BOTTOM_CUTOFF < pos) && (pos < BOTTOM_CUTOFF)){
   80c32:	f1a0 031f 	sub.w	r3, r0, #31
   80c36:	2b26      	cmp	r3, #38	; 0x26
   80c38:	d917      	bls.n	80c6a <move_servo+0x3e>
	else if ((BOTTOM_CUTOFF < pos) && (pos < TOP_CUTOFF)){
   80c3a:	f1a0 0347 	sub.w	r3, r0, #71	; 0x47
   80c3e:	2b3a      	cmp	r3, #58	; 0x3a
   80c40:	d916      	bls.n	80c70 <move_servo+0x44>
	else if ((TOP_CUTOFF < pos) && (pos < MAX_TOP_CUTOFF)){
   80c42:	f1a0 0383 	sub.w	r3, r0, #131	; 0x83
   80c46:	2b26      	cmp	r3, #38	; 0x26
   80c48:	d915      	bls.n	80c76 <move_servo+0x4a>
	else if (pos > MAX_TOP_CUTOFF) {
   80c4a:	28aa      	cmp	r0, #170	; 0xaa
   80c4c:	dd02      	ble.n	80c54 <move_servo+0x28>
		dty = 20000 - 1000*COMPLETE_RIGHT;
   80c4e:	f644 2038 	movw	r0, #19000	; 0x4a38
   80c52:	e007      	b.n	80c64 <move_servo+0x38>
		printf("ERROR! Invalid position");
   80c54:	4809      	ldr	r0, [pc, #36]	; (80c7c <move_servo+0x50>)
   80c56:	4b0a      	ldr	r3, [pc, #40]	; (80c80 <move_servo+0x54>)
   80c58:	4798      	blx	r3
	int dty = 20000 - 1000*CENTER;
   80c5a:	f644 0044 	movw	r0, #18500	; 0x4844
   80c5e:	e001      	b.n	80c64 <move_servo+0x38>
		dty = 20000 - 1000*COMPLETE_LEFT;
   80c60:	f244 6050 	movw	r0, #18000	; 0x4650
	set_duty_cycle(dty);
   80c64:	4b07      	ldr	r3, [pc, #28]	; (80c84 <move_servo+0x58>)
   80c66:	4798      	blx	r3
   80c68:	bd08      	pop	{r3, pc}
		dty = 20000 - 1000*LEFT;
   80c6a:	f244 704a 	movw	r0, #18250	; 0x474a
   80c6e:	e7f9      	b.n	80c64 <move_servo+0x38>
		dty = 20000 - 1000*CENTER;
   80c70:	f644 0044 	movw	r0, #18500	; 0x4844
   80c74:	e7f6      	b.n	80c64 <move_servo+0x38>
		dty = 20000 - 1000*RIGHT;
   80c76:	f644 103e 	movw	r0, #18750	; 0x493e
   80c7a:	e7f3      	b.n	80c64 <move_servo+0x38>
   80c7c:	000814e0 	.word	0x000814e0
   80c80:	00080b85 	.word	0x00080b85
   80c84:	00080c05 	.word	0x00080c05

00080c88 <configure_uart>:
	uint32_t ul_sr;

	/*
	Initialize UART ring buffer as empty
	*/
	rx_buffer.head=0;
   80c88:	4b16      	ldr	r3, [pc, #88]	; (80ce4 <configure_uart+0x5c>)
   80c8a:	2200      	movs	r2, #0
   80c8c:	701a      	strb	r2, [r3, #0]
	rx_buffer.tail=0;
   80c8e:	705a      	strb	r2, [r3, #1]
	/*
	Initialize UART communication
	*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c90:	4b15      	ldr	r3, [pc, #84]	; (80ce8 <configure_uart+0x60>)
   80c92:	f44f 7140 	mov.w	r1, #768	; 0x300
   80c96:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c98:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80c9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80c9c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80c9e:	4002      	ands	r2, r0
   80ca0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80ca4:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ca6:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
   80cac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80cb0:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80cb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80cb6:	21ac      	movs	r1, #172	; 0xac
   80cb8:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80cba:	f240 2123 	movw	r1, #547	; 0x223
   80cbe:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80cc4:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80cc6:	f240 2102 	movw	r1, #514	; 0x202
   80cca:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80cce:	f04f 31ff 	mov.w	r1, #4294967295
   80cd2:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80cd4:	21e1      	movs	r1, #225	; 0xe1
   80cd6:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80cd8:	4904      	ldr	r1, [pc, #16]	; (80cec <configure_uart+0x64>)
   80cda:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80cdc:	2250      	movs	r2, #80	; 0x50
   80cde:	601a      	str	r2, [r3, #0]
   80ce0:	4770      	bx	lr
   80ce2:	bf00      	nop
   80ce4:	2000047c 	.word	0x2000047c
   80ce8:	400e0e00 	.word	0x400e0e00
   80cec:	e000e100 	.word	0xe000e100

00080cf0 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80cf0:	4b07      	ldr	r3, [pc, #28]	; (80d10 <uart_putchar+0x20>)
   80cf2:	695b      	ldr	r3, [r3, #20]
   80cf4:	f013 0f02 	tst.w	r3, #2
   80cf8:	d008      	beq.n	80d0c <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80cfa:	4b05      	ldr	r3, [pc, #20]	; (80d10 <uart_putchar+0x20>)
   80cfc:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80cfe:	461a      	mov	r2, r3
   80d00:	6953      	ldr	r3, [r2, #20]
   80d02:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d06:	d0fb      	beq.n	80d00 <uart_putchar+0x10>
	return 0;
   80d08:	2000      	movs	r0, #0
   80d0a:	4770      	bx	lr
	return 1;
   80d0c:	2001      	movs	r0, #1
}
   80d0e:	4770      	bx	lr
   80d10:	400e0800 	.word	0x400e0800

00080d14 <UART_Handler>:

void UART_Handler(void)
{
   80d14:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80d16:	4b15      	ldr	r3, [pc, #84]	; (80d6c <UART_Handler+0x58>)
   80d18:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80d1a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80d1e:	d003      	beq.n	80d28 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80d20:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80d24:	4a11      	ldr	r2, [pc, #68]	; (80d6c <UART_Handler+0x58>)
   80d26:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80d28:	f013 0f01 	tst.w	r3, #1
   80d2c:	d012      	beq.n	80d54 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80d2e:	4810      	ldr	r0, [pc, #64]	; (80d70 <UART_Handler+0x5c>)
   80d30:	7842      	ldrb	r2, [r0, #1]
   80d32:	1c53      	adds	r3, r2, #1
   80d34:	4259      	negs	r1, r3
   80d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80d3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80d3e:	bf58      	it	pl
   80d40:	424b      	negpl	r3, r1
   80d42:	7801      	ldrb	r1, [r0, #0]
   80d44:	428b      	cmp	r3, r1
   80d46:	d006      	beq.n	80d56 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80d48:	4908      	ldr	r1, [pc, #32]	; (80d6c <UART_Handler+0x58>)
   80d4a:	6988      	ldr	r0, [r1, #24]
   80d4c:	4908      	ldr	r1, [pc, #32]	; (80d70 <UART_Handler+0x5c>)
   80d4e:	440a      	add	r2, r1
   80d50:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80d52:	704b      	strb	r3, [r1, #1]
   80d54:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80d56:	4807      	ldr	r0, [pc, #28]	; (80d74 <UART_Handler+0x60>)
   80d58:	4b07      	ldr	r3, [pc, #28]	; (80d78 <UART_Handler+0x64>)
   80d5a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80d5c:	4b03      	ldr	r3, [pc, #12]	; (80d6c <UART_Handler+0x58>)
   80d5e:	699a      	ldr	r2, [r3, #24]
   80d60:	4b03      	ldr	r3, [pc, #12]	; (80d70 <UART_Handler+0x5c>)
   80d62:	7859      	ldrb	r1, [r3, #1]
   80d64:	440b      	add	r3, r1
   80d66:	709a      	strb	r2, [r3, #2]
			return;
   80d68:	bd08      	pop	{r3, pc}
   80d6a:	bf00      	nop
   80d6c:	400e0800 	.word	0x400e0800
   80d70:	2000047c 	.word	0x2000047c
   80d74:	000814f8 	.word	0x000814f8
   80d78:	00080b85 	.word	0x00080b85

00080d7c <__aeabi_frsub>:
   80d7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   80d80:	e002      	b.n	80d88 <__addsf3>
   80d82:	bf00      	nop

00080d84 <__aeabi_fsub>:
   80d84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00080d88 <__addsf3>:
   80d88:	0042      	lsls	r2, r0, #1
   80d8a:	bf1f      	itttt	ne
   80d8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   80d90:	ea92 0f03 	teqne	r2, r3
   80d94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   80d98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80d9c:	d06a      	beq.n	80e74 <__addsf3+0xec>
   80d9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   80da2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   80da6:	bfc1      	itttt	gt
   80da8:	18d2      	addgt	r2, r2, r3
   80daa:	4041      	eorgt	r1, r0
   80dac:	4048      	eorgt	r0, r1
   80dae:	4041      	eorgt	r1, r0
   80db0:	bfb8      	it	lt
   80db2:	425b      	neglt	r3, r3
   80db4:	2b19      	cmp	r3, #25
   80db6:	bf88      	it	hi
   80db8:	4770      	bxhi	lr
   80dba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   80dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80dc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80dc6:	bf18      	it	ne
   80dc8:	4240      	negne	r0, r0
   80dca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80dce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   80dd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   80dd6:	bf18      	it	ne
   80dd8:	4249      	negne	r1, r1
   80dda:	ea92 0f03 	teq	r2, r3
   80dde:	d03f      	beq.n	80e60 <__addsf3+0xd8>
   80de0:	f1a2 0201 	sub.w	r2, r2, #1
   80de4:	fa41 fc03 	asr.w	ip, r1, r3
   80de8:	eb10 000c 	adds.w	r0, r0, ip
   80dec:	f1c3 0320 	rsb	r3, r3, #32
   80df0:	fa01 f103 	lsl.w	r1, r1, r3
   80df4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80df8:	d502      	bpl.n	80e00 <__addsf3+0x78>
   80dfa:	4249      	negs	r1, r1
   80dfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   80e00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   80e04:	d313      	bcc.n	80e2e <__addsf3+0xa6>
   80e06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80e0a:	d306      	bcc.n	80e1a <__addsf3+0x92>
   80e0c:	0840      	lsrs	r0, r0, #1
   80e0e:	ea4f 0131 	mov.w	r1, r1, rrx
   80e12:	f102 0201 	add.w	r2, r2, #1
   80e16:	2afe      	cmp	r2, #254	; 0xfe
   80e18:	d251      	bcs.n	80ebe <__addsf3+0x136>
   80e1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   80e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80e22:	bf08      	it	eq
   80e24:	f020 0001 	biceq.w	r0, r0, #1
   80e28:	ea40 0003 	orr.w	r0, r0, r3
   80e2c:	4770      	bx	lr
   80e2e:	0049      	lsls	r1, r1, #1
   80e30:	eb40 0000 	adc.w	r0, r0, r0
   80e34:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   80e38:	f1a2 0201 	sub.w	r2, r2, #1
   80e3c:	d1ed      	bne.n	80e1a <__addsf3+0x92>
   80e3e:	fab0 fc80 	clz	ip, r0
   80e42:	f1ac 0c08 	sub.w	ip, ip, #8
   80e46:	ebb2 020c 	subs.w	r2, r2, ip
   80e4a:	fa00 f00c 	lsl.w	r0, r0, ip
   80e4e:	bfaa      	itet	ge
   80e50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   80e54:	4252      	neglt	r2, r2
   80e56:	4318      	orrge	r0, r3
   80e58:	bfbc      	itt	lt
   80e5a:	40d0      	lsrlt	r0, r2
   80e5c:	4318      	orrlt	r0, r3
   80e5e:	4770      	bx	lr
   80e60:	f092 0f00 	teq	r2, #0
   80e64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   80e68:	bf06      	itte	eq
   80e6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   80e6e:	3201      	addeq	r2, #1
   80e70:	3b01      	subne	r3, #1
   80e72:	e7b5      	b.n	80de0 <__addsf3+0x58>
   80e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   80e7c:	bf18      	it	ne
   80e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80e82:	d021      	beq.n	80ec8 <__addsf3+0x140>
   80e84:	ea92 0f03 	teq	r2, r3
   80e88:	d004      	beq.n	80e94 <__addsf3+0x10c>
   80e8a:	f092 0f00 	teq	r2, #0
   80e8e:	bf08      	it	eq
   80e90:	4608      	moveq	r0, r1
   80e92:	4770      	bx	lr
   80e94:	ea90 0f01 	teq	r0, r1
   80e98:	bf1c      	itt	ne
   80e9a:	2000      	movne	r0, #0
   80e9c:	4770      	bxne	lr
   80e9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   80ea2:	d104      	bne.n	80eae <__addsf3+0x126>
   80ea4:	0040      	lsls	r0, r0, #1
   80ea6:	bf28      	it	cs
   80ea8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   80eac:	4770      	bx	lr
   80eae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   80eb2:	bf3c      	itt	cc
   80eb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   80eb8:	4770      	bxcc	lr
   80eba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80ebe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   80ec2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80ec6:	4770      	bx	lr
   80ec8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   80ecc:	bf16      	itet	ne
   80ece:	4608      	movne	r0, r1
   80ed0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   80ed4:	4601      	movne	r1, r0
   80ed6:	0242      	lsls	r2, r0, #9
   80ed8:	bf06      	itte	eq
   80eda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   80ede:	ea90 0f01 	teqeq	r0, r1
   80ee2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   80ee6:	4770      	bx	lr

00080ee8 <__aeabi_ui2f>:
   80ee8:	f04f 0300 	mov.w	r3, #0
   80eec:	e004      	b.n	80ef8 <__aeabi_i2f+0x8>
   80eee:	bf00      	nop

00080ef0 <__aeabi_i2f>:
   80ef0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   80ef4:	bf48      	it	mi
   80ef6:	4240      	negmi	r0, r0
   80ef8:	ea5f 0c00 	movs.w	ip, r0
   80efc:	bf08      	it	eq
   80efe:	4770      	bxeq	lr
   80f00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   80f04:	4601      	mov	r1, r0
   80f06:	f04f 0000 	mov.w	r0, #0
   80f0a:	e01c      	b.n	80f46 <__aeabi_l2f+0x2a>

00080f0c <__aeabi_ul2f>:
   80f0c:	ea50 0201 	orrs.w	r2, r0, r1
   80f10:	bf08      	it	eq
   80f12:	4770      	bxeq	lr
   80f14:	f04f 0300 	mov.w	r3, #0
   80f18:	e00a      	b.n	80f30 <__aeabi_l2f+0x14>
   80f1a:	bf00      	nop

00080f1c <__aeabi_l2f>:
   80f1c:	ea50 0201 	orrs.w	r2, r0, r1
   80f20:	bf08      	it	eq
   80f22:	4770      	bxeq	lr
   80f24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   80f28:	d502      	bpl.n	80f30 <__aeabi_l2f+0x14>
   80f2a:	4240      	negs	r0, r0
   80f2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80f30:	ea5f 0c01 	movs.w	ip, r1
   80f34:	bf02      	ittt	eq
   80f36:	4684      	moveq	ip, r0
   80f38:	4601      	moveq	r1, r0
   80f3a:	2000      	moveq	r0, #0
   80f3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   80f40:	bf08      	it	eq
   80f42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   80f46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   80f4a:	fabc f28c 	clz	r2, ip
   80f4e:	3a08      	subs	r2, #8
   80f50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   80f54:	db10      	blt.n	80f78 <__aeabi_l2f+0x5c>
   80f56:	fa01 fc02 	lsl.w	ip, r1, r2
   80f5a:	4463      	add	r3, ip
   80f5c:	fa00 fc02 	lsl.w	ip, r0, r2
   80f60:	f1c2 0220 	rsb	r2, r2, #32
   80f64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f68:	fa20 f202 	lsr.w	r2, r0, r2
   80f6c:	eb43 0002 	adc.w	r0, r3, r2
   80f70:	bf08      	it	eq
   80f72:	f020 0001 	biceq.w	r0, r0, #1
   80f76:	4770      	bx	lr
   80f78:	f102 0220 	add.w	r2, r2, #32
   80f7c:	fa01 fc02 	lsl.w	ip, r1, r2
   80f80:	f1c2 0220 	rsb	r2, r2, #32
   80f84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   80f88:	fa21 f202 	lsr.w	r2, r1, r2
   80f8c:	eb43 0002 	adc.w	r0, r3, r2
   80f90:	bf08      	it	eq
   80f92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   80f96:	4770      	bx	lr

00080f98 <__aeabi_fmul>:
   80f98:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80f9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   80fa0:	bf1e      	ittt	ne
   80fa2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   80fa6:	ea92 0f0c 	teqne	r2, ip
   80faa:	ea93 0f0c 	teqne	r3, ip
   80fae:	d06f      	beq.n	81090 <__aeabi_fmul+0xf8>
   80fb0:	441a      	add	r2, r3
   80fb2:	ea80 0c01 	eor.w	ip, r0, r1
   80fb6:	0240      	lsls	r0, r0, #9
   80fb8:	bf18      	it	ne
   80fba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   80fbe:	d01e      	beq.n	80ffe <__aeabi_fmul+0x66>
   80fc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80fc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   80fc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   80fcc:	fba0 3101 	umull	r3, r1, r0, r1
   80fd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   80fd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   80fd8:	bf3e      	ittt	cc
   80fda:	0049      	lslcc	r1, r1, #1
   80fdc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   80fe0:	005b      	lslcc	r3, r3, #1
   80fe2:	ea40 0001 	orr.w	r0, r0, r1
   80fe6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   80fea:	2afd      	cmp	r2, #253	; 0xfd
   80fec:	d81d      	bhi.n	8102a <__aeabi_fmul+0x92>
   80fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   80ff2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80ff6:	bf08      	it	eq
   80ff8:	f020 0001 	biceq.w	r0, r0, #1
   80ffc:	4770      	bx	lr
   80ffe:	f090 0f00 	teq	r0, #0
   81002:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81006:	bf08      	it	eq
   81008:	0249      	lsleq	r1, r1, #9
   8100a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8100e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81012:	3a7f      	subs	r2, #127	; 0x7f
   81014:	bfc2      	ittt	gt
   81016:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8101a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8101e:	4770      	bxgt	lr
   81020:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81024:	f04f 0300 	mov.w	r3, #0
   81028:	3a01      	subs	r2, #1
   8102a:	dc5d      	bgt.n	810e8 <__aeabi_fmul+0x150>
   8102c:	f112 0f19 	cmn.w	r2, #25
   81030:	bfdc      	itt	le
   81032:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81036:	4770      	bxle	lr
   81038:	f1c2 0200 	rsb	r2, r2, #0
   8103c:	0041      	lsls	r1, r0, #1
   8103e:	fa21 f102 	lsr.w	r1, r1, r2
   81042:	f1c2 0220 	rsb	r2, r2, #32
   81046:	fa00 fc02 	lsl.w	ip, r0, r2
   8104a:	ea5f 0031 	movs.w	r0, r1, rrx
   8104e:	f140 0000 	adc.w	r0, r0, #0
   81052:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81056:	bf08      	it	eq
   81058:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8105c:	4770      	bx	lr
   8105e:	f092 0f00 	teq	r2, #0
   81062:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81066:	bf02      	ittt	eq
   81068:	0040      	lsleq	r0, r0, #1
   8106a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8106e:	3a01      	subeq	r2, #1
   81070:	d0f9      	beq.n	81066 <__aeabi_fmul+0xce>
   81072:	ea40 000c 	orr.w	r0, r0, ip
   81076:	f093 0f00 	teq	r3, #0
   8107a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8107e:	bf02      	ittt	eq
   81080:	0049      	lsleq	r1, r1, #1
   81082:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81086:	3b01      	subeq	r3, #1
   81088:	d0f9      	beq.n	8107e <__aeabi_fmul+0xe6>
   8108a:	ea41 010c 	orr.w	r1, r1, ip
   8108e:	e78f      	b.n	80fb0 <__aeabi_fmul+0x18>
   81090:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81094:	ea92 0f0c 	teq	r2, ip
   81098:	bf18      	it	ne
   8109a:	ea93 0f0c 	teqne	r3, ip
   8109e:	d00a      	beq.n	810b6 <__aeabi_fmul+0x11e>
   810a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   810a4:	bf18      	it	ne
   810a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   810aa:	d1d8      	bne.n	8105e <__aeabi_fmul+0xc6>
   810ac:	ea80 0001 	eor.w	r0, r0, r1
   810b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   810b4:	4770      	bx	lr
   810b6:	f090 0f00 	teq	r0, #0
   810ba:	bf17      	itett	ne
   810bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   810c0:	4608      	moveq	r0, r1
   810c2:	f091 0f00 	teqne	r1, #0
   810c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   810ca:	d014      	beq.n	810f6 <__aeabi_fmul+0x15e>
   810cc:	ea92 0f0c 	teq	r2, ip
   810d0:	d101      	bne.n	810d6 <__aeabi_fmul+0x13e>
   810d2:	0242      	lsls	r2, r0, #9
   810d4:	d10f      	bne.n	810f6 <__aeabi_fmul+0x15e>
   810d6:	ea93 0f0c 	teq	r3, ip
   810da:	d103      	bne.n	810e4 <__aeabi_fmul+0x14c>
   810dc:	024b      	lsls	r3, r1, #9
   810de:	bf18      	it	ne
   810e0:	4608      	movne	r0, r1
   810e2:	d108      	bne.n	810f6 <__aeabi_fmul+0x15e>
   810e4:	ea80 0001 	eor.w	r0, r0, r1
   810e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   810ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   810f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   810f4:	4770      	bx	lr
   810f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   810fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   810fe:	4770      	bx	lr

00081100 <__aeabi_fdiv>:
   81100:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81108:	bf1e      	ittt	ne
   8110a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8110e:	ea92 0f0c 	teqne	r2, ip
   81112:	ea93 0f0c 	teqne	r3, ip
   81116:	d069      	beq.n	811ec <__aeabi_fdiv+0xec>
   81118:	eba2 0203 	sub.w	r2, r2, r3
   8111c:	ea80 0c01 	eor.w	ip, r0, r1
   81120:	0249      	lsls	r1, r1, #9
   81122:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81126:	d037      	beq.n	81198 <__aeabi_fdiv+0x98>
   81128:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8112c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81130:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81134:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81138:	428b      	cmp	r3, r1
   8113a:	bf38      	it	cc
   8113c:	005b      	lslcc	r3, r3, #1
   8113e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81142:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81146:	428b      	cmp	r3, r1
   81148:	bf24      	itt	cs
   8114a:	1a5b      	subcs	r3, r3, r1
   8114c:	ea40 000c 	orrcs.w	r0, r0, ip
   81150:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81154:	bf24      	itt	cs
   81156:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8115a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8115e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81162:	bf24      	itt	cs
   81164:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81168:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8116c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81170:	bf24      	itt	cs
   81172:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81176:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8117a:	011b      	lsls	r3, r3, #4
   8117c:	bf18      	it	ne
   8117e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81182:	d1e0      	bne.n	81146 <__aeabi_fdiv+0x46>
   81184:	2afd      	cmp	r2, #253	; 0xfd
   81186:	f63f af50 	bhi.w	8102a <__aeabi_fmul+0x92>
   8118a:	428b      	cmp	r3, r1
   8118c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81190:	bf08      	it	eq
   81192:	f020 0001 	biceq.w	r0, r0, #1
   81196:	4770      	bx	lr
   81198:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8119c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   811a0:	327f      	adds	r2, #127	; 0x7f
   811a2:	bfc2      	ittt	gt
   811a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   811a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   811ac:	4770      	bxgt	lr
   811ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   811b2:	f04f 0300 	mov.w	r3, #0
   811b6:	3a01      	subs	r2, #1
   811b8:	e737      	b.n	8102a <__aeabi_fmul+0x92>
   811ba:	f092 0f00 	teq	r2, #0
   811be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   811c2:	bf02      	ittt	eq
   811c4:	0040      	lsleq	r0, r0, #1
   811c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   811ca:	3a01      	subeq	r2, #1
   811cc:	d0f9      	beq.n	811c2 <__aeabi_fdiv+0xc2>
   811ce:	ea40 000c 	orr.w	r0, r0, ip
   811d2:	f093 0f00 	teq	r3, #0
   811d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   811da:	bf02      	ittt	eq
   811dc:	0049      	lsleq	r1, r1, #1
   811de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   811e2:	3b01      	subeq	r3, #1
   811e4:	d0f9      	beq.n	811da <__aeabi_fdiv+0xda>
   811e6:	ea41 010c 	orr.w	r1, r1, ip
   811ea:	e795      	b.n	81118 <__aeabi_fdiv+0x18>
   811ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   811f0:	ea92 0f0c 	teq	r2, ip
   811f4:	d108      	bne.n	81208 <__aeabi_fdiv+0x108>
   811f6:	0242      	lsls	r2, r0, #9
   811f8:	f47f af7d 	bne.w	810f6 <__aeabi_fmul+0x15e>
   811fc:	ea93 0f0c 	teq	r3, ip
   81200:	f47f af70 	bne.w	810e4 <__aeabi_fmul+0x14c>
   81204:	4608      	mov	r0, r1
   81206:	e776      	b.n	810f6 <__aeabi_fmul+0x15e>
   81208:	ea93 0f0c 	teq	r3, ip
   8120c:	d104      	bne.n	81218 <__aeabi_fdiv+0x118>
   8120e:	024b      	lsls	r3, r1, #9
   81210:	f43f af4c 	beq.w	810ac <__aeabi_fmul+0x114>
   81214:	4608      	mov	r0, r1
   81216:	e76e      	b.n	810f6 <__aeabi_fmul+0x15e>
   81218:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8121c:	bf18      	it	ne
   8121e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81222:	d1ca      	bne.n	811ba <__aeabi_fdiv+0xba>
   81224:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81228:	f47f af5c 	bne.w	810e4 <__aeabi_fmul+0x14c>
   8122c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81230:	f47f af3c 	bne.w	810ac <__aeabi_fmul+0x114>
   81234:	e75f      	b.n	810f6 <__aeabi_fmul+0x15e>
   81236:	bf00      	nop

00081238 <__aeabi_f2iz>:
   81238:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8123c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81240:	d30f      	bcc.n	81262 <__aeabi_f2iz+0x2a>
   81242:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81246:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8124a:	d90d      	bls.n	81268 <__aeabi_f2iz+0x30>
   8124c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81254:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81258:	fa23 f002 	lsr.w	r0, r3, r2
   8125c:	bf18      	it	ne
   8125e:	4240      	negne	r0, r0
   81260:	4770      	bx	lr
   81262:	f04f 0000 	mov.w	r0, #0
   81266:	4770      	bx	lr
   81268:	f112 0f61 	cmn.w	r2, #97	; 0x61
   8126c:	d101      	bne.n	81272 <__aeabi_f2iz+0x3a>
   8126e:	0242      	lsls	r2, r0, #9
   81270:	d105      	bne.n	8127e <__aeabi_f2iz+0x46>
   81272:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81276:	bf08      	it	eq
   81278:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8127c:	4770      	bx	lr
   8127e:	f04f 0000 	mov.w	r0, #0
   81282:	4770      	bx	lr

00081284 <__libc_init_array>:
   81284:	b570      	push	{r4, r5, r6, lr}
   81286:	4e0f      	ldr	r6, [pc, #60]	; (812c4 <__libc_init_array+0x40>)
   81288:	4d0f      	ldr	r5, [pc, #60]	; (812c8 <__libc_init_array+0x44>)
   8128a:	1b76      	subs	r6, r6, r5
   8128c:	10b6      	asrs	r6, r6, #2
   8128e:	bf18      	it	ne
   81290:	2400      	movne	r4, #0
   81292:	d005      	beq.n	812a0 <__libc_init_array+0x1c>
   81294:	3401      	adds	r4, #1
   81296:	f855 3b04 	ldr.w	r3, [r5], #4
   8129a:	4798      	blx	r3
   8129c:	42a6      	cmp	r6, r4
   8129e:	d1f9      	bne.n	81294 <__libc_init_array+0x10>
   812a0:	4e0a      	ldr	r6, [pc, #40]	; (812cc <__libc_init_array+0x48>)
   812a2:	4d0b      	ldr	r5, [pc, #44]	; (812d0 <__libc_init_array+0x4c>)
   812a4:	f000 f93a 	bl	8151c <_init>
   812a8:	1b76      	subs	r6, r6, r5
   812aa:	10b6      	asrs	r6, r6, #2
   812ac:	bf18      	it	ne
   812ae:	2400      	movne	r4, #0
   812b0:	d006      	beq.n	812c0 <__libc_init_array+0x3c>
   812b2:	3401      	adds	r4, #1
   812b4:	f855 3b04 	ldr.w	r3, [r5], #4
   812b8:	4798      	blx	r3
   812ba:	42a6      	cmp	r6, r4
   812bc:	d1f9      	bne.n	812b2 <__libc_init_array+0x2e>
   812be:	bd70      	pop	{r4, r5, r6, pc}
   812c0:	bd70      	pop	{r4, r5, r6, pc}
   812c2:	bf00      	nop
   812c4:	00081528 	.word	0x00081528
   812c8:	00081528 	.word	0x00081528
   812cc:	00081530 	.word	0x00081530
   812d0:	00081528 	.word	0x00081528

000812d4 <register_fini>:
   812d4:	4b02      	ldr	r3, [pc, #8]	; (812e0 <register_fini+0xc>)
   812d6:	b113      	cbz	r3, 812de <register_fini+0xa>
   812d8:	4802      	ldr	r0, [pc, #8]	; (812e4 <register_fini+0x10>)
   812da:	f000 b805 	b.w	812e8 <atexit>
   812de:	4770      	bx	lr
   812e0:	00000000 	.word	0x00000000
   812e4:	000812f5 	.word	0x000812f5

000812e8 <atexit>:
   812e8:	2300      	movs	r3, #0
   812ea:	4601      	mov	r1, r0
   812ec:	461a      	mov	r2, r3
   812ee:	4618      	mov	r0, r3
   812f0:	f000 b81e 	b.w	81330 <__register_exitproc>

000812f4 <__libc_fini_array>:
   812f4:	b538      	push	{r3, r4, r5, lr}
   812f6:	4c0a      	ldr	r4, [pc, #40]	; (81320 <__libc_fini_array+0x2c>)
   812f8:	4d0a      	ldr	r5, [pc, #40]	; (81324 <__libc_fini_array+0x30>)
   812fa:	1b64      	subs	r4, r4, r5
   812fc:	10a4      	asrs	r4, r4, #2
   812fe:	d00a      	beq.n	81316 <__libc_fini_array+0x22>
   81300:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81304:	3b01      	subs	r3, #1
   81306:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8130a:	3c01      	subs	r4, #1
   8130c:	f855 3904 	ldr.w	r3, [r5], #-4
   81310:	4798      	blx	r3
   81312:	2c00      	cmp	r4, #0
   81314:	d1f9      	bne.n	8130a <__libc_fini_array+0x16>
   81316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8131a:	f000 b909 	b.w	81530 <_fini>
   8131e:	bf00      	nop
   81320:	00081540 	.word	0x00081540
   81324:	0008153c 	.word	0x0008153c

00081328 <__retarget_lock_acquire_recursive>:
   81328:	4770      	bx	lr
   8132a:	bf00      	nop

0008132c <__retarget_lock_release_recursive>:
   8132c:	4770      	bx	lr
   8132e:	bf00      	nop

00081330 <__register_exitproc>:
   81330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81334:	4d2c      	ldr	r5, [pc, #176]	; (813e8 <__register_exitproc+0xb8>)
   81336:	4606      	mov	r6, r0
   81338:	6828      	ldr	r0, [r5, #0]
   8133a:	4698      	mov	r8, r3
   8133c:	460f      	mov	r7, r1
   8133e:	4691      	mov	r9, r2
   81340:	f7ff fff2 	bl	81328 <__retarget_lock_acquire_recursive>
   81344:	4b29      	ldr	r3, [pc, #164]	; (813ec <__register_exitproc+0xbc>)
   81346:	681c      	ldr	r4, [r3, #0]
   81348:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8134c:	2b00      	cmp	r3, #0
   8134e:	d03e      	beq.n	813ce <__register_exitproc+0x9e>
   81350:	685a      	ldr	r2, [r3, #4]
   81352:	2a1f      	cmp	r2, #31
   81354:	dc1c      	bgt.n	81390 <__register_exitproc+0x60>
   81356:	f102 0e01 	add.w	lr, r2, #1
   8135a:	b176      	cbz	r6, 8137a <__register_exitproc+0x4a>
   8135c:	2101      	movs	r1, #1
   8135e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81362:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81366:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8136a:	4091      	lsls	r1, r2
   8136c:	4308      	orrs	r0, r1
   8136e:	2e02      	cmp	r6, #2
   81370:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81374:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81378:	d023      	beq.n	813c2 <__register_exitproc+0x92>
   8137a:	3202      	adds	r2, #2
   8137c:	f8c3 e004 	str.w	lr, [r3, #4]
   81380:	6828      	ldr	r0, [r5, #0]
   81382:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81386:	f7ff ffd1 	bl	8132c <__retarget_lock_release_recursive>
   8138a:	2000      	movs	r0, #0
   8138c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81390:	4b17      	ldr	r3, [pc, #92]	; (813f0 <__register_exitproc+0xc0>)
   81392:	b30b      	cbz	r3, 813d8 <__register_exitproc+0xa8>
   81394:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81398:	f3af 8000 	nop.w
   8139c:	4603      	mov	r3, r0
   8139e:	b1d8      	cbz	r0, 813d8 <__register_exitproc+0xa8>
   813a0:	2000      	movs	r0, #0
   813a2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   813a6:	f04f 0e01 	mov.w	lr, #1
   813aa:	6058      	str	r0, [r3, #4]
   813ac:	6019      	str	r1, [r3, #0]
   813ae:	4602      	mov	r2, r0
   813b0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   813b4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   813b8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   813bc:	2e00      	cmp	r6, #0
   813be:	d0dc      	beq.n	8137a <__register_exitproc+0x4a>
   813c0:	e7cc      	b.n	8135c <__register_exitproc+0x2c>
   813c2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   813c6:	4301      	orrs	r1, r0
   813c8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   813cc:	e7d5      	b.n	8137a <__register_exitproc+0x4a>
   813ce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   813d2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   813d6:	e7bb      	b.n	81350 <__register_exitproc+0x20>
   813d8:	6828      	ldr	r0, [r5, #0]
   813da:	f7ff ffa7 	bl	8132c <__retarget_lock_release_recursive>
   813de:	f04f 30ff 	mov.w	r0, #4294967295
   813e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   813e6:	bf00      	nop
   813e8:	20000430 	.word	0x20000430
   813ec:	00081518 	.word	0x00081518
   813f0:	00000000 	.word	0x00000000
   813f4:	304e4143 	.word	0x304e4143
   813f8:	73656d20 	.word	0x73656d20
   813fc:	65676173 	.word	0x65676173
   81400:	72726120 	.word	0x72726120
   81404:	64657669 	.word	0x64657669
   81408:	206e6920 	.word	0x206e6920
   8140c:	2d6e6f6e 	.word	0x2d6e6f6e
   81410:	64657375 	.word	0x64657375
   81414:	69616d20 	.word	0x69616d20
   81418:	786f626c 	.word	0x786f626c
   8141c:	00000d0a 	.word	0x00000d0a
   81420:	2077656e 	.word	0x2077656e
   81424:	7373656d 	.word	0x7373656d
   81428:	3a656761 	.word	0x3a656761
   8142c:	000d0a20 	.word	0x000d0a20
   81430:	7373656d 	.word	0x7373656d
   81434:	20656761 	.word	0x20656761
   81438:	203a6469 	.word	0x203a6469
   8143c:	0d0a6425 	.word	0x0d0a6425
   81440:	00000000 	.word	0x00000000
   81444:	7373656d 	.word	0x7373656d
   81448:	20656761 	.word	0x20656761
   8144c:	61746164 	.word	0x61746164
   81450:	6e656c20 	.word	0x6e656c20
   81454:	3a687467 	.word	0x3a687467
   81458:	0a642520 	.word	0x0a642520
   8145c:	73656d0d 	.word	0x73656d0d
   81460:	65676173 	.word	0x65676173
   81464:	74616420 	.word	0x74616420
   81468:	00203a61 	.word	0x00203a61
   8146c:	00206425 	.word	0x00206425
   81470:	000d0a0a 	.word	0x000d0a0a
   81474:	76207269 	.word	0x76207269
   81478:	65756c61 	.word	0x65756c61
   8147c:	6425203a 	.word	0x6425203a
   81480:	00000d0a 	.word	0x00000d0a
   81484:	656d6167 	.word	0x656d6167
   81488:	65766f20 	.word	0x65766f20
   8148c:	000d0a72 	.word	0x000d0a72
   81490:	726f6373 	.word	0x726f6373
   81494:	25203a65 	.word	0x25203a65
   81498:	000d0a64 	.word	0x000d0a64
   8149c:	6c756e28 	.word	0x6c756e28
   814a0:	0000296c 	.word	0x0000296c
   814a4:	4f525245 	.word	0x4f525245
   814a8:	44202152 	.word	0x44202152
   814ac:	20797475 	.word	0x20797475
   814b0:	6c637963 	.word	0x6c637963
   814b4:	756f2065 	.word	0x756f2065
   814b8:	666f2074 	.word	0x666f2074
   814bc:	6e617220 	.word	0x6e617220
   814c0:	202e6567 	.word	0x202e6567
   814c4:	7473754d 	.word	0x7473754d
   814c8:	20656220 	.word	0x20656220
   814cc:	77746562 	.word	0x77746562
   814d0:	206e6565 	.word	0x206e6565
   814d4:	6e612031 	.word	0x6e612031
   814d8:	0a322064 	.word	0x0a322064
   814dc:	0000000d 	.word	0x0000000d
   814e0:	4f525245 	.word	0x4f525245
   814e4:	49202152 	.word	0x49202152
   814e8:	6c61766e 	.word	0x6c61766e
   814ec:	70206469 	.word	0x70206469
   814f0:	7469736f 	.word	0x7469736f
   814f4:	006e6f69 	.word	0x006e6f69
   814f8:	3a525245 	.word	0x3a525245
   814fc:	52415520 	.word	0x52415520
   81500:	58522054 	.word	0x58522054
   81504:	66756220 	.word	0x66756220
   81508:	20726566 	.word	0x20726566
   8150c:	66207369 	.word	0x66207369
   81510:	0a6c6c75 	.word	0x0a6c6c75
   81514:	0000000d 	.word	0x0000000d

00081518 <_global_impure_ptr>:
   81518:	20000008                                ... 

0008151c <_init>:
   8151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8151e:	bf00      	nop
   81520:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81522:	bc08      	pop	{r3}
   81524:	469e      	mov	lr, r3
   81526:	4770      	bx	lr

00081528 <__init_array_start>:
   81528:	000812d5 	.word	0x000812d5

0008152c <__frame_dummy_init_array_entry>:
   8152c:	00080119                                ....

00081530 <_fini>:
   81530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81532:	bf00      	nop
   81534:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81536:	bc08      	pop	{r3}
   81538:	469e      	mov	lr, r3
   8153a:	4770      	bx	lr

0008153c <__fini_array_start>:
   8153c:	000800f5 	.word	0x000800f5
