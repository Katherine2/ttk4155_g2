
G3_ES_Project_Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001598  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081598  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  20000434  000819cc  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004e0  00081a78  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008e0  00081e78  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000065d9  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000136a  00000000  00000000  00026a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000015a1  00000000  00000000  00027df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000220  00000000  00000000  0002939a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  000295ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000118c7  00000000  00000000  0002976a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004821  00000000  00000000  0003b031  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054549  00000000  00000000  0003f852  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000006f8  00000000  00000000  00093d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e0 08 00 20 4d 04 08 00 49 04 08 00 49 04 08 00     ... M...I...I...
   80010:	49 04 08 00 49 04 08 00 49 04 08 00 00 00 00 00     I...I...I.......
	...
   8002c:	49 04 08 00 49 04 08 00 00 00 00 00 49 04 08 00     I...I.......I...
   8003c:	29 04 08 00 49 04 08 00 49 04 08 00 49 04 08 00     )...I...I...I...
   8004c:	49 04 08 00 49 04 08 00 49 04 08 00 49 04 08 00     I...I...I...I...
   8005c:	49 04 08 00 3d 0d 08 00 49 04 08 00 00 00 00 00     I...=...I.......
   8006c:	49 04 08 00 49 04 08 00 49 04 08 00 49 04 08 00     I...I...I...I...
	...
   80084:	49 04 08 00 49 04 08 00 49 04 08 00 49 04 08 00     I...I...I...I...
   80094:	49 04 08 00 49 04 08 00 49 04 08 00 49 04 08 00     I...I...I...I...
   800a4:	00 00 00 00 49 04 08 00 49 04 08 00 49 04 08 00     ....I...I...I...
   800b4:	49 04 08 00 49 04 08 00 49 04 08 00 49 04 08 00     I...I...I...I...
   800c4:	49 04 08 00 49 04 08 00 49 04 08 00 49 04 08 00     I...I...I...I...
   800d4:	49 04 08 00 49 04 08 00 49 04 08 00 49 04 08 00     I...I...I...I...
   800e4:	49 04 08 00 49 04 08 00 e5 02 08 00 49 04 08 00     I...I.......I...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081598 	.word	0x00081598

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081598 	.word	0x00081598
   80154:	20000438 	.word	0x20000438
   80158:	00081598 	.word	0x00081598
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
   8017e:	6913      	ldr	r3, [r2, #16]
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
   80194:	665c      	str	r4, [r3, #100]	; 0x64
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   801ac:	6150      	str	r0, [r2, #20]
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
   801b6:	46a1      	mov	r9, r4
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
   80238:	2001      	movs	r0, #1
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_init_def_tx_rx_mb>:
   80250:	b508      	push	{r3, lr}
   80252:	2202      	movs	r2, #2
   80254:	2101      	movs	r1, #1
   80256:	4b01      	ldr	r3, [pc, #4]	; (8025c <can_init_def_tx_rx_mb+0xc>)
   80258:	4798      	blx	r3
   8025a:	bd08      	pop	{r3, pc}
   8025c:	00080161 	.word	0x00080161

00080260 <can_receive>:
   80260:	014b      	lsls	r3, r1, #5
   80262:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80266:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8026a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80272:	d033      	beq.n	802dc <can_receive+0x7c>
   80274:	b430      	push	{r4, r5}
   80276:	014b      	lsls	r3, r1, #5
   80278:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80280:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   80284:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   80288:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8028c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80290:	8005      	strh	r5, [r0, #0]
   80292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80296:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8029a:	7083      	strb	r3, [r0, #2]
   8029c:	461d      	mov	r5, r3
   8029e:	b15b      	cbz	r3, 802b8 <can_receive+0x58>
   802a0:	3003      	adds	r0, #3
   802a2:	2300      	movs	r3, #0
   802a4:	2b03      	cmp	r3, #3
   802a6:	bfd9      	ittee	le
   802a8:	7002      	strble	r2, [r0, #0]
   802aa:	0a12      	lsrle	r2, r2, #8
   802ac:	7004      	strbgt	r4, [r0, #0]
   802ae:	0a24      	lsrgt	r4, r4, #8
   802b0:	3301      	adds	r3, #1
   802b2:	3001      	adds	r0, #1
   802b4:	42ab      	cmp	r3, r5
   802b6:	d1f5      	bne.n	802a4 <can_receive+0x44>
   802b8:	4b09      	ldr	r3, [pc, #36]	; (802e0 <can_receive+0x80>)
   802ba:	f101 0210 	add.w	r2, r1, #16
   802be:	0152      	lsls	r2, r2, #5
   802c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802c4:	5098      	str	r0, [r3, r2]
   802c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802d2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   802d6:	2000      	movs	r0, #0
   802d8:	bc30      	pop	{r4, r5}
   802da:	4770      	bx	lr
   802dc:	2001      	movs	r0, #1
   802de:	4770      	bx	lr
   802e0:	400b4000 	.word	0x400b4000

000802e4 <CAN0_Handler>:
   802e4:	b510      	push	{r4, lr}
   802e6:	4b18      	ldr	r3, [pc, #96]	; (80348 <CAN0_Handler+0x64>)
   802e8:	691c      	ldr	r4, [r3, #16]
   802ea:	f014 0f06 	tst.w	r4, #6
   802ee:	d013      	beq.n	80318 <CAN0_Handler+0x34>
   802f0:	f014 0f02 	tst.w	r4, #2
   802f4:	d11c      	bne.n	80330 <CAN0_Handler+0x4c>
   802f6:	f014 0f04 	tst.w	r4, #4
   802fa:	d021      	beq.n	80340 <CAN0_Handler+0x5c>
   802fc:	2102      	movs	r1, #2
   802fe:	4813      	ldr	r0, [pc, #76]	; (8034c <CAN0_Handler+0x68>)
   80300:	4b13      	ldr	r3, [pc, #76]	; (80350 <CAN0_Handler+0x6c>)
   80302:	4798      	blx	r3
   80304:	2201      	movs	r2, #1
   80306:	4b13      	ldr	r3, [pc, #76]	; (80354 <CAN0_Handler+0x70>)
   80308:	601a      	str	r2, [r3, #0]
   8030a:	4b10      	ldr	r3, [pc, #64]	; (8034c <CAN0_Handler+0x68>)
   8030c:	789a      	ldrb	r2, [r3, #2]
   8030e:	b11a      	cbz	r2, 80318 <CAN0_Handler+0x34>
   80310:	2300      	movs	r3, #0
   80312:	3301      	adds	r3, #1
   80314:	4293      	cmp	r3, r2
   80316:	d1fc      	bne.n	80312 <CAN0_Handler+0x2e>
   80318:	f014 0f01 	tst.w	r4, #1
   8031c:	d002      	beq.n	80324 <CAN0_Handler+0x40>
   8031e:	2201      	movs	r2, #1
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <CAN0_Handler+0x64>)
   80322:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80324:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80328:	4b0b      	ldr	r3, [pc, #44]	; (80358 <CAN0_Handler+0x74>)
   8032a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8032e:	bd10      	pop	{r4, pc}
   80330:	2101      	movs	r1, #1
   80332:	4806      	ldr	r0, [pc, #24]	; (8034c <CAN0_Handler+0x68>)
   80334:	4b06      	ldr	r3, [pc, #24]	; (80350 <CAN0_Handler+0x6c>)
   80336:	4798      	blx	r3
   80338:	2201      	movs	r2, #1
   8033a:	4b06      	ldr	r3, [pc, #24]	; (80354 <CAN0_Handler+0x70>)
   8033c:	601a      	str	r2, [r3, #0]
   8033e:	e7e4      	b.n	8030a <CAN0_Handler+0x26>
   80340:	4806      	ldr	r0, [pc, #24]	; (8035c <CAN0_Handler+0x78>)
   80342:	4b07      	ldr	r3, [pc, #28]	; (80360 <CAN0_Handler+0x7c>)
   80344:	4798      	blx	r3
   80346:	e7e0      	b.n	8030a <CAN0_Handler+0x26>
   80348:	400b4000 	.word	0x400b4000
   8034c:	20000458 	.word	0x20000458
   80350:	00080261 	.word	0x00080261
   80354:	20000450 	.word	0x20000450
   80358:	e000e100 	.word	0xe000e100
   8035c:	0008141c 	.word	0x0008141c
   80360:	00080bb5 	.word	0x00080bb5

00080364 <new_message_received>:
   80364:	4b01      	ldr	r3, [pc, #4]	; (8036c <new_message_received+0x8>)
   80366:	6818      	ldr	r0, [r3, #0]
   80368:	4770      	bx	lr
   8036a:	bf00      	nop
   8036c:	20000450 	.word	0x20000450

00080370 <get_message>:
   80370:	b410      	push	{r4}
   80372:	2100      	movs	r1, #0
   80374:	4a05      	ldr	r2, [pc, #20]	; (8038c <get_message+0x1c>)
   80376:	6011      	str	r1, [r2, #0]
   80378:	4a05      	ldr	r2, [pc, #20]	; (80390 <get_message+0x20>)
   8037a:	6814      	ldr	r4, [r2, #0]
   8037c:	6851      	ldr	r1, [r2, #4]
   8037e:	6892      	ldr	r2, [r2, #8]
   80380:	6004      	str	r4, [r0, #0]
   80382:	6041      	str	r1, [r0, #4]
   80384:	6082      	str	r2, [r0, #8]
   80386:	bc10      	pop	{r4}
   80388:	4770      	bx	lr
   8038a:	bf00      	nop
   8038c:	20000450 	.word	0x20000450
   80390:	20000458 	.word	0x20000458

00080394 <print_message>:
   80394:	b5f0      	push	{r4, r5, r6, r7, lr}
   80396:	b085      	sub	sp, #20
   80398:	ab04      	add	r3, sp, #16
   8039a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   8039e:	f89d 5006 	ldrb.w	r5, [sp, #6]
   803a2:	480e      	ldr	r0, [pc, #56]	; (803dc <print_message+0x48>)
   803a4:	4c0e      	ldr	r4, [pc, #56]	; (803e0 <print_message+0x4c>)
   803a6:	47a0      	blx	r4
   803a8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   803ac:	480d      	ldr	r0, [pc, #52]	; (803e4 <print_message+0x50>)
   803ae:	47a0      	blx	r4
   803b0:	4629      	mov	r1, r5
   803b2:	480d      	ldr	r0, [pc, #52]	; (803e8 <print_message+0x54>)
   803b4:	47a0      	blx	r4
   803b6:	b165      	cbz	r5, 803d2 <print_message+0x3e>
   803b8:	f10d 0407 	add.w	r4, sp, #7
   803bc:	ab04      	add	r3, sp, #16
   803be:	441d      	add	r5, r3
   803c0:	3d09      	subs	r5, #9
   803c2:	4f0a      	ldr	r7, [pc, #40]	; (803ec <print_message+0x58>)
   803c4:	4e06      	ldr	r6, [pc, #24]	; (803e0 <print_message+0x4c>)
   803c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   803ca:	4638      	mov	r0, r7
   803cc:	47b0      	blx	r6
   803ce:	42ac      	cmp	r4, r5
   803d0:	d1f9      	bne.n	803c6 <print_message+0x32>
   803d2:	4807      	ldr	r0, [pc, #28]	; (803f0 <print_message+0x5c>)
   803d4:	4b02      	ldr	r3, [pc, #8]	; (803e0 <print_message+0x4c>)
   803d6:	4798      	blx	r3
   803d8:	b005      	add	sp, #20
   803da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   803dc:	00081448 	.word	0x00081448
   803e0:	00080bb5 	.word	0x00080bb5
   803e4:	00081458 	.word	0x00081458
   803e8:	0008146c 	.word	0x0008146c
   803ec:	00081494 	.word	0x00081494
   803f0:	00081498 	.word	0x00081498

000803f4 <delay_us>:
#define US_TO_TICKS_CONVERTER (84 & SysTick_LOAD_RELOAD_Msk)		//https://www.at91.com/viewtopic.php?t=22349

static volatile uint16_t ticks;

void delay_us(uint16_t us) {
	ticks = us;
   803f4:	4b09      	ldr	r3, [pc, #36]	; (8041c <delay_us+0x28>)
   803f6:	8018      	strh	r0, [r3, #0]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
   803f8:	4b09      	ldr	r3, [pc, #36]	; (80420 <delay_us+0x2c>)
   803fa:	2253      	movs	r2, #83	; 0x53
   803fc:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   803fe:	21f0      	movs	r1, #240	; 0xf0
   80400:	4a08      	ldr	r2, [pc, #32]	; (80424 <delay_us+0x30>)
   80402:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
   80406:	2200      	movs	r2, #0
   80408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8040a:	2207      	movs	r2, #7
   8040c:	601a      	str	r2, [r3, #0]
	SysTick_Config(1 * US_TO_TICKS_CONVERTER);
	
	while (ticks > 0);
   8040e:	4a03      	ldr	r2, [pc, #12]	; (8041c <delay_us+0x28>)
   80410:	8813      	ldrh	r3, [r2, #0]
   80412:	b29b      	uxth	r3, r3
   80414:	2b00      	cmp	r3, #0
   80416:	d1fb      	bne.n	80410 <delay_us+0x1c>
}
   80418:	4770      	bx	lr
   8041a:	bf00      	nop
   8041c:	20000454 	.word	0x20000454
   80420:	e000e010 	.word	0xe000e010
   80424:	e000ed00 	.word	0xe000ed00

00080428 <SysTick_Handler>:

void SysTick_Handler() {
	ticks--;
   80428:	4a05      	ldr	r2, [pc, #20]	; (80440 <SysTick_Handler+0x18>)
   8042a:	8813      	ldrh	r3, [r2, #0]
   8042c:	3b01      	subs	r3, #1
   8042e:	b29b      	uxth	r3, r3
   80430:	8013      	strh	r3, [r2, #0]
	if (ticks == 0) {
   80432:	8813      	ldrh	r3, [r2, #0]
   80434:	b29b      	uxth	r3, r3
   80436:	b913      	cbnz	r3, 8043e <SysTick_Handler+0x16>
		SysTick->CTRL = 0;
   80438:	2200      	movs	r2, #0
   8043a:	4b02      	ldr	r3, [pc, #8]	; (80444 <SysTick_Handler+0x1c>)
   8043c:	601a      	str	r2, [r3, #0]
   8043e:	4770      	bx	lr
   80440:	20000454 	.word	0x20000454
   80444:	e000e010 	.word	0xe000e010

00080448 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80448:	e7fe      	b.n	80448 <Dummy_Handler>
	...

0008044c <Reset_Handler>:
{
   8044c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8044e:	4b18      	ldr	r3, [pc, #96]	; (804b0 <Reset_Handler+0x64>)
   80450:	4a18      	ldr	r2, [pc, #96]	; (804b4 <Reset_Handler+0x68>)
   80452:	429a      	cmp	r2, r3
   80454:	d010      	beq.n	80478 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   80456:	4b18      	ldr	r3, [pc, #96]	; (804b8 <Reset_Handler+0x6c>)
   80458:	4a15      	ldr	r2, [pc, #84]	; (804b0 <Reset_Handler+0x64>)
   8045a:	429a      	cmp	r2, r3
   8045c:	d20c      	bcs.n	80478 <Reset_Handler+0x2c>
   8045e:	3b01      	subs	r3, #1
   80460:	1a9b      	subs	r3, r3, r2
   80462:	f023 0303 	bic.w	r3, r3, #3
   80466:	3304      	adds	r3, #4
   80468:	4413      	add	r3, r2
   8046a:	4912      	ldr	r1, [pc, #72]	; (804b4 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   8046c:	f851 0b04 	ldr.w	r0, [r1], #4
   80470:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   80474:	429a      	cmp	r2, r3
   80476:	d1f9      	bne.n	8046c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   80478:	4b10      	ldr	r3, [pc, #64]	; (804bc <Reset_Handler+0x70>)
   8047a:	4a11      	ldr	r2, [pc, #68]	; (804c0 <Reset_Handler+0x74>)
   8047c:	429a      	cmp	r2, r3
   8047e:	d20a      	bcs.n	80496 <Reset_Handler+0x4a>
   80480:	3b01      	subs	r3, #1
   80482:	1a9b      	subs	r3, r3, r2
   80484:	f023 0303 	bic.w	r3, r3, #3
   80488:	3304      	adds	r3, #4
   8048a:	4413      	add	r3, r2
                *pDest++ = 0;
   8048c:	2100      	movs	r1, #0
   8048e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80492:	4293      	cmp	r3, r2
   80494:	d1fb      	bne.n	8048e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80496:	4b0b      	ldr	r3, [pc, #44]	; (804c4 <Reset_Handler+0x78>)
   80498:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8049c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804a0:	4a09      	ldr	r2, [pc, #36]	; (804c8 <Reset_Handler+0x7c>)
   804a2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   804a4:	4b09      	ldr	r3, [pc, #36]	; (804cc <Reset_Handler+0x80>)
   804a6:	4798      	blx	r3
        main();
   804a8:	4b09      	ldr	r3, [pc, #36]	; (804d0 <Reset_Handler+0x84>)
   804aa:	4798      	blx	r3
   804ac:	e7fe      	b.n	804ac <Reset_Handler+0x60>
   804ae:	bf00      	nop
   804b0:	20000000 	.word	0x20000000
   804b4:	00081598 	.word	0x00081598
   804b8:	20000434 	.word	0x20000434
   804bc:	200004e0 	.word	0x200004e0
   804c0:	20000434 	.word	0x20000434
   804c4:	00080000 	.word	0x00080000
   804c8:	e000ed00 	.word	0xe000ed00
   804cc:	000812ad 	.word	0x000812ad
   804d0:	000807a1 	.word	0x000807a1

000804d4 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   804d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   804d8:	4a20      	ldr	r2, [pc, #128]	; (8055c <SystemInit+0x88>)
   804da:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   804dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
   804e0:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   804e2:	4b1f      	ldr	r3, [pc, #124]	; (80560 <SystemInit+0x8c>)
   804e4:	6a1b      	ldr	r3, [r3, #32]
   804e6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804ea:	d107      	bne.n	804fc <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   804ec:	4a1d      	ldr	r2, [pc, #116]	; (80564 <SystemInit+0x90>)
   804ee:	4b1c      	ldr	r3, [pc, #112]	; (80560 <SystemInit+0x8c>)
   804f0:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   804f2:	461a      	mov	r2, r3
   804f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804f6:	f013 0f01 	tst.w	r3, #1
   804fa:	d0fb      	beq.n	804f4 <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   804fc:	4a1a      	ldr	r2, [pc, #104]	; (80568 <SystemInit+0x94>)
   804fe:	4b18      	ldr	r3, [pc, #96]	; (80560 <SystemInit+0x8c>)
   80500:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80502:	461a      	mov	r2, r3
   80504:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80506:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8050a:	d0fb      	beq.n	80504 <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8050c:	4a14      	ldr	r2, [pc, #80]	; (80560 <SystemInit+0x8c>)
   8050e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80510:	f023 0303 	bic.w	r3, r3, #3
   80514:	f043 0301 	orr.w	r3, r3, #1
   80518:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8051a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8051c:	f013 0f08 	tst.w	r3, #8
   80520:	d0fb      	beq.n	8051a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80522:	4a12      	ldr	r2, [pc, #72]	; (8056c <SystemInit+0x98>)
   80524:	4b0e      	ldr	r3, [pc, #56]	; (80560 <SystemInit+0x8c>)
   80526:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80528:	461a      	mov	r2, r3
   8052a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8052c:	f013 0f02 	tst.w	r3, #2
   80530:	d0fb      	beq.n	8052a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80532:	2211      	movs	r2, #17
   80534:	4b0a      	ldr	r3, [pc, #40]	; (80560 <SystemInit+0x8c>)
   80536:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80538:	461a      	mov	r2, r3
   8053a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8053c:	f013 0f08 	tst.w	r3, #8
   80540:	d0fb      	beq.n	8053a <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80542:	2212      	movs	r2, #18
   80544:	4b06      	ldr	r3, [pc, #24]	; (80560 <SystemInit+0x8c>)
   80546:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80548:	461a      	mov	r2, r3
   8054a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8054c:	f013 0f08 	tst.w	r3, #8
   80550:	d0fb      	beq.n	8054a <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80552:	4a07      	ldr	r2, [pc, #28]	; (80570 <SystemInit+0x9c>)
   80554:	4b07      	ldr	r3, [pc, #28]	; (80574 <SystemInit+0xa0>)
   80556:	601a      	str	r2, [r3, #0]
   80558:	4770      	bx	lr
   8055a:	bf00      	nop
   8055c:	400e0a00 	.word	0x400e0a00
   80560:	400e0600 	.word	0x400e0600
   80564:	00370809 	.word	0x00370809
   80568:	01370809 	.word	0x01370809
   8056c:	200d3f01 	.word	0x200d3f01
   80570:	0501bd00 	.word	0x0501bd00
   80574:	20000000 	.word	0x20000000

00080578 <button_pressed>:
		//printf("message data: %d \n\r", msg.data[0]);
	}
	return msg;
}

void button_pressed(CAN_MESSAGE message){
   80578:	b500      	push	{lr}
   8057a:	b085      	sub	sp, #20
   8057c:	ab04      	add	r3, sp, #16
   8057e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	//printf("button\n\r");
	PIOC -> PIO_PER = PIO_PC16;		//enables input/output function
   80582:	4b0c      	ldr	r3, [pc, #48]	; (805b4 <button_pressed+0x3c>)
   80584:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80588:	601a      	str	r2, [r3, #0]
	PIOC -> PIO_OER = PIO_PC16;		//sets pin PC16 (pin 47) as output
   8058a:	611a      	str	r2, [r3, #16]
	PIOC -> PIO_PUDR = PIO_PC16;	//disables pull-ups
   8058c:	661a      	str	r2, [r3, #96]	; 0x60
	if(message.data[0] == 0){
   8058e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80592:	b133      	cbz	r3, 805a2 <button_pressed+0x2a>
		printf("button pressed\n\r");
		PIOC -> PIO_SODR = PIO_PC16;	//sets output data register
	}
	else{
		PIOC -> PIO_CODR = PIO_PC16;	//clear output data register
   80594:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80598:	4b06      	ldr	r3, [pc, #24]	; (805b4 <button_pressed+0x3c>)
   8059a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
   8059c:	b005      	add	sp, #20
   8059e:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("button pressed\n\r");
   805a2:	4805      	ldr	r0, [pc, #20]	; (805b8 <button_pressed+0x40>)
   805a4:	4b05      	ldr	r3, [pc, #20]	; (805bc <button_pressed+0x44>)
   805a6:	4798      	blx	r3
		PIOC -> PIO_SODR = PIO_PC16;	//sets output data register
   805a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   805ac:	4b01      	ldr	r3, [pc, #4]	; (805b4 <button_pressed+0x3c>)
   805ae:	631a      	str	r2, [r3, #48]	; 0x30
   805b0:	e7f4      	b.n	8059c <button_pressed+0x24>
   805b2:	bf00      	nop
   805b4:	400e1200 	.word	0x400e1200
   805b8:	0008149c 	.word	0x0008149c
   805bc:	00080bb5 	.word	0x00080bb5

000805c0 <normalize_position>:

int normalize_position(CAN_MESSAGE message, int center){
   805c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   805c2:	b085      	sub	sp, #20
   805c4:	ac04      	add	r4, sp, #16
   805c6:	e904 0007 	stmdb	r4, {r0, r1, r2}
   805ca:	461c      	mov	r4, r3
		int value = (int)message.data[0];
   805cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
		int position = 0;
		if((int)value <= center){
   805d0:	4298      	cmp	r0, r3
   805d2:	dd19      	ble.n	80608 <normalize_position+0x48>
			position = (((float)value/(float)center)*100);
		}
		else if((int)value > center){
			position = ((((255-(float)value)/(255-(float) center))*(-100)))+200;
   805d4:	4e14      	ldr	r6, [pc, #80]	; (80628 <normalize_position+0x68>)
   805d6:	47b0      	blx	r6
   805d8:	4d14      	ldr	r5, [pc, #80]	; (8062c <normalize_position+0x6c>)
   805da:	4601      	mov	r1, r0
   805dc:	4814      	ldr	r0, [pc, #80]	; (80630 <normalize_position+0x70>)
   805de:	47a8      	blx	r5
   805e0:	4607      	mov	r7, r0
   805e2:	4620      	mov	r0, r4
   805e4:	47b0      	blx	r6
   805e6:	4601      	mov	r1, r0
   805e8:	4811      	ldr	r0, [pc, #68]	; (80630 <normalize_position+0x70>)
   805ea:	47a8      	blx	r5
   805ec:	4601      	mov	r1, r0
   805ee:	4638      	mov	r0, r7
   805f0:	4b10      	ldr	r3, [pc, #64]	; (80634 <normalize_position+0x74>)
   805f2:	4798      	blx	r3
   805f4:	4910      	ldr	r1, [pc, #64]	; (80638 <normalize_position+0x78>)
   805f6:	4b11      	ldr	r3, [pc, #68]	; (8063c <normalize_position+0x7c>)
   805f8:	4798      	blx	r3
   805fa:	4911      	ldr	r1, [pc, #68]	; (80640 <normalize_position+0x80>)
   805fc:	4b11      	ldr	r3, [pc, #68]	; (80644 <normalize_position+0x84>)
   805fe:	4798      	blx	r3
   80600:	4b11      	ldr	r3, [pc, #68]	; (80648 <normalize_position+0x88>)
   80602:	4798      	blx	r3
		}
		return position;
}
   80604:	b005      	add	sp, #20
   80606:	bdf0      	pop	{r4, r5, r6, r7, pc}
			position = (((float)value/(float)center)*100);
   80608:	4d07      	ldr	r5, [pc, #28]	; (80628 <normalize_position+0x68>)
   8060a:	47a8      	blx	r5
   8060c:	4606      	mov	r6, r0
   8060e:	4620      	mov	r0, r4
   80610:	47a8      	blx	r5
   80612:	4601      	mov	r1, r0
   80614:	4630      	mov	r0, r6
   80616:	4b07      	ldr	r3, [pc, #28]	; (80634 <normalize_position+0x74>)
   80618:	4798      	blx	r3
   8061a:	490c      	ldr	r1, [pc, #48]	; (8064c <normalize_position+0x8c>)
   8061c:	4b07      	ldr	r3, [pc, #28]	; (8063c <normalize_position+0x7c>)
   8061e:	4798      	blx	r3
   80620:	4b09      	ldr	r3, [pc, #36]	; (80648 <normalize_position+0x88>)
   80622:	4798      	blx	r3
   80624:	e7ee      	b.n	80604 <normalize_position+0x44>
   80626:	bf00      	nop
   80628:	00080f19 	.word	0x00080f19
   8062c:	00080dad 	.word	0x00080dad
   80630:	437f0000 	.word	0x437f0000
   80634:	00081129 	.word	0x00081129
   80638:	c2c80000 	.word	0xc2c80000
   8063c:	00080fc1 	.word	0x00080fc1
   80640:	43480000 	.word	0x43480000
   80644:	00080db1 	.word	0x00080db1
   80648:	00081261 	.word	0x00081261
   8064c:	42c80000 	.word	0x42c80000

00080650 <get_positions>:
CAN_MESSAGE get_positions(void){
   80650:	b5f0      	push	{r4, r5, r6, r7, lr}
   80652:	b085      	sub	sp, #20
   80654:	4604      	mov	r4, r0
	if(new_message_received()){
   80656:	4b43      	ldr	r3, [pc, #268]	; (80764 <get_positions+0x114>)
   80658:	4798      	blx	r3
   8065a:	b948      	cbnz	r0, 80670 <get_positions+0x20>
	return msg;
   8065c:	4b42      	ldr	r3, [pc, #264]	; (80768 <get_positions+0x118>)
   8065e:	6819      	ldr	r1, [r3, #0]
   80660:	685a      	ldr	r2, [r3, #4]
   80662:	689b      	ldr	r3, [r3, #8]
   80664:	6021      	str	r1, [r4, #0]
   80666:	6062      	str	r2, [r4, #4]
   80668:	60a3      	str	r3, [r4, #8]
}
   8066a:	4620      	mov	r0, r4
   8066c:	b005      	add	sp, #20
   8066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg = get_message();
   80670:	4d3d      	ldr	r5, [pc, #244]	; (80768 <get_positions+0x118>)
   80672:	4668      	mov	r0, sp
   80674:	4b3d      	ldr	r3, [pc, #244]	; (8076c <get_positions+0x11c>)
   80676:	4798      	blx	r3
   80678:	9900      	ldr	r1, [sp, #0]
   8067a:	9a01      	ldr	r2, [sp, #4]
   8067c:	9b02      	ldr	r3, [sp, #8]
   8067e:	6029      	str	r1, [r5, #0]
   80680:	606a      	str	r2, [r5, #4]
   80682:	60ab      	str	r3, [r5, #8]
		print_message(msg);
   80684:	6828      	ldr	r0, [r5, #0]
   80686:	6869      	ldr	r1, [r5, #4]
   80688:	68aa      	ldr	r2, [r5, #8]
   8068a:	4b39      	ldr	r3, [pc, #228]	; (80770 <get_positions+0x120>)
   8068c:	4798      	blx	r3
		if(msg.id == 1){
   8068e:	882b      	ldrh	r3, [r5, #0]
   80690:	2b01      	cmp	r3, #1
   80692:	d01b      	beq.n	806cc <get_positions+0x7c>
		else if(msg.id == 2){
   80694:	2b02      	cmp	r3, #2
   80696:	d032      	beq.n	806fe <get_positions+0xae>
		else if(msg.id == 3){
   80698:	2b03      	cmp	r3, #3
   8069a:	d041      	beq.n	80720 <get_positions+0xd0>
		else if(msg.id == 4){
   8069c:	2b04      	cmp	r3, #4
   8069e:	d04c      	beq.n	8073a <get_positions+0xea>
		else if(msg.id == 5){
   806a0:	2b05      	cmp	r3, #5
   806a2:	d1db      	bne.n	8065c <get_positions+0xc>
   806a4:	230a      	movs	r3, #10

int calibrate_center(CAN_MESSAGE message){
	int value, center;
	for (int i = 0; i < 10; i++){
		value = (int)message.data[0];
   806a6:	4a30      	ldr	r2, [pc, #192]	; (80768 <get_positions+0x118>)
   806a8:	78d1      	ldrb	r1, [r2, #3]
	for (int i = 0; i < 10; i++){
   806aa:	3b01      	subs	r3, #1
   806ac:	d1fd      	bne.n	806aa <get_positions+0x5a>
   806ae:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   806b2:	440b      	add	r3, r1
		center = center + value;
	}
	center = center/10;
   806b4:	4a2f      	ldr	r2, [pc, #188]	; (80774 <get_positions+0x124>)
   806b6:	fb82 1203 	smull	r1, r2, r2, r3
   806ba:	17d9      	asrs	r1, r3, #31
   806bc:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
			centerV = calibrate_center(msg);
   806c0:	4b2d      	ldr	r3, [pc, #180]	; (80778 <get_positions+0x128>)
   806c2:	6019      	str	r1, [r3, #0]
			printf("center V: %d\n\r", centerV);
   806c4:	482d      	ldr	r0, [pc, #180]	; (8077c <get_positions+0x12c>)
   806c6:	4b2e      	ldr	r3, [pc, #184]	; (80780 <get_positions+0x130>)
   806c8:	4798      	blx	r3
   806ca:	e7c7      	b.n	8065c <get_positions+0xc>
			int new_data = normalize_position(msg, centerH);
   806cc:	4b2d      	ldr	r3, [pc, #180]	; (80784 <get_positions+0x134>)
   806ce:	681f      	ldr	r7, [r3, #0]
   806d0:	463b      	mov	r3, r7
   806d2:	6828      	ldr	r0, [r5, #0]
   806d4:	6869      	ldr	r1, [r5, #4]
   806d6:	68aa      	ldr	r2, [r5, #8]
   806d8:	4e2b      	ldr	r6, [pc, #172]	; (80788 <get_positions+0x138>)
   806da:	47b0      	blx	r6
   806dc:	4606      	mov	r6, r0
			printf("center: %d, new data: %d\n\r", centerH, new_data);
   806de:	4602      	mov	r2, r0
   806e0:	4639      	mov	r1, r7
   806e2:	482a      	ldr	r0, [pc, #168]	; (8078c <get_positions+0x13c>)
   806e4:	4b26      	ldr	r3, [pc, #152]	; (80780 <get_positions+0x130>)
   806e6:	4798      	blx	r3
			move_motor(new_data, 100);
   806e8:	2164      	movs	r1, #100	; 0x64
   806ea:	4630      	mov	r0, r6
   806ec:	4b28      	ldr	r3, [pc, #160]	; (80790 <get_positions+0x140>)
   806ee:	4798      	blx	r3
			return msg;
   806f0:	6829      	ldr	r1, [r5, #0]
   806f2:	686a      	ldr	r2, [r5, #4]
   806f4:	68ab      	ldr	r3, [r5, #8]
   806f6:	6021      	str	r1, [r4, #0]
   806f8:	6062      	str	r2, [r4, #4]
   806fa:	60a3      	str	r3, [r4, #8]
   806fc:	e7b5      	b.n	8066a <get_positions+0x1a>
			int new_data = normalize_position(msg, centerV);
   806fe:	4d1a      	ldr	r5, [pc, #104]	; (80768 <get_positions+0x118>)
   80700:	4b1d      	ldr	r3, [pc, #116]	; (80778 <get_positions+0x128>)
   80702:	681b      	ldr	r3, [r3, #0]
   80704:	6828      	ldr	r0, [r5, #0]
   80706:	6869      	ldr	r1, [r5, #4]
   80708:	68aa      	ldr	r2, [r5, #8]
   8070a:	4e1f      	ldr	r6, [pc, #124]	; (80788 <get_positions+0x138>)
   8070c:	47b0      	blx	r6
			move_servo(new_data);
   8070e:	4b21      	ldr	r3, [pc, #132]	; (80794 <get_positions+0x144>)
   80710:	4798      	blx	r3
			return msg;
   80712:	6829      	ldr	r1, [r5, #0]
   80714:	686a      	ldr	r2, [r5, #4]
   80716:	68ab      	ldr	r3, [r5, #8]
   80718:	6021      	str	r1, [r4, #0]
   8071a:	6062      	str	r2, [r4, #4]
   8071c:	60a3      	str	r3, [r4, #8]
   8071e:	e7a4      	b.n	8066a <get_positions+0x1a>
			button_pressed(msg);
   80720:	4d11      	ldr	r5, [pc, #68]	; (80768 <get_positions+0x118>)
   80722:	6828      	ldr	r0, [r5, #0]
   80724:	6869      	ldr	r1, [r5, #4]
   80726:	68aa      	ldr	r2, [r5, #8]
   80728:	4b1b      	ldr	r3, [pc, #108]	; (80798 <get_positions+0x148>)
   8072a:	4798      	blx	r3
			return msg;
   8072c:	6829      	ldr	r1, [r5, #0]
   8072e:	686a      	ldr	r2, [r5, #4]
   80730:	68ab      	ldr	r3, [r5, #8]
   80732:	6021      	str	r1, [r4, #0]
   80734:	6062      	str	r2, [r4, #4]
   80736:	60a3      	str	r3, [r4, #8]
   80738:	e797      	b.n	8066a <get_positions+0x1a>
		else if(msg.id == 4){
   8073a:	230a      	movs	r3, #10
		value = (int)message.data[0];
   8073c:	4a0a      	ldr	r2, [pc, #40]	; (80768 <get_positions+0x118>)
   8073e:	78d1      	ldrb	r1, [r2, #3]
	for (int i = 0; i < 10; i++){
   80740:	3b01      	subs	r3, #1
   80742:	d1fd      	bne.n	80740 <get_positions+0xf0>
   80744:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   80748:	440b      	add	r3, r1
	center = center/10;
   8074a:	4a0a      	ldr	r2, [pc, #40]	; (80774 <get_positions+0x124>)
   8074c:	fb82 1203 	smull	r1, r2, r2, r3
   80750:	17d9      	asrs	r1, r3, #31
   80752:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
			centerH = calibrate_center(msg);
   80756:	4b0b      	ldr	r3, [pc, #44]	; (80784 <get_positions+0x134>)
   80758:	6019      	str	r1, [r3, #0]
			printf("center H: %d\n\r", centerH);
   8075a:	4810      	ldr	r0, [pc, #64]	; (8079c <get_positions+0x14c>)
   8075c:	4b08      	ldr	r3, [pc, #32]	; (80780 <get_positions+0x130>)
   8075e:	4798      	blx	r3
   80760:	e77c      	b.n	8065c <get_positions+0xc>
   80762:	bf00      	nop
   80764:	00080365 	.word	0x00080365
   80768:	20000468 	.word	0x20000468
   8076c:	00080371 	.word	0x00080371
   80770:	00080395 	.word	0x00080395
   80774:	66666667 	.word	0x66666667
   80778:	20000474 	.word	0x20000474
   8077c:	000814dc 	.word	0x000814dc
   80780:	00080bb5 	.word	0x00080bb5
   80784:	20000464 	.word	0x20000464
   80788:	000805c1 	.word	0x000805c1
   8078c:	000814b0 	.word	0x000814b0
   80790:	000808ad 	.word	0x000808ad
   80794:	00080ca5 	.word	0x00080ca5
   80798:	00080579 	.word	0x00080579
   8079c:	000814cc 	.word	0x000814cc

000807a0 <main>:
#define BITTIME 1/(TQ*CANBAUD)	//13TQ => SyncSeg = 1, PropSeg = 1, PS1 = 6, PS2 = 5, SJW = 1
*/

CAN_MESSAGE message;

int main(void) {
   807a0:	b500      	push	{lr}
   807a2:	b085      	sub	sp, #20
    /* Initialize the SAM system */
    SystemInit();
   807a4:	4b0f      	ldr	r3, [pc, #60]	; (807e4 <main+0x44>)
   807a6:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;		//disable the watchdog timer
   807a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   807ac:	4b0e      	ldr	r3, [pc, #56]	; (807e8 <main+0x48>)
   807ae:	605a      	str	r2, [r3, #4]
	configure_uart();
   807b0:	4b0e      	ldr	r3, [pc, #56]	; (807ec <main+0x4c>)
   807b2:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561);
   807b4:	480e      	ldr	r0, [pc, #56]	; (807f0 <main+0x50>)
   807b6:	4b0f      	ldr	r3, [pc, #60]	; (807f4 <main+0x54>)
   807b8:	4798      	blx	r3
	motorbox_init();
   807ba:	4b0f      	ldr	r3, [pc, #60]	; (807f8 <main+0x58>)
   807bc:	4798      	blx	r3
	dac_init();
   807be:	4b0f      	ldr	r3, [pc, #60]	; (807fc <main+0x5c>)
   807c0:	4798      	blx	r3
	pwm_init();
   807c2:	4b0f      	ldr	r3, [pc, #60]	; (80800 <main+0x60>)
   807c4:	4798      	blx	r3
	printf("here \n\r");
   807c6:	480f      	ldr	r0, [pc, #60]	; (80804 <main+0x64>)
   807c8:	4b0f      	ldr	r3, [pc, #60]	; (80808 <main+0x68>)
   807ca:	4798      	blx	r3
	while(1) {
		message = get_positions();
   807cc:	4c0f      	ldr	r4, [pc, #60]	; (8080c <main+0x6c>)
   807ce:	4d10      	ldr	r5, [pc, #64]	; (80810 <main+0x70>)
   807d0:	4668      	mov	r0, sp
   807d2:	47a8      	blx	r5
   807d4:	9900      	ldr	r1, [sp, #0]
   807d6:	9a01      	ldr	r2, [sp, #4]
   807d8:	9b02      	ldr	r3, [sp, #8]
   807da:	6021      	str	r1, [r4, #0]
   807dc:	6062      	str	r2, [r4, #4]
   807de:	60a3      	str	r3, [r4, #8]
   807e0:	e7f6      	b.n	807d0 <main+0x30>
   807e2:	bf00      	nop
   807e4:	000804d5 	.word	0x000804d5
   807e8:	400e1a50 	.word	0x400e1a50
   807ec:	00080cb1 	.word	0x00080cb1
   807f0:	00290561 	.word	0x00290561
   807f4:	00080251 	.word	0x00080251
   807f8:	0008083d 	.word	0x0008083d
   807fc:	00080815 	.word	0x00080815
   80800:	00080bd9 	.word	0x00080bd9
   80804:	000814ec 	.word	0x000814ec
   80808:	00080bb5 	.word	0x00080bb5
   8080c:	20000458 	.word	0x20000458
   80810:	00080651 	.word	0x00080651

00080814 <dac_init>:
#define RIGHT_CUTOFF 130
//#define LEFT_CUTOFF	100
//#define RIGHT_CUTOFF 200

void dac_init(void){
	PMC->PMC_PCER1 |= PMC_PCER1_PID38; //enable clock for DACC
   80814:	4a07      	ldr	r2, [pc, #28]	; (80834 <dac_init+0x20>)
   80816:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8081a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8081e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	REG_DACC_MR = DACC_MR_REFRESH(10) | DACC_MR_USER_SEL_CHANNEL1;
   80822:	f44f 3285 	mov.w	r2, #68096	; 0x10a00
   80826:	4b04      	ldr	r3, [pc, #16]	; (80838 <dac_init+0x24>)
   80828:	601a      	str	r2, [r3, #0]
	REG_DACC_CHER = DACC_CHER_CH1;
   8082a:	2202      	movs	r2, #2
   8082c:	330c      	adds	r3, #12
   8082e:	601a      	str	r2, [r3, #0]
   80830:	4770      	bx	lr
   80832:	bf00      	nop
   80834:	400e0600 	.word	0x400e0600
   80838:	400c8004 	.word	0x400c8004

0008083c <motorbox_init>:
	//REG_DACC_CDR //USE THIS TO SEND JOYSTICK POS
}

void motorbox_init(void){
   8083c:	b538      	push	{r3, r4, r5, lr}
	PIOC -> PIO_WPMR = (0x50494F << 8);	//disables write protect
   8083e:	4916      	ldr	r1, [pc, #88]	; (80898 <motorbox_init+0x5c>)
   80840:	4b16      	ldr	r3, [pc, #88]	; (8089c <motorbox_init+0x60>)
   80842:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4

	PMC->PMC_PCER0 |= (1 << ID_PIOC);//PMC_PCER0_PID13; //enable clock for 
   80846:	4b16      	ldr	r3, [pc, #88]	; (808a0 <motorbox_init+0x64>)
   80848:	691a      	ldr	r2, [r3, #16]
   8084a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8084e:	611a      	str	r2, [r3, #16]
	//PMC->PMC_PCER0 |= PMC_PCER0_PID14; //enable clock for 
	PMC->PMC_PCER0 |= (1 << ID_PIOD);
   80850:	691a      	ldr	r2, [r3, #16]
   80852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80856:	611a      	str	r2, [r3, #16]
	
	//!OE
	PIOD -> PIO_PER = PIO_PD0;		//enables input/output function
   80858:	4c12      	ldr	r4, [pc, #72]	; (808a4 <motorbox_init+0x68>)
   8085a:	2201      	movs	r2, #1
   8085c:	6022      	str	r2, [r4, #0]
	PIOD -> PIO_OER = PIO_PD0;		//enables output
   8085e:	6122      	str	r2, [r4, #16]
	//SEL
	PIOD -> PIO_PER = PIO_PD2;		//enables input/output function
   80860:	2304      	movs	r3, #4
   80862:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD2;		//enables output
   80864:	6123      	str	r3, [r4, #16]
	//DIR
	PIOD -> PIO_PER = PIO_PD10;		//enables input/output function
   80866:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8086a:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD10;		//enables output	
   8086c:	6123      	str	r3, [r4, #16]
	//!RES
	PIOD -> PIO_PER = PIO_PD1;		//enables input/output function
   8086e:	2502      	movs	r5, #2
   80870:	6025      	str	r5, [r4, #0]
	PIOD -> PIO_OER = PIO_PD1;		//enables output	
   80872:	6125      	str	r5, [r4, #16]
	//EN
	PIOD -> PIO_PER = PIO_PD9;		//enables input/output function
   80874:	f44f 7300 	mov.w	r3, #512	; 0x200
   80878:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD9;		//enables output
   8087a:	6123      	str	r3, [r4, #16]
	PIOC -> PIO_PER = PIO_PC2;		//enables input/output function
	//PIOC -> PIO_ODR = PIO_PC2;		//disables output
	PIOC -> PIO_PER = PIO_PC1;		//enables input/output function
	//PIOC -> PIO_ODR = PIO_PC1;		//disables output
	*/
	PIOC -> PIO_IFER = (0xFF << 1);
   8087c:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
   80880:	6208      	str	r0, [r1, #32]
	PIOC -> PIO_PUDR = (0xFF << 1);		//disables pull down register
   80882:	6608      	str	r0, [r1, #96]	; 0x60
	
	PIOD -> PIO_CODR = PIO_PD0;		//set !OE to low
   80884:	6362      	str	r2, [r4, #52]	; 0x34
	PIOD -> PIO_SODR = PIO_PD9;		//set EN to high
   80886:	6323      	str	r3, [r4, #48]	; 0x30
	PIOD -> PIO_CODR = PIO_PD1;		//set !RES to low
   80888:	6365      	str	r5, [r4, #52]	; 0x34
	delay_us(1000000);	
   8088a:	f244 2040 	movw	r0, #16960	; 0x4240
   8088e:	4b06      	ldr	r3, [pc, #24]	; (808a8 <motorbox_init+0x6c>)
   80890:	4798      	blx	r3
	PIOD -> PIO_SODR = PIO_PD1;		//set !RES to high
   80892:	6325      	str	r5, [r4, #48]	; 0x30
   80894:	bd38      	pop	{r3, r4, r5, pc}
   80896:	bf00      	nop
   80898:	400e1200 	.word	0x400e1200
   8089c:	50494f00 	.word	0x50494f00
   808a0:	400e0600 	.word	0x400e0600
   808a4:	400e1400 	.word	0x400e1400
   808a8:	000803f5 	.word	0x000803f5

000808ac <move_motor>:
	//set !OE to high
	PIOD -> PIO_SODR = PIO_PD0;
}*/

void move_motor(int joystick_position, int center){
	if((joystick_position) < LEFT_CUTOFF){
   808ac:	2845      	cmp	r0, #69	; 0x45
   808ae:	dd0e      	ble.n	808ce <move_motor+0x22>
		PIOD -> PIO_CODR = PIO_PD10;
		REG_DACC_CDR = 0xFFF - (joystick_position << 5);
	}
	else if ((joystick_position) > RIGHT_CUTOFF){
   808b0:	2882      	cmp	r0, #130	; 0x82
   808b2:	dd0b      	ble.n	808cc <move_motor+0x20>
		PIOD -> PIO_SODR = PIO_PD10;
   808b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   808b8:	4b0a      	ldr	r3, [pc, #40]	; (808e4 <move_motor+0x38>)
   808ba:	631a      	str	r2, [r3, #48]	; 0x30
		REG_DACC_CDR = (joystick_position << 5) - 0xFFF;
   808bc:	0140      	lsls	r0, r0, #5
   808be:	f6a0 70ff 	subw	r0, r0, #4095	; 0xfff
   808c2:	f5a3 33c9 	sub.w	r3, r3, #102912	; 0x19200
   808c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
   808ca:	6018      	str	r0, [r3, #0]
   808cc:	4770      	bx	lr
		PIOD -> PIO_CODR = PIO_PD10;
   808ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   808d2:	4b04      	ldr	r3, [pc, #16]	; (808e4 <move_motor+0x38>)
   808d4:	635a      	str	r2, [r3, #52]	; 0x34
		REG_DACC_CDR = 0xFFF - (joystick_position << 5);
   808d6:	f640 73ff 	movw	r3, #4095	; 0xfff
   808da:	eba3 1040 	sub.w	r0, r3, r0, lsl #5
   808de:	4b02      	ldr	r3, [pc, #8]	; (808e8 <move_motor+0x3c>)
   808e0:	6018      	str	r0, [r3, #0]
   808e2:	4770      	bx	lr
   808e4:	400e1400 	.word	0x400e1400
   808e8:	400c8020 	.word	0x400c8020

000808ec <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   808ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   808f0:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   808f2:	1e16      	subs	r6, r2, #0
   808f4:	dd48      	ble.n	80988 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   808f6:	780a      	ldrb	r2, [r1, #0]
   808f8:	2a00      	cmp	r2, #0
   808fa:	d035      	beq.n	80968 <prints+0x7c>
   808fc:	460a      	mov	r2, r1
   808fe:	2400      	movs	r4, #0
   80900:	3401      	adds	r4, #1
   80902:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80906:	2900      	cmp	r1, #0
   80908:	d1fa      	bne.n	80900 <prints+0x14>
		if (len >= width) width = 0;
   8090a:	42a6      	cmp	r6, r4
   8090c:	dc2d      	bgt.n	8096a <prints+0x7e>
   8090e:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80910:	f003 0202 	and.w	r2, r3, #2
   80914:	2a00      	cmp	r2, #0
   80916:	bf0c      	ite	eq
   80918:	f04f 0820 	moveq.w	r8, #32
   8091c:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80920:	f013 0301 	ands.w	r3, r3, #1
   80924:	d123      	bne.n	8096e <prints+0x82>
		for ( ; width > 0; --width) {
   80926:	2c00      	cmp	r4, #0
   80928:	dd28      	ble.n	8097c <prints+0x90>
   8092a:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   8092c:	fa5f f988 	uxtb.w	r9, r8
   80930:	4f18      	ldr	r7, [pc, #96]	; (80994 <prints+0xa8>)
   80932:	4648      	mov	r0, r9
   80934:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80936:	3e01      	subs	r6, #1
   80938:	d1fb      	bne.n	80932 <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   8093a:	7828      	ldrb	r0, [r5, #0]
   8093c:	b188      	cbz	r0, 80962 <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   8093e:	4f15      	ldr	r7, [pc, #84]	; (80994 <prints+0xa8>)
   80940:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80942:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80944:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80948:	2800      	cmp	r0, #0
   8094a:	d1f9      	bne.n	80940 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   8094c:	2e00      	cmp	r6, #0
   8094e:	dd08      	ble.n	80962 <prints+0x76>
   80950:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80952:	fa5f f888 	uxtb.w	r8, r8
   80956:	4f0f      	ldr	r7, [pc, #60]	; (80994 <prints+0xa8>)
   80958:	4640      	mov	r0, r8
   8095a:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   8095c:	3d01      	subs	r5, #1
   8095e:	d1fb      	bne.n	80958 <prints+0x6c>
   80960:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80962:	4620      	mov	r0, r4
   80964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80968:	2400      	movs	r4, #0
		else width -= len;
   8096a:	1b34      	subs	r4, r6, r4
   8096c:	e7d0      	b.n	80910 <prints+0x24>
   8096e:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80970:	7828      	ldrb	r0, [r5, #0]
   80972:	b108      	cbz	r0, 80978 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80974:	2400      	movs	r4, #0
   80976:	e7e2      	b.n	8093e <prints+0x52>
   80978:	2400      	movs	r4, #0
   8097a:	e7e7      	b.n	8094c <prints+0x60>
		for ( ; width > 0; --width) {
   8097c:	4626      	mov	r6, r4
   8097e:	461c      	mov	r4, r3
   80980:	e7db      	b.n	8093a <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80982:	f04f 0820 	mov.w	r8, #32
   80986:	e7d8      	b.n	8093a <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80988:	f013 0401 	ands.w	r4, r3, #1
   8098c:	d0f9      	beq.n	80982 <prints+0x96>
	register int pc = 0, padchar = ' ';
   8098e:	f04f 0820 	mov.w	r8, #32
   80992:	e7ed      	b.n	80970 <prints+0x84>
   80994:	00080d19 	.word	0x00080d19

00080998 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80998:	b5f0      	push	{r4, r5, r6, r7, lr}
   8099a:	b085      	sub	sp, #20
   8099c:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   8099e:	b381      	cbz	r1, 80a02 <printi+0x6a>
   809a0:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   809a2:	b10b      	cbz	r3, 809a8 <printi+0x10>
   809a4:	2a0a      	cmp	r2, #10
   809a6:	d038      	beq.n	80a1a <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   809a8:	2300      	movs	r3, #0
   809aa:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   809ae:	2600      	movs	r6, #0
   809b0:	2900      	cmp	r1, #0
   809b2:	d046      	beq.n	80a42 <printi+0xaa>
   809b4:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   809b8:	990c      	ldr	r1, [sp, #48]	; 0x30
   809ba:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   809bc:	fbb4 f3f2 	udiv	r3, r4, r2
   809c0:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   809c4:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   809c6:	bfc8      	it	gt
   809c8:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   809ca:	3330      	adds	r3, #48	; 0x30
   809cc:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   809d0:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   809d4:	2c00      	cmp	r4, #0
   809d6:	d1f1      	bne.n	809bc <printi+0x24>
	}

	if (neg) {
   809d8:	b156      	cbz	r6, 809f0 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   809da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   809dc:	b11b      	cbz	r3, 809e6 <printi+0x4e>
   809de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809e0:	f013 0f02 	tst.w	r3, #2
   809e4:	d125      	bne.n	80a32 <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   809e6:	232d      	movs	r3, #45	; 0x2d
   809e8:	f805 3c01 	strb.w	r3, [r5, #-1]
   809ec:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   809ee:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   809f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   809f4:	4629      	mov	r1, r5
   809f6:	4638      	mov	r0, r7
   809f8:	4c14      	ldr	r4, [pc, #80]	; (80a4c <printi+0xb4>)
   809fa:	47a0      	blx	r4
   809fc:	4430      	add	r0, r6
}
   809fe:	b005      	add	sp, #20
   80a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80a02:	2330      	movs	r3, #48	; 0x30
   80a04:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80a08:	2300      	movs	r3, #0
   80a0a:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a12:	a901      	add	r1, sp, #4
   80a14:	4c0d      	ldr	r4, [pc, #52]	; (80a4c <printi+0xb4>)
   80a16:	47a0      	blx	r4
   80a18:	e7f1      	b.n	809fe <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80a1a:	2900      	cmp	r1, #0
   80a1c:	dac4      	bge.n	809a8 <printi+0x10>
		u = -i;
   80a1e:	424c      	negs	r4, r1
	*s = '\0';
   80a20:	2300      	movs	r3, #0
   80a22:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80a26:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80a2a:	2c00      	cmp	r4, #0
   80a2c:	d0d5      	beq.n	809da <printi+0x42>
		neg = 1;
   80a2e:	2601      	movs	r6, #1
   80a30:	e7c0      	b.n	809b4 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80a32:	202d      	movs	r0, #45	; 0x2d
   80a34:	4b06      	ldr	r3, [pc, #24]	; (80a50 <printi+0xb8>)
   80a36:	4798      	blx	r3
			--width;
   80a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a3a:	3b01      	subs	r3, #1
   80a3c:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80a3e:	2601      	movs	r6, #1
			--width;
   80a40:	e7d6      	b.n	809f0 <printi+0x58>
	register int t, neg = 0, pc = 0;
   80a42:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80a44:	f10d 050f 	add.w	r5, sp, #15
   80a48:	e7d2      	b.n	809f0 <printi+0x58>
   80a4a:	bf00      	nop
   80a4c:	000808ed 	.word	0x000808ed
   80a50:	00080d19 	.word	0x00080d19

00080a54 <print>:

static int print( char **out, const char *format, va_list args )
{
   80a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a58:	b087      	sub	sp, #28
   80a5a:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80a5c:	780b      	ldrb	r3, [r1, #0]
   80a5e:	2b00      	cmp	r3, #0
   80a60:	f000 8094 	beq.w	80b8c <print+0x138>
   80a64:	468b      	mov	fp, r1
   80a66:	4617      	mov	r7, r2
   80a68:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80a6a:	4e4e      	ldr	r6, [pc, #312]	; (80ba4 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80a6c:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80bac <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80a70:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80bb0 <print+0x15c>
   80a74:	e046      	b.n	80b04 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80a76:	2200      	movs	r2, #0
   80a78:	e070      	b.n	80b5c <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80a7a:	6839      	ldr	r1, [r7, #0]
   80a7c:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80a7e:	484a      	ldr	r0, [pc, #296]	; (80ba8 <print+0x154>)
   80a80:	2900      	cmp	r1, #0
   80a82:	bf08      	it	eq
   80a84:	4601      	moveq	r1, r0
   80a86:	4640      	mov	r0, r8
   80a88:	47d0      	blx	sl
   80a8a:	4405      	add	r5, r0
				continue;
   80a8c:	e035      	b.n	80afa <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80a8e:	6839      	ldr	r1, [r7, #0]
   80a90:	3704      	adds	r7, #4
   80a92:	2061      	movs	r0, #97	; 0x61
   80a94:	9002      	str	r0, [sp, #8]
   80a96:	9301      	str	r3, [sp, #4]
   80a98:	9200      	str	r2, [sp, #0]
   80a9a:	2301      	movs	r3, #1
   80a9c:	220a      	movs	r2, #10
   80a9e:	4640      	mov	r0, r8
   80aa0:	47c8      	blx	r9
   80aa2:	4405      	add	r5, r0
				continue;
   80aa4:	e029      	b.n	80afa <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80aa6:	6839      	ldr	r1, [r7, #0]
   80aa8:	3704      	adds	r7, #4
   80aaa:	2061      	movs	r0, #97	; 0x61
   80aac:	9002      	str	r0, [sp, #8]
   80aae:	9301      	str	r3, [sp, #4]
   80ab0:	9200      	str	r2, [sp, #0]
   80ab2:	2300      	movs	r3, #0
   80ab4:	2210      	movs	r2, #16
   80ab6:	4640      	mov	r0, r8
   80ab8:	47c8      	blx	r9
   80aba:	4405      	add	r5, r0
				continue;
   80abc:	e01d      	b.n	80afa <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80abe:	6839      	ldr	r1, [r7, #0]
   80ac0:	3704      	adds	r7, #4
   80ac2:	2041      	movs	r0, #65	; 0x41
   80ac4:	9002      	str	r0, [sp, #8]
   80ac6:	9301      	str	r3, [sp, #4]
   80ac8:	9200      	str	r2, [sp, #0]
   80aca:	2300      	movs	r3, #0
   80acc:	2210      	movs	r2, #16
   80ace:	4640      	mov	r0, r8
   80ad0:	47c8      	blx	r9
   80ad2:	4405      	add	r5, r0
				continue;
   80ad4:	e011      	b.n	80afa <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80ad6:	6839      	ldr	r1, [r7, #0]
   80ad8:	3704      	adds	r7, #4
   80ada:	2061      	movs	r0, #97	; 0x61
   80adc:	9002      	str	r0, [sp, #8]
   80ade:	9301      	str	r3, [sp, #4]
   80ae0:	9200      	str	r2, [sp, #0]
   80ae2:	2300      	movs	r3, #0
   80ae4:	220a      	movs	r2, #10
   80ae6:	4640      	mov	r0, r8
   80ae8:	47c8      	blx	r9
   80aea:	4405      	add	r5, r0
				continue;
   80aec:	e005      	b.n	80afa <print+0xa6>
			++format;
   80aee:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80af0:	f89b 0000 	ldrb.w	r0, [fp]
   80af4:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80af6:	3501      	adds	r5, #1
   80af8:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80afa:	f104 0b01 	add.w	fp, r4, #1
   80afe:	7863      	ldrb	r3, [r4, #1]
   80b00:	2b00      	cmp	r3, #0
   80b02:	d044      	beq.n	80b8e <print+0x13a>
		if (*format == '%') {
   80b04:	2b25      	cmp	r3, #37	; 0x25
   80b06:	d1f3      	bne.n	80af0 <print+0x9c>
			++format;
   80b08:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80b0c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80b10:	2b00      	cmp	r3, #0
   80b12:	d03c      	beq.n	80b8e <print+0x13a>
			if (*format == '%') goto out;
   80b14:	2b25      	cmp	r3, #37	; 0x25
   80b16:	d0ea      	beq.n	80aee <print+0x9a>
			if (*format == '-') {
   80b18:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80b1a:	bf06      	itte	eq
   80b1c:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80b20:	2301      	moveq	r3, #1
			width = pad = 0;
   80b22:	2300      	movne	r3, #0
			while (*format == '0') {
   80b24:	7822      	ldrb	r2, [r4, #0]
   80b26:	2a30      	cmp	r2, #48	; 0x30
   80b28:	d105      	bne.n	80b36 <print+0xe2>
				pad |= PAD_ZERO;
   80b2a:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80b2e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80b32:	2a30      	cmp	r2, #48	; 0x30
   80b34:	d0f9      	beq.n	80b2a <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80b36:	7821      	ldrb	r1, [r4, #0]
   80b38:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80b3c:	b2d2      	uxtb	r2, r2
   80b3e:	2a09      	cmp	r2, #9
   80b40:	d899      	bhi.n	80a76 <print+0x22>
   80b42:	2200      	movs	r2, #0
				width *= 10;
   80b44:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80b48:	3930      	subs	r1, #48	; 0x30
   80b4a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80b4e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80b52:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80b56:	b2c0      	uxtb	r0, r0
   80b58:	2809      	cmp	r0, #9
   80b5a:	d9f3      	bls.n	80b44 <print+0xf0>
			if( *format == 's' ) {
   80b5c:	2973      	cmp	r1, #115	; 0x73
   80b5e:	d08c      	beq.n	80a7a <print+0x26>
			if( *format == 'd' ) {
   80b60:	2964      	cmp	r1, #100	; 0x64
   80b62:	d094      	beq.n	80a8e <print+0x3a>
			if( *format == 'x' ) {
   80b64:	2978      	cmp	r1, #120	; 0x78
   80b66:	d09e      	beq.n	80aa6 <print+0x52>
			if( *format == 'X' ) {
   80b68:	2958      	cmp	r1, #88	; 0x58
   80b6a:	d0a8      	beq.n	80abe <print+0x6a>
			if( *format == 'u' ) {
   80b6c:	2975      	cmp	r1, #117	; 0x75
   80b6e:	d0b2      	beq.n	80ad6 <print+0x82>
			if( *format == 'c' ) {
   80b70:	2963      	cmp	r1, #99	; 0x63
   80b72:	d1c2      	bne.n	80afa <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80b74:	6839      	ldr	r1, [r7, #0]
   80b76:	3704      	adds	r7, #4
   80b78:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80b7c:	2100      	movs	r1, #0
   80b7e:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80b82:	a905      	add	r1, sp, #20
   80b84:	4640      	mov	r0, r8
   80b86:	47d0      	blx	sl
   80b88:	4405      	add	r5, r0
				continue;
   80b8a:	e7b6      	b.n	80afa <print+0xa6>
	register int pc = 0;
   80b8c:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80b8e:	f1b8 0f00 	cmp.w	r8, #0
   80b92:	d003      	beq.n	80b9c <print+0x148>
   80b94:	f8d8 3000 	ldr.w	r3, [r8]
   80b98:	2200      	movs	r2, #0
   80b9a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80b9c:	4628      	mov	r0, r5
   80b9e:	b007      	add	sp, #28
   80ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ba4:	00080d19 	.word	0x00080d19
   80ba8:	000814f4 	.word	0x000814f4
   80bac:	000808ed 	.word	0x000808ed
   80bb0:	00080999 	.word	0x00080999

00080bb4 <printf>:

int printf(const char *format, ...)
{
   80bb4:	b40f      	push	{r0, r1, r2, r3}
   80bb6:	b500      	push	{lr}
   80bb8:	b083      	sub	sp, #12
   80bba:	aa04      	add	r2, sp, #16
   80bbc:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80bc0:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80bc2:	2000      	movs	r0, #0
   80bc4:	4b03      	ldr	r3, [pc, #12]	; (80bd4 <printf+0x20>)
   80bc6:	4798      	blx	r3
}
   80bc8:	b003      	add	sp, #12
   80bca:	f85d eb04 	ldr.w	lr, [sp], #4
   80bce:	b004      	add	sp, #16
   80bd0:	4770      	bx	lr
   80bd2:	bf00      	nop
   80bd4:	00080a55 	.word	0x00080a55

00080bd8 <pwm_init>:
#define LEFT 1.0
#define CENTER 1.5
#define RIGHT 2.0

void pwm_init(void){
	PIOC -> PIO_PDR |= PIO_PDR_P18;		//enable peripheral control of the pin
   80bd8:	4b11      	ldr	r3, [pc, #68]	; (80c20 <pwm_init+0x48>)
   80bda:	685a      	ldr	r2, [r3, #4]
   80bdc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80be0:	605a      	str	r2, [r3, #4]
	PIOC -> PIO_ABSR |= PIO_ABSR_P18;	//set it to peripheral B mode
   80be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80be4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80be8:	671a      	str	r2, [r3, #112]	; 0x70
	//need to clear WPEN bit in PMC Write Protect Register (we are assuming it defaults to 0)
	//PIOC -> PMC_PCER0 = PIO_PC18;
	PIOC->PIO_WPMR = PASSWD_PIO_PWM;	//disable write protection
   80bea:	4a0e      	ldr	r2, [pc, #56]	; (80c24 <pwm_init+0x4c>)
   80bec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER1 |= (1 << 4);		//enable PWM clock
   80bf0:	4a0d      	ldr	r2, [pc, #52]	; (80c28 <pwm_init+0x50>)
   80bf2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80bf6:	f043 0310 	orr.w	r3, r3, #16
   80bfa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	//REG_PMC_PCER0 = 0x00002000;
	REG_PWM_CMR6 = 0xC;
   80bfe:	220c      	movs	r2, #12
   80c00:	4b0a      	ldr	r3, [pc, #40]	; (80c2c <pwm_init+0x54>)
   80c02:	601a      	str	r2, [r3, #0]
	PWM->PWM_CLK = 0x00540000;
   80c04:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
   80c08:	f44f 02a8 	mov.w	r2, #5505024	; 0x540000
   80c0c:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD6 = 20000;//0x00004E20;
   80c0e:	f644 6120 	movw	r1, #20000	; 0x4e20
   80c12:	4a07      	ldr	r2, [pc, #28]	; (80c30 <pwm_init+0x58>)
   80c14:	6011      	str	r1, [r2, #0]
	//REG_PWM_CDTY6 = dty;
	//REG_PWM_CDTY6 = 10000;
	//REG_PWM_CDTY6 = 10000;//0x00002710; //need to vary this with joystick
	//REG_PWM_ENA = 0x00000040;

	PWM->PWM_ENA |= PWM_ENA_CHID6; // enable PWM channel 6
   80c16:	685a      	ldr	r2, [r3, #4]
   80c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80c1c:	605a      	str	r2, [r3, #4]
   80c1e:	4770      	bx	lr
   80c20:	400e1200 	.word	0x400e1200
   80c24:	50494f00 	.word	0x50494f00
   80c28:	400e0600 	.word	0x400e0600
   80c2c:	400942c0 	.word	0x400942c0
   80c30:	400942cc 	.word	0x400942cc

00080c34 <set_duty_cycle>:
		printf("ERROR! Invalid position");
	}
	//if the joystick is in the center, set the duty cycle to 1.5
}

void set_duty_cycle(int dty){
   80c34:	b508      	push	{r3, lr}
	//calculates what value to set the REG_PWM_CDTY6 register to and then sets it to that value
	//the range of the CDTY6 must be between 18000 (2 ms duty cycle) and 19000 (1 ms duty cycle)
	//printf("cycle: %d\n\r", dutyCycle);
	//int dty = 20000 - 1000*dutyCycle;
	//printf("duty cycle: %d\n\r", dty);
	if((MAX_DUTY_CYCLE <= dty) && (dty <= MIN_DUTY_CYCLE)){
   80c36:	f5a0 438c 	sub.w	r3, r0, #17920	; 0x4600
   80c3a:	3b50      	subs	r3, #80	; 0x50
   80c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   80c40:	d802      	bhi.n	80c48 <set_duty_cycle+0x14>
		REG_PWM_CDTY6 = dty;
   80c42:	4b03      	ldr	r3, [pc, #12]	; (80c50 <set_duty_cycle+0x1c>)
   80c44:	6018      	str	r0, [r3, #0]
   80c46:	bd08      	pop	{r3, pc}
	}
	else{
		printf("ERROR! Duty cycle out of range. Must be between 1 and 2\n\r");
   80c48:	4802      	ldr	r0, [pc, #8]	; (80c54 <set_duty_cycle+0x20>)
   80c4a:	4b03      	ldr	r3, [pc, #12]	; (80c58 <set_duty_cycle+0x24>)
   80c4c:	4798      	blx	r3
   80c4e:	bd08      	pop	{r3, pc}
   80c50:	400942c4 	.word	0x400942c4
   80c54:	000814fc 	.word	0x000814fc
   80c58:	00080bb5 	.word	0x00080bb5

00080c5c <move_to>:
void move_to(char pos){
   80c5c:	b508      	push	{r3, lr}
	if ((int)pos < LEFT_CUTOFF){
   80c5e:	2845      	cmp	r0, #69	; 0x45
   80c60:	d90a      	bls.n	80c78 <move_to+0x1c>
	else if ((LEFT_CUTOFF < (int)pos) && ( (int)pos < RIGHT_CUTOFF)){
   80c62:	f1a0 0347 	sub.w	r3, r0, #71	; 0x47
   80c66:	b2db      	uxtb	r3, r3
   80c68:	2b3a      	cmp	r3, #58	; 0x3a
   80c6a:	d90a      	bls.n	80c82 <move_to+0x26>
	else if (RIGHT_CUTOFF < (int)pos) {
   80c6c:	2882      	cmp	r0, #130	; 0x82
   80c6e:	d80d      	bhi.n	80c8c <move_to+0x30>
		printf("ERROR! Invalid position");
   80c70:	4809      	ldr	r0, [pc, #36]	; (80c98 <move_to+0x3c>)
   80c72:	4b0a      	ldr	r3, [pc, #40]	; (80c9c <move_to+0x40>)
   80c74:	4798      	blx	r3
   80c76:	bd08      	pop	{r3, pc}
		set_duty_cycle(dty);
   80c78:	f244 6050 	movw	r0, #18000	; 0x4650
   80c7c:	4b08      	ldr	r3, [pc, #32]	; (80ca0 <move_to+0x44>)
   80c7e:	4798      	blx	r3
   80c80:	bd08      	pop	{r3, pc}
		set_duty_cycle(dty);
   80c82:	f644 0044 	movw	r0, #18500	; 0x4844
   80c86:	4b06      	ldr	r3, [pc, #24]	; (80ca0 <move_to+0x44>)
   80c88:	4798      	blx	r3
   80c8a:	bd08      	pop	{r3, pc}
		set_duty_cycle(dty);
   80c8c:	f644 2038 	movw	r0, #19000	; 0x4a38
   80c90:	4b03      	ldr	r3, [pc, #12]	; (80ca0 <move_to+0x44>)
   80c92:	4798      	blx	r3
   80c94:	bd08      	pop	{r3, pc}
   80c96:	bf00      	nop
   80c98:	00081538 	.word	0x00081538
   80c9c:	00080bb5 	.word	0x00080bb5
   80ca0:	00080c35 	.word	0x00080c35

00080ca4 <move_servo>:
void move_servo(int joystick_position){
   80ca4:	b508      	push	{r3, lr}
	move_to(joystick_position);
   80ca6:	4b01      	ldr	r3, [pc, #4]	; (80cac <move_servo+0x8>)
   80ca8:	4798      	blx	r3
   80caa:	bd08      	pop	{r3, pc}
   80cac:	00080c5d 	.word	0x00080c5d

00080cb0 <configure_uart>:
	uint32_t ul_sr;

	/*
	Initialize UART ring buffer as empty
	*/
	rx_buffer.head=0;
   80cb0:	4b16      	ldr	r3, [pc, #88]	; (80d0c <configure_uart+0x5c>)
   80cb2:	2200      	movs	r2, #0
   80cb4:	701a      	strb	r2, [r3, #0]
	rx_buffer.tail=0;
   80cb6:	705a      	strb	r2, [r3, #1]
	/*
	Initialize UART communication
	*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80cb8:	4b15      	ldr	r3, [pc, #84]	; (80d10 <configure_uart+0x60>)
   80cba:	f44f 7140 	mov.w	r1, #768	; 0x300
   80cbe:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80cc0:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80cc4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80cc6:	4002      	ands	r2, r0
   80cc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80ccc:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80cce:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
   80cd4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80cd8:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80cda:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80cde:	21ac      	movs	r1, #172	; 0xac
   80ce0:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80ce2:	f240 2123 	movw	r1, #547	; 0x223
   80ce6:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80cec:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80cee:	f240 2102 	movw	r1, #514	; 0x202
   80cf2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80cf6:	f04f 31ff 	mov.w	r1, #4294967295
   80cfa:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80cfc:	21e1      	movs	r1, #225	; 0xe1
   80cfe:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80d00:	4904      	ldr	r1, [pc, #16]	; (80d14 <configure_uart+0x64>)
   80d02:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80d04:	2250      	movs	r2, #80	; 0x50
   80d06:	601a      	str	r2, [r3, #0]
   80d08:	4770      	bx	lr
   80d0a:	bf00      	nop
   80d0c:	20000478 	.word	0x20000478
   80d10:	400e0e00 	.word	0x400e0e00
   80d14:	e000e100 	.word	0xe000e100

00080d18 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80d18:	4b07      	ldr	r3, [pc, #28]	; (80d38 <uart_putchar+0x20>)
   80d1a:	695b      	ldr	r3, [r3, #20]
   80d1c:	f013 0f02 	tst.w	r3, #2
   80d20:	d008      	beq.n	80d34 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80d22:	4b05      	ldr	r3, [pc, #20]	; (80d38 <uart_putchar+0x20>)
   80d24:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80d26:	461a      	mov	r2, r3
   80d28:	6953      	ldr	r3, [r2, #20]
   80d2a:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d2e:	d0fb      	beq.n	80d28 <uart_putchar+0x10>
	return 0;
   80d30:	2000      	movs	r0, #0
   80d32:	4770      	bx	lr
	return 1;
   80d34:	2001      	movs	r0, #1
}
   80d36:	4770      	bx	lr
   80d38:	400e0800 	.word	0x400e0800

00080d3c <UART_Handler>:

void UART_Handler(void)
{
   80d3c:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80d3e:	4b15      	ldr	r3, [pc, #84]	; (80d94 <UART_Handler+0x58>)
   80d40:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80d42:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80d46:	d003      	beq.n	80d50 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80d48:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80d4c:	4a11      	ldr	r2, [pc, #68]	; (80d94 <UART_Handler+0x58>)
   80d4e:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80d50:	f013 0f01 	tst.w	r3, #1
   80d54:	d012      	beq.n	80d7c <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80d56:	4810      	ldr	r0, [pc, #64]	; (80d98 <UART_Handler+0x5c>)
   80d58:	7842      	ldrb	r2, [r0, #1]
   80d5a:	1c53      	adds	r3, r2, #1
   80d5c:	4259      	negs	r1, r3
   80d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80d62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80d66:	bf58      	it	pl
   80d68:	424b      	negpl	r3, r1
   80d6a:	7801      	ldrb	r1, [r0, #0]
   80d6c:	428b      	cmp	r3, r1
   80d6e:	d006      	beq.n	80d7e <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80d70:	4908      	ldr	r1, [pc, #32]	; (80d94 <UART_Handler+0x58>)
   80d72:	6988      	ldr	r0, [r1, #24]
   80d74:	4908      	ldr	r1, [pc, #32]	; (80d98 <UART_Handler+0x5c>)
   80d76:	440a      	add	r2, r1
   80d78:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80d7a:	704b      	strb	r3, [r1, #1]
   80d7c:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80d7e:	4807      	ldr	r0, [pc, #28]	; (80d9c <UART_Handler+0x60>)
   80d80:	4b07      	ldr	r3, [pc, #28]	; (80da0 <UART_Handler+0x64>)
   80d82:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80d84:	4b03      	ldr	r3, [pc, #12]	; (80d94 <UART_Handler+0x58>)
   80d86:	699a      	ldr	r2, [r3, #24]
   80d88:	4b03      	ldr	r3, [pc, #12]	; (80d98 <UART_Handler+0x5c>)
   80d8a:	7859      	ldrb	r1, [r3, #1]
   80d8c:	440b      	add	r3, r1
   80d8e:	709a      	strb	r2, [r3, #2]
			return;
   80d90:	bd08      	pop	{r3, pc}
   80d92:	bf00      	nop
   80d94:	400e0800 	.word	0x400e0800
   80d98:	20000478 	.word	0x20000478
   80d9c:	00081550 	.word	0x00081550
   80da0:	00080bb5 	.word	0x00080bb5

00080da4 <__aeabi_frsub>:
   80da4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   80da8:	e002      	b.n	80db0 <__addsf3>
   80daa:	bf00      	nop

00080dac <__aeabi_fsub>:
   80dac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00080db0 <__addsf3>:
   80db0:	0042      	lsls	r2, r0, #1
   80db2:	bf1f      	itttt	ne
   80db4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   80db8:	ea92 0f03 	teqne	r2, r3
   80dbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   80dc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80dc4:	d06a      	beq.n	80e9c <__addsf3+0xec>
   80dc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   80dca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   80dce:	bfc1      	itttt	gt
   80dd0:	18d2      	addgt	r2, r2, r3
   80dd2:	4041      	eorgt	r1, r0
   80dd4:	4048      	eorgt	r0, r1
   80dd6:	4041      	eorgt	r1, r0
   80dd8:	bfb8      	it	lt
   80dda:	425b      	neglt	r3, r3
   80ddc:	2b19      	cmp	r3, #25
   80dde:	bf88      	it	hi
   80de0:	4770      	bxhi	lr
   80de2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   80de6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80dea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80dee:	bf18      	it	ne
   80df0:	4240      	negne	r0, r0
   80df2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80df6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   80dfa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   80dfe:	bf18      	it	ne
   80e00:	4249      	negne	r1, r1
   80e02:	ea92 0f03 	teq	r2, r3
   80e06:	d03f      	beq.n	80e88 <__addsf3+0xd8>
   80e08:	f1a2 0201 	sub.w	r2, r2, #1
   80e0c:	fa41 fc03 	asr.w	ip, r1, r3
   80e10:	eb10 000c 	adds.w	r0, r0, ip
   80e14:	f1c3 0320 	rsb	r3, r3, #32
   80e18:	fa01 f103 	lsl.w	r1, r1, r3
   80e1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80e20:	d502      	bpl.n	80e28 <__addsf3+0x78>
   80e22:	4249      	negs	r1, r1
   80e24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   80e28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   80e2c:	d313      	bcc.n	80e56 <__addsf3+0xa6>
   80e2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80e32:	d306      	bcc.n	80e42 <__addsf3+0x92>
   80e34:	0840      	lsrs	r0, r0, #1
   80e36:	ea4f 0131 	mov.w	r1, r1, rrx
   80e3a:	f102 0201 	add.w	r2, r2, #1
   80e3e:	2afe      	cmp	r2, #254	; 0xfe
   80e40:	d251      	bcs.n	80ee6 <__addsf3+0x136>
   80e42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   80e46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80e4a:	bf08      	it	eq
   80e4c:	f020 0001 	biceq.w	r0, r0, #1
   80e50:	ea40 0003 	orr.w	r0, r0, r3
   80e54:	4770      	bx	lr
   80e56:	0049      	lsls	r1, r1, #1
   80e58:	eb40 0000 	adc.w	r0, r0, r0
   80e5c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   80e60:	f1a2 0201 	sub.w	r2, r2, #1
   80e64:	d1ed      	bne.n	80e42 <__addsf3+0x92>
   80e66:	fab0 fc80 	clz	ip, r0
   80e6a:	f1ac 0c08 	sub.w	ip, ip, #8
   80e6e:	ebb2 020c 	subs.w	r2, r2, ip
   80e72:	fa00 f00c 	lsl.w	r0, r0, ip
   80e76:	bfaa      	itet	ge
   80e78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   80e7c:	4252      	neglt	r2, r2
   80e7e:	4318      	orrge	r0, r3
   80e80:	bfbc      	itt	lt
   80e82:	40d0      	lsrlt	r0, r2
   80e84:	4318      	orrlt	r0, r3
   80e86:	4770      	bx	lr
   80e88:	f092 0f00 	teq	r2, #0
   80e8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   80e90:	bf06      	itte	eq
   80e92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   80e96:	3201      	addeq	r2, #1
   80e98:	3b01      	subne	r3, #1
   80e9a:	e7b5      	b.n	80e08 <__addsf3+0x58>
   80e9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80ea0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   80ea4:	bf18      	it	ne
   80ea6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80eaa:	d021      	beq.n	80ef0 <__addsf3+0x140>
   80eac:	ea92 0f03 	teq	r2, r3
   80eb0:	d004      	beq.n	80ebc <__addsf3+0x10c>
   80eb2:	f092 0f00 	teq	r2, #0
   80eb6:	bf08      	it	eq
   80eb8:	4608      	moveq	r0, r1
   80eba:	4770      	bx	lr
   80ebc:	ea90 0f01 	teq	r0, r1
   80ec0:	bf1c      	itt	ne
   80ec2:	2000      	movne	r0, #0
   80ec4:	4770      	bxne	lr
   80ec6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   80eca:	d104      	bne.n	80ed6 <__addsf3+0x126>
   80ecc:	0040      	lsls	r0, r0, #1
   80ece:	bf28      	it	cs
   80ed0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   80ed4:	4770      	bx	lr
   80ed6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   80eda:	bf3c      	itt	cc
   80edc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   80ee0:	4770      	bxcc	lr
   80ee2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80ee6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   80eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80eee:	4770      	bx	lr
   80ef0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   80ef4:	bf16      	itet	ne
   80ef6:	4608      	movne	r0, r1
   80ef8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   80efc:	4601      	movne	r1, r0
   80efe:	0242      	lsls	r2, r0, #9
   80f00:	bf06      	itte	eq
   80f02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   80f06:	ea90 0f01 	teqeq	r0, r1
   80f0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   80f0e:	4770      	bx	lr

00080f10 <__aeabi_ui2f>:
   80f10:	f04f 0300 	mov.w	r3, #0
   80f14:	e004      	b.n	80f20 <__aeabi_i2f+0x8>
   80f16:	bf00      	nop

00080f18 <__aeabi_i2f>:
   80f18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   80f1c:	bf48      	it	mi
   80f1e:	4240      	negmi	r0, r0
   80f20:	ea5f 0c00 	movs.w	ip, r0
   80f24:	bf08      	it	eq
   80f26:	4770      	bxeq	lr
   80f28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   80f2c:	4601      	mov	r1, r0
   80f2e:	f04f 0000 	mov.w	r0, #0
   80f32:	e01c      	b.n	80f6e <__aeabi_l2f+0x2a>

00080f34 <__aeabi_ul2f>:
   80f34:	ea50 0201 	orrs.w	r2, r0, r1
   80f38:	bf08      	it	eq
   80f3a:	4770      	bxeq	lr
   80f3c:	f04f 0300 	mov.w	r3, #0
   80f40:	e00a      	b.n	80f58 <__aeabi_l2f+0x14>
   80f42:	bf00      	nop

00080f44 <__aeabi_l2f>:
   80f44:	ea50 0201 	orrs.w	r2, r0, r1
   80f48:	bf08      	it	eq
   80f4a:	4770      	bxeq	lr
   80f4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   80f50:	d502      	bpl.n	80f58 <__aeabi_l2f+0x14>
   80f52:	4240      	negs	r0, r0
   80f54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80f58:	ea5f 0c01 	movs.w	ip, r1
   80f5c:	bf02      	ittt	eq
   80f5e:	4684      	moveq	ip, r0
   80f60:	4601      	moveq	r1, r0
   80f62:	2000      	moveq	r0, #0
   80f64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   80f68:	bf08      	it	eq
   80f6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   80f6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   80f72:	fabc f28c 	clz	r2, ip
   80f76:	3a08      	subs	r2, #8
   80f78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   80f7c:	db10      	blt.n	80fa0 <__aeabi_l2f+0x5c>
   80f7e:	fa01 fc02 	lsl.w	ip, r1, r2
   80f82:	4463      	add	r3, ip
   80f84:	fa00 fc02 	lsl.w	ip, r0, r2
   80f88:	f1c2 0220 	rsb	r2, r2, #32
   80f8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f90:	fa20 f202 	lsr.w	r2, r0, r2
   80f94:	eb43 0002 	adc.w	r0, r3, r2
   80f98:	bf08      	it	eq
   80f9a:	f020 0001 	biceq.w	r0, r0, #1
   80f9e:	4770      	bx	lr
   80fa0:	f102 0220 	add.w	r2, r2, #32
   80fa4:	fa01 fc02 	lsl.w	ip, r1, r2
   80fa8:	f1c2 0220 	rsb	r2, r2, #32
   80fac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   80fb0:	fa21 f202 	lsr.w	r2, r1, r2
   80fb4:	eb43 0002 	adc.w	r0, r3, r2
   80fb8:	bf08      	it	eq
   80fba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   80fbe:	4770      	bx	lr

00080fc0 <__aeabi_fmul>:
   80fc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80fc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   80fc8:	bf1e      	ittt	ne
   80fca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   80fce:	ea92 0f0c 	teqne	r2, ip
   80fd2:	ea93 0f0c 	teqne	r3, ip
   80fd6:	d06f      	beq.n	810b8 <__aeabi_fmul+0xf8>
   80fd8:	441a      	add	r2, r3
   80fda:	ea80 0c01 	eor.w	ip, r0, r1
   80fde:	0240      	lsls	r0, r0, #9
   80fe0:	bf18      	it	ne
   80fe2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   80fe6:	d01e      	beq.n	81026 <__aeabi_fmul+0x66>
   80fe8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80fec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   80ff0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   80ff4:	fba0 3101 	umull	r3, r1, r0, r1
   80ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   80ffc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81000:	bf3e      	ittt	cc
   81002:	0049      	lslcc	r1, r1, #1
   81004:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   81008:	005b      	lslcc	r3, r3, #1
   8100a:	ea40 0001 	orr.w	r0, r0, r1
   8100e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   81012:	2afd      	cmp	r2, #253	; 0xfd
   81014:	d81d      	bhi.n	81052 <__aeabi_fmul+0x92>
   81016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   8101a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8101e:	bf08      	it	eq
   81020:	f020 0001 	biceq.w	r0, r0, #1
   81024:	4770      	bx	lr
   81026:	f090 0f00 	teq	r0, #0
   8102a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8102e:	bf08      	it	eq
   81030:	0249      	lsleq	r1, r1, #9
   81032:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81036:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8103a:	3a7f      	subs	r2, #127	; 0x7f
   8103c:	bfc2      	ittt	gt
   8103e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81042:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81046:	4770      	bxgt	lr
   81048:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8104c:	f04f 0300 	mov.w	r3, #0
   81050:	3a01      	subs	r2, #1
   81052:	dc5d      	bgt.n	81110 <__aeabi_fmul+0x150>
   81054:	f112 0f19 	cmn.w	r2, #25
   81058:	bfdc      	itt	le
   8105a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8105e:	4770      	bxle	lr
   81060:	f1c2 0200 	rsb	r2, r2, #0
   81064:	0041      	lsls	r1, r0, #1
   81066:	fa21 f102 	lsr.w	r1, r1, r2
   8106a:	f1c2 0220 	rsb	r2, r2, #32
   8106e:	fa00 fc02 	lsl.w	ip, r0, r2
   81072:	ea5f 0031 	movs.w	r0, r1, rrx
   81076:	f140 0000 	adc.w	r0, r0, #0
   8107a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8107e:	bf08      	it	eq
   81080:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81084:	4770      	bx	lr
   81086:	f092 0f00 	teq	r2, #0
   8108a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8108e:	bf02      	ittt	eq
   81090:	0040      	lsleq	r0, r0, #1
   81092:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81096:	3a01      	subeq	r2, #1
   81098:	d0f9      	beq.n	8108e <__aeabi_fmul+0xce>
   8109a:	ea40 000c 	orr.w	r0, r0, ip
   8109e:	f093 0f00 	teq	r3, #0
   810a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   810a6:	bf02      	ittt	eq
   810a8:	0049      	lsleq	r1, r1, #1
   810aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   810ae:	3b01      	subeq	r3, #1
   810b0:	d0f9      	beq.n	810a6 <__aeabi_fmul+0xe6>
   810b2:	ea41 010c 	orr.w	r1, r1, ip
   810b6:	e78f      	b.n	80fd8 <__aeabi_fmul+0x18>
   810b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   810bc:	ea92 0f0c 	teq	r2, ip
   810c0:	bf18      	it	ne
   810c2:	ea93 0f0c 	teqne	r3, ip
   810c6:	d00a      	beq.n	810de <__aeabi_fmul+0x11e>
   810c8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   810cc:	bf18      	it	ne
   810ce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   810d2:	d1d8      	bne.n	81086 <__aeabi_fmul+0xc6>
   810d4:	ea80 0001 	eor.w	r0, r0, r1
   810d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   810dc:	4770      	bx	lr
   810de:	f090 0f00 	teq	r0, #0
   810e2:	bf17      	itett	ne
   810e4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   810e8:	4608      	moveq	r0, r1
   810ea:	f091 0f00 	teqne	r1, #0
   810ee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   810f2:	d014      	beq.n	8111e <__aeabi_fmul+0x15e>
   810f4:	ea92 0f0c 	teq	r2, ip
   810f8:	d101      	bne.n	810fe <__aeabi_fmul+0x13e>
   810fa:	0242      	lsls	r2, r0, #9
   810fc:	d10f      	bne.n	8111e <__aeabi_fmul+0x15e>
   810fe:	ea93 0f0c 	teq	r3, ip
   81102:	d103      	bne.n	8110c <__aeabi_fmul+0x14c>
   81104:	024b      	lsls	r3, r1, #9
   81106:	bf18      	it	ne
   81108:	4608      	movne	r0, r1
   8110a:	d108      	bne.n	8111e <__aeabi_fmul+0x15e>
   8110c:	ea80 0001 	eor.w	r0, r0, r1
   81110:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8111c:	4770      	bx	lr
   8111e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81122:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81126:	4770      	bx	lr

00081128 <__aeabi_fdiv>:
   81128:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8112c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81130:	bf1e      	ittt	ne
   81132:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81136:	ea92 0f0c 	teqne	r2, ip
   8113a:	ea93 0f0c 	teqne	r3, ip
   8113e:	d069      	beq.n	81214 <__aeabi_fdiv+0xec>
   81140:	eba2 0203 	sub.w	r2, r2, r3
   81144:	ea80 0c01 	eor.w	ip, r0, r1
   81148:	0249      	lsls	r1, r1, #9
   8114a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8114e:	d037      	beq.n	811c0 <__aeabi_fdiv+0x98>
   81150:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81154:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81158:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   8115c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81160:	428b      	cmp	r3, r1
   81162:	bf38      	it	cc
   81164:	005b      	lslcc	r3, r3, #1
   81166:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8116a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8116e:	428b      	cmp	r3, r1
   81170:	bf24      	itt	cs
   81172:	1a5b      	subcs	r3, r3, r1
   81174:	ea40 000c 	orrcs.w	r0, r0, ip
   81178:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   8117c:	bf24      	itt	cs
   8117e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81182:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81186:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8118a:	bf24      	itt	cs
   8118c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81190:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81194:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81198:	bf24      	itt	cs
   8119a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8119e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   811a2:	011b      	lsls	r3, r3, #4
   811a4:	bf18      	it	ne
   811a6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   811aa:	d1e0      	bne.n	8116e <__aeabi_fdiv+0x46>
   811ac:	2afd      	cmp	r2, #253	; 0xfd
   811ae:	f63f af50 	bhi.w	81052 <__aeabi_fmul+0x92>
   811b2:	428b      	cmp	r3, r1
   811b4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   811b8:	bf08      	it	eq
   811ba:	f020 0001 	biceq.w	r0, r0, #1
   811be:	4770      	bx	lr
   811c0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   811c4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   811c8:	327f      	adds	r2, #127	; 0x7f
   811ca:	bfc2      	ittt	gt
   811cc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   811d0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   811d4:	4770      	bxgt	lr
   811d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   811da:	f04f 0300 	mov.w	r3, #0
   811de:	3a01      	subs	r2, #1
   811e0:	e737      	b.n	81052 <__aeabi_fmul+0x92>
   811e2:	f092 0f00 	teq	r2, #0
   811e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   811ea:	bf02      	ittt	eq
   811ec:	0040      	lsleq	r0, r0, #1
   811ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   811f2:	3a01      	subeq	r2, #1
   811f4:	d0f9      	beq.n	811ea <__aeabi_fdiv+0xc2>
   811f6:	ea40 000c 	orr.w	r0, r0, ip
   811fa:	f093 0f00 	teq	r3, #0
   811fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81202:	bf02      	ittt	eq
   81204:	0049      	lsleq	r1, r1, #1
   81206:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8120a:	3b01      	subeq	r3, #1
   8120c:	d0f9      	beq.n	81202 <__aeabi_fdiv+0xda>
   8120e:	ea41 010c 	orr.w	r1, r1, ip
   81212:	e795      	b.n	81140 <__aeabi_fdiv+0x18>
   81214:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81218:	ea92 0f0c 	teq	r2, ip
   8121c:	d108      	bne.n	81230 <__aeabi_fdiv+0x108>
   8121e:	0242      	lsls	r2, r0, #9
   81220:	f47f af7d 	bne.w	8111e <__aeabi_fmul+0x15e>
   81224:	ea93 0f0c 	teq	r3, ip
   81228:	f47f af70 	bne.w	8110c <__aeabi_fmul+0x14c>
   8122c:	4608      	mov	r0, r1
   8122e:	e776      	b.n	8111e <__aeabi_fmul+0x15e>
   81230:	ea93 0f0c 	teq	r3, ip
   81234:	d104      	bne.n	81240 <__aeabi_fdiv+0x118>
   81236:	024b      	lsls	r3, r1, #9
   81238:	f43f af4c 	beq.w	810d4 <__aeabi_fmul+0x114>
   8123c:	4608      	mov	r0, r1
   8123e:	e76e      	b.n	8111e <__aeabi_fmul+0x15e>
   81240:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81244:	bf18      	it	ne
   81246:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8124a:	d1ca      	bne.n	811e2 <__aeabi_fdiv+0xba>
   8124c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81250:	f47f af5c 	bne.w	8110c <__aeabi_fmul+0x14c>
   81254:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81258:	f47f af3c 	bne.w	810d4 <__aeabi_fmul+0x114>
   8125c:	e75f      	b.n	8111e <__aeabi_fmul+0x15e>
   8125e:	bf00      	nop

00081260 <__aeabi_f2iz>:
   81260:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81264:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81268:	d30f      	bcc.n	8128a <__aeabi_f2iz+0x2a>
   8126a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   8126e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81272:	d90d      	bls.n	81290 <__aeabi_f2iz+0x30>
   81274:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8127c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81280:	fa23 f002 	lsr.w	r0, r3, r2
   81284:	bf18      	it	ne
   81286:	4240      	negne	r0, r0
   81288:	4770      	bx	lr
   8128a:	f04f 0000 	mov.w	r0, #0
   8128e:	4770      	bx	lr
   81290:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81294:	d101      	bne.n	8129a <__aeabi_f2iz+0x3a>
   81296:	0242      	lsls	r2, r0, #9
   81298:	d105      	bne.n	812a6 <__aeabi_f2iz+0x46>
   8129a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   8129e:	bf08      	it	eq
   812a0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   812a4:	4770      	bx	lr
   812a6:	f04f 0000 	mov.w	r0, #0
   812aa:	4770      	bx	lr

000812ac <__libc_init_array>:
   812ac:	b570      	push	{r4, r5, r6, lr}
   812ae:	4e0f      	ldr	r6, [pc, #60]	; (812ec <__libc_init_array+0x40>)
   812b0:	4d0f      	ldr	r5, [pc, #60]	; (812f0 <__libc_init_array+0x44>)
   812b2:	1b76      	subs	r6, r6, r5
   812b4:	10b6      	asrs	r6, r6, #2
   812b6:	bf18      	it	ne
   812b8:	2400      	movne	r4, #0
   812ba:	d005      	beq.n	812c8 <__libc_init_array+0x1c>
   812bc:	3401      	adds	r4, #1
   812be:	f855 3b04 	ldr.w	r3, [r5], #4
   812c2:	4798      	blx	r3
   812c4:	42a6      	cmp	r6, r4
   812c6:	d1f9      	bne.n	812bc <__libc_init_array+0x10>
   812c8:	4e0a      	ldr	r6, [pc, #40]	; (812f4 <__libc_init_array+0x48>)
   812ca:	4d0b      	ldr	r5, [pc, #44]	; (812f8 <__libc_init_array+0x4c>)
   812cc:	f000 f952 	bl	81574 <_init>
   812d0:	1b76      	subs	r6, r6, r5
   812d2:	10b6      	asrs	r6, r6, #2
   812d4:	bf18      	it	ne
   812d6:	2400      	movne	r4, #0
   812d8:	d006      	beq.n	812e8 <__libc_init_array+0x3c>
   812da:	3401      	adds	r4, #1
   812dc:	f855 3b04 	ldr.w	r3, [r5], #4
   812e0:	4798      	blx	r3
   812e2:	42a6      	cmp	r6, r4
   812e4:	d1f9      	bne.n	812da <__libc_init_array+0x2e>
   812e6:	bd70      	pop	{r4, r5, r6, pc}
   812e8:	bd70      	pop	{r4, r5, r6, pc}
   812ea:	bf00      	nop
   812ec:	00081580 	.word	0x00081580
   812f0:	00081580 	.word	0x00081580
   812f4:	00081588 	.word	0x00081588
   812f8:	00081580 	.word	0x00081580

000812fc <register_fini>:
   812fc:	4b02      	ldr	r3, [pc, #8]	; (81308 <register_fini+0xc>)
   812fe:	b113      	cbz	r3, 81306 <register_fini+0xa>
   81300:	4802      	ldr	r0, [pc, #8]	; (8130c <register_fini+0x10>)
   81302:	f000 b805 	b.w	81310 <atexit>
   81306:	4770      	bx	lr
   81308:	00000000 	.word	0x00000000
   8130c:	0008131d 	.word	0x0008131d

00081310 <atexit>:
   81310:	2300      	movs	r3, #0
   81312:	4601      	mov	r1, r0
   81314:	461a      	mov	r2, r3
   81316:	4618      	mov	r0, r3
   81318:	f000 b81e 	b.w	81358 <__register_exitproc>

0008131c <__libc_fini_array>:
   8131c:	b538      	push	{r3, r4, r5, lr}
   8131e:	4c0a      	ldr	r4, [pc, #40]	; (81348 <__libc_fini_array+0x2c>)
   81320:	4d0a      	ldr	r5, [pc, #40]	; (8134c <__libc_fini_array+0x30>)
   81322:	1b64      	subs	r4, r4, r5
   81324:	10a4      	asrs	r4, r4, #2
   81326:	d00a      	beq.n	8133e <__libc_fini_array+0x22>
   81328:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8132c:	3b01      	subs	r3, #1
   8132e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81332:	3c01      	subs	r4, #1
   81334:	f855 3904 	ldr.w	r3, [r5], #-4
   81338:	4798      	blx	r3
   8133a:	2c00      	cmp	r4, #0
   8133c:	d1f9      	bne.n	81332 <__libc_fini_array+0x16>
   8133e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81342:	f000 b921 	b.w	81588 <_fini>
   81346:	bf00      	nop
   81348:	00081598 	.word	0x00081598
   8134c:	00081594 	.word	0x00081594

00081350 <__retarget_lock_acquire_recursive>:
   81350:	4770      	bx	lr
   81352:	bf00      	nop

00081354 <__retarget_lock_release_recursive>:
   81354:	4770      	bx	lr
   81356:	bf00      	nop

00081358 <__register_exitproc>:
   81358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8135c:	4d2c      	ldr	r5, [pc, #176]	; (81410 <__register_exitproc+0xb8>)
   8135e:	4606      	mov	r6, r0
   81360:	6828      	ldr	r0, [r5, #0]
   81362:	4698      	mov	r8, r3
   81364:	460f      	mov	r7, r1
   81366:	4691      	mov	r9, r2
   81368:	f7ff fff2 	bl	81350 <__retarget_lock_acquire_recursive>
   8136c:	4b29      	ldr	r3, [pc, #164]	; (81414 <__register_exitproc+0xbc>)
   8136e:	681c      	ldr	r4, [r3, #0]
   81370:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81374:	2b00      	cmp	r3, #0
   81376:	d03e      	beq.n	813f6 <__register_exitproc+0x9e>
   81378:	685a      	ldr	r2, [r3, #4]
   8137a:	2a1f      	cmp	r2, #31
   8137c:	dc1c      	bgt.n	813b8 <__register_exitproc+0x60>
   8137e:	f102 0e01 	add.w	lr, r2, #1
   81382:	b176      	cbz	r6, 813a2 <__register_exitproc+0x4a>
   81384:	2101      	movs	r1, #1
   81386:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8138a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8138e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81392:	4091      	lsls	r1, r2
   81394:	4308      	orrs	r0, r1
   81396:	2e02      	cmp	r6, #2
   81398:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8139c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   813a0:	d023      	beq.n	813ea <__register_exitproc+0x92>
   813a2:	3202      	adds	r2, #2
   813a4:	f8c3 e004 	str.w	lr, [r3, #4]
   813a8:	6828      	ldr	r0, [r5, #0]
   813aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   813ae:	f7ff ffd1 	bl	81354 <__retarget_lock_release_recursive>
   813b2:	2000      	movs	r0, #0
   813b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   813b8:	4b17      	ldr	r3, [pc, #92]	; (81418 <__register_exitproc+0xc0>)
   813ba:	b30b      	cbz	r3, 81400 <__register_exitproc+0xa8>
   813bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   813c0:	f3af 8000 	nop.w
   813c4:	4603      	mov	r3, r0
   813c6:	b1d8      	cbz	r0, 81400 <__register_exitproc+0xa8>
   813c8:	2000      	movs	r0, #0
   813ca:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   813ce:	f04f 0e01 	mov.w	lr, #1
   813d2:	6058      	str	r0, [r3, #4]
   813d4:	6019      	str	r1, [r3, #0]
   813d6:	4602      	mov	r2, r0
   813d8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   813dc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   813e0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   813e4:	2e00      	cmp	r6, #0
   813e6:	d0dc      	beq.n	813a2 <__register_exitproc+0x4a>
   813e8:	e7cc      	b.n	81384 <__register_exitproc+0x2c>
   813ea:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   813ee:	4301      	orrs	r1, r0
   813f0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   813f4:	e7d5      	b.n	813a2 <__register_exitproc+0x4a>
   813f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   813fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   813fe:	e7bb      	b.n	81378 <__register_exitproc+0x20>
   81400:	6828      	ldr	r0, [r5, #0]
   81402:	f7ff ffa7 	bl	81354 <__retarget_lock_release_recursive>
   81406:	f04f 30ff 	mov.w	r0, #4294967295
   8140a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8140e:	bf00      	nop
   81410:	20000430 	.word	0x20000430
   81414:	00081570 	.word	0x00081570
   81418:	00000000 	.word	0x00000000
   8141c:	304e4143 	.word	0x304e4143
   81420:	73656d20 	.word	0x73656d20
   81424:	65676173 	.word	0x65676173
   81428:	72726120 	.word	0x72726120
   8142c:	64657669 	.word	0x64657669
   81430:	206e6920 	.word	0x206e6920
   81434:	2d6e6f6e 	.word	0x2d6e6f6e
   81438:	64657375 	.word	0x64657375
   8143c:	69616d20 	.word	0x69616d20
   81440:	786f626c 	.word	0x786f626c
   81444:	00000d0a 	.word	0x00000d0a
   81448:	2077656e 	.word	0x2077656e
   8144c:	7373656d 	.word	0x7373656d
   81450:	3a656761 	.word	0x3a656761
   81454:	000d0a20 	.word	0x000d0a20
   81458:	7373656d 	.word	0x7373656d
   8145c:	20656761 	.word	0x20656761
   81460:	203a6469 	.word	0x203a6469
   81464:	0d0a6425 	.word	0x0d0a6425
   81468:	00000000 	.word	0x00000000
   8146c:	7373656d 	.word	0x7373656d
   81470:	20656761 	.word	0x20656761
   81474:	61746164 	.word	0x61746164
   81478:	6e656c20 	.word	0x6e656c20
   8147c:	3a687467 	.word	0x3a687467
   81480:	0a642520 	.word	0x0a642520
   81484:	73656d0d 	.word	0x73656d0d
   81488:	65676173 	.word	0x65676173
   8148c:	74616420 	.word	0x74616420
   81490:	00203a61 	.word	0x00203a61
   81494:	00206425 	.word	0x00206425
   81498:	000d0a0a 	.word	0x000d0a0a
   8149c:	74747562 	.word	0x74747562
   814a0:	70206e6f 	.word	0x70206e6f
   814a4:	73736572 	.word	0x73736572
   814a8:	0d0a6465 	.word	0x0d0a6465
   814ac:	00000000 	.word	0x00000000
   814b0:	746e6563 	.word	0x746e6563
   814b4:	203a7265 	.word	0x203a7265
   814b8:	202c6425 	.word	0x202c6425
   814bc:	2077656e 	.word	0x2077656e
   814c0:	61746164 	.word	0x61746164
   814c4:	6425203a 	.word	0x6425203a
   814c8:	00000d0a 	.word	0x00000d0a
   814cc:	746e6563 	.word	0x746e6563
   814d0:	48207265 	.word	0x48207265
   814d4:	6425203a 	.word	0x6425203a
   814d8:	00000d0a 	.word	0x00000d0a
   814dc:	746e6563 	.word	0x746e6563
   814e0:	56207265 	.word	0x56207265
   814e4:	6425203a 	.word	0x6425203a
   814e8:	00000d0a 	.word	0x00000d0a
   814ec:	65726568 	.word	0x65726568
   814f0:	000d0a20 	.word	0x000d0a20
   814f4:	6c756e28 	.word	0x6c756e28
   814f8:	0000296c 	.word	0x0000296c
   814fc:	4f525245 	.word	0x4f525245
   81500:	44202152 	.word	0x44202152
   81504:	20797475 	.word	0x20797475
   81508:	6c637963 	.word	0x6c637963
   8150c:	756f2065 	.word	0x756f2065
   81510:	666f2074 	.word	0x666f2074
   81514:	6e617220 	.word	0x6e617220
   81518:	202e6567 	.word	0x202e6567
   8151c:	7473754d 	.word	0x7473754d
   81520:	20656220 	.word	0x20656220
   81524:	77746562 	.word	0x77746562
   81528:	206e6565 	.word	0x206e6565
   8152c:	6e612031 	.word	0x6e612031
   81530:	0a322064 	.word	0x0a322064
   81534:	0000000d 	.word	0x0000000d
   81538:	4f525245 	.word	0x4f525245
   8153c:	49202152 	.word	0x49202152
   81540:	6c61766e 	.word	0x6c61766e
   81544:	70206469 	.word	0x70206469
   81548:	7469736f 	.word	0x7469736f
   8154c:	006e6f69 	.word	0x006e6f69
   81550:	3a525245 	.word	0x3a525245
   81554:	52415520 	.word	0x52415520
   81558:	58522054 	.word	0x58522054
   8155c:	66756220 	.word	0x66756220
   81560:	20726566 	.word	0x20726566
   81564:	66207369 	.word	0x66207369
   81568:	0a6c6c75 	.word	0x0a6c6c75
   8156c:	0000000d 	.word	0x0000000d

00081570 <_global_impure_ptr>:
   81570:	20000008                                ... 

00081574 <_init>:
   81574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81576:	bf00      	nop
   81578:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8157a:	bc08      	pop	{r3}
   8157c:	469e      	mov	lr, r3
   8157e:	4770      	bx	lr

00081580 <__init_array_start>:
   81580:	000812fd 	.word	0x000812fd

00081584 <__frame_dummy_init_array_entry>:
   81584:	00080119                                ....

00081588 <_fini>:
   81588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8158a:	bf00      	nop
   8158c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8158e:	bc08      	pop	{r3}
   81590:	469e      	mov	lr, r3
   81592:	4770      	bx	lr

00081594 <__fini_array_start>:
   81594:	000800f5 	.word	0x000800f5
