
G3_ES_Project_Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f5c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081f5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  20000434  00082390  00020434  2**2
                  ALLOC
  3 .stack        00000400  20000510  0008246c  00020434  2**0
                  ALLOC
  4 .heap         00000200  20000910  0008286c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008143  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001816  00000000  00000000  000285f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001884  00000000  00000000  00029e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002b0  00000000  00000000  0002b693  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0002b943  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001239a  00000000  00000000  0002bb53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000553f  00000000  00000000  0003deed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055022  00000000  00000000  0004342c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000090c  00000000  00000000  00098450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	10 09 00 20 d9 04 08 00 d5 04 08 00 d5 04 08 00     ... ............
   80010:	d5 04 08 00 d5 04 08 00 d5 04 08 00 00 00 00 00     ................
	...
   8002c:	d5 04 08 00 d5 04 08 00 00 00 00 00 d5 04 08 00     ................
   8003c:	d5 04 08 00 d5 04 08 00 d5 04 08 00 d5 04 08 00     ................
   8004c:	d5 04 08 00 d5 04 08 00 d5 04 08 00 d5 04 08 00     ................
   8005c:	d5 04 08 00 01 0f 08 00 d5 04 08 00 00 00 00 00     ................
   8006c:	d5 04 08 00 d5 04 08 00 d5 04 08 00 d5 04 08 00     ................
	...
   80084:	d5 04 08 00 d5 04 08 00 d5 04 08 00 d5 04 08 00     ................
   80094:	d5 04 08 00 d5 04 08 00 d5 04 08 00 d5 04 08 00     ................
   800a4:	00 00 00 00 d5 04 08 00 d5 04 08 00 d5 04 08 00     ................
   800b4:	d5 04 08 00 d5 04 08 00 d5 04 08 00 d5 04 08 00     ................
   800c4:	d5 04 08 00 d5 04 08 00 d5 04 08 00 d5 04 08 00     ................
   800d4:	d5 04 08 00 d5 04 08 00 d5 04 08 00 d5 04 08 00     ................
   800e4:	d5 04 08 00 d5 04 08 00 e5 02 08 00 d5 04 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081f5c 	.word	0x00081f5c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081f5c 	.word	0x00081f5c
   80154:	20000438 	.word	0x20000438
   80158:	00081f5c 	.word	0x00081f5c
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
   8017e:	6913      	ldr	r3, [r2, #16]
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
   80194:	665c      	str	r4, [r3, #100]	; 0x64
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   801ac:	6150      	str	r0, [r2, #20]
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
   801b6:	46a1      	mov	r9, r4
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
   80238:	2001      	movs	r0, #1
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_init_def_tx_rx_mb>:
   80250:	b508      	push	{r3, lr}
   80252:	2202      	movs	r2, #2
   80254:	2101      	movs	r1, #1
   80256:	4b01      	ldr	r3, [pc, #4]	; (8025c <can_init_def_tx_rx_mb+0xc>)
   80258:	4798      	blx	r3
   8025a:	bd08      	pop	{r3, pc}
   8025c:	00080161 	.word	0x00080161

00080260 <can_receive>:
   80260:	014b      	lsls	r3, r1, #5
   80262:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80266:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8026a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80272:	d033      	beq.n	802dc <can_receive+0x7c>
   80274:	b430      	push	{r4, r5}
   80276:	014b      	lsls	r3, r1, #5
   80278:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80280:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   80284:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   80288:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8028c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80290:	8005      	strh	r5, [r0, #0]
   80292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80296:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8029a:	7083      	strb	r3, [r0, #2]
   8029c:	461d      	mov	r5, r3
   8029e:	b15b      	cbz	r3, 802b8 <can_receive+0x58>
   802a0:	3003      	adds	r0, #3
   802a2:	2300      	movs	r3, #0
   802a4:	2b03      	cmp	r3, #3
   802a6:	bfd9      	ittee	le
   802a8:	7002      	strble	r2, [r0, #0]
   802aa:	0a12      	lsrle	r2, r2, #8
   802ac:	7004      	strbgt	r4, [r0, #0]
   802ae:	0a24      	lsrgt	r4, r4, #8
   802b0:	3301      	adds	r3, #1
   802b2:	3001      	adds	r0, #1
   802b4:	42ab      	cmp	r3, r5
   802b6:	d1f5      	bne.n	802a4 <can_receive+0x44>
   802b8:	4b09      	ldr	r3, [pc, #36]	; (802e0 <can_receive+0x80>)
   802ba:	f101 0210 	add.w	r2, r1, #16
   802be:	0152      	lsls	r2, r2, #5
   802c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802c4:	5098      	str	r0, [r3, r2]
   802c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802d2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   802d6:	2000      	movs	r0, #0
   802d8:	bc30      	pop	{r4, r5}
   802da:	4770      	bx	lr
   802dc:	2001      	movs	r0, #1
   802de:	4770      	bx	lr
   802e0:	400b4000 	.word	0x400b4000

000802e4 <CAN0_Handler>:
   802e4:	b510      	push	{r4, lr}
   802e6:	4b18      	ldr	r3, [pc, #96]	; (80348 <CAN0_Handler+0x64>)
   802e8:	691c      	ldr	r4, [r3, #16]
   802ea:	f014 0f06 	tst.w	r4, #6
   802ee:	d013      	beq.n	80318 <CAN0_Handler+0x34>
   802f0:	f014 0f02 	tst.w	r4, #2
   802f4:	d11c      	bne.n	80330 <CAN0_Handler+0x4c>
   802f6:	f014 0f04 	tst.w	r4, #4
   802fa:	d021      	beq.n	80340 <CAN0_Handler+0x5c>
   802fc:	2102      	movs	r1, #2
   802fe:	4813      	ldr	r0, [pc, #76]	; (8034c <CAN0_Handler+0x68>)
   80300:	4b13      	ldr	r3, [pc, #76]	; (80350 <CAN0_Handler+0x6c>)
   80302:	4798      	blx	r3
   80304:	2201      	movs	r2, #1
   80306:	4b13      	ldr	r3, [pc, #76]	; (80354 <CAN0_Handler+0x70>)
   80308:	601a      	str	r2, [r3, #0]
   8030a:	4b10      	ldr	r3, [pc, #64]	; (8034c <CAN0_Handler+0x68>)
   8030c:	789a      	ldrb	r2, [r3, #2]
   8030e:	b11a      	cbz	r2, 80318 <CAN0_Handler+0x34>
   80310:	2300      	movs	r3, #0
   80312:	3301      	adds	r3, #1
   80314:	4293      	cmp	r3, r2
   80316:	d1fc      	bne.n	80312 <CAN0_Handler+0x2e>
   80318:	f014 0f01 	tst.w	r4, #1
   8031c:	d002      	beq.n	80324 <CAN0_Handler+0x40>
   8031e:	2201      	movs	r2, #1
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <CAN0_Handler+0x64>)
   80322:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80324:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80328:	4b0b      	ldr	r3, [pc, #44]	; (80358 <CAN0_Handler+0x74>)
   8032a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8032e:	bd10      	pop	{r4, pc}
   80330:	2101      	movs	r1, #1
   80332:	4806      	ldr	r0, [pc, #24]	; (8034c <CAN0_Handler+0x68>)
   80334:	4b06      	ldr	r3, [pc, #24]	; (80350 <CAN0_Handler+0x6c>)
   80336:	4798      	blx	r3
   80338:	2201      	movs	r2, #1
   8033a:	4b06      	ldr	r3, [pc, #24]	; (80354 <CAN0_Handler+0x70>)
   8033c:	601a      	str	r2, [r3, #0]
   8033e:	e7e4      	b.n	8030a <CAN0_Handler+0x26>
   80340:	4806      	ldr	r0, [pc, #24]	; (8035c <CAN0_Handler+0x78>)
   80342:	4b07      	ldr	r3, [pc, #28]	; (80360 <CAN0_Handler+0x7c>)
   80344:	4798      	blx	r3
   80346:	e7e0      	b.n	8030a <CAN0_Handler+0x26>
   80348:	400b4000 	.word	0x400b4000
   8034c:	20000458 	.word	0x20000458
   80350:	00080261 	.word	0x00080261
   80354:	20000450 	.word	0x20000450
   80358:	e000e100 	.word	0xe000e100
   8035c:	00081dc4 	.word	0x00081dc4
   80360:	00080d71 	.word	0x00080d71

00080364 <new_message_received>:
   80364:	4b01      	ldr	r3, [pc, #4]	; (8036c <new_message_received+0x8>)
   80366:	6818      	ldr	r0, [r3, #0]
   80368:	4770      	bx	lr
   8036a:	bf00      	nop
   8036c:	20000450 	.word	0x20000450

00080370 <get_message>:
   80370:	b410      	push	{r4}
   80372:	2100      	movs	r1, #0
   80374:	4a05      	ldr	r2, [pc, #20]	; (8038c <get_message+0x1c>)
   80376:	6011      	str	r1, [r2, #0]
   80378:	4a05      	ldr	r2, [pc, #20]	; (80390 <get_message+0x20>)
   8037a:	6814      	ldr	r4, [r2, #0]
   8037c:	6851      	ldr	r1, [r2, #4]
   8037e:	6892      	ldr	r2, [r2, #8]
   80380:	6004      	str	r4, [r0, #0]
   80382:	6041      	str	r1, [r0, #4]
   80384:	6082      	str	r2, [r0, #8]
   80386:	bc10      	pop	{r4}
   80388:	4770      	bx	lr
   8038a:	bf00      	nop
   8038c:	20000450 	.word	0x20000450
   80390:	20000458 	.word	0x20000458

00080394 <start_game>:
   80394:	b5f0      	push	{r4, r5, r6, r7, lr}
   80396:	b085      	sub	sp, #20
   80398:	2700      	movs	r7, #0
   8039a:	4d17      	ldr	r5, [pc, #92]	; (803f8 <start_game+0x64>)
   8039c:	4e17      	ldr	r6, [pc, #92]	; (803fc <start_game+0x68>)
   8039e:	4c18      	ldr	r4, [pc, #96]	; (80400 <start_game+0x6c>)
   803a0:	e001      	b.n	803a6 <start_game+0x12>
   803a2:	47b0      	blx	r6
   803a4:	b9c8      	cbnz	r0, 803da <start_game+0x46>
   803a6:	682b      	ldr	r3, [r5, #0]
   803a8:	2b00      	cmp	r3, #0
   803aa:	d0fa      	beq.n	803a2 <start_game+0xe>
   803ac:	4b15      	ldr	r3, [pc, #84]	; (80404 <start_game+0x70>)
   803ae:	681b      	ldr	r3, [r3, #0]
   803b0:	2b00      	cmp	r3, #0
   803b2:	d1f6      	bne.n	803a2 <start_game+0xe>
   803b4:	4b14      	ldr	r3, [pc, #80]	; (80408 <start_game+0x74>)
   803b6:	4798      	blx	r3
   803b8:	4639      	mov	r1, r7
   803ba:	4b14      	ldr	r3, [pc, #80]	; (8040c <start_game+0x78>)
   803bc:	4798      	blx	r3
   803be:	4607      	mov	r7, r0
   803c0:	4668      	mov	r0, sp
   803c2:	4b13      	ldr	r3, [pc, #76]	; (80410 <start_game+0x7c>)
   803c4:	4798      	blx	r3
   803c6:	9900      	ldr	r1, [sp, #0]
   803c8:	9a01      	ldr	r2, [sp, #4]
   803ca:	9b02      	ldr	r3, [sp, #8]
   803cc:	6021      	str	r1, [r4, #0]
   803ce:	6062      	str	r2, [r4, #4]
   803d0:	60a3      	str	r3, [r4, #8]
   803d2:	4810      	ldr	r0, [pc, #64]	; (80414 <start_game+0x80>)
   803d4:	4b10      	ldr	r3, [pc, #64]	; (80418 <start_game+0x84>)
   803d6:	4798      	blx	r3
   803d8:	e7e5      	b.n	803a6 <start_game+0x12>
   803da:	4668      	mov	r0, sp
   803dc:	4b0f      	ldr	r3, [pc, #60]	; (8041c <start_game+0x88>)
   803de:	4798      	blx	r3
   803e0:	9900      	ldr	r1, [sp, #0]
   803e2:	9a01      	ldr	r2, [sp, #4]
   803e4:	9b02      	ldr	r3, [sp, #8]
   803e6:	6021      	str	r1, [r4, #0]
   803e8:	6062      	str	r2, [r4, #4]
   803ea:	60a3      	str	r3, [r4, #8]
   803ec:	7963      	ldrb	r3, [r4, #5]
   803ee:	2b00      	cmp	r3, #0
   803f0:	d1d9      	bne.n	803a6 <start_game+0x12>
   803f2:	2301      	movs	r3, #1
   803f4:	602b      	str	r3, [r5, #0]
   803f6:	e7d6      	b.n	803a6 <start_game+0x12>
   803f8:	20000000 	.word	0x20000000
   803fc:	00080365 	.word	0x00080365
   80400:	20000464 	.word	0x20000464
   80404:	20000454 	.word	0x20000454
   80408:	00080639 	.word	0x00080639
   8040c:	00080645 	.word	0x00080645
   80410:	00080701 	.word	0x00080701
   80414:	000186a0 	.word	0x000186a0
   80418:	00080489 	.word	0x00080489
   8041c:	00080371 	.word	0x00080371

00080420 <game_over>:
   80420:	b508      	push	{r3, lr}
   80422:	2200      	movs	r2, #0
   80424:	4b04      	ldr	r3, [pc, #16]	; (80438 <game_over+0x18>)
   80426:	601a      	str	r2, [r3, #0]
   80428:	2201      	movs	r2, #1
   8042a:	4b04      	ldr	r3, [pc, #16]	; (8043c <game_over+0x1c>)
   8042c:	601a      	str	r2, [r3, #0]
   8042e:	4804      	ldr	r0, [pc, #16]	; (80440 <game_over+0x20>)
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <game_over+0x24>)
   80432:	4798      	blx	r3
   80434:	bd08      	pop	{r3, pc}
   80436:	bf00      	nop
   80438:	20000000 	.word	0x20000000
   8043c:	20000454 	.word	0x20000454
   80440:	00081e44 	.word	0x00081e44
   80444:	00080d71 	.word	0x00080d71

00080448 <pause_game>:
   80448:	b508      	push	{r3, lr}
   8044a:	2200      	movs	r2, #0
   8044c:	4b03      	ldr	r3, [pc, #12]	; (8045c <pause_game+0x14>)
   8044e:	601a      	str	r2, [r3, #0]
   80450:	2804      	cmp	r0, #4
   80452:	dc00      	bgt.n	80456 <pause_game+0xe>
   80454:	bd08      	pop	{r3, pc}
   80456:	4b02      	ldr	r3, [pc, #8]	; (80460 <pause_game+0x18>)
   80458:	4798      	blx	r3
   8045a:	e7fb      	b.n	80454 <pause_game+0xc>
   8045c:	20000000 	.word	0x20000000
   80460:	00080421 	.word	0x00080421

00080464 <delay_ticks>:


/* Function for performing delay by using SysTick */
void delay_ticks(int ticks)
{
	SysTick->LOAD = ticks;
   80464:	4b06      	ldr	r3, [pc, #24]	; (80480 <delay_ticks+0x1c>)
   80466:	6058      	str	r0, [r3, #4]
	SysTick->CTRL = 1;
   80468:	2201      	movs	r2, #1
   8046a:	601a      	str	r2, [r3, #0]
	
	// COUNTFLAG is a bit that is set to 1 when counter reaches 0.
	// It's automatically cleared when read.
	while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
   8046c:	461a      	mov	r2, r3
   8046e:	6813      	ldr	r3, [r2, #0]
   80470:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80474:	d0fb      	beq.n	8046e <delay_ticks+0xa>
	SysTick->CTRL = 0;
   80476:	2200      	movs	r2, #0
   80478:	4b01      	ldr	r3, [pc, #4]	; (80480 <delay_ticks+0x1c>)
   8047a:	601a      	str	r2, [r3, #0]
   8047c:	4770      	bx	lr
   8047e:	bf00      	nop
   80480:	e000e010 	.word	0xe000e010
   80484:	00000000 	.word	0x00000000

00080488 <delay_us>:

}

/* Function for implementing us delay */
void delay_us(int us)
{
   80488:	b510      	push	{r4, lr}
	delay_ticks((us * (F_CPU / 8.4)) / 1000000);
   8048a:	4b0d      	ldr	r3, [pc, #52]	; (804c0 <delay_us+0x38>)
   8048c:	4798      	blx	r3
   8048e:	a308      	add	r3, pc, #32	; (adr r3, 804b0 <delay_us+0x28>)
   80490:	e9d3 2300 	ldrd	r2, r3, [r3]
   80494:	4c0b      	ldr	r4, [pc, #44]	; (804c4 <delay_us+0x3c>)
   80496:	47a0      	blx	r4
   80498:	a307      	add	r3, pc, #28	; (adr r3, 804b8 <delay_us+0x30>)
   8049a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8049e:	4c0a      	ldr	r4, [pc, #40]	; (804c8 <delay_us+0x40>)
   804a0:	47a0      	blx	r4
   804a2:	4b0a      	ldr	r3, [pc, #40]	; (804cc <delay_us+0x44>)
   804a4:	4798      	blx	r3
   804a6:	4b0a      	ldr	r3, [pc, #40]	; (804d0 <delay_us+0x48>)
   804a8:	4798      	blx	r3
   804aa:	bd10      	pop	{r4, pc}
   804ac:	f3af 8000 	nop.w
   804b0:	00000000 	.word	0x00000000
   804b4:	416312d0 	.word	0x416312d0
   804b8:	00000000 	.word	0x00000000
   804bc:	412e8480 	.word	0x412e8480
   804c0:	0008120d 	.word	0x0008120d
   804c4:	000812d9 	.word	0x000812d9
   804c8:	0008152d 	.word	0x0008152d
   804cc:	000816fd 	.word	0x000816fd
   804d0:	00080465 	.word	0x00080465

000804d4 <Dummy_Handler>:
   804d4:	e7fe      	b.n	804d4 <Dummy_Handler>
	...

000804d8 <Reset_Handler>:
   804d8:	b508      	push	{r3, lr}
   804da:	4b18      	ldr	r3, [pc, #96]	; (8053c <Reset_Handler+0x64>)
   804dc:	4a18      	ldr	r2, [pc, #96]	; (80540 <Reset_Handler+0x68>)
   804de:	429a      	cmp	r2, r3
   804e0:	d010      	beq.n	80504 <Reset_Handler+0x2c>
   804e2:	4b18      	ldr	r3, [pc, #96]	; (80544 <Reset_Handler+0x6c>)
   804e4:	4a15      	ldr	r2, [pc, #84]	; (8053c <Reset_Handler+0x64>)
   804e6:	429a      	cmp	r2, r3
   804e8:	d20c      	bcs.n	80504 <Reset_Handler+0x2c>
   804ea:	3b01      	subs	r3, #1
   804ec:	1a9b      	subs	r3, r3, r2
   804ee:	f023 0303 	bic.w	r3, r3, #3
   804f2:	3304      	adds	r3, #4
   804f4:	4413      	add	r3, r2
   804f6:	4912      	ldr	r1, [pc, #72]	; (80540 <Reset_Handler+0x68>)
   804f8:	f851 0b04 	ldr.w	r0, [r1], #4
   804fc:	f842 0b04 	str.w	r0, [r2], #4
   80500:	429a      	cmp	r2, r3
   80502:	d1f9      	bne.n	804f8 <Reset_Handler+0x20>
   80504:	4b10      	ldr	r3, [pc, #64]	; (80548 <Reset_Handler+0x70>)
   80506:	4a11      	ldr	r2, [pc, #68]	; (8054c <Reset_Handler+0x74>)
   80508:	429a      	cmp	r2, r3
   8050a:	d20a      	bcs.n	80522 <Reset_Handler+0x4a>
   8050c:	3b01      	subs	r3, #1
   8050e:	1a9b      	subs	r3, r3, r2
   80510:	f023 0303 	bic.w	r3, r3, #3
   80514:	3304      	adds	r3, #4
   80516:	4413      	add	r3, r2
   80518:	2100      	movs	r1, #0
   8051a:	f842 1b04 	str.w	r1, [r2], #4
   8051e:	4293      	cmp	r3, r2
   80520:	d1fb      	bne.n	8051a <Reset_Handler+0x42>
   80522:	4b0b      	ldr	r3, [pc, #44]	; (80550 <Reset_Handler+0x78>)
   80524:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80528:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8052c:	4a09      	ldr	r2, [pc, #36]	; (80554 <Reset_Handler+0x7c>)
   8052e:	6093      	str	r3, [r2, #8]
   80530:	4b09      	ldr	r3, [pc, #36]	; (80558 <Reset_Handler+0x80>)
   80532:	4798      	blx	r3
   80534:	4b09      	ldr	r3, [pc, #36]	; (8055c <Reset_Handler+0x84>)
   80536:	4798      	blx	r3
   80538:	e7fe      	b.n	80538 <Reset_Handler+0x60>
   8053a:	bf00      	nop
   8053c:	20000000 	.word	0x20000000
   80540:	00081f5c 	.word	0x00081f5c
   80544:	20000434 	.word	0x20000434
   80548:	20000510 	.word	0x20000510
   8054c:	20000434 	.word	0x20000434
   80550:	00080000 	.word	0x00080000
   80554:	e000ed00 	.word	0xe000ed00
   80558:	00081c55 	.word	0x00081c55
   8055c:	00080791 	.word	0x00080791

00080560 <SystemInit>:
   80560:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80564:	4a20      	ldr	r2, [pc, #128]	; (805e8 <SystemInit+0x88>)
   80566:	6013      	str	r3, [r2, #0]
   80568:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8056c:	6013      	str	r3, [r2, #0]
   8056e:	4b1f      	ldr	r3, [pc, #124]	; (805ec <SystemInit+0x8c>)
   80570:	6a1b      	ldr	r3, [r3, #32]
   80572:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80576:	d107      	bne.n	80588 <SystemInit+0x28>
   80578:	4a1d      	ldr	r2, [pc, #116]	; (805f0 <SystemInit+0x90>)
   8057a:	4b1c      	ldr	r3, [pc, #112]	; (805ec <SystemInit+0x8c>)
   8057c:	621a      	str	r2, [r3, #32]
   8057e:	461a      	mov	r2, r3
   80580:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80582:	f013 0f01 	tst.w	r3, #1
   80586:	d0fb      	beq.n	80580 <SystemInit+0x20>
   80588:	4a1a      	ldr	r2, [pc, #104]	; (805f4 <SystemInit+0x94>)
   8058a:	4b18      	ldr	r3, [pc, #96]	; (805ec <SystemInit+0x8c>)
   8058c:	621a      	str	r2, [r3, #32]
   8058e:	461a      	mov	r2, r3
   80590:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80592:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80596:	d0fb      	beq.n	80590 <SystemInit+0x30>
   80598:	4a14      	ldr	r2, [pc, #80]	; (805ec <SystemInit+0x8c>)
   8059a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8059c:	f023 0303 	bic.w	r3, r3, #3
   805a0:	f043 0301 	orr.w	r3, r3, #1
   805a4:	6313      	str	r3, [r2, #48]	; 0x30
   805a6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805a8:	f013 0f08 	tst.w	r3, #8
   805ac:	d0fb      	beq.n	805a6 <SystemInit+0x46>
   805ae:	4a12      	ldr	r2, [pc, #72]	; (805f8 <SystemInit+0x98>)
   805b0:	4b0e      	ldr	r3, [pc, #56]	; (805ec <SystemInit+0x8c>)
   805b2:	629a      	str	r2, [r3, #40]	; 0x28
   805b4:	461a      	mov	r2, r3
   805b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805b8:	f013 0f02 	tst.w	r3, #2
   805bc:	d0fb      	beq.n	805b6 <SystemInit+0x56>
   805be:	2211      	movs	r2, #17
   805c0:	4b0a      	ldr	r3, [pc, #40]	; (805ec <SystemInit+0x8c>)
   805c2:	631a      	str	r2, [r3, #48]	; 0x30
   805c4:	461a      	mov	r2, r3
   805c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805c8:	f013 0f08 	tst.w	r3, #8
   805cc:	d0fb      	beq.n	805c6 <SystemInit+0x66>
   805ce:	2212      	movs	r2, #18
   805d0:	4b06      	ldr	r3, [pc, #24]	; (805ec <SystemInit+0x8c>)
   805d2:	631a      	str	r2, [r3, #48]	; 0x30
   805d4:	461a      	mov	r2, r3
   805d6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805d8:	f013 0f08 	tst.w	r3, #8
   805dc:	d0fb      	beq.n	805d6 <SystemInit+0x76>
   805de:	4a07      	ldr	r2, [pc, #28]	; (805fc <SystemInit+0x9c>)
   805e0:	4b07      	ldr	r3, [pc, #28]	; (80600 <SystemInit+0xa0>)
   805e2:	601a      	str	r2, [r3, #0]
   805e4:	4770      	bx	lr
   805e6:	bf00      	nop
   805e8:	400e0a00 	.word	0x400e0a00
   805ec:	400e0600 	.word	0x400e0600
   805f0:	00370809 	.word	0x00370809
   805f4:	01370809 	.word	0x01370809
   805f8:	200d3f01 	.word	0x200d3f01
   805fc:	0501bd00 	.word	0x0501bd00
   80600:	20000004 	.word	0x20000004

00080604 <adc_init>:
   80604:	4a0a      	ldr	r2, [pc, #40]	; (80630 <adc_init+0x2c>)
   80606:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8060a:	f043 0320 	orr.w	r3, r3, #32
   8060e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   80612:	4b08      	ldr	r3, [pc, #32]	; (80634 <adc_init+0x30>)
   80614:	685a      	ldr	r2, [r3, #4]
   80616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8061a:	605a      	str	r2, [r3, #4]
   8061c:	691a      	ldr	r2, [r3, #16]
   8061e:	f042 0201 	orr.w	r2, r2, #1
   80622:	611a      	str	r2, [r3, #16]
   80624:	681a      	ldr	r2, [r3, #0]
   80626:	f042 0202 	orr.w	r2, r2, #2
   8062a:	601a      	str	r2, [r3, #0]
   8062c:	4770      	bx	lr
   8062e:	bf00      	nop
   80630:	400e0600 	.word	0x400e0600
   80634:	400c0000 	.word	0x400c0000

00080638 <adc_read>:
   80638:	4b01      	ldr	r3, [pc, #4]	; (80640 <adc_read+0x8>)
   8063a:	6d18      	ldr	r0, [r3, #80]	; 0x50
   8063c:	4770      	bx	lr
   8063e:	bf00      	nop
   80640:	400c0000 	.word	0x400c0000

00080644 <is_goal>:
   80644:	b510      	push	{r4, lr}
   80646:	460c      	mov	r4, r1
   80648:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   8064c:	db01      	blt.n	80652 <is_goal+0xe>
   8064e:	4620      	mov	r0, r4
   80650:	bd10      	pop	{r4, pc}
   80652:	3401      	adds	r4, #1
   80654:	4620      	mov	r0, r4
   80656:	4b01      	ldr	r3, [pc, #4]	; (8065c <is_goal+0x18>)
   80658:	4798      	blx	r3
   8065a:	e7f8      	b.n	8064e <is_goal+0xa>
   8065c:	00080449 	.word	0x00080449

00080660 <button_pressed>:
   80660:	4b06      	ldr	r3, [pc, #24]	; (8067c <button_pressed+0x1c>)
   80662:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80666:	601a      	str	r2, [r3, #0]
   80668:	611a      	str	r2, [r3, #16]
   8066a:	661a      	str	r2, [r3, #96]	; 0x60
   8066c:	b120      	cbz	r0, 80678 <button_pressed+0x18>
   8066e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80672:	4b02      	ldr	r3, [pc, #8]	; (8067c <button_pressed+0x1c>)
   80674:	635a      	str	r2, [r3, #52]	; 0x34
   80676:	4770      	bx	lr
   80678:	631a      	str	r2, [r3, #48]	; 0x30
   8067a:	4770      	bx	lr
   8067c:	400e1200 	.word	0x400e1200

00080680 <normalize_position>:
   80680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80682:	460c      	mov	r4, r1
   80684:	4288      	cmp	r0, r1
   80686:	dd18      	ble.n	806ba <normalize_position+0x3a>
   80688:	4e13      	ldr	r6, [pc, #76]	; (806d8 <normalize_position+0x58>)
   8068a:	47b0      	blx	r6
   8068c:	4d13      	ldr	r5, [pc, #76]	; (806dc <normalize_position+0x5c>)
   8068e:	4601      	mov	r1, r0
   80690:	4813      	ldr	r0, [pc, #76]	; (806e0 <normalize_position+0x60>)
   80692:	47a8      	blx	r5
   80694:	4607      	mov	r7, r0
   80696:	4620      	mov	r0, r4
   80698:	47b0      	blx	r6
   8069a:	4601      	mov	r1, r0
   8069c:	4810      	ldr	r0, [pc, #64]	; (806e0 <normalize_position+0x60>)
   8069e:	47a8      	blx	r5
   806a0:	4601      	mov	r1, r0
   806a2:	4638      	mov	r0, r7
   806a4:	4b0f      	ldr	r3, [pc, #60]	; (806e4 <normalize_position+0x64>)
   806a6:	4798      	blx	r3
   806a8:	490f      	ldr	r1, [pc, #60]	; (806e8 <normalize_position+0x68>)
   806aa:	4b10      	ldr	r3, [pc, #64]	; (806ec <normalize_position+0x6c>)
   806ac:	4798      	blx	r3
   806ae:	4910      	ldr	r1, [pc, #64]	; (806f0 <normalize_position+0x70>)
   806b0:	4b10      	ldr	r3, [pc, #64]	; (806f4 <normalize_position+0x74>)
   806b2:	4798      	blx	r3
   806b4:	4b10      	ldr	r3, [pc, #64]	; (806f8 <normalize_position+0x78>)
   806b6:	4798      	blx	r3
   806b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806ba:	4d07      	ldr	r5, [pc, #28]	; (806d8 <normalize_position+0x58>)
   806bc:	47a8      	blx	r5
   806be:	4606      	mov	r6, r0
   806c0:	4620      	mov	r0, r4
   806c2:	47a8      	blx	r5
   806c4:	4601      	mov	r1, r0
   806c6:	4630      	mov	r0, r6
   806c8:	4b06      	ldr	r3, [pc, #24]	; (806e4 <normalize_position+0x64>)
   806ca:	4798      	blx	r3
   806cc:	490b      	ldr	r1, [pc, #44]	; (806fc <normalize_position+0x7c>)
   806ce:	4b07      	ldr	r3, [pc, #28]	; (806ec <normalize_position+0x6c>)
   806d0:	4798      	blx	r3
   806d2:	4b09      	ldr	r3, [pc, #36]	; (806f8 <normalize_position+0x78>)
   806d4:	4798      	blx	r3
   806d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806d8:	000818c1 	.word	0x000818c1
   806dc:	00081755 	.word	0x00081755
   806e0:	437f0000 	.word	0x437f0000
   806e4:	00081ad1 	.word	0x00081ad1
   806e8:	c2c80000 	.word	0xc2c80000
   806ec:	00081969 	.word	0x00081969
   806f0:	43480000 	.word	0x43480000
   806f4:	00081759 	.word	0x00081759
   806f8:	00081c09 	.word	0x00081c09
   806fc:	42c80000 	.word	0x42c80000

00080700 <get_positions>:
   80700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80704:	b084      	sub	sp, #16
   80706:	4604      	mov	r4, r0
   80708:	4b18      	ldr	r3, [pc, #96]	; (8076c <get_positions+0x6c>)
   8070a:	4798      	blx	r3
   8070c:	b950      	cbnz	r0, 80724 <get_positions+0x24>
   8070e:	4b18      	ldr	r3, [pc, #96]	; (80770 <get_positions+0x70>)
   80710:	6819      	ldr	r1, [r3, #0]
   80712:	685a      	ldr	r2, [r3, #4]
   80714:	689b      	ldr	r3, [r3, #8]
   80716:	6021      	str	r1, [r4, #0]
   80718:	6062      	str	r2, [r4, #4]
   8071a:	60a3      	str	r3, [r4, #8]
   8071c:	4620      	mov	r0, r4
   8071e:	b004      	add	sp, #16
   80720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80724:	4d12      	ldr	r5, [pc, #72]	; (80770 <get_positions+0x70>)
   80726:	4668      	mov	r0, sp
   80728:	4b12      	ldr	r3, [pc, #72]	; (80774 <get_positions+0x74>)
   8072a:	4798      	blx	r3
   8072c:	9900      	ldr	r1, [sp, #0]
   8072e:	9a01      	ldr	r2, [sp, #4]
   80730:	9b02      	ldr	r3, [sp, #8]
   80732:	6029      	str	r1, [r5, #0]
   80734:	606a      	str	r2, [r5, #4]
   80736:	60ab      	str	r3, [r5, #8]
   80738:	79ae      	ldrb	r6, [r5, #6]
   8073a:	4b0f      	ldr	r3, [pc, #60]	; (80778 <get_positions+0x78>)
   8073c:	601e      	str	r6, [r3, #0]
   8073e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8078c <get_positions+0x8c>
   80742:	79eb      	ldrb	r3, [r5, #7]
   80744:	f8c8 3000 	str.w	r3, [r8]
   80748:	4631      	mov	r1, r6
   8074a:	78e8      	ldrb	r0, [r5, #3]
   8074c:	4f0b      	ldr	r7, [pc, #44]	; (8077c <get_positions+0x7c>)
   8074e:	47b8      	blx	r7
   80750:	4631      	mov	r1, r6
   80752:	4b0b      	ldr	r3, [pc, #44]	; (80780 <get_positions+0x80>)
   80754:	4798      	blx	r3
   80756:	f8d8 1000 	ldr.w	r1, [r8]
   8075a:	7928      	ldrb	r0, [r5, #4]
   8075c:	47b8      	blx	r7
   8075e:	4b09      	ldr	r3, [pc, #36]	; (80784 <get_positions+0x84>)
   80760:	4798      	blx	r3
   80762:	7968      	ldrb	r0, [r5, #5]
   80764:	4b08      	ldr	r3, [pc, #32]	; (80788 <get_positions+0x88>)
   80766:	4798      	blx	r3
   80768:	e7d1      	b.n	8070e <get_positions+0xe>
   8076a:	bf00      	nop
   8076c:	00080365 	.word	0x00080365
   80770:	20000464 	.word	0x20000464
   80774:	00080371 	.word	0x00080371
   80778:	20000470 	.word	0x20000470
   8077c:	00080681 	.word	0x00080681
   80780:	00080941 	.word	0x00080941
   80784:	00080e19 	.word	0x00080e19
   80788:	00080661 	.word	0x00080661
   8078c:	2000048c 	.word	0x2000048c

00080790 <main>:
#define BITTIME 1/(TQ*CANBAUD)	//13TQ => SyncSeg = 1, PropSeg = 1, PS1 = 6, PS2 = 5, SJW = 1
*/

CAN_MESSAGE message;

int main(void) {
   80790:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   80792:	4b0e      	ldr	r3, [pc, #56]	; (807cc <main+0x3c>)
   80794:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;		//disable the watchdog timer
   80796:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8079a:	4b0d      	ldr	r3, [pc, #52]	; (807d0 <main+0x40>)
   8079c:	605a      	str	r2, [r3, #4]
	configure_uart();
   8079e:	4b0d      	ldr	r3, [pc, #52]	; (807d4 <main+0x44>)
   807a0:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561);
   807a2:	480d      	ldr	r0, [pc, #52]	; (807d8 <main+0x48>)
   807a4:	4b0d      	ldr	r3, [pc, #52]	; (807dc <main+0x4c>)
   807a6:	4798      	blx	r3
	motorbox_init();
   807a8:	4b0d      	ldr	r3, [pc, #52]	; (807e0 <main+0x50>)
   807aa:	4798      	blx	r3
	dac_init();
   807ac:	4b0d      	ldr	r3, [pc, #52]	; (807e4 <main+0x54>)
   807ae:	4798      	blx	r3
	pwm_init();
   807b0:	4b0d      	ldr	r3, [pc, #52]	; (807e8 <main+0x58>)
   807b2:	4798      	blx	r3
	adc_init();
   807b4:	4b0d      	ldr	r3, [pc, #52]	; (807ec <main+0x5c>)
   807b6:	4798      	blx	r3
	pid_Init();
   807b8:	4b0d      	ldr	r3, [pc, #52]	; (807f0 <main+0x60>)
   807ba:	4798      	blx	r3
	float a = 1.5;
	delay_us(1000000);
   807bc:	480d      	ldr	r0, [pc, #52]	; (807f4 <main+0x64>)
   807be:	4b0e      	ldr	r3, [pc, #56]	; (807f8 <main+0x68>)
   807c0:	4798      	blx	r3
	start_game();
   807c2:	4b0e      	ldr	r3, [pc, #56]	; (807fc <main+0x6c>)
   807c4:	4798      	blx	r3
		//uint16_t data = receive_data();
		//printf("data: %d\n\r", data);
		//delay_us(1000000000);
	}
	return 0;*/
}
   807c6:	2000      	movs	r0, #0
   807c8:	bd08      	pop	{r3, pc}
   807ca:	bf00      	nop
   807cc:	00080561 	.word	0x00080561
   807d0:	400e1a50 	.word	0x400e1a50
   807d4:	00080e75 	.word	0x00080e75
   807d8:	00290561 	.word	0x00290561
   807dc:	00080251 	.word	0x00080251
   807e0:	00080831 	.word	0x00080831
   807e4:	00080801 	.word	0x00080801
   807e8:	00080d95 	.word	0x00080d95
   807ec:	00080605 	.word	0x00080605
   807f0:	000809ed 	.word	0x000809ed
   807f4:	000f4240 	.word	0x000f4240
   807f8:	00080489 	.word	0x00080489
   807fc:	00080395 	.word	0x00080395

00080800 <dac_init>:

#define LEFT_CUTOFF	50
#define RIGHT_CUTOFF 150

void dac_init(void){
	PMC->PMC_PCER1 |= PMC_PCER1_PID38; //enable clock for DACC
   80800:	4a08      	ldr	r2, [pc, #32]	; (80824 <dac_init+0x24>)
   80802:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8080a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	//REG_DACC_MR = DACC_MR_REFRESH(10) | DACC_MR_USER_SEL_CHANNEL1;
	REG_DACC_MR = DACC_MR_USER_SEL_CHANNEL1;
   8080e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80812:	4b05      	ldr	r3, [pc, #20]	; (80828 <dac_init+0x28>)
   80814:	601a      	str	r2, [r3, #0]
	REG_DACC_CHER |= DACC_CHER_CH1;
   80816:	4a05      	ldr	r2, [pc, #20]	; (8082c <dac_init+0x2c>)
   80818:	6813      	ldr	r3, [r2, #0]
   8081a:	f043 0302 	orr.w	r3, r3, #2
   8081e:	6013      	str	r3, [r2, #0]
   80820:	4770      	bx	lr
   80822:	bf00      	nop
   80824:	400e0600 	.word	0x400e0600
   80828:	400c8004 	.word	0x400c8004
   8082c:	400c8010 	.word	0x400c8010

00080830 <motorbox_init>:
	//REG_DACC_CDR //USE THIS TO SEND JOYSTICK POS
}

void motorbox_init(void){
   80830:	b538      	push	{r3, r4, r5, lr}
	PIOC -> PIO_WPMR = (0x50494F << 8);	//disables write protect
   80832:	4915      	ldr	r1, [pc, #84]	; (80888 <motorbox_init+0x58>)
   80834:	4b15      	ldr	r3, [pc, #84]	; (8088c <motorbox_init+0x5c>)
   80836:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4

	PMC->PMC_PCER0 |= (1 << ID_PIOC);//PMC_PCER0_PID13; //enable clock for 
   8083a:	4b15      	ldr	r3, [pc, #84]	; (80890 <motorbox_init+0x60>)
   8083c:	691a      	ldr	r2, [r3, #16]
   8083e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80842:	611a      	str	r2, [r3, #16]
	//PMC->PMC_PCER0 |= PMC_PCER0_PID14; //enable clock for 
	PMC->PMC_PCER0 |= (1 << ID_PIOD);
   80844:	691a      	ldr	r2, [r3, #16]
   80846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   8084a:	611a      	str	r2, [r3, #16]
	
	//!OE
	PIOD -> PIO_PER = PIO_PD0;		//enables input/output function
   8084c:	4c11      	ldr	r4, [pc, #68]	; (80894 <motorbox_init+0x64>)
   8084e:	2201      	movs	r2, #1
   80850:	6022      	str	r2, [r4, #0]
	PIOD -> PIO_OER = PIO_PD0;		//enables output
   80852:	6122      	str	r2, [r4, #16]
	//SEL
	PIOD -> PIO_PER = PIO_PD2;		//enables input/output function
   80854:	2304      	movs	r3, #4
   80856:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD2;		//enables output
   80858:	6123      	str	r3, [r4, #16]
	//DIR
	PIOD -> PIO_PER = PIO_PD10;		//enables input/output function
   8085a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8085e:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD10;		//enables output	
   80860:	6123      	str	r3, [r4, #16]
	//!RES
	PIOD -> PIO_PER = PIO_PD1;		//enables input/output function
   80862:	2502      	movs	r5, #2
   80864:	6025      	str	r5, [r4, #0]
	PIOD -> PIO_OER = PIO_PD1;		//enables output	
   80866:	6125      	str	r5, [r4, #16]
	//EN
	PIOD -> PIO_PER = PIO_PD9;		//enables input/output function
   80868:	f44f 7300 	mov.w	r3, #512	; 0x200
   8086c:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD9;		//enables output
   8086e:	6123      	str	r3, [r4, #16]

	PIOC -> PIO_IFER = (0xFF << 1);
   80870:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
   80874:	6208      	str	r0, [r1, #32]
	PIOC -> PIO_PUDR = (0xFF << 1);		//disables pull down register
   80876:	6608      	str	r0, [r1, #96]	; 0x60
	
	PIOD -> PIO_CODR = PIO_PD0;		//set !OE to low
   80878:	6362      	str	r2, [r4, #52]	; 0x34
	PIOD -> PIO_SODR = PIO_PD9;		//set EN to high
   8087a:	6323      	str	r3, [r4, #48]	; 0x30
	PIOD -> PIO_CODR = PIO_PD1;		//set !RES to low
   8087c:	6365      	str	r5, [r4, #52]	; 0x34
	delay_us(30);	
   8087e:	201e      	movs	r0, #30
   80880:	4b05      	ldr	r3, [pc, #20]	; (80898 <motorbox_init+0x68>)
   80882:	4798      	blx	r3
	PIOD -> PIO_SODR = PIO_PD1;		//set !RES to high
   80884:	6325      	str	r5, [r4, #48]	; 0x30
   80886:	bd38      	pop	{r3, r4, r5, pc}
   80888:	400e1200 	.word	0x400e1200
   8088c:	50494f00 	.word	0x50494f00
   80890:	400e0600 	.word	0x400e0600
   80894:	400e1400 	.word	0x400e1400
   80898:	00080489 	.word	0x00080489

0008089c <receive_data>:
}

int16_t receive_data(void){
   8089c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t data;
	PIOD -> PIO_CODR = PIO_PD0;		//set !OE to low
   808a0:	4d0d      	ldr	r5, [pc, #52]	; (808d8 <receive_data+0x3c>)
   808a2:	2601      	movs	r6, #1
   808a4:	636e      	str	r6, [r5, #52]	; 0x34
	PIOD -> PIO_CODR = PIO_PD2;		//set SEL to low
   808a6:	f04f 0904 	mov.w	r9, #4
   808aa:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
	delay_us(20);					//wait 20 microseconds
   808ae:	2014      	movs	r0, #20
   808b0:	f8df 802c 	ldr.w	r8, [pc, #44]	; 808e0 <receive_data+0x44>
   808b4:	47c0      	blx	r8
	data |= ((PIOC->PIO_PDSR >> 1) & 0xFF) << 8 ;	//read MSB
   808b6:	4f09      	ldr	r7, [pc, #36]	; (808dc <receive_data+0x40>)
   808b8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   808ba:	01e4      	lsls	r4, r4, #7
   808bc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	PIOD -> PIO_SODR = PIO_PD2;		//set SEL to high
   808c0:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
	delay_us(20);					//wait 20 microseconds
   808c4:	2014      	movs	r0, #20
   808c6:	47c0      	blx	r8
	data |= (PIOC->PIO_PDSR >> 1) & 0xFF ;	//read LSB
   808c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
	PIOD -> PIO_SODR = PIO_PD0;		//set !OE to high
   808ca:	632e      	str	r6, [r5, #48]	; 0x30
	data |= (PIOC->PIO_PDSR >> 1) & 0xFF ;	//read LSB
   808cc:	f3c0 0047 	ubfx	r0, r0, #1, #8
   808d0:	4320      	orrs	r0, r4
	return data; //lsb | (msb << 8);
}
   808d2:	b200      	sxth	r0, r0
   808d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   808d8:	400e1400 	.word	0x400e1400
   808dc:	400e1200 	.word	0x400e1200
   808e0:	00080489 	.word	0x00080489
   808e4:	00000000 	.word	0x00000000

000808e8 <calibrate_motor>:

int calibrate_motor(int16_t position_from_motor){
   808e8:	b510      	push	{r4, lr}
	int new_position;
	new_position = abs(((position_from_motor/40)*0.91)-200);
   808ea:	4b0f      	ldr	r3, [pc, #60]	; (80928 <calibrate_motor+0x40>)
   808ec:	fb83 2300 	smull	r2, r3, r3, r0
   808f0:	17c0      	asrs	r0, r0, #31
   808f2:	ebc0 1023 	rsb	r0, r0, r3, asr #4
   808f6:	b200      	sxth	r0, r0
   808f8:	4b0c      	ldr	r3, [pc, #48]	; (8092c <calibrate_motor+0x44>)
   808fa:	4798      	blx	r3
   808fc:	a308      	add	r3, pc, #32	; (adr r3, 80920 <calibrate_motor+0x38>)
   808fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   80902:	4c0b      	ldr	r4, [pc, #44]	; (80930 <calibrate_motor+0x48>)
   80904:	47a0      	blx	r4
   80906:	2200      	movs	r2, #0
   80908:	4b0a      	ldr	r3, [pc, #40]	; (80934 <calibrate_motor+0x4c>)
   8090a:	4c0b      	ldr	r4, [pc, #44]	; (80938 <calibrate_motor+0x50>)
   8090c:	47a0      	blx	r4
   8090e:	4b0b      	ldr	r3, [pc, #44]	; (8093c <calibrate_motor+0x54>)
   80910:	4798      	blx	r3
	//printf("upper layer motor data: %d\n\r", new_position);
	return new_position;
}
   80912:	2800      	cmp	r0, #0
   80914:	bfb8      	it	lt
   80916:	4240      	neglt	r0, r0
   80918:	bd10      	pop	{r4, pc}
   8091a:	bf00      	nop
   8091c:	f3af 8000 	nop.w
   80920:	51eb851f 	.word	0x51eb851f
   80924:	3fed1eb8 	.word	0x3fed1eb8
   80928:	66666667 	.word	0x66666667
   8092c:	0008120d 	.word	0x0008120d
   80930:	000812d9 	.word	0x000812d9
   80934:	40690000 	.word	0x40690000
   80938:	00080f71 	.word	0x00080f71
   8093c:	000816fd 	.word	0x000816fd

00080940 <move_motor>:

void move_motor(int joystick_position, int center){
   80940:	b570      	push	{r4, r5, r6, lr}
   80942:	4604      	mov	r4, r0
	printf("joy stick: %d\n\r", joystick_position);
   80944:	4601      	mov	r1, r0
   80946:	481d      	ldr	r0, [pc, #116]	; (809bc <move_motor+0x7c>)
   80948:	4d1d      	ldr	r5, [pc, #116]	; (809c0 <move_motor+0x80>)
   8094a:	47a8      	blx	r5
	//printf("center: %d\n\rpos: %d\n\r", center);

	int16_t motor_data = receive_data();
   8094c:	4b1d      	ldr	r3, [pc, #116]	; (809c4 <move_motor+0x84>)
   8094e:	4798      	blx	r3
	int calibrated_motor_data = calibrate_motor(motor_data);
   80950:	4b1d      	ldr	r3, [pc, #116]	; (809c8 <move_motor+0x88>)
   80952:	4798      	blx	r3
   80954:	4606      	mov	r6, r0
	int16_t pid_output = pid_Controller(joystick_position, calibrated_motor_data);
   80956:	b201      	sxth	r1, r0
   80958:	b220      	sxth	r0, r4
   8095a:	4b1c      	ldr	r3, [pc, #112]	; (809cc <move_motor+0x8c>)
   8095c:	4798      	blx	r3
   8095e:	4604      	mov	r4, r0
	printf("Calib Motor Data : %d\n\r", calibrated_motor_data);
   80960:	4631      	mov	r1, r6
   80962:	481b      	ldr	r0, [pc, #108]	; (809d0 <move_motor+0x90>)
   80964:	47a8      	blx	r5
	printf("PID : %d\n\r", pid_output);
   80966:	4621      	mov	r1, r4
   80968:	481a      	ldr	r0, [pc, #104]	; (809d4 <move_motor+0x94>)
   8096a:	47a8      	blx	r5
	//REG_DACC_CDR = (pid_output);

	//DACC->DACC_CDR = DACC_CDR_DATA(pid_output*85);
	//printf("DACC CDR DATA: %d \n\r", DACC_CDR_DATA(pid_output*85));
	
	DACC->DACC_CDR = (1 & 0b11) << 12 | DACC_CDR_DATA(abs(pid_output)*15);
   8096c:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
   80970:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
   80974:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   80978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   8097c:	4a16      	ldr	r2, [pc, #88]	; (809d8 <move_motor+0x98>)
   8097e:	6213      	str	r3, [r2, #32]
	//printf("DACC CDR DATA: %d \n\r", DACC_CDR_DATA(pid_output*100));
	printf("Output to register: %d \n\r", (1 & 0b11) << 12 | DACC_CDR_DATA(pid_output*10));
   80980:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   80984:	0049      	lsls	r1, r1, #1
   80986:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
   8098a:	4814      	ldr	r0, [pc, #80]	; (809dc <move_motor+0x9c>)
   8098c:	47a8      	blx	r5
	
	
	//if(joystick_position <= calibrated_motor_data){
	if(pid_output > 0){
   8098e:	2c00      	cmp	r4, #0
   80990:	dc02      	bgt.n	80998 <move_motor+0x58>
		//REG_DACC_CDR = (0xFFF -(pid_output) )  ;
		//DACC->DACC_CDR = (1 & 0b11) << 12 | DACC_CDR_DATA(pid_output*100);
		//printf("DACC CDR DATA: %d \n\r", DACC_CDR_DATA(pid_output*100));
		//printf("Output to register: %d \n\r", (1 & 0b11) << 12 | DACC_CDR_DATA(pid_output*100));
	}
	else if(pid_output<0){
   80992:	2c00      	cmp	r4, #0
   80994:	db08      	blt.n	809a8 <move_motor+0x68>
   80996:	bd70      	pop	{r4, r5, r6, pc}
		printf("left: %d\n\r", pid_output);
   80998:	4621      	mov	r1, r4
   8099a:	4811      	ldr	r0, [pc, #68]	; (809e0 <move_motor+0xa0>)
   8099c:	47a8      	blx	r5
		PIOD -> PIO_CODR = PIO_PD10;
   8099e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   809a2:	4b10      	ldr	r3, [pc, #64]	; (809e4 <move_motor+0xa4>)
   809a4:	635a      	str	r2, [r3, #52]	; 0x34
   809a6:	bd70      	pop	{r4, r5, r6, pc}
	//else if ((joystick_position) > calibrated_motor_data){
		printf("right: %d\n\r", pid_output);
   809a8:	4621      	mov	r1, r4
   809aa:	480f      	ldr	r0, [pc, #60]	; (809e8 <move_motor+0xa8>)
   809ac:	4b04      	ldr	r3, [pc, #16]	; (809c0 <move_motor+0x80>)
   809ae:	4798      	blx	r3
		PIOD -> PIO_SODR = PIO_PD10;
   809b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   809b4:	4b0b      	ldr	r3, [pc, #44]	; (809e4 <move_motor+0xa4>)
   809b6:	631a      	str	r2, [r3, #48]	; 0x30
		//printf("Output to register: %d \n\r", (1 & 0b11) << 12 | DACC_CDR_DATA(pid_output*100));
	}
	//else{
		//REG_DACC_CDR = pid_output;
	//}
   809b8:	e7ed      	b.n	80996 <move_motor+0x56>
   809ba:	bf00      	nop
   809bc:	00081e50 	.word	0x00081e50
   809c0:	00080d71 	.word	0x00080d71
   809c4:	0008089d 	.word	0x0008089d
   809c8:	000808e9 	.word	0x000808e9
   809cc:	00080a11 	.word	0x00080a11
   809d0:	00081e60 	.word	0x00081e60
   809d4:	00081e78 	.word	0x00081e78
   809d8:	400c8000 	.word	0x400c8000
   809dc:	00081e84 	.word	0x00081e84
   809e0:	00081ea0 	.word	0x00081ea0
   809e4:	400e1400 	.word	0x400e1400
   809e8:	00081eac 	.word	0x00081eac

000809ec <pid_Init>:
 */
void pid_Init(void/*struct PID_DATA *pid*/)
// Set up PID controller parameters
{
  // Start values for PID controller
	pid.id = 1;
   809ec:	4b07      	ldr	r3, [pc, #28]	; (80a0c <pid_Init+0x20>)
   809ee:	2101      	movs	r1, #1
   809f0:	6019      	str	r1, [r3, #0]
	pid.sumError = 0;
   809f2:	2200      	movs	r2, #0
   809f4:	609a      	str	r2, [r3, #8]
	pid.lastProcessValue = 0;
   809f6:	809a      	strh	r2, [r3, #4]
	// Tuning constants for PID loop
	pid.P_Factor = K_P;
   809f8:	8199      	strh	r1, [r3, #12]
	pid.I_Factor = K_I;
   809fa:	81da      	strh	r2, [r3, #14]
	pid.D_Factor = K_D;
   809fc:	821a      	strh	r2, [r3, #16]
	// Limits to avoid overflow
	pid.maxError = MAX_INT / (pid.P_Factor + 1);
   809fe:	f643 72ff 	movw	r2, #16383	; 0x3fff
   80a02:	825a      	strh	r2, [r3, #18]
	pid.maxSumError = MAX_I_TERM / (pid.I_Factor + 1);
   80a04:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   80a08:	615a      	str	r2, [r3, #20]
   80a0a:	4770      	bx	lr
   80a0c:	20000490 	.word	0x20000490

00080a10 <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue/*, struct PID_DATA *pid*/)
{
   80a10:	b430      	push	{r4, r5}
	//if(processValue <= setPoint){
		//error = setPoint - processValue;
	//}

	//if(processValue > setPoint){
		error = processValue - setPoint;
   80a12:	1a08      	subs	r0, r1, r0
   80a14:	b280      	uxth	r0, r0
   80a16:	b203      	sxth	r3, r0
/*	if(error<10){
		error=0;
	}
*/
	// Calculate Pterm and limit error overflow
	if (error > pid.maxError){
   80a18:	4a20      	ldr	r2, [pc, #128]	; (80a9c <pid_Controller+0x8c>)
   80a1a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
   80a1e:	4293      	cmp	r3, r2
   80a20:	dc08      	bgt.n	80a34 <pid_Controller+0x24>
		p_term = MAX_INT;
	}
	else if (error < -pid.maxError){
   80a22:	4252      	negs	r2, r2
   80a24:	4293      	cmp	r3, r2
   80a26:	db28      	blt.n	80a7a <pid_Controller+0x6a>
		p_term = -MAX_INT;
	}
	else{
		p_term = pid.P_Factor * error;
   80a28:	4a1c      	ldr	r2, [pc, #112]	; (80a9c <pid_Controller+0x8c>)
   80a2a:	8992      	ldrh	r2, [r2, #12]
   80a2c:	fb02 f000 	mul.w	r0, r2, r0
   80a30:	b200      	sxth	r0, r0
   80a32:	e001      	b.n	80a38 <pid_Controller+0x28>
		p_term = MAX_INT;
   80a34:	f647 70ff 	movw	r0, #32767	; 0x7fff
	}

	// Calculate Iterm and limit integral runaway
	temp = pid.sumError + (int32_t)error;
   80a38:	4a18      	ldr	r2, [pc, #96]	; (80a9c <pid_Controller+0x8c>)
   80a3a:	6894      	ldr	r4, [r2, #8]
   80a3c:	4423      	add	r3, r4
	if(temp > pid.maxSumError){
   80a3e:	6952      	ldr	r2, [r2, #20]
   80a40:	4293      	cmp	r3, r2
   80a42:	dd1c      	ble.n	80a7e <pid_Controller+0x6e>
		i_term = MAX_I_TERM;
		pid.sumError = pid.maxSumError;
   80a44:	4b15      	ldr	r3, [pc, #84]	; (80a9c <pid_Controller+0x8c>)
   80a46:	609a      	str	r2, [r3, #8]
		i_term = MAX_I_TERM;
   80a48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
		pid.sumError = temp;
		i_term = pid.I_Factor * pid.sumError;
	}

	// Calculate Dterm
	d_term = pid.D_Factor * (pid.lastProcessValue - processValue);
   80a4c:	4c13      	ldr	r4, [pc, #76]	; (80a9c <pid_Controller+0x8c>)
   80a4e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   80a52:	1a52      	subs	r2, r2, r1
   80a54:	8a25      	ldrh	r5, [r4, #16]
   80a56:	fb02 f205 	mul.w	r2, r2, r5
   80a5a:	b212      	sxth	r2, r2

	pid.lastProcessValue = processValue;
   80a5c:	80a1      	strh	r1, [r4, #4]
	//printf("p:%d, i:%d, d:%d\n\r", p_term, i_term, d_term);
	ret = (p_term + i_term + d_term); // SCALING_FACTOR;
   80a5e:	4418      	add	r0, r3
   80a60:	4410      	add	r0, r2
   80a62:	4b0f      	ldr	r3, [pc, #60]	; (80aa0 <pid_Controller+0x90>)
   80a64:	4298      	cmp	r0, r3
   80a66:	bfb8      	it	lt
   80a68:	4618      	movlt	r0, r3
	}
	else if(ret < -MAX_INT){
		ret = -MAX_INT;
	}
	//printf("ret:%d\n\r",ret);
	return((int16_t)ret);
   80a6a:	f647 73ff 	movw	r3, #32767	; 0x7fff
   80a6e:	4298      	cmp	r0, r3
   80a70:	bfa8      	it	ge
   80a72:	4618      	movge	r0, r3
}
   80a74:	b200      	sxth	r0, r0
   80a76:	bc30      	pop	{r4, r5}
   80a78:	4770      	bx	lr
		p_term = -MAX_INT;
   80a7a:	4809      	ldr	r0, [pc, #36]	; (80aa0 <pid_Controller+0x90>)
   80a7c:	e7dc      	b.n	80a38 <pid_Controller+0x28>
	else if(temp < -pid.maxSumError){
   80a7e:	4252      	negs	r2, r2
   80a80:	4293      	cmp	r3, r2
   80a82:	da03      	bge.n	80a8c <pid_Controller+0x7c>
		pid.sumError = -pid.maxSumError;
   80a84:	4b05      	ldr	r3, [pc, #20]	; (80a9c <pid_Controller+0x8c>)
   80a86:	609a      	str	r2, [r3, #8]
		i_term = -MAX_I_TERM;
   80a88:	4b06      	ldr	r3, [pc, #24]	; (80aa4 <pid_Controller+0x94>)
   80a8a:	e7df      	b.n	80a4c <pid_Controller+0x3c>
		pid.sumError = temp;
   80a8c:	4a03      	ldr	r2, [pc, #12]	; (80a9c <pid_Controller+0x8c>)
   80a8e:	6093      	str	r3, [r2, #8]
		i_term = pid.I_Factor * pid.sumError;
   80a90:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
   80a94:	fb03 f302 	mul.w	r3, r3, r2
   80a98:	e7d8      	b.n	80a4c <pid_Controller+0x3c>
   80a9a:	bf00      	nop
   80a9c:	20000490 	.word	0x20000490
   80aa0:	ffff8001 	.word	0xffff8001
   80aa4:	c0000001 	.word	0xc0000001

00080aa8 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80aac:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80aae:	1e16      	subs	r6, r2, #0
   80ab0:	dd48      	ble.n	80b44 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80ab2:	780a      	ldrb	r2, [r1, #0]
   80ab4:	2a00      	cmp	r2, #0
   80ab6:	d035      	beq.n	80b24 <prints+0x7c>
   80ab8:	460a      	mov	r2, r1
   80aba:	2400      	movs	r4, #0
   80abc:	3401      	adds	r4, #1
   80abe:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80ac2:	2900      	cmp	r1, #0
   80ac4:	d1fa      	bne.n	80abc <prints+0x14>
		if (len >= width) width = 0;
   80ac6:	42a6      	cmp	r6, r4
   80ac8:	dc2d      	bgt.n	80b26 <prints+0x7e>
   80aca:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80acc:	f003 0202 	and.w	r2, r3, #2
   80ad0:	2a00      	cmp	r2, #0
   80ad2:	bf0c      	ite	eq
   80ad4:	f04f 0820 	moveq.w	r8, #32
   80ad8:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80adc:	f013 0301 	ands.w	r3, r3, #1
   80ae0:	d123      	bne.n	80b2a <prints+0x82>
		for ( ; width > 0; --width) {
   80ae2:	2c00      	cmp	r4, #0
   80ae4:	dd28      	ble.n	80b38 <prints+0x90>
   80ae6:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80ae8:	fa5f f988 	uxtb.w	r9, r8
   80aec:	4f18      	ldr	r7, [pc, #96]	; (80b50 <prints+0xa8>)
   80aee:	4648      	mov	r0, r9
   80af0:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80af2:	3e01      	subs	r6, #1
   80af4:	d1fb      	bne.n	80aee <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80af6:	7828      	ldrb	r0, [r5, #0]
   80af8:	b188      	cbz	r0, 80b1e <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   80afa:	4f15      	ldr	r7, [pc, #84]	; (80b50 <prints+0xa8>)
   80afc:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80afe:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80b00:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80b04:	2800      	cmp	r0, #0
   80b06:	d1f9      	bne.n	80afc <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80b08:	2e00      	cmp	r6, #0
   80b0a:	dd08      	ble.n	80b1e <prints+0x76>
   80b0c:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80b0e:	fa5f f888 	uxtb.w	r8, r8
   80b12:	4f0f      	ldr	r7, [pc, #60]	; (80b50 <prints+0xa8>)
   80b14:	4640      	mov	r0, r8
   80b16:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80b18:	3d01      	subs	r5, #1
   80b1a:	d1fb      	bne.n	80b14 <prints+0x6c>
   80b1c:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80b1e:	4620      	mov	r0, r4
   80b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80b24:	2400      	movs	r4, #0
		else width -= len;
   80b26:	1b34      	subs	r4, r6, r4
   80b28:	e7d0      	b.n	80acc <prints+0x24>
   80b2a:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80b2c:	7828      	ldrb	r0, [r5, #0]
   80b2e:	b108      	cbz	r0, 80b34 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80b30:	2400      	movs	r4, #0
   80b32:	e7e2      	b.n	80afa <prints+0x52>
   80b34:	2400      	movs	r4, #0
   80b36:	e7e7      	b.n	80b08 <prints+0x60>
		for ( ; width > 0; --width) {
   80b38:	4626      	mov	r6, r4
   80b3a:	461c      	mov	r4, r3
   80b3c:	e7db      	b.n	80af6 <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80b3e:	f04f 0820 	mov.w	r8, #32
   80b42:	e7d8      	b.n	80af6 <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80b44:	f013 0401 	ands.w	r4, r3, #1
   80b48:	d0f9      	beq.n	80b3e <prints+0x96>
	register int pc = 0, padchar = ' ';
   80b4a:	f04f 0820 	mov.w	r8, #32
   80b4e:	e7ed      	b.n	80b2c <prints+0x84>
   80b50:	00080edd 	.word	0x00080edd

00080b54 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b56:	b085      	sub	sp, #20
   80b58:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80b5a:	b381      	cbz	r1, 80bbe <printi+0x6a>
   80b5c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80b5e:	b10b      	cbz	r3, 80b64 <printi+0x10>
   80b60:	2a0a      	cmp	r2, #10
   80b62:	d038      	beq.n	80bd6 <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80b64:	2300      	movs	r3, #0
   80b66:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   80b6a:	2600      	movs	r6, #0
   80b6c:	2900      	cmp	r1, #0
   80b6e:	d046      	beq.n	80bfe <printi+0xaa>
   80b70:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80b74:	990c      	ldr	r1, [sp, #48]	; 0x30
   80b76:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80b78:	fbb4 f3f2 	udiv	r3, r4, r2
   80b7c:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80b80:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   80b82:	bfc8      	it	gt
   80b84:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   80b86:	3330      	adds	r3, #48	; 0x30
   80b88:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80b8c:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80b90:	2c00      	cmp	r4, #0
   80b92:	d1f1      	bne.n	80b78 <printi+0x24>
	}

	if (neg) {
   80b94:	b156      	cbz	r6, 80bac <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   80b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80b98:	b11b      	cbz	r3, 80ba2 <printi+0x4e>
   80b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80b9c:	f013 0f02 	tst.w	r3, #2
   80ba0:	d125      	bne.n	80bee <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80ba2:	232d      	movs	r3, #45	; 0x2d
   80ba4:	f805 3c01 	strb.w	r3, [r5, #-1]
   80ba8:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80baa:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80bb0:	4629      	mov	r1, r5
   80bb2:	4638      	mov	r0, r7
   80bb4:	4c14      	ldr	r4, [pc, #80]	; (80c08 <printi+0xb4>)
   80bb6:	47a0      	blx	r4
   80bb8:	4430      	add	r0, r6
}
   80bba:	b005      	add	sp, #20
   80bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80bbe:	2330      	movs	r3, #48	; 0x30
   80bc0:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80bc4:	2300      	movs	r3, #0
   80bc6:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80bce:	a901      	add	r1, sp, #4
   80bd0:	4c0d      	ldr	r4, [pc, #52]	; (80c08 <printi+0xb4>)
   80bd2:	47a0      	blx	r4
   80bd4:	e7f1      	b.n	80bba <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80bd6:	2900      	cmp	r1, #0
   80bd8:	dac4      	bge.n	80b64 <printi+0x10>
		u = -i;
   80bda:	424c      	negs	r4, r1
	*s = '\0';
   80bdc:	2300      	movs	r3, #0
   80bde:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80be2:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80be6:	2c00      	cmp	r4, #0
   80be8:	d0d5      	beq.n	80b96 <printi+0x42>
		neg = 1;
   80bea:	2601      	movs	r6, #1
   80bec:	e7c0      	b.n	80b70 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80bee:	202d      	movs	r0, #45	; 0x2d
   80bf0:	4b06      	ldr	r3, [pc, #24]	; (80c0c <printi+0xb8>)
   80bf2:	4798      	blx	r3
			--width;
   80bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80bf6:	3b01      	subs	r3, #1
   80bf8:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80bfa:	2601      	movs	r6, #1
			--width;
   80bfc:	e7d6      	b.n	80bac <printi+0x58>
	register int t, neg = 0, pc = 0;
   80bfe:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80c00:	f10d 050f 	add.w	r5, sp, #15
   80c04:	e7d2      	b.n	80bac <printi+0x58>
   80c06:	bf00      	nop
   80c08:	00080aa9 	.word	0x00080aa9
   80c0c:	00080edd 	.word	0x00080edd

00080c10 <print>:

static int print( char **out, const char *format, va_list args )
{
   80c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c14:	b087      	sub	sp, #28
   80c16:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80c18:	780b      	ldrb	r3, [r1, #0]
   80c1a:	2b00      	cmp	r3, #0
   80c1c:	f000 8094 	beq.w	80d48 <print+0x138>
   80c20:	468b      	mov	fp, r1
   80c22:	4617      	mov	r7, r2
   80c24:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80c26:	4e4e      	ldr	r6, [pc, #312]	; (80d60 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80c28:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80d68 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80c2c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80d6c <print+0x15c>
   80c30:	e046      	b.n	80cc0 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80c32:	2200      	movs	r2, #0
   80c34:	e070      	b.n	80d18 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80c36:	6839      	ldr	r1, [r7, #0]
   80c38:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80c3a:	484a      	ldr	r0, [pc, #296]	; (80d64 <print+0x154>)
   80c3c:	2900      	cmp	r1, #0
   80c3e:	bf08      	it	eq
   80c40:	4601      	moveq	r1, r0
   80c42:	4640      	mov	r0, r8
   80c44:	47d0      	blx	sl
   80c46:	4405      	add	r5, r0
				continue;
   80c48:	e035      	b.n	80cb6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80c4a:	6839      	ldr	r1, [r7, #0]
   80c4c:	3704      	adds	r7, #4
   80c4e:	2061      	movs	r0, #97	; 0x61
   80c50:	9002      	str	r0, [sp, #8]
   80c52:	9301      	str	r3, [sp, #4]
   80c54:	9200      	str	r2, [sp, #0]
   80c56:	2301      	movs	r3, #1
   80c58:	220a      	movs	r2, #10
   80c5a:	4640      	mov	r0, r8
   80c5c:	47c8      	blx	r9
   80c5e:	4405      	add	r5, r0
				continue;
   80c60:	e029      	b.n	80cb6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80c62:	6839      	ldr	r1, [r7, #0]
   80c64:	3704      	adds	r7, #4
   80c66:	2061      	movs	r0, #97	; 0x61
   80c68:	9002      	str	r0, [sp, #8]
   80c6a:	9301      	str	r3, [sp, #4]
   80c6c:	9200      	str	r2, [sp, #0]
   80c6e:	2300      	movs	r3, #0
   80c70:	2210      	movs	r2, #16
   80c72:	4640      	mov	r0, r8
   80c74:	47c8      	blx	r9
   80c76:	4405      	add	r5, r0
				continue;
   80c78:	e01d      	b.n	80cb6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80c7a:	6839      	ldr	r1, [r7, #0]
   80c7c:	3704      	adds	r7, #4
   80c7e:	2041      	movs	r0, #65	; 0x41
   80c80:	9002      	str	r0, [sp, #8]
   80c82:	9301      	str	r3, [sp, #4]
   80c84:	9200      	str	r2, [sp, #0]
   80c86:	2300      	movs	r3, #0
   80c88:	2210      	movs	r2, #16
   80c8a:	4640      	mov	r0, r8
   80c8c:	47c8      	blx	r9
   80c8e:	4405      	add	r5, r0
				continue;
   80c90:	e011      	b.n	80cb6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80c92:	6839      	ldr	r1, [r7, #0]
   80c94:	3704      	adds	r7, #4
   80c96:	2061      	movs	r0, #97	; 0x61
   80c98:	9002      	str	r0, [sp, #8]
   80c9a:	9301      	str	r3, [sp, #4]
   80c9c:	9200      	str	r2, [sp, #0]
   80c9e:	2300      	movs	r3, #0
   80ca0:	220a      	movs	r2, #10
   80ca2:	4640      	mov	r0, r8
   80ca4:	47c8      	blx	r9
   80ca6:	4405      	add	r5, r0
				continue;
   80ca8:	e005      	b.n	80cb6 <print+0xa6>
			++format;
   80caa:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80cac:	f89b 0000 	ldrb.w	r0, [fp]
   80cb0:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80cb2:	3501      	adds	r5, #1
   80cb4:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80cb6:	f104 0b01 	add.w	fp, r4, #1
   80cba:	7863      	ldrb	r3, [r4, #1]
   80cbc:	2b00      	cmp	r3, #0
   80cbe:	d044      	beq.n	80d4a <print+0x13a>
		if (*format == '%') {
   80cc0:	2b25      	cmp	r3, #37	; 0x25
   80cc2:	d1f3      	bne.n	80cac <print+0x9c>
			++format;
   80cc4:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80cc8:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80ccc:	2b00      	cmp	r3, #0
   80cce:	d03c      	beq.n	80d4a <print+0x13a>
			if (*format == '%') goto out;
   80cd0:	2b25      	cmp	r3, #37	; 0x25
   80cd2:	d0ea      	beq.n	80caa <print+0x9a>
			if (*format == '-') {
   80cd4:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80cd6:	bf06      	itte	eq
   80cd8:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80cdc:	2301      	moveq	r3, #1
			width = pad = 0;
   80cde:	2300      	movne	r3, #0
			while (*format == '0') {
   80ce0:	7822      	ldrb	r2, [r4, #0]
   80ce2:	2a30      	cmp	r2, #48	; 0x30
   80ce4:	d105      	bne.n	80cf2 <print+0xe2>
				pad |= PAD_ZERO;
   80ce6:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80cea:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80cee:	2a30      	cmp	r2, #48	; 0x30
   80cf0:	d0f9      	beq.n	80ce6 <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80cf2:	7821      	ldrb	r1, [r4, #0]
   80cf4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80cf8:	b2d2      	uxtb	r2, r2
   80cfa:	2a09      	cmp	r2, #9
   80cfc:	d899      	bhi.n	80c32 <print+0x22>
   80cfe:	2200      	movs	r2, #0
				width *= 10;
   80d00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80d04:	3930      	subs	r1, #48	; 0x30
   80d06:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80d0a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80d0e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80d12:	b2c0      	uxtb	r0, r0
   80d14:	2809      	cmp	r0, #9
   80d16:	d9f3      	bls.n	80d00 <print+0xf0>
			if( *format == 's' ) {
   80d18:	2973      	cmp	r1, #115	; 0x73
   80d1a:	d08c      	beq.n	80c36 <print+0x26>
			if( *format == 'd' ) {
   80d1c:	2964      	cmp	r1, #100	; 0x64
   80d1e:	d094      	beq.n	80c4a <print+0x3a>
			if( *format == 'x' ) {
   80d20:	2978      	cmp	r1, #120	; 0x78
   80d22:	d09e      	beq.n	80c62 <print+0x52>
			if( *format == 'X' ) {
   80d24:	2958      	cmp	r1, #88	; 0x58
   80d26:	d0a8      	beq.n	80c7a <print+0x6a>
			if( *format == 'u' ) {
   80d28:	2975      	cmp	r1, #117	; 0x75
   80d2a:	d0b2      	beq.n	80c92 <print+0x82>
			if( *format == 'c' ) {
   80d2c:	2963      	cmp	r1, #99	; 0x63
   80d2e:	d1c2      	bne.n	80cb6 <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80d30:	6839      	ldr	r1, [r7, #0]
   80d32:	3704      	adds	r7, #4
   80d34:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80d38:	2100      	movs	r1, #0
   80d3a:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80d3e:	a905      	add	r1, sp, #20
   80d40:	4640      	mov	r0, r8
   80d42:	47d0      	blx	sl
   80d44:	4405      	add	r5, r0
				continue;
   80d46:	e7b6      	b.n	80cb6 <print+0xa6>
	register int pc = 0;
   80d48:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80d4a:	f1b8 0f00 	cmp.w	r8, #0
   80d4e:	d003      	beq.n	80d58 <print+0x148>
   80d50:	f8d8 3000 	ldr.w	r3, [r8]
   80d54:	2200      	movs	r2, #0
   80d56:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80d58:	4628      	mov	r0, r5
   80d5a:	b007      	add	sp, #28
   80d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d60:	00080edd 	.word	0x00080edd
   80d64:	00081eb8 	.word	0x00081eb8
   80d68:	00080aa9 	.word	0x00080aa9
   80d6c:	00080b55 	.word	0x00080b55

00080d70 <printf>:

int printf(const char *format, ...)
{
   80d70:	b40f      	push	{r0, r1, r2, r3}
   80d72:	b500      	push	{lr}
   80d74:	b083      	sub	sp, #12
   80d76:	aa04      	add	r2, sp, #16
   80d78:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80d7c:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80d7e:	2000      	movs	r0, #0
   80d80:	4b03      	ldr	r3, [pc, #12]	; (80d90 <printf+0x20>)
   80d82:	4798      	blx	r3
}
   80d84:	b003      	add	sp, #12
   80d86:	f85d eb04 	ldr.w	lr, [sp], #4
   80d8a:	b004      	add	sp, #16
   80d8c:	4770      	bx	lr
   80d8e:	bf00      	nop
   80d90:	00080c11 	.word	0x00080c11

00080d94 <pwm_init>:
   80d94:	4b11      	ldr	r3, [pc, #68]	; (80ddc <pwm_init+0x48>)
   80d96:	685a      	ldr	r2, [r3, #4]
   80d98:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80d9c:	605a      	str	r2, [r3, #4]
   80d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80da0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80da4:	671a      	str	r2, [r3, #112]	; 0x70
   80da6:	4a0e      	ldr	r2, [pc, #56]	; (80de0 <pwm_init+0x4c>)
   80da8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80dac:	4a0d      	ldr	r2, [pc, #52]	; (80de4 <pwm_init+0x50>)
   80dae:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80db2:	f043 0310 	orr.w	r3, r3, #16
   80db6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   80dba:	220c      	movs	r2, #12
   80dbc:	4b0a      	ldr	r3, [pc, #40]	; (80de8 <pwm_init+0x54>)
   80dbe:	601a      	str	r2, [r3, #0]
   80dc0:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
   80dc4:	f44f 02a8 	mov.w	r2, #5505024	; 0x540000
   80dc8:	601a      	str	r2, [r3, #0]
   80dca:	f644 6120 	movw	r1, #20000	; 0x4e20
   80dce:	4a07      	ldr	r2, [pc, #28]	; (80dec <pwm_init+0x58>)
   80dd0:	6011      	str	r1, [r2, #0]
   80dd2:	685a      	ldr	r2, [r3, #4]
   80dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80dd8:	605a      	str	r2, [r3, #4]
   80dda:	4770      	bx	lr
   80ddc:	400e1200 	.word	0x400e1200
   80de0:	50494f00 	.word	0x50494f00
   80de4:	400e0600 	.word	0x400e0600
   80de8:	400942c0 	.word	0x400942c0
   80dec:	400942cc 	.word	0x400942cc

00080df0 <set_duty_cycle>:
   80df0:	b508      	push	{r3, lr}
   80df2:	f5a0 438c 	sub.w	r3, r0, #17920	; 0x4600
   80df6:	3b50      	subs	r3, #80	; 0x50
   80df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   80dfc:	d802      	bhi.n	80e04 <set_duty_cycle+0x14>
   80dfe:	4b03      	ldr	r3, [pc, #12]	; (80e0c <set_duty_cycle+0x1c>)
   80e00:	6018      	str	r0, [r3, #0]
   80e02:	bd08      	pop	{r3, pc}
   80e04:	4802      	ldr	r0, [pc, #8]	; (80e10 <set_duty_cycle+0x20>)
   80e06:	4b03      	ldr	r3, [pc, #12]	; (80e14 <set_duty_cycle+0x24>)
   80e08:	4798      	blx	r3
   80e0a:	bd08      	pop	{r3, pc}
   80e0c:	400942c4 	.word	0x400942c4
   80e10:	00081ec0 	.word	0x00081ec0
   80e14:	00080d71 	.word	0x00080d71

00080e18 <move_servo>:
   80e18:	b508      	push	{r3, lr}
   80e1a:	281d      	cmp	r0, #29
   80e1c:	dd16      	ble.n	80e4c <move_servo+0x34>
   80e1e:	f1a0 031f 	sub.w	r3, r0, #31
   80e22:	2b26      	cmp	r3, #38	; 0x26
   80e24:	d917      	bls.n	80e56 <move_servo+0x3e>
   80e26:	f1a0 0347 	sub.w	r3, r0, #71	; 0x47
   80e2a:	2b3a      	cmp	r3, #58	; 0x3a
   80e2c:	d916      	bls.n	80e5c <move_servo+0x44>
   80e2e:	f1a0 0383 	sub.w	r3, r0, #131	; 0x83
   80e32:	2b26      	cmp	r3, #38	; 0x26
   80e34:	d915      	bls.n	80e62 <move_servo+0x4a>
   80e36:	28aa      	cmp	r0, #170	; 0xaa
   80e38:	dd02      	ble.n	80e40 <move_servo+0x28>
   80e3a:	f644 2038 	movw	r0, #19000	; 0x4a38
   80e3e:	e007      	b.n	80e50 <move_servo+0x38>
   80e40:	4809      	ldr	r0, [pc, #36]	; (80e68 <move_servo+0x50>)
   80e42:	4b0a      	ldr	r3, [pc, #40]	; (80e6c <move_servo+0x54>)
   80e44:	4798      	blx	r3
   80e46:	f644 0044 	movw	r0, #18500	; 0x4844
   80e4a:	e001      	b.n	80e50 <move_servo+0x38>
   80e4c:	f244 6050 	movw	r0, #18000	; 0x4650
   80e50:	4b07      	ldr	r3, [pc, #28]	; (80e70 <move_servo+0x58>)
   80e52:	4798      	blx	r3
   80e54:	bd08      	pop	{r3, pc}
   80e56:	f244 704a 	movw	r0, #18250	; 0x474a
   80e5a:	e7f9      	b.n	80e50 <move_servo+0x38>
   80e5c:	f644 0044 	movw	r0, #18500	; 0x4844
   80e60:	e7f6      	b.n	80e50 <move_servo+0x38>
   80e62:	f644 103e 	movw	r0, #18750	; 0x493e
   80e66:	e7f3      	b.n	80e50 <move_servo+0x38>
   80e68:	00081efc 	.word	0x00081efc
   80e6c:	00080d71 	.word	0x00080d71
   80e70:	00080df1 	.word	0x00080df1

00080e74 <configure_uart>:
	uint32_t ul_sr;

	/*
	Initialize UART ring buffer as empty
	*/
	rx_buffer.head=0;
   80e74:	4b16      	ldr	r3, [pc, #88]	; (80ed0 <configure_uart+0x5c>)
   80e76:	2200      	movs	r2, #0
   80e78:	701a      	strb	r2, [r3, #0]
	rx_buffer.tail=0;
   80e7a:	705a      	strb	r2, [r3, #1]
	/*
	Initialize UART communication
	*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80e7c:	4b15      	ldr	r3, [pc, #84]	; (80ed4 <configure_uart+0x60>)
   80e7e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e82:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80e84:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80e88:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80e8a:	4002      	ands	r2, r0
   80e8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80e90:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80e92:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80e94:	f44f 7280 	mov.w	r2, #256	; 0x100
   80e98:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80e9c:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80e9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80ea2:	21ac      	movs	r1, #172	; 0xac
   80ea4:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80ea6:	f240 2123 	movw	r1, #547	; 0x223
   80eaa:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80eb0:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80eb2:	f240 2102 	movw	r1, #514	; 0x202
   80eb6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80eba:	f04f 31ff 	mov.w	r1, #4294967295
   80ebe:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80ec0:	21e1      	movs	r1, #225	; 0xe1
   80ec2:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80ec4:	4904      	ldr	r1, [pc, #16]	; (80ed8 <configure_uart+0x64>)
   80ec6:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80ec8:	2250      	movs	r2, #80	; 0x50
   80eca:	601a      	str	r2, [r3, #0]
   80ecc:	4770      	bx	lr
   80ece:	bf00      	nop
   80ed0:	200004a8 	.word	0x200004a8
   80ed4:	400e0e00 	.word	0x400e0e00
   80ed8:	e000e100 	.word	0xe000e100

00080edc <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80edc:	4b07      	ldr	r3, [pc, #28]	; (80efc <uart_putchar+0x20>)
   80ede:	695b      	ldr	r3, [r3, #20]
   80ee0:	f013 0f02 	tst.w	r3, #2
   80ee4:	d008      	beq.n	80ef8 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80ee6:	4b05      	ldr	r3, [pc, #20]	; (80efc <uart_putchar+0x20>)
   80ee8:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80eea:	461a      	mov	r2, r3
   80eec:	6953      	ldr	r3, [r2, #20]
   80eee:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ef2:	d0fb      	beq.n	80eec <uart_putchar+0x10>
	return 0;
   80ef4:	2000      	movs	r0, #0
   80ef6:	4770      	bx	lr
	return 1;
   80ef8:	2001      	movs	r0, #1
}
   80efa:	4770      	bx	lr
   80efc:	400e0800 	.word	0x400e0800

00080f00 <UART_Handler>:

void UART_Handler(void)
{
   80f00:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80f02:	4b15      	ldr	r3, [pc, #84]	; (80f58 <UART_Handler+0x58>)
   80f04:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80f06:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80f0a:	d003      	beq.n	80f14 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80f0c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80f10:	4a11      	ldr	r2, [pc, #68]	; (80f58 <UART_Handler+0x58>)
   80f12:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80f14:	f013 0f01 	tst.w	r3, #1
   80f18:	d012      	beq.n	80f40 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80f1a:	4810      	ldr	r0, [pc, #64]	; (80f5c <UART_Handler+0x5c>)
   80f1c:	7842      	ldrb	r2, [r0, #1]
   80f1e:	1c53      	adds	r3, r2, #1
   80f20:	4259      	negs	r1, r3
   80f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80f26:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80f2a:	bf58      	it	pl
   80f2c:	424b      	negpl	r3, r1
   80f2e:	7801      	ldrb	r1, [r0, #0]
   80f30:	428b      	cmp	r3, r1
   80f32:	d006      	beq.n	80f42 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80f34:	4908      	ldr	r1, [pc, #32]	; (80f58 <UART_Handler+0x58>)
   80f36:	6988      	ldr	r0, [r1, #24]
   80f38:	4908      	ldr	r1, [pc, #32]	; (80f5c <UART_Handler+0x5c>)
   80f3a:	440a      	add	r2, r1
   80f3c:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80f3e:	704b      	strb	r3, [r1, #1]
   80f40:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80f42:	4807      	ldr	r0, [pc, #28]	; (80f60 <UART_Handler+0x60>)
   80f44:	4b07      	ldr	r3, [pc, #28]	; (80f64 <UART_Handler+0x64>)
   80f46:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80f48:	4b03      	ldr	r3, [pc, #12]	; (80f58 <UART_Handler+0x58>)
   80f4a:	699a      	ldr	r2, [r3, #24]
   80f4c:	4b03      	ldr	r3, [pc, #12]	; (80f5c <UART_Handler+0x5c>)
   80f4e:	7859      	ldrb	r1, [r3, #1]
   80f50:	440b      	add	r3, r1
   80f52:	709a      	strb	r2, [r3, #2]
			return;
   80f54:	bd08      	pop	{r3, pc}
   80f56:	bf00      	nop
   80f58:	400e0800 	.word	0x400e0800
   80f5c:	200004a8 	.word	0x200004a8
   80f60:	00081f14 	.word	0x00081f14
   80f64:	00080d71 	.word	0x00080d71

00080f68 <__aeabi_drsub>:
   80f68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80f6c:	e002      	b.n	80f74 <__adddf3>
   80f6e:	bf00      	nop

00080f70 <__aeabi_dsub>:
   80f70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080f74 <__adddf3>:
   80f74:	b530      	push	{r4, r5, lr}
   80f76:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80f7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80f7e:	ea94 0f05 	teq	r4, r5
   80f82:	bf08      	it	eq
   80f84:	ea90 0f02 	teqeq	r0, r2
   80f88:	bf1f      	itttt	ne
   80f8a:	ea54 0c00 	orrsne.w	ip, r4, r0
   80f8e:	ea55 0c02 	orrsne.w	ip, r5, r2
   80f92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80f96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80f9a:	f000 80e2 	beq.w	81162 <__adddf3+0x1ee>
   80f9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80fa2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80fa6:	bfb8      	it	lt
   80fa8:	426d      	neglt	r5, r5
   80faa:	dd0c      	ble.n	80fc6 <__adddf3+0x52>
   80fac:	442c      	add	r4, r5
   80fae:	ea80 0202 	eor.w	r2, r0, r2
   80fb2:	ea81 0303 	eor.w	r3, r1, r3
   80fb6:	ea82 0000 	eor.w	r0, r2, r0
   80fba:	ea83 0101 	eor.w	r1, r3, r1
   80fbe:	ea80 0202 	eor.w	r2, r0, r2
   80fc2:	ea81 0303 	eor.w	r3, r1, r3
   80fc6:	2d36      	cmp	r5, #54	; 0x36
   80fc8:	bf88      	it	hi
   80fca:	bd30      	pophi	{r4, r5, pc}
   80fcc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80fd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80fd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80fd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80fdc:	d002      	beq.n	80fe4 <__adddf3+0x70>
   80fde:	4240      	negs	r0, r0
   80fe0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80fe4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80fe8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80fec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80ff0:	d002      	beq.n	80ff8 <__adddf3+0x84>
   80ff2:	4252      	negs	r2, r2
   80ff4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80ff8:	ea94 0f05 	teq	r4, r5
   80ffc:	f000 80a7 	beq.w	8114e <__adddf3+0x1da>
   81000:	f1a4 0401 	sub.w	r4, r4, #1
   81004:	f1d5 0e20 	rsbs	lr, r5, #32
   81008:	db0d      	blt.n	81026 <__adddf3+0xb2>
   8100a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8100e:	fa22 f205 	lsr.w	r2, r2, r5
   81012:	1880      	adds	r0, r0, r2
   81014:	f141 0100 	adc.w	r1, r1, #0
   81018:	fa03 f20e 	lsl.w	r2, r3, lr
   8101c:	1880      	adds	r0, r0, r2
   8101e:	fa43 f305 	asr.w	r3, r3, r5
   81022:	4159      	adcs	r1, r3
   81024:	e00e      	b.n	81044 <__adddf3+0xd0>
   81026:	f1a5 0520 	sub.w	r5, r5, #32
   8102a:	f10e 0e20 	add.w	lr, lr, #32
   8102e:	2a01      	cmp	r2, #1
   81030:	fa03 fc0e 	lsl.w	ip, r3, lr
   81034:	bf28      	it	cs
   81036:	f04c 0c02 	orrcs.w	ip, ip, #2
   8103a:	fa43 f305 	asr.w	r3, r3, r5
   8103e:	18c0      	adds	r0, r0, r3
   81040:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81044:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81048:	d507      	bpl.n	8105a <__adddf3+0xe6>
   8104a:	f04f 0e00 	mov.w	lr, #0
   8104e:	f1dc 0c00 	rsbs	ip, ip, #0
   81052:	eb7e 0000 	sbcs.w	r0, lr, r0
   81056:	eb6e 0101 	sbc.w	r1, lr, r1
   8105a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8105e:	d31b      	bcc.n	81098 <__adddf3+0x124>
   81060:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81064:	d30c      	bcc.n	81080 <__adddf3+0x10c>
   81066:	0849      	lsrs	r1, r1, #1
   81068:	ea5f 0030 	movs.w	r0, r0, rrx
   8106c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81070:	f104 0401 	add.w	r4, r4, #1
   81074:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81078:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8107c:	f080 809a 	bcs.w	811b4 <__adddf3+0x240>
   81080:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81084:	bf08      	it	eq
   81086:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8108a:	f150 0000 	adcs.w	r0, r0, #0
   8108e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81092:	ea41 0105 	orr.w	r1, r1, r5
   81096:	bd30      	pop	{r4, r5, pc}
   81098:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8109c:	4140      	adcs	r0, r0
   8109e:	eb41 0101 	adc.w	r1, r1, r1
   810a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   810a6:	f1a4 0401 	sub.w	r4, r4, #1
   810aa:	d1e9      	bne.n	81080 <__adddf3+0x10c>
   810ac:	f091 0f00 	teq	r1, #0
   810b0:	bf04      	itt	eq
   810b2:	4601      	moveq	r1, r0
   810b4:	2000      	moveq	r0, #0
   810b6:	fab1 f381 	clz	r3, r1
   810ba:	bf08      	it	eq
   810bc:	3320      	addeq	r3, #32
   810be:	f1a3 030b 	sub.w	r3, r3, #11
   810c2:	f1b3 0220 	subs.w	r2, r3, #32
   810c6:	da0c      	bge.n	810e2 <__adddf3+0x16e>
   810c8:	320c      	adds	r2, #12
   810ca:	dd08      	ble.n	810de <__adddf3+0x16a>
   810cc:	f102 0c14 	add.w	ip, r2, #20
   810d0:	f1c2 020c 	rsb	r2, r2, #12
   810d4:	fa01 f00c 	lsl.w	r0, r1, ip
   810d8:	fa21 f102 	lsr.w	r1, r1, r2
   810dc:	e00c      	b.n	810f8 <__adddf3+0x184>
   810de:	f102 0214 	add.w	r2, r2, #20
   810e2:	bfd8      	it	le
   810e4:	f1c2 0c20 	rsble	ip, r2, #32
   810e8:	fa01 f102 	lsl.w	r1, r1, r2
   810ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   810f0:	bfdc      	itt	le
   810f2:	ea41 010c 	orrle.w	r1, r1, ip
   810f6:	4090      	lslle	r0, r2
   810f8:	1ae4      	subs	r4, r4, r3
   810fa:	bfa2      	ittt	ge
   810fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81100:	4329      	orrge	r1, r5
   81102:	bd30      	popge	{r4, r5, pc}
   81104:	ea6f 0404 	mvn.w	r4, r4
   81108:	3c1f      	subs	r4, #31
   8110a:	da1c      	bge.n	81146 <__adddf3+0x1d2>
   8110c:	340c      	adds	r4, #12
   8110e:	dc0e      	bgt.n	8112e <__adddf3+0x1ba>
   81110:	f104 0414 	add.w	r4, r4, #20
   81114:	f1c4 0220 	rsb	r2, r4, #32
   81118:	fa20 f004 	lsr.w	r0, r0, r4
   8111c:	fa01 f302 	lsl.w	r3, r1, r2
   81120:	ea40 0003 	orr.w	r0, r0, r3
   81124:	fa21 f304 	lsr.w	r3, r1, r4
   81128:	ea45 0103 	orr.w	r1, r5, r3
   8112c:	bd30      	pop	{r4, r5, pc}
   8112e:	f1c4 040c 	rsb	r4, r4, #12
   81132:	f1c4 0220 	rsb	r2, r4, #32
   81136:	fa20 f002 	lsr.w	r0, r0, r2
   8113a:	fa01 f304 	lsl.w	r3, r1, r4
   8113e:	ea40 0003 	orr.w	r0, r0, r3
   81142:	4629      	mov	r1, r5
   81144:	bd30      	pop	{r4, r5, pc}
   81146:	fa21 f004 	lsr.w	r0, r1, r4
   8114a:	4629      	mov	r1, r5
   8114c:	bd30      	pop	{r4, r5, pc}
   8114e:	f094 0f00 	teq	r4, #0
   81152:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81156:	bf06      	itte	eq
   81158:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8115c:	3401      	addeq	r4, #1
   8115e:	3d01      	subne	r5, #1
   81160:	e74e      	b.n	81000 <__adddf3+0x8c>
   81162:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81166:	bf18      	it	ne
   81168:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8116c:	d029      	beq.n	811c2 <__adddf3+0x24e>
   8116e:	ea94 0f05 	teq	r4, r5
   81172:	bf08      	it	eq
   81174:	ea90 0f02 	teqeq	r0, r2
   81178:	d005      	beq.n	81186 <__adddf3+0x212>
   8117a:	ea54 0c00 	orrs.w	ip, r4, r0
   8117e:	bf04      	itt	eq
   81180:	4619      	moveq	r1, r3
   81182:	4610      	moveq	r0, r2
   81184:	bd30      	pop	{r4, r5, pc}
   81186:	ea91 0f03 	teq	r1, r3
   8118a:	bf1e      	ittt	ne
   8118c:	2100      	movne	r1, #0
   8118e:	2000      	movne	r0, #0
   81190:	bd30      	popne	{r4, r5, pc}
   81192:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81196:	d105      	bne.n	811a4 <__adddf3+0x230>
   81198:	0040      	lsls	r0, r0, #1
   8119a:	4149      	adcs	r1, r1
   8119c:	bf28      	it	cs
   8119e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   811a2:	bd30      	pop	{r4, r5, pc}
   811a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   811a8:	bf3c      	itt	cc
   811aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   811ae:	bd30      	popcc	{r4, r5, pc}
   811b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   811b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   811b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   811bc:	f04f 0000 	mov.w	r0, #0
   811c0:	bd30      	pop	{r4, r5, pc}
   811c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   811c6:	bf1a      	itte	ne
   811c8:	4619      	movne	r1, r3
   811ca:	4610      	movne	r0, r2
   811cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   811d0:	bf1c      	itt	ne
   811d2:	460b      	movne	r3, r1
   811d4:	4602      	movne	r2, r0
   811d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   811da:	bf06      	itte	eq
   811dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   811e0:	ea91 0f03 	teqeq	r1, r3
   811e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   811e8:	bd30      	pop	{r4, r5, pc}
   811ea:	bf00      	nop

000811ec <__aeabi_ui2d>:
   811ec:	f090 0f00 	teq	r0, #0
   811f0:	bf04      	itt	eq
   811f2:	2100      	moveq	r1, #0
   811f4:	4770      	bxeq	lr
   811f6:	b530      	push	{r4, r5, lr}
   811f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81200:	f04f 0500 	mov.w	r5, #0
   81204:	f04f 0100 	mov.w	r1, #0
   81208:	e750      	b.n	810ac <__adddf3+0x138>
   8120a:	bf00      	nop

0008120c <__aeabi_i2d>:
   8120c:	f090 0f00 	teq	r0, #0
   81210:	bf04      	itt	eq
   81212:	2100      	moveq	r1, #0
   81214:	4770      	bxeq	lr
   81216:	b530      	push	{r4, r5, lr}
   81218:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8121c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81220:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81224:	bf48      	it	mi
   81226:	4240      	negmi	r0, r0
   81228:	f04f 0100 	mov.w	r1, #0
   8122c:	e73e      	b.n	810ac <__adddf3+0x138>
   8122e:	bf00      	nop

00081230 <__aeabi_f2d>:
   81230:	0042      	lsls	r2, r0, #1
   81232:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81236:	ea4f 0131 	mov.w	r1, r1, rrx
   8123a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8123e:	bf1f      	itttt	ne
   81240:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81244:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81248:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8124c:	4770      	bxne	lr
   8124e:	f092 0f00 	teq	r2, #0
   81252:	bf14      	ite	ne
   81254:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81258:	4770      	bxeq	lr
   8125a:	b530      	push	{r4, r5, lr}
   8125c:	f44f 7460 	mov.w	r4, #896	; 0x380
   81260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81268:	e720      	b.n	810ac <__adddf3+0x138>
   8126a:	bf00      	nop

0008126c <__aeabi_ul2d>:
   8126c:	ea50 0201 	orrs.w	r2, r0, r1
   81270:	bf08      	it	eq
   81272:	4770      	bxeq	lr
   81274:	b530      	push	{r4, r5, lr}
   81276:	f04f 0500 	mov.w	r5, #0
   8127a:	e00a      	b.n	81292 <__aeabi_l2d+0x16>

0008127c <__aeabi_l2d>:
   8127c:	ea50 0201 	orrs.w	r2, r0, r1
   81280:	bf08      	it	eq
   81282:	4770      	bxeq	lr
   81284:	b530      	push	{r4, r5, lr}
   81286:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8128a:	d502      	bpl.n	81292 <__aeabi_l2d+0x16>
   8128c:	4240      	negs	r0, r0
   8128e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81292:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81296:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8129a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8129e:	f43f aedc 	beq.w	8105a <__adddf3+0xe6>
   812a2:	f04f 0203 	mov.w	r2, #3
   812a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812aa:	bf18      	it	ne
   812ac:	3203      	addne	r2, #3
   812ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812b2:	bf18      	it	ne
   812b4:	3203      	addne	r2, #3
   812b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   812ba:	f1c2 0320 	rsb	r3, r2, #32
   812be:	fa00 fc03 	lsl.w	ip, r0, r3
   812c2:	fa20 f002 	lsr.w	r0, r0, r2
   812c6:	fa01 fe03 	lsl.w	lr, r1, r3
   812ca:	ea40 000e 	orr.w	r0, r0, lr
   812ce:	fa21 f102 	lsr.w	r1, r1, r2
   812d2:	4414      	add	r4, r2
   812d4:	e6c1      	b.n	8105a <__adddf3+0xe6>
   812d6:	bf00      	nop

000812d8 <__aeabi_dmul>:
   812d8:	b570      	push	{r4, r5, r6, lr}
   812da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   812de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   812e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   812e6:	bf1d      	ittte	ne
   812e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   812ec:	ea94 0f0c 	teqne	r4, ip
   812f0:	ea95 0f0c 	teqne	r5, ip
   812f4:	f000 f8de 	bleq	814b4 <__aeabi_dmul+0x1dc>
   812f8:	442c      	add	r4, r5
   812fa:	ea81 0603 	eor.w	r6, r1, r3
   812fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81302:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81306:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8130a:	bf18      	it	ne
   8130c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81310:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81318:	d038      	beq.n	8138c <__aeabi_dmul+0xb4>
   8131a:	fba0 ce02 	umull	ip, lr, r0, r2
   8131e:	f04f 0500 	mov.w	r5, #0
   81322:	fbe1 e502 	umlal	lr, r5, r1, r2
   81326:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8132a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8132e:	f04f 0600 	mov.w	r6, #0
   81332:	fbe1 5603 	umlal	r5, r6, r1, r3
   81336:	f09c 0f00 	teq	ip, #0
   8133a:	bf18      	it	ne
   8133c:	f04e 0e01 	orrne.w	lr, lr, #1
   81340:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81344:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81348:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8134c:	d204      	bcs.n	81358 <__aeabi_dmul+0x80>
   8134e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81352:	416d      	adcs	r5, r5
   81354:	eb46 0606 	adc.w	r6, r6, r6
   81358:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8135c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81360:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81364:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81368:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8136c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81370:	bf88      	it	hi
   81372:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81376:	d81e      	bhi.n	813b6 <__aeabi_dmul+0xde>
   81378:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8137c:	bf08      	it	eq
   8137e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81382:	f150 0000 	adcs.w	r0, r0, #0
   81386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8138a:	bd70      	pop	{r4, r5, r6, pc}
   8138c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81390:	ea46 0101 	orr.w	r1, r6, r1
   81394:	ea40 0002 	orr.w	r0, r0, r2
   81398:	ea81 0103 	eor.w	r1, r1, r3
   8139c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   813a0:	bfc2      	ittt	gt
   813a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   813a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   813aa:	bd70      	popgt	{r4, r5, r6, pc}
   813ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   813b0:	f04f 0e00 	mov.w	lr, #0
   813b4:	3c01      	subs	r4, #1
   813b6:	f300 80ab 	bgt.w	81510 <__aeabi_dmul+0x238>
   813ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   813be:	bfde      	ittt	le
   813c0:	2000      	movle	r0, #0
   813c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   813c6:	bd70      	pople	{r4, r5, r6, pc}
   813c8:	f1c4 0400 	rsb	r4, r4, #0
   813cc:	3c20      	subs	r4, #32
   813ce:	da35      	bge.n	8143c <__aeabi_dmul+0x164>
   813d0:	340c      	adds	r4, #12
   813d2:	dc1b      	bgt.n	8140c <__aeabi_dmul+0x134>
   813d4:	f104 0414 	add.w	r4, r4, #20
   813d8:	f1c4 0520 	rsb	r5, r4, #32
   813dc:	fa00 f305 	lsl.w	r3, r0, r5
   813e0:	fa20 f004 	lsr.w	r0, r0, r4
   813e4:	fa01 f205 	lsl.w	r2, r1, r5
   813e8:	ea40 0002 	orr.w	r0, r0, r2
   813ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   813f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   813f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   813f8:	fa21 f604 	lsr.w	r6, r1, r4
   813fc:	eb42 0106 	adc.w	r1, r2, r6
   81400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81404:	bf08      	it	eq
   81406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8140a:	bd70      	pop	{r4, r5, r6, pc}
   8140c:	f1c4 040c 	rsb	r4, r4, #12
   81410:	f1c4 0520 	rsb	r5, r4, #32
   81414:	fa00 f304 	lsl.w	r3, r0, r4
   81418:	fa20 f005 	lsr.w	r0, r0, r5
   8141c:	fa01 f204 	lsl.w	r2, r1, r4
   81420:	ea40 0002 	orr.w	r0, r0, r2
   81424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81428:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8142c:	f141 0100 	adc.w	r1, r1, #0
   81430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81434:	bf08      	it	eq
   81436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8143a:	bd70      	pop	{r4, r5, r6, pc}
   8143c:	f1c4 0520 	rsb	r5, r4, #32
   81440:	fa00 f205 	lsl.w	r2, r0, r5
   81444:	ea4e 0e02 	orr.w	lr, lr, r2
   81448:	fa20 f304 	lsr.w	r3, r0, r4
   8144c:	fa01 f205 	lsl.w	r2, r1, r5
   81450:	ea43 0302 	orr.w	r3, r3, r2
   81454:	fa21 f004 	lsr.w	r0, r1, r4
   81458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8145c:	fa21 f204 	lsr.w	r2, r1, r4
   81460:	ea20 0002 	bic.w	r0, r0, r2
   81464:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81468:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8146c:	bf08      	it	eq
   8146e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81472:	bd70      	pop	{r4, r5, r6, pc}
   81474:	f094 0f00 	teq	r4, #0
   81478:	d10f      	bne.n	8149a <__aeabi_dmul+0x1c2>
   8147a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8147e:	0040      	lsls	r0, r0, #1
   81480:	eb41 0101 	adc.w	r1, r1, r1
   81484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81488:	bf08      	it	eq
   8148a:	3c01      	subeq	r4, #1
   8148c:	d0f7      	beq.n	8147e <__aeabi_dmul+0x1a6>
   8148e:	ea41 0106 	orr.w	r1, r1, r6
   81492:	f095 0f00 	teq	r5, #0
   81496:	bf18      	it	ne
   81498:	4770      	bxne	lr
   8149a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8149e:	0052      	lsls	r2, r2, #1
   814a0:	eb43 0303 	adc.w	r3, r3, r3
   814a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   814a8:	bf08      	it	eq
   814aa:	3d01      	subeq	r5, #1
   814ac:	d0f7      	beq.n	8149e <__aeabi_dmul+0x1c6>
   814ae:	ea43 0306 	orr.w	r3, r3, r6
   814b2:	4770      	bx	lr
   814b4:	ea94 0f0c 	teq	r4, ip
   814b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   814bc:	bf18      	it	ne
   814be:	ea95 0f0c 	teqne	r5, ip
   814c2:	d00c      	beq.n	814de <__aeabi_dmul+0x206>
   814c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814c8:	bf18      	it	ne
   814ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814ce:	d1d1      	bne.n	81474 <__aeabi_dmul+0x19c>
   814d0:	ea81 0103 	eor.w	r1, r1, r3
   814d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814d8:	f04f 0000 	mov.w	r0, #0
   814dc:	bd70      	pop	{r4, r5, r6, pc}
   814de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814e2:	bf06      	itte	eq
   814e4:	4610      	moveq	r0, r2
   814e6:	4619      	moveq	r1, r3
   814e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814ec:	d019      	beq.n	81522 <__aeabi_dmul+0x24a>
   814ee:	ea94 0f0c 	teq	r4, ip
   814f2:	d102      	bne.n	814fa <__aeabi_dmul+0x222>
   814f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   814f8:	d113      	bne.n	81522 <__aeabi_dmul+0x24a>
   814fa:	ea95 0f0c 	teq	r5, ip
   814fe:	d105      	bne.n	8150c <__aeabi_dmul+0x234>
   81500:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81504:	bf1c      	itt	ne
   81506:	4610      	movne	r0, r2
   81508:	4619      	movne	r1, r3
   8150a:	d10a      	bne.n	81522 <__aeabi_dmul+0x24a>
   8150c:	ea81 0103 	eor.w	r1, r1, r3
   81510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81514:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8151c:	f04f 0000 	mov.w	r0, #0
   81520:	bd70      	pop	{r4, r5, r6, pc}
   81522:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81526:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8152a:	bd70      	pop	{r4, r5, r6, pc}

0008152c <__aeabi_ddiv>:
   8152c:	b570      	push	{r4, r5, r6, lr}
   8152e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81532:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81536:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8153a:	bf1d      	ittte	ne
   8153c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81540:	ea94 0f0c 	teqne	r4, ip
   81544:	ea95 0f0c 	teqne	r5, ip
   81548:	f000 f8a7 	bleq	8169a <__aeabi_ddiv+0x16e>
   8154c:	eba4 0405 	sub.w	r4, r4, r5
   81550:	ea81 0e03 	eor.w	lr, r1, r3
   81554:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81558:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8155c:	f000 8088 	beq.w	81670 <__aeabi_ddiv+0x144>
   81560:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81564:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81568:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8156c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81570:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81574:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81578:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8157c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81580:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81584:	429d      	cmp	r5, r3
   81586:	bf08      	it	eq
   81588:	4296      	cmpeq	r6, r2
   8158a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8158e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81592:	d202      	bcs.n	8159a <__aeabi_ddiv+0x6e>
   81594:	085b      	lsrs	r3, r3, #1
   81596:	ea4f 0232 	mov.w	r2, r2, rrx
   8159a:	1ab6      	subs	r6, r6, r2
   8159c:	eb65 0503 	sbc.w	r5, r5, r3
   815a0:	085b      	lsrs	r3, r3, #1
   815a2:	ea4f 0232 	mov.w	r2, r2, rrx
   815a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   815aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   815ae:	ebb6 0e02 	subs.w	lr, r6, r2
   815b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   815b6:	bf22      	ittt	cs
   815b8:	1ab6      	subcs	r6, r6, r2
   815ba:	4675      	movcs	r5, lr
   815bc:	ea40 000c 	orrcs.w	r0, r0, ip
   815c0:	085b      	lsrs	r3, r3, #1
   815c2:	ea4f 0232 	mov.w	r2, r2, rrx
   815c6:	ebb6 0e02 	subs.w	lr, r6, r2
   815ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   815ce:	bf22      	ittt	cs
   815d0:	1ab6      	subcs	r6, r6, r2
   815d2:	4675      	movcs	r5, lr
   815d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   815d8:	085b      	lsrs	r3, r3, #1
   815da:	ea4f 0232 	mov.w	r2, r2, rrx
   815de:	ebb6 0e02 	subs.w	lr, r6, r2
   815e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   815e6:	bf22      	ittt	cs
   815e8:	1ab6      	subcs	r6, r6, r2
   815ea:	4675      	movcs	r5, lr
   815ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   815f0:	085b      	lsrs	r3, r3, #1
   815f2:	ea4f 0232 	mov.w	r2, r2, rrx
   815f6:	ebb6 0e02 	subs.w	lr, r6, r2
   815fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   815fe:	bf22      	ittt	cs
   81600:	1ab6      	subcs	r6, r6, r2
   81602:	4675      	movcs	r5, lr
   81604:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81608:	ea55 0e06 	orrs.w	lr, r5, r6
   8160c:	d018      	beq.n	81640 <__aeabi_ddiv+0x114>
   8160e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81612:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81616:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8161a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8161e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81622:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81626:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8162a:	d1c0      	bne.n	815ae <__aeabi_ddiv+0x82>
   8162c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81630:	d10b      	bne.n	8164a <__aeabi_ddiv+0x11e>
   81632:	ea41 0100 	orr.w	r1, r1, r0
   81636:	f04f 0000 	mov.w	r0, #0
   8163a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8163e:	e7b6      	b.n	815ae <__aeabi_ddiv+0x82>
   81640:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81644:	bf04      	itt	eq
   81646:	4301      	orreq	r1, r0
   81648:	2000      	moveq	r0, #0
   8164a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8164e:	bf88      	it	hi
   81650:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81654:	f63f aeaf 	bhi.w	813b6 <__aeabi_dmul+0xde>
   81658:	ebb5 0c03 	subs.w	ip, r5, r3
   8165c:	bf04      	itt	eq
   8165e:	ebb6 0c02 	subseq.w	ip, r6, r2
   81662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81666:	f150 0000 	adcs.w	r0, r0, #0
   8166a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8166e:	bd70      	pop	{r4, r5, r6, pc}
   81670:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81674:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81678:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8167c:	bfc2      	ittt	gt
   8167e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81682:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81686:	bd70      	popgt	{r4, r5, r6, pc}
   81688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8168c:	f04f 0e00 	mov.w	lr, #0
   81690:	3c01      	subs	r4, #1
   81692:	e690      	b.n	813b6 <__aeabi_dmul+0xde>
   81694:	ea45 0e06 	orr.w	lr, r5, r6
   81698:	e68d      	b.n	813b6 <__aeabi_dmul+0xde>
   8169a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8169e:	ea94 0f0c 	teq	r4, ip
   816a2:	bf08      	it	eq
   816a4:	ea95 0f0c 	teqeq	r5, ip
   816a8:	f43f af3b 	beq.w	81522 <__aeabi_dmul+0x24a>
   816ac:	ea94 0f0c 	teq	r4, ip
   816b0:	d10a      	bne.n	816c8 <__aeabi_ddiv+0x19c>
   816b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   816b6:	f47f af34 	bne.w	81522 <__aeabi_dmul+0x24a>
   816ba:	ea95 0f0c 	teq	r5, ip
   816be:	f47f af25 	bne.w	8150c <__aeabi_dmul+0x234>
   816c2:	4610      	mov	r0, r2
   816c4:	4619      	mov	r1, r3
   816c6:	e72c      	b.n	81522 <__aeabi_dmul+0x24a>
   816c8:	ea95 0f0c 	teq	r5, ip
   816cc:	d106      	bne.n	816dc <__aeabi_ddiv+0x1b0>
   816ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   816d2:	f43f aefd 	beq.w	814d0 <__aeabi_dmul+0x1f8>
   816d6:	4610      	mov	r0, r2
   816d8:	4619      	mov	r1, r3
   816da:	e722      	b.n	81522 <__aeabi_dmul+0x24a>
   816dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   816e0:	bf18      	it	ne
   816e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   816e6:	f47f aec5 	bne.w	81474 <__aeabi_dmul+0x19c>
   816ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   816ee:	f47f af0d 	bne.w	8150c <__aeabi_dmul+0x234>
   816f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   816f6:	f47f aeeb 	bne.w	814d0 <__aeabi_dmul+0x1f8>
   816fa:	e712      	b.n	81522 <__aeabi_dmul+0x24a>

000816fc <__aeabi_d2iz>:
   816fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81700:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81704:	d215      	bcs.n	81732 <__aeabi_d2iz+0x36>
   81706:	d511      	bpl.n	8172c <__aeabi_d2iz+0x30>
   81708:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8170c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81710:	d912      	bls.n	81738 <__aeabi_d2iz+0x3c>
   81712:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8171a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8171e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81722:	fa23 f002 	lsr.w	r0, r3, r2
   81726:	bf18      	it	ne
   81728:	4240      	negne	r0, r0
   8172a:	4770      	bx	lr
   8172c:	f04f 0000 	mov.w	r0, #0
   81730:	4770      	bx	lr
   81732:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81736:	d105      	bne.n	81744 <__aeabi_d2iz+0x48>
   81738:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8173c:	bf08      	it	eq
   8173e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81742:	4770      	bx	lr
   81744:	f04f 0000 	mov.w	r0, #0
   81748:	4770      	bx	lr
   8174a:	bf00      	nop

0008174c <__aeabi_frsub>:
   8174c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   81750:	e002      	b.n	81758 <__addsf3>
   81752:	bf00      	nop

00081754 <__aeabi_fsub>:
   81754:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00081758 <__addsf3>:
   81758:	0042      	lsls	r2, r0, #1
   8175a:	bf1f      	itttt	ne
   8175c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   81760:	ea92 0f03 	teqne	r2, r3
   81764:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   81768:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8176c:	d06a      	beq.n	81844 <__addsf3+0xec>
   8176e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   81772:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   81776:	bfc1      	itttt	gt
   81778:	18d2      	addgt	r2, r2, r3
   8177a:	4041      	eorgt	r1, r0
   8177c:	4048      	eorgt	r0, r1
   8177e:	4041      	eorgt	r1, r0
   81780:	bfb8      	it	lt
   81782:	425b      	neglt	r3, r3
   81784:	2b19      	cmp	r3, #25
   81786:	bf88      	it	hi
   81788:	4770      	bxhi	lr
   8178a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8178e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81792:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81796:	bf18      	it	ne
   81798:	4240      	negne	r0, r0
   8179a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8179e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   817a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   817a6:	bf18      	it	ne
   817a8:	4249      	negne	r1, r1
   817aa:	ea92 0f03 	teq	r2, r3
   817ae:	d03f      	beq.n	81830 <__addsf3+0xd8>
   817b0:	f1a2 0201 	sub.w	r2, r2, #1
   817b4:	fa41 fc03 	asr.w	ip, r1, r3
   817b8:	eb10 000c 	adds.w	r0, r0, ip
   817bc:	f1c3 0320 	rsb	r3, r3, #32
   817c0:	fa01 f103 	lsl.w	r1, r1, r3
   817c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   817c8:	d502      	bpl.n	817d0 <__addsf3+0x78>
   817ca:	4249      	negs	r1, r1
   817cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   817d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   817d4:	d313      	bcc.n	817fe <__addsf3+0xa6>
   817d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   817da:	d306      	bcc.n	817ea <__addsf3+0x92>
   817dc:	0840      	lsrs	r0, r0, #1
   817de:	ea4f 0131 	mov.w	r1, r1, rrx
   817e2:	f102 0201 	add.w	r2, r2, #1
   817e6:	2afe      	cmp	r2, #254	; 0xfe
   817e8:	d251      	bcs.n	8188e <__addsf3+0x136>
   817ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   817ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   817f2:	bf08      	it	eq
   817f4:	f020 0001 	biceq.w	r0, r0, #1
   817f8:	ea40 0003 	orr.w	r0, r0, r3
   817fc:	4770      	bx	lr
   817fe:	0049      	lsls	r1, r1, #1
   81800:	eb40 0000 	adc.w	r0, r0, r0
   81804:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81808:	f1a2 0201 	sub.w	r2, r2, #1
   8180c:	d1ed      	bne.n	817ea <__addsf3+0x92>
   8180e:	fab0 fc80 	clz	ip, r0
   81812:	f1ac 0c08 	sub.w	ip, ip, #8
   81816:	ebb2 020c 	subs.w	r2, r2, ip
   8181a:	fa00 f00c 	lsl.w	r0, r0, ip
   8181e:	bfaa      	itet	ge
   81820:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81824:	4252      	neglt	r2, r2
   81826:	4318      	orrge	r0, r3
   81828:	bfbc      	itt	lt
   8182a:	40d0      	lsrlt	r0, r2
   8182c:	4318      	orrlt	r0, r3
   8182e:	4770      	bx	lr
   81830:	f092 0f00 	teq	r2, #0
   81834:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81838:	bf06      	itte	eq
   8183a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8183e:	3201      	addeq	r2, #1
   81840:	3b01      	subne	r3, #1
   81842:	e7b5      	b.n	817b0 <__addsf3+0x58>
   81844:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81848:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8184c:	bf18      	it	ne
   8184e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81852:	d021      	beq.n	81898 <__addsf3+0x140>
   81854:	ea92 0f03 	teq	r2, r3
   81858:	d004      	beq.n	81864 <__addsf3+0x10c>
   8185a:	f092 0f00 	teq	r2, #0
   8185e:	bf08      	it	eq
   81860:	4608      	moveq	r0, r1
   81862:	4770      	bx	lr
   81864:	ea90 0f01 	teq	r0, r1
   81868:	bf1c      	itt	ne
   8186a:	2000      	movne	r0, #0
   8186c:	4770      	bxne	lr
   8186e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   81872:	d104      	bne.n	8187e <__addsf3+0x126>
   81874:	0040      	lsls	r0, r0, #1
   81876:	bf28      	it	cs
   81878:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   8187c:	4770      	bx	lr
   8187e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   81882:	bf3c      	itt	cc
   81884:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   81888:	4770      	bxcc	lr
   8188a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8188e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   81892:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81896:	4770      	bx	lr
   81898:	ea7f 6222 	mvns.w	r2, r2, asr #24
   8189c:	bf16      	itet	ne
   8189e:	4608      	movne	r0, r1
   818a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   818a4:	4601      	movne	r1, r0
   818a6:	0242      	lsls	r2, r0, #9
   818a8:	bf06      	itte	eq
   818aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   818ae:	ea90 0f01 	teqeq	r0, r1
   818b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   818b6:	4770      	bx	lr

000818b8 <__aeabi_ui2f>:
   818b8:	f04f 0300 	mov.w	r3, #0
   818bc:	e004      	b.n	818c8 <__aeabi_i2f+0x8>
   818be:	bf00      	nop

000818c0 <__aeabi_i2f>:
   818c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   818c4:	bf48      	it	mi
   818c6:	4240      	negmi	r0, r0
   818c8:	ea5f 0c00 	movs.w	ip, r0
   818cc:	bf08      	it	eq
   818ce:	4770      	bxeq	lr
   818d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   818d4:	4601      	mov	r1, r0
   818d6:	f04f 0000 	mov.w	r0, #0
   818da:	e01c      	b.n	81916 <__aeabi_l2f+0x2a>

000818dc <__aeabi_ul2f>:
   818dc:	ea50 0201 	orrs.w	r2, r0, r1
   818e0:	bf08      	it	eq
   818e2:	4770      	bxeq	lr
   818e4:	f04f 0300 	mov.w	r3, #0
   818e8:	e00a      	b.n	81900 <__aeabi_l2f+0x14>
   818ea:	bf00      	nop

000818ec <__aeabi_l2f>:
   818ec:	ea50 0201 	orrs.w	r2, r0, r1
   818f0:	bf08      	it	eq
   818f2:	4770      	bxeq	lr
   818f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   818f8:	d502      	bpl.n	81900 <__aeabi_l2f+0x14>
   818fa:	4240      	negs	r0, r0
   818fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81900:	ea5f 0c01 	movs.w	ip, r1
   81904:	bf02      	ittt	eq
   81906:	4684      	moveq	ip, r0
   81908:	4601      	moveq	r1, r0
   8190a:	2000      	moveq	r0, #0
   8190c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81910:	bf08      	it	eq
   81912:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81916:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8191a:	fabc f28c 	clz	r2, ip
   8191e:	3a08      	subs	r2, #8
   81920:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81924:	db10      	blt.n	81948 <__aeabi_l2f+0x5c>
   81926:	fa01 fc02 	lsl.w	ip, r1, r2
   8192a:	4463      	add	r3, ip
   8192c:	fa00 fc02 	lsl.w	ip, r0, r2
   81930:	f1c2 0220 	rsb	r2, r2, #32
   81934:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81938:	fa20 f202 	lsr.w	r2, r0, r2
   8193c:	eb43 0002 	adc.w	r0, r3, r2
   81940:	bf08      	it	eq
   81942:	f020 0001 	biceq.w	r0, r0, #1
   81946:	4770      	bx	lr
   81948:	f102 0220 	add.w	r2, r2, #32
   8194c:	fa01 fc02 	lsl.w	ip, r1, r2
   81950:	f1c2 0220 	rsb	r2, r2, #32
   81954:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81958:	fa21 f202 	lsr.w	r2, r1, r2
   8195c:	eb43 0002 	adc.w	r0, r3, r2
   81960:	bf08      	it	eq
   81962:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81966:	4770      	bx	lr

00081968 <__aeabi_fmul>:
   81968:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8196c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81970:	bf1e      	ittt	ne
   81972:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81976:	ea92 0f0c 	teqne	r2, ip
   8197a:	ea93 0f0c 	teqne	r3, ip
   8197e:	d06f      	beq.n	81a60 <__aeabi_fmul+0xf8>
   81980:	441a      	add	r2, r3
   81982:	ea80 0c01 	eor.w	ip, r0, r1
   81986:	0240      	lsls	r0, r0, #9
   81988:	bf18      	it	ne
   8198a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   8198e:	d01e      	beq.n	819ce <__aeabi_fmul+0x66>
   81990:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81994:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   81998:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   8199c:	fba0 3101 	umull	r3, r1, r0, r1
   819a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   819a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   819a8:	bf3e      	ittt	cc
   819aa:	0049      	lslcc	r1, r1, #1
   819ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   819b0:	005b      	lslcc	r3, r3, #1
   819b2:	ea40 0001 	orr.w	r0, r0, r1
   819b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   819ba:	2afd      	cmp	r2, #253	; 0xfd
   819bc:	d81d      	bhi.n	819fa <__aeabi_fmul+0x92>
   819be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   819c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   819c6:	bf08      	it	eq
   819c8:	f020 0001 	biceq.w	r0, r0, #1
   819cc:	4770      	bx	lr
   819ce:	f090 0f00 	teq	r0, #0
   819d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   819d6:	bf08      	it	eq
   819d8:	0249      	lsleq	r1, r1, #9
   819da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   819de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   819e2:	3a7f      	subs	r2, #127	; 0x7f
   819e4:	bfc2      	ittt	gt
   819e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   819ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   819ee:	4770      	bxgt	lr
   819f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   819f4:	f04f 0300 	mov.w	r3, #0
   819f8:	3a01      	subs	r2, #1
   819fa:	dc5d      	bgt.n	81ab8 <__aeabi_fmul+0x150>
   819fc:	f112 0f19 	cmn.w	r2, #25
   81a00:	bfdc      	itt	le
   81a02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81a06:	4770      	bxle	lr
   81a08:	f1c2 0200 	rsb	r2, r2, #0
   81a0c:	0041      	lsls	r1, r0, #1
   81a0e:	fa21 f102 	lsr.w	r1, r1, r2
   81a12:	f1c2 0220 	rsb	r2, r2, #32
   81a16:	fa00 fc02 	lsl.w	ip, r0, r2
   81a1a:	ea5f 0031 	movs.w	r0, r1, rrx
   81a1e:	f140 0000 	adc.w	r0, r0, #0
   81a22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81a26:	bf08      	it	eq
   81a28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81a2c:	4770      	bx	lr
   81a2e:	f092 0f00 	teq	r2, #0
   81a32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81a36:	bf02      	ittt	eq
   81a38:	0040      	lsleq	r0, r0, #1
   81a3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81a3e:	3a01      	subeq	r2, #1
   81a40:	d0f9      	beq.n	81a36 <__aeabi_fmul+0xce>
   81a42:	ea40 000c 	orr.w	r0, r0, ip
   81a46:	f093 0f00 	teq	r3, #0
   81a4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81a4e:	bf02      	ittt	eq
   81a50:	0049      	lsleq	r1, r1, #1
   81a52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81a56:	3b01      	subeq	r3, #1
   81a58:	d0f9      	beq.n	81a4e <__aeabi_fmul+0xe6>
   81a5a:	ea41 010c 	orr.w	r1, r1, ip
   81a5e:	e78f      	b.n	81980 <__aeabi_fmul+0x18>
   81a60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81a64:	ea92 0f0c 	teq	r2, ip
   81a68:	bf18      	it	ne
   81a6a:	ea93 0f0c 	teqne	r3, ip
   81a6e:	d00a      	beq.n	81a86 <__aeabi_fmul+0x11e>
   81a70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81a74:	bf18      	it	ne
   81a76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81a7a:	d1d8      	bne.n	81a2e <__aeabi_fmul+0xc6>
   81a7c:	ea80 0001 	eor.w	r0, r0, r1
   81a80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81a84:	4770      	bx	lr
   81a86:	f090 0f00 	teq	r0, #0
   81a8a:	bf17      	itett	ne
   81a8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81a90:	4608      	moveq	r0, r1
   81a92:	f091 0f00 	teqne	r1, #0
   81a96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81a9a:	d014      	beq.n	81ac6 <__aeabi_fmul+0x15e>
   81a9c:	ea92 0f0c 	teq	r2, ip
   81aa0:	d101      	bne.n	81aa6 <__aeabi_fmul+0x13e>
   81aa2:	0242      	lsls	r2, r0, #9
   81aa4:	d10f      	bne.n	81ac6 <__aeabi_fmul+0x15e>
   81aa6:	ea93 0f0c 	teq	r3, ip
   81aaa:	d103      	bne.n	81ab4 <__aeabi_fmul+0x14c>
   81aac:	024b      	lsls	r3, r1, #9
   81aae:	bf18      	it	ne
   81ab0:	4608      	movne	r0, r1
   81ab2:	d108      	bne.n	81ac6 <__aeabi_fmul+0x15e>
   81ab4:	ea80 0001 	eor.w	r0, r0, r1
   81ab8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81ac4:	4770      	bx	lr
   81ac6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81aca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81ace:	4770      	bx	lr

00081ad0 <__aeabi_fdiv>:
   81ad0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81ad4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81ad8:	bf1e      	ittt	ne
   81ada:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81ade:	ea92 0f0c 	teqne	r2, ip
   81ae2:	ea93 0f0c 	teqne	r3, ip
   81ae6:	d069      	beq.n	81bbc <__aeabi_fdiv+0xec>
   81ae8:	eba2 0203 	sub.w	r2, r2, r3
   81aec:	ea80 0c01 	eor.w	ip, r0, r1
   81af0:	0249      	lsls	r1, r1, #9
   81af2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81af6:	d037      	beq.n	81b68 <__aeabi_fdiv+0x98>
   81af8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81afc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81b00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81b04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81b08:	428b      	cmp	r3, r1
   81b0a:	bf38      	it	cc
   81b0c:	005b      	lslcc	r3, r3, #1
   81b0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81b12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81b16:	428b      	cmp	r3, r1
   81b18:	bf24      	itt	cs
   81b1a:	1a5b      	subcs	r3, r3, r1
   81b1c:	ea40 000c 	orrcs.w	r0, r0, ip
   81b20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81b24:	bf24      	itt	cs
   81b26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81b2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81b2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81b32:	bf24      	itt	cs
   81b34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81b38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81b3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81b40:	bf24      	itt	cs
   81b42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81b46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81b4a:	011b      	lsls	r3, r3, #4
   81b4c:	bf18      	it	ne
   81b4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81b52:	d1e0      	bne.n	81b16 <__aeabi_fdiv+0x46>
   81b54:	2afd      	cmp	r2, #253	; 0xfd
   81b56:	f63f af50 	bhi.w	819fa <__aeabi_fmul+0x92>
   81b5a:	428b      	cmp	r3, r1
   81b5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81b60:	bf08      	it	eq
   81b62:	f020 0001 	biceq.w	r0, r0, #1
   81b66:	4770      	bx	lr
   81b68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81b6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81b70:	327f      	adds	r2, #127	; 0x7f
   81b72:	bfc2      	ittt	gt
   81b74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81b78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81b7c:	4770      	bxgt	lr
   81b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81b82:	f04f 0300 	mov.w	r3, #0
   81b86:	3a01      	subs	r2, #1
   81b88:	e737      	b.n	819fa <__aeabi_fmul+0x92>
   81b8a:	f092 0f00 	teq	r2, #0
   81b8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81b92:	bf02      	ittt	eq
   81b94:	0040      	lsleq	r0, r0, #1
   81b96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81b9a:	3a01      	subeq	r2, #1
   81b9c:	d0f9      	beq.n	81b92 <__aeabi_fdiv+0xc2>
   81b9e:	ea40 000c 	orr.w	r0, r0, ip
   81ba2:	f093 0f00 	teq	r3, #0
   81ba6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81baa:	bf02      	ittt	eq
   81bac:	0049      	lsleq	r1, r1, #1
   81bae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81bb2:	3b01      	subeq	r3, #1
   81bb4:	d0f9      	beq.n	81baa <__aeabi_fdiv+0xda>
   81bb6:	ea41 010c 	orr.w	r1, r1, ip
   81bba:	e795      	b.n	81ae8 <__aeabi_fdiv+0x18>
   81bbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81bc0:	ea92 0f0c 	teq	r2, ip
   81bc4:	d108      	bne.n	81bd8 <__aeabi_fdiv+0x108>
   81bc6:	0242      	lsls	r2, r0, #9
   81bc8:	f47f af7d 	bne.w	81ac6 <__aeabi_fmul+0x15e>
   81bcc:	ea93 0f0c 	teq	r3, ip
   81bd0:	f47f af70 	bne.w	81ab4 <__aeabi_fmul+0x14c>
   81bd4:	4608      	mov	r0, r1
   81bd6:	e776      	b.n	81ac6 <__aeabi_fmul+0x15e>
   81bd8:	ea93 0f0c 	teq	r3, ip
   81bdc:	d104      	bne.n	81be8 <__aeabi_fdiv+0x118>
   81bde:	024b      	lsls	r3, r1, #9
   81be0:	f43f af4c 	beq.w	81a7c <__aeabi_fmul+0x114>
   81be4:	4608      	mov	r0, r1
   81be6:	e76e      	b.n	81ac6 <__aeabi_fmul+0x15e>
   81be8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81bec:	bf18      	it	ne
   81bee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81bf2:	d1ca      	bne.n	81b8a <__aeabi_fdiv+0xba>
   81bf4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81bf8:	f47f af5c 	bne.w	81ab4 <__aeabi_fmul+0x14c>
   81bfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81c00:	f47f af3c 	bne.w	81a7c <__aeabi_fmul+0x114>
   81c04:	e75f      	b.n	81ac6 <__aeabi_fmul+0x15e>
   81c06:	bf00      	nop

00081c08 <__aeabi_f2iz>:
   81c08:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81c0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81c10:	d30f      	bcc.n	81c32 <__aeabi_f2iz+0x2a>
   81c12:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81c16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81c1a:	d90d      	bls.n	81c38 <__aeabi_f2iz+0x30>
   81c1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81c24:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81c28:	fa23 f002 	lsr.w	r0, r3, r2
   81c2c:	bf18      	it	ne
   81c2e:	4240      	negne	r0, r0
   81c30:	4770      	bx	lr
   81c32:	f04f 0000 	mov.w	r0, #0
   81c36:	4770      	bx	lr
   81c38:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81c3c:	d101      	bne.n	81c42 <__aeabi_f2iz+0x3a>
   81c3e:	0242      	lsls	r2, r0, #9
   81c40:	d105      	bne.n	81c4e <__aeabi_f2iz+0x46>
   81c42:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81c46:	bf08      	it	eq
   81c48:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81c4c:	4770      	bx	lr
   81c4e:	f04f 0000 	mov.w	r0, #0
   81c52:	4770      	bx	lr

00081c54 <__libc_init_array>:
   81c54:	b570      	push	{r4, r5, r6, lr}
   81c56:	4e0f      	ldr	r6, [pc, #60]	; (81c94 <__libc_init_array+0x40>)
   81c58:	4d0f      	ldr	r5, [pc, #60]	; (81c98 <__libc_init_array+0x44>)
   81c5a:	1b76      	subs	r6, r6, r5
   81c5c:	10b6      	asrs	r6, r6, #2
   81c5e:	bf18      	it	ne
   81c60:	2400      	movne	r4, #0
   81c62:	d005      	beq.n	81c70 <__libc_init_array+0x1c>
   81c64:	3401      	adds	r4, #1
   81c66:	f855 3b04 	ldr.w	r3, [r5], #4
   81c6a:	4798      	blx	r3
   81c6c:	42a6      	cmp	r6, r4
   81c6e:	d1f9      	bne.n	81c64 <__libc_init_array+0x10>
   81c70:	4e0a      	ldr	r6, [pc, #40]	; (81c9c <__libc_init_array+0x48>)
   81c72:	4d0b      	ldr	r5, [pc, #44]	; (81ca0 <__libc_init_array+0x4c>)
   81c74:	f000 f960 	bl	81f38 <_init>
   81c78:	1b76      	subs	r6, r6, r5
   81c7a:	10b6      	asrs	r6, r6, #2
   81c7c:	bf18      	it	ne
   81c7e:	2400      	movne	r4, #0
   81c80:	d006      	beq.n	81c90 <__libc_init_array+0x3c>
   81c82:	3401      	adds	r4, #1
   81c84:	f855 3b04 	ldr.w	r3, [r5], #4
   81c88:	4798      	blx	r3
   81c8a:	42a6      	cmp	r6, r4
   81c8c:	d1f9      	bne.n	81c82 <__libc_init_array+0x2e>
   81c8e:	bd70      	pop	{r4, r5, r6, pc}
   81c90:	bd70      	pop	{r4, r5, r6, pc}
   81c92:	bf00      	nop
   81c94:	00081f44 	.word	0x00081f44
   81c98:	00081f44 	.word	0x00081f44
   81c9c:	00081f4c 	.word	0x00081f4c
   81ca0:	00081f44 	.word	0x00081f44

00081ca4 <register_fini>:
   81ca4:	4b02      	ldr	r3, [pc, #8]	; (81cb0 <register_fini+0xc>)
   81ca6:	b113      	cbz	r3, 81cae <register_fini+0xa>
   81ca8:	4802      	ldr	r0, [pc, #8]	; (81cb4 <register_fini+0x10>)
   81caa:	f000 b805 	b.w	81cb8 <atexit>
   81cae:	4770      	bx	lr
   81cb0:	00000000 	.word	0x00000000
   81cb4:	00081cc5 	.word	0x00081cc5

00081cb8 <atexit>:
   81cb8:	2300      	movs	r3, #0
   81cba:	4601      	mov	r1, r0
   81cbc:	461a      	mov	r2, r3
   81cbe:	4618      	mov	r0, r3
   81cc0:	f000 b81e 	b.w	81d00 <__register_exitproc>

00081cc4 <__libc_fini_array>:
   81cc4:	b538      	push	{r3, r4, r5, lr}
   81cc6:	4c0a      	ldr	r4, [pc, #40]	; (81cf0 <__libc_fini_array+0x2c>)
   81cc8:	4d0a      	ldr	r5, [pc, #40]	; (81cf4 <__libc_fini_array+0x30>)
   81cca:	1b64      	subs	r4, r4, r5
   81ccc:	10a4      	asrs	r4, r4, #2
   81cce:	d00a      	beq.n	81ce6 <__libc_fini_array+0x22>
   81cd0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81cd4:	3b01      	subs	r3, #1
   81cd6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81cda:	3c01      	subs	r4, #1
   81cdc:	f855 3904 	ldr.w	r3, [r5], #-4
   81ce0:	4798      	blx	r3
   81ce2:	2c00      	cmp	r4, #0
   81ce4:	d1f9      	bne.n	81cda <__libc_fini_array+0x16>
   81ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81cea:	f000 b92f 	b.w	81f4c <_fini>
   81cee:	bf00      	nop
   81cf0:	00081f5c 	.word	0x00081f5c
   81cf4:	00081f58 	.word	0x00081f58

00081cf8 <__retarget_lock_acquire_recursive>:
   81cf8:	4770      	bx	lr
   81cfa:	bf00      	nop

00081cfc <__retarget_lock_release_recursive>:
   81cfc:	4770      	bx	lr
   81cfe:	bf00      	nop

00081d00 <__register_exitproc>:
   81d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81d04:	4d2c      	ldr	r5, [pc, #176]	; (81db8 <__register_exitproc+0xb8>)
   81d06:	4606      	mov	r6, r0
   81d08:	6828      	ldr	r0, [r5, #0]
   81d0a:	4698      	mov	r8, r3
   81d0c:	460f      	mov	r7, r1
   81d0e:	4691      	mov	r9, r2
   81d10:	f7ff fff2 	bl	81cf8 <__retarget_lock_acquire_recursive>
   81d14:	4b29      	ldr	r3, [pc, #164]	; (81dbc <__register_exitproc+0xbc>)
   81d16:	681c      	ldr	r4, [r3, #0]
   81d18:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81d1c:	2b00      	cmp	r3, #0
   81d1e:	d03e      	beq.n	81d9e <__register_exitproc+0x9e>
   81d20:	685a      	ldr	r2, [r3, #4]
   81d22:	2a1f      	cmp	r2, #31
   81d24:	dc1c      	bgt.n	81d60 <__register_exitproc+0x60>
   81d26:	f102 0e01 	add.w	lr, r2, #1
   81d2a:	b176      	cbz	r6, 81d4a <__register_exitproc+0x4a>
   81d2c:	2101      	movs	r1, #1
   81d2e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81d32:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81d36:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81d3a:	4091      	lsls	r1, r2
   81d3c:	4308      	orrs	r0, r1
   81d3e:	2e02      	cmp	r6, #2
   81d40:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81d44:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81d48:	d023      	beq.n	81d92 <__register_exitproc+0x92>
   81d4a:	3202      	adds	r2, #2
   81d4c:	f8c3 e004 	str.w	lr, [r3, #4]
   81d50:	6828      	ldr	r0, [r5, #0]
   81d52:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81d56:	f7ff ffd1 	bl	81cfc <__retarget_lock_release_recursive>
   81d5a:	2000      	movs	r0, #0
   81d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81d60:	4b17      	ldr	r3, [pc, #92]	; (81dc0 <__register_exitproc+0xc0>)
   81d62:	b30b      	cbz	r3, 81da8 <__register_exitproc+0xa8>
   81d64:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81d68:	f3af 8000 	nop.w
   81d6c:	4603      	mov	r3, r0
   81d6e:	b1d8      	cbz	r0, 81da8 <__register_exitproc+0xa8>
   81d70:	2000      	movs	r0, #0
   81d72:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81d76:	f04f 0e01 	mov.w	lr, #1
   81d7a:	6058      	str	r0, [r3, #4]
   81d7c:	6019      	str	r1, [r3, #0]
   81d7e:	4602      	mov	r2, r0
   81d80:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81d84:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81d88:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81d8c:	2e00      	cmp	r6, #0
   81d8e:	d0dc      	beq.n	81d4a <__register_exitproc+0x4a>
   81d90:	e7cc      	b.n	81d2c <__register_exitproc+0x2c>
   81d92:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81d96:	4301      	orrs	r1, r0
   81d98:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81d9c:	e7d5      	b.n	81d4a <__register_exitproc+0x4a>
   81d9e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81da2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81da6:	e7bb      	b.n	81d20 <__register_exitproc+0x20>
   81da8:	6828      	ldr	r0, [r5, #0]
   81daa:	f7ff ffa7 	bl	81cfc <__retarget_lock_release_recursive>
   81dae:	f04f 30ff 	mov.w	r0, #4294967295
   81db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81db6:	bf00      	nop
   81db8:	20000430 	.word	0x20000430
   81dbc:	00081f34 	.word	0x00081f34
   81dc0:	00000000 	.word	0x00000000
   81dc4:	304e4143 	.word	0x304e4143
   81dc8:	73656d20 	.word	0x73656d20
   81dcc:	65676173 	.word	0x65676173
   81dd0:	72726120 	.word	0x72726120
   81dd4:	64657669 	.word	0x64657669
   81dd8:	206e6920 	.word	0x206e6920
   81ddc:	2d6e6f6e 	.word	0x2d6e6f6e
   81de0:	64657375 	.word	0x64657375
   81de4:	69616d20 	.word	0x69616d20
   81de8:	786f626c 	.word	0x786f626c
   81dec:	00000d0a 	.word	0x00000d0a
   81df0:	2077656e 	.word	0x2077656e
   81df4:	7373656d 	.word	0x7373656d
   81df8:	3a656761 	.word	0x3a656761
   81dfc:	000d0a20 	.word	0x000d0a20
   81e00:	7373656d 	.word	0x7373656d
   81e04:	20656761 	.word	0x20656761
   81e08:	203a6469 	.word	0x203a6469
   81e0c:	0d0a6425 	.word	0x0d0a6425
   81e10:	00000000 	.word	0x00000000
   81e14:	7373656d 	.word	0x7373656d
   81e18:	20656761 	.word	0x20656761
   81e1c:	61746164 	.word	0x61746164
   81e20:	6e656c20 	.word	0x6e656c20
   81e24:	3a687467 	.word	0x3a687467
   81e28:	0a642520 	.word	0x0a642520
   81e2c:	73656d0d 	.word	0x73656d0d
   81e30:	65676173 	.word	0x65676173
   81e34:	74616420 	.word	0x74616420
   81e38:	00203a61 	.word	0x00203a61
   81e3c:	00206425 	.word	0x00206425
   81e40:	000d0a0a 	.word	0x000d0a0a
   81e44:	656d6167 	.word	0x656d6167
   81e48:	65766f20 	.word	0x65766f20
   81e4c:	000d0a72 	.word	0x000d0a72
   81e50:	20796f6a 	.word	0x20796f6a
   81e54:	63697473 	.word	0x63697473
   81e58:	25203a6b 	.word	0x25203a6b
   81e5c:	000d0a64 	.word	0x000d0a64
   81e60:	696c6143 	.word	0x696c6143
   81e64:	6f4d2062 	.word	0x6f4d2062
   81e68:	20726f74 	.word	0x20726f74
   81e6c:	61746144 	.word	0x61746144
   81e70:	25203a20 	.word	0x25203a20
   81e74:	000d0a64 	.word	0x000d0a64
   81e78:	20444950 	.word	0x20444950
   81e7c:	6425203a 	.word	0x6425203a
   81e80:	00000d0a 	.word	0x00000d0a
   81e84:	7074754f 	.word	0x7074754f
   81e88:	74207475 	.word	0x74207475
   81e8c:	6572206f 	.word	0x6572206f
   81e90:	74736967 	.word	0x74736967
   81e94:	203a7265 	.word	0x203a7265
   81e98:	0a206425 	.word	0x0a206425
   81e9c:	0000000d 	.word	0x0000000d
   81ea0:	7466656c 	.word	0x7466656c
   81ea4:	6425203a 	.word	0x6425203a
   81ea8:	00000d0a 	.word	0x00000d0a
   81eac:	68676972 	.word	0x68676972
   81eb0:	25203a74 	.word	0x25203a74
   81eb4:	000d0a64 	.word	0x000d0a64
   81eb8:	6c756e28 	.word	0x6c756e28
   81ebc:	0000296c 	.word	0x0000296c
   81ec0:	4f525245 	.word	0x4f525245
   81ec4:	44202152 	.word	0x44202152
   81ec8:	20797475 	.word	0x20797475
   81ecc:	6c637963 	.word	0x6c637963
   81ed0:	756f2065 	.word	0x756f2065
   81ed4:	666f2074 	.word	0x666f2074
   81ed8:	6e617220 	.word	0x6e617220
   81edc:	202e6567 	.word	0x202e6567
   81ee0:	7473754d 	.word	0x7473754d
   81ee4:	20656220 	.word	0x20656220
   81ee8:	77746562 	.word	0x77746562
   81eec:	206e6565 	.word	0x206e6565
   81ef0:	6e612031 	.word	0x6e612031
   81ef4:	0a322064 	.word	0x0a322064
   81ef8:	0000000d 	.word	0x0000000d
   81efc:	4f525245 	.word	0x4f525245
   81f00:	49202152 	.word	0x49202152
   81f04:	6c61766e 	.word	0x6c61766e
   81f08:	70206469 	.word	0x70206469
   81f0c:	7469736f 	.word	0x7469736f
   81f10:	006e6f69 	.word	0x006e6f69
   81f14:	3a525245 	.word	0x3a525245
   81f18:	52415520 	.word	0x52415520
   81f1c:	58522054 	.word	0x58522054
   81f20:	66756220 	.word	0x66756220
   81f24:	20726566 	.word	0x20726566
   81f28:	66207369 	.word	0x66207369
   81f2c:	0a6c6c75 	.word	0x0a6c6c75
   81f30:	0000000d 	.word	0x0000000d

00081f34 <_global_impure_ptr>:
   81f34:	20000008                                ... 

00081f38 <_init>:
   81f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81f3a:	bf00      	nop
   81f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81f3e:	bc08      	pop	{r3}
   81f40:	469e      	mov	lr, r3
   81f42:	4770      	bx	lr

00081f44 <__init_array_start>:
   81f44:	00081ca5 	.word	0x00081ca5

00081f48 <__frame_dummy_init_array_entry>:
   81f48:	00080119                                ....

00081f4c <_fini>:
   81f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81f4e:	bf00      	nop
   81f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81f52:	bc08      	pop	{r3}
   81f54:	469e      	mov	lr, r3
   81f56:	4770      	bx	lr

00081f58 <__fini_array_start>:
   81f58:	000800f5 	.word	0x000800f5
