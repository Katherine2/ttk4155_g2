
G3_ES_Project_Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f28  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081f28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  20000434  0008235c  00020434  2**2
                  ALLOC
  3 .stack        00000400  20000510  00082438  00020434  2**0
                  ALLOC
  4 .heap         00000200  20000910  00082838  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000080a3  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001809  00000000  00000000  00028559  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001860  00000000  00000000  00029d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002b0  00000000  00000000  0002b5c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0002b872  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000130ae  00000000  00000000  0002ba82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005529  00000000  00000000  0003eb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054fc1  00000000  00000000  00044059  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000908  00000000  00000000  0009901c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	10 09 00 20 39 05 08 00 35 05 08 00 35 05 08 00     ... 9...5...5...
   80010:	35 05 08 00 35 05 08 00 35 05 08 00 00 00 00 00     5...5...5.......
	...
   8002c:	35 05 08 00 35 05 08 00 00 00 00 00 35 05 08 00     5...5.......5...
   8003c:	35 05 08 00 35 05 08 00 35 05 08 00 35 05 08 00     5...5...5...5...
   8004c:	35 05 08 00 35 05 08 00 35 05 08 00 35 05 08 00     5...5...5...5...
   8005c:	35 05 08 00 29 0f 08 00 35 05 08 00 00 00 00 00     5...)...5.......
   8006c:	35 05 08 00 35 05 08 00 35 05 08 00 35 05 08 00     5...5...5...5...
	...
   80084:	35 05 08 00 35 05 08 00 35 05 08 00 35 05 08 00     5...5...5...5...
   80094:	35 05 08 00 35 05 08 00 35 05 08 00 35 05 08 00     5...5...5...5...
   800a4:	00 00 00 00 35 05 08 00 35 05 08 00 35 05 08 00     ....5...5...5...
   800b4:	35 05 08 00 35 05 08 00 35 05 08 00 35 05 08 00     5...5...5...5...
   800c4:	35 05 08 00 35 05 08 00 35 05 08 00 35 05 08 00     5...5...5...5...
   800d4:	35 05 08 00 35 05 08 00 35 05 08 00 35 05 08 00     5...5...5...5...
   800e4:	35 05 08 00 35 05 08 00 e5 02 08 00 35 05 08 00     5...5.......5...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081f28 	.word	0x00081f28

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081f28 	.word	0x00081f28
   80154:	20000438 	.word	0x20000438
   80158:	00081f28 	.word	0x00081f28
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \param num_rx_mb Number of receive mailboxes, 	rx mb indexes: [num_tx_mb, num_rx_mb-1]
 *
 * \retval Success(0) or failure(1)
 */
uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8){
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>
	}
	
	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	//TO CHANGE bit timing: BRP = 3 & 16TQ => SyncSeg = 1, PropSeg = 2, PS1 = 7, PS2 = 6, SJW = 1
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_init_def_tx_rx_mb>:
{
   80250:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80252:	2202      	movs	r2, #2
   80254:	2101      	movs	r1, #1
   80256:	4b01      	ldr	r3, [pc, #4]	; (8025c <can_init_def_tx_rx_mb+0xc>)
   80258:	4798      	blx	r3
}
   8025a:	bd08      	pop	{r3, pc}
   8025c:	00080161 	.word	0x00080161

00080260 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80260:	014b      	lsls	r3, r1, #5
   80262:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80266:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8026a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80272:	d033      	beq.n	802dc <can_receive+0x7c>
{
   80274:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80276:	014b      	lsls	r3, r1, #5
   80278:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80280:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80284:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80288:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8028c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80290:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80296:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8029a:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8029c:	461d      	mov	r5, r3
   8029e:	b15b      	cbz	r3, 802b8 <can_receive+0x58>
   802a0:	3003      	adds	r0, #3
   802a2:	2300      	movs	r3, #0
		{
			if(i < 4)
   802a4:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   802a6:	bfd9      	ittee	le
   802a8:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   802aa:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802ac:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   802ae:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802b0:	3301      	adds	r3, #1
   802b2:	3001      	adds	r0, #1
   802b4:	42ab      	cmp	r3, r5
   802b6:	d1f5      	bne.n	802a4 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802b8:	4b09      	ldr	r3, [pc, #36]	; (802e0 <can_receive+0x80>)
   802ba:	f101 0210 	add.w	r2, r1, #16
   802be:	0152      	lsls	r2, r2, #5
   802c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802c4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802d2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802d6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802d8:	bc30      	pop	{r4, r5}
   802da:	4770      	bx	lr
		return 1;
   802dc:	2001      	movs	r0, #1
   802de:	4770      	bx	lr
   802e0:	400b4000 	.word	0x400b4000

000802e4 <CAN0_Handler>:
{
   802e4:	b510      	push	{r4, lr}
	char can_sr = CAN0->CAN_SR;
   802e6:	4b18      	ldr	r3, [pc, #96]	; (80348 <CAN0_Handler+0x64>)
   802e8:	691c      	ldr	r4, [r3, #16]
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802ea:	f014 0f06 	tst.w	r4, #6
   802ee:	d013      	beq.n	80318 <CAN0_Handler+0x34>
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802f0:	f014 0f02 	tst.w	r4, #2
   802f4:	d11c      	bne.n	80330 <CAN0_Handler+0x4c>
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802f6:	f014 0f04 	tst.w	r4, #4
   802fa:	d021      	beq.n	80340 <CAN0_Handler+0x5c>
			can_receive(&message, 2);
   802fc:	2102      	movs	r1, #2
   802fe:	4813      	ldr	r0, [pc, #76]	; (8034c <CAN0_Handler+0x68>)
   80300:	4b13      	ldr	r3, [pc, #76]	; (80350 <CAN0_Handler+0x6c>)
   80302:	4798      	blx	r3
			newMessage = 1;
   80304:	2201      	movs	r2, #1
   80306:	4b13      	ldr	r3, [pc, #76]	; (80354 <CAN0_Handler+0x70>)
   80308:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < message.data_length; i++)
   8030a:	4b10      	ldr	r3, [pc, #64]	; (8034c <CAN0_Handler+0x68>)
   8030c:	789a      	ldrb	r2, [r3, #2]
   8030e:	b11a      	cbz	r2, 80318 <CAN0_Handler+0x34>
   80310:	2300      	movs	r3, #0
   80312:	3301      	adds	r3, #1
   80314:	4293      	cmp	r3, r2
   80316:	d1fc      	bne.n	80312 <CAN0_Handler+0x2e>
	if(can_sr & CAN_SR_MB0)
   80318:	f014 0f01 	tst.w	r4, #1
   8031c:	d002      	beq.n	80324 <CAN0_Handler+0x40>
		CAN0->CAN_IDR = CAN_IER_MB0;
   8031e:	2201      	movs	r2, #1
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <CAN0_Handler+0x64>)
   80322:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80324:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80328:	4b0b      	ldr	r3, [pc, #44]	; (80358 <CAN0_Handler+0x74>)
   8032a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8032e:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   80330:	2101      	movs	r1, #1
   80332:	4806      	ldr	r0, [pc, #24]	; (8034c <CAN0_Handler+0x68>)
   80334:	4b06      	ldr	r3, [pc, #24]	; (80350 <CAN0_Handler+0x6c>)
   80336:	4798      	blx	r3
			 newMessage = 1;
   80338:	2201      	movs	r2, #1
   8033a:	4b06      	ldr	r3, [pc, #24]	; (80354 <CAN0_Handler+0x70>)
   8033c:	601a      	str	r2, [r3, #0]
   8033e:	e7e4      	b.n	8030a <CAN0_Handler+0x26>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80340:	4806      	ldr	r0, [pc, #24]	; (8035c <CAN0_Handler+0x78>)
   80342:	4b07      	ldr	r3, [pc, #28]	; (80360 <CAN0_Handler+0x7c>)
   80344:	4798      	blx	r3
   80346:	e7e0      	b.n	8030a <CAN0_Handler+0x26>
   80348:	400b4000 	.word	0x400b4000
   8034c:	20000458 	.word	0x20000458
   80350:	00080261 	.word	0x00080261
   80354:	20000450 	.word	0x20000450
   80358:	e000e100 	.word	0xe000e100
   8035c:	00081dec 	.word	0x00081dec
   80360:	00080d99 	.word	0x00080d99

00080364 <new_message_received>:

// Move the can handler in this file and use these functions to get the message in main
int new_message_received(void){
	return newMessage;
}
   80364:	4b01      	ldr	r3, [pc, #4]	; (8036c <new_message_received+0x8>)
   80366:	6818      	ldr	r0, [r3, #0]
   80368:	4770      	bx	lr
   8036a:	bf00      	nop
   8036c:	20000450 	.word	0x20000450

00080370 <get_message>:

CAN_MESSAGE get_message(void){
   80370:	b410      	push	{r4}
	newMessage = 0;
   80372:	2100      	movs	r1, #0
   80374:	4a05      	ldr	r2, [pc, #20]	; (8038c <get_message+0x1c>)
   80376:	6011      	str	r1, [r2, #0]
	return message;
   80378:	4a05      	ldr	r2, [pc, #20]	; (80390 <get_message+0x20>)
   8037a:	6814      	ldr	r4, [r2, #0]
   8037c:	6851      	ldr	r1, [r2, #4]
   8037e:	6892      	ldr	r2, [r2, #8]
   80380:	6004      	str	r4, [r0, #0]
   80382:	6041      	str	r1, [r0, #4]
   80384:	6082      	str	r2, [r0, #8]
}
   80386:	bc10      	pop	{r4}
   80388:	4770      	bx	lr
   8038a:	bf00      	nop
   8038c:	20000450 	.word	0x20000450
   80390:	20000458 	.word	0x20000458

00080394 <print_message>:

void print_message(CAN_MESSAGE msg){
   80394:	b5f0      	push	{r4, r5, r6, r7, lr}
   80396:	b085      	sub	sp, #20
   80398:	ab04      	add	r3, sp, #16
   8039a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   8039e:	f89d 5006 	ldrb.w	r5, [sp, #6]
	printf("new message: \n\r");
   803a2:	480e      	ldr	r0, [pc, #56]	; (803dc <print_message+0x48>)
   803a4:	4c0e      	ldr	r4, [pc, #56]	; (803e0 <print_message+0x4c>)
   803a6:	47a0      	blx	r4
	printf("message id: %d\n\r", msg.id);
   803a8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   803ac:	480d      	ldr	r0, [pc, #52]	; (803e4 <print_message+0x50>)
   803ae:	47a0      	blx	r4
	printf("message data length: %d\n\rmessage data: ", msg.data_length);
   803b0:	4629      	mov	r1, r5
   803b2:	480d      	ldr	r0, [pc, #52]	; (803e8 <print_message+0x54>)
   803b4:	47a0      	blx	r4
	for (int i = 0; i < msg.data_length; i++)
   803b6:	b165      	cbz	r5, 803d2 <print_message+0x3e>
   803b8:	f10d 0407 	add.w	r4, sp, #7
   803bc:	ab04      	add	r3, sp, #16
   803be:	441d      	add	r5, r3
   803c0:	3d09      	subs	r5, #9
	{
		printf("%d ", msg.data[i]);
   803c2:	4f0a      	ldr	r7, [pc, #40]	; (803ec <print_message+0x58>)
   803c4:	4e06      	ldr	r6, [pc, #24]	; (803e0 <print_message+0x4c>)
   803c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   803ca:	4638      	mov	r0, r7
   803cc:	47b0      	blx	r6
	for (int i = 0; i < msg.data_length; i++)
   803ce:	42ac      	cmp	r4, r5
   803d0:	d1f9      	bne.n	803c6 <print_message+0x32>
	}
	printf("\n\n\r");
   803d2:	4807      	ldr	r0, [pc, #28]	; (803f0 <print_message+0x5c>)
   803d4:	4b02      	ldr	r3, [pc, #8]	; (803e0 <print_message+0x4c>)
   803d6:	4798      	blx	r3
}
   803d8:	b005      	add	sp, #20
   803da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   803dc:	00081e18 	.word	0x00081e18
   803e0:	00080d99 	.word	0x00080d99
   803e4:	00081e28 	.word	0x00081e28
   803e8:	00081e3c 	.word	0x00081e3c
   803ec:	00081e64 	.word	0x00081e64
   803f0:	00081e68 	.word	0x00081e68

000803f4 <start_game>:
#define GAME_OVER 5

int playing = 1, game_end= 0;
CAN_MESSAGE msg;

void start_game(){
   803f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   803f6:	b085      	sub	sp, #20
	int goal = 0, adc;
   803f8:	2700      	movs	r7, #0
	while(1) {
		if(playing && !game_end){
   803fa:	4d17      	ldr	r5, [pc, #92]	; (80458 <start_game+0x64>)
			goal = is_goal(adc, goal);
			msg = get_positions();
			delay_us(100000);
		}
		else{
			if(new_message_received()){
   803fc:	4e17      	ldr	r6, [pc, #92]	; (8045c <start_game+0x68>)
				msg = get_message();
   803fe:	4c18      	ldr	r4, [pc, #96]	; (80460 <start_game+0x6c>)
   80400:	e001      	b.n	80406 <start_game+0x12>
			if(new_message_received()){
   80402:	47b0      	blx	r6
   80404:	b9c8      	cbnz	r0, 8043a <start_game+0x46>
		if(playing && !game_end){
   80406:	682b      	ldr	r3, [r5, #0]
   80408:	2b00      	cmp	r3, #0
   8040a:	d0fa      	beq.n	80402 <start_game+0xe>
   8040c:	4b15      	ldr	r3, [pc, #84]	; (80464 <start_game+0x70>)
   8040e:	681b      	ldr	r3, [r3, #0]
   80410:	2b00      	cmp	r3, #0
   80412:	d1f6      	bne.n	80402 <start_game+0xe>
			adc = adc_read();
   80414:	4b14      	ldr	r3, [pc, #80]	; (80468 <start_game+0x74>)
   80416:	4798      	blx	r3
			goal = is_goal(adc, goal);
   80418:	4639      	mov	r1, r7
   8041a:	4b14      	ldr	r3, [pc, #80]	; (8046c <start_game+0x78>)
   8041c:	4798      	blx	r3
   8041e:	4607      	mov	r7, r0
			msg = get_positions();
   80420:	4668      	mov	r0, sp
   80422:	4b13      	ldr	r3, [pc, #76]	; (80470 <start_game+0x7c>)
   80424:	4798      	blx	r3
   80426:	9900      	ldr	r1, [sp, #0]
   80428:	9a01      	ldr	r2, [sp, #4]
   8042a:	9b02      	ldr	r3, [sp, #8]
   8042c:	6021      	str	r1, [r4, #0]
   8042e:	6062      	str	r2, [r4, #4]
   80430:	60a3      	str	r3, [r4, #8]
			delay_us(100000);
   80432:	4810      	ldr	r0, [pc, #64]	; (80474 <start_game+0x80>)
   80434:	4b10      	ldr	r3, [pc, #64]	; (80478 <start_game+0x84>)
   80436:	4798      	blx	r3
		if(playing && !game_end){
   80438:	e7e5      	b.n	80406 <start_game+0x12>
				msg = get_message();
   8043a:	4668      	mov	r0, sp
   8043c:	4b0f      	ldr	r3, [pc, #60]	; (8047c <start_game+0x88>)
   8043e:	4798      	blx	r3
   80440:	9900      	ldr	r1, [sp, #0]
   80442:	9a01      	ldr	r2, [sp, #4]
   80444:	9b02      	ldr	r3, [sp, #8]
   80446:	6021      	str	r1, [r4, #0]
   80448:	6062      	str	r2, [r4, #4]
   8044a:	60a3      	str	r3, [r4, #8]
				if(!msg.data[2]){
   8044c:	7963      	ldrb	r3, [r4, #5]
   8044e:	2b00      	cmp	r3, #0
   80450:	d1d9      	bne.n	80406 <start_game+0x12>
					playing = 1;
   80452:	2301      	movs	r3, #1
   80454:	602b      	str	r3, [r5, #0]
   80456:	e7d6      	b.n	80406 <start_game+0x12>
   80458:	20000000 	.word	0x20000000
   8045c:	00080365 	.word	0x00080365
   80460:	20000464 	.word	0x20000464
   80464:	20000454 	.word	0x20000454
   80468:	00080699 	.word	0x00080699
   8046c:	000806a5 	.word	0x000806a5
   80470:	00080771 	.word	0x00080771
   80474:	000186a0 	.word	0x000186a0
   80478:	000804e9 	.word	0x000804e9
   8047c:	00080371 	.word	0x00080371

00080480 <game_over>:
	if(score >= GAME_OVER){
		game_over();
	}
}

void game_over(){
   80480:	b508      	push	{r3, lr}
	playing = 0;
   80482:	2200      	movs	r2, #0
   80484:	4b04      	ldr	r3, [pc, #16]	; (80498 <game_over+0x18>)
   80486:	601a      	str	r2, [r3, #0]
	game_end = 1;
   80488:	2201      	movs	r2, #1
   8048a:	4b04      	ldr	r3, [pc, #16]	; (8049c <game_over+0x1c>)
   8048c:	601a      	str	r2, [r3, #0]
	printf("game over\n\r");
   8048e:	4804      	ldr	r0, [pc, #16]	; (804a0 <game_over+0x20>)
   80490:	4b04      	ldr	r3, [pc, #16]	; (804a4 <game_over+0x24>)
   80492:	4798      	blx	r3
   80494:	bd08      	pop	{r3, pc}
   80496:	bf00      	nop
   80498:	20000000 	.word	0x20000000
   8049c:	20000454 	.word	0x20000454
   804a0:	00081e6c 	.word	0x00081e6c
   804a4:	00080d99 	.word	0x00080d99

000804a8 <pause_game>:
void pause_game(int score){
   804a8:	b508      	push	{r3, lr}
	playing = 0;
   804aa:	2200      	movs	r2, #0
   804ac:	4b03      	ldr	r3, [pc, #12]	; (804bc <pause_game+0x14>)
   804ae:	601a      	str	r2, [r3, #0]
	if(score >= GAME_OVER){
   804b0:	2804      	cmp	r0, #4
   804b2:	dc00      	bgt.n	804b6 <pause_game+0xe>
   804b4:	bd08      	pop	{r3, pc}
		game_over();
   804b6:	4b02      	ldr	r3, [pc, #8]	; (804c0 <pause_game+0x18>)
   804b8:	4798      	blx	r3
}
   804ba:	e7fb      	b.n	804b4 <pause_game+0xc>
   804bc:	20000000 	.word	0x20000000
   804c0:	00080481 	.word	0x00080481

000804c4 <delay_ticks>:


/* Function for performing delay by using SysTick */
void delay_ticks(int ticks)
{
	SysTick->LOAD = ticks;
   804c4:	4b06      	ldr	r3, [pc, #24]	; (804e0 <delay_ticks+0x1c>)
   804c6:	6058      	str	r0, [r3, #4]
	SysTick->CTRL = 1;
   804c8:	2201      	movs	r2, #1
   804ca:	601a      	str	r2, [r3, #0]
	
	// COUNTFLAG is a bit that is set to 1 when counter reaches 0.
	// It's automatically cleared when read.
	while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
   804cc:	461a      	mov	r2, r3
   804ce:	6813      	ldr	r3, [r2, #0]
   804d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   804d4:	d0fb      	beq.n	804ce <delay_ticks+0xa>
	SysTick->CTRL = 0;
   804d6:	2200      	movs	r2, #0
   804d8:	4b01      	ldr	r3, [pc, #4]	; (804e0 <delay_ticks+0x1c>)
   804da:	601a      	str	r2, [r3, #0]
   804dc:	4770      	bx	lr
   804de:	bf00      	nop
   804e0:	e000e010 	.word	0xe000e010
   804e4:	00000000 	.word	0x00000000

000804e8 <delay_us>:

}

/* Function for implementing us delay */
void delay_us(int us)
{
   804e8:	b510      	push	{r4, lr}
	delay_ticks((us * (F_CPU / 8.4)) / 1000000);
   804ea:	4b0d      	ldr	r3, [pc, #52]	; (80520 <delay_us+0x38>)
   804ec:	4798      	blx	r3
   804ee:	a308      	add	r3, pc, #32	; (adr r3, 80510 <delay_us+0x28>)
   804f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   804f4:	4c0b      	ldr	r4, [pc, #44]	; (80524 <delay_us+0x3c>)
   804f6:	47a0      	blx	r4
   804f8:	a307      	add	r3, pc, #28	; (adr r3, 80518 <delay_us+0x30>)
   804fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   804fe:	4c0a      	ldr	r4, [pc, #40]	; (80528 <delay_us+0x40>)
   80500:	47a0      	blx	r4
   80502:	4b0a      	ldr	r3, [pc, #40]	; (8052c <delay_us+0x44>)
   80504:	4798      	blx	r3
   80506:	4b0a      	ldr	r3, [pc, #40]	; (80530 <delay_us+0x48>)
   80508:	4798      	blx	r3
   8050a:	bd10      	pop	{r4, pc}
   8050c:	f3af 8000 	nop.w
   80510:	00000000 	.word	0x00000000
   80514:	416312d0 	.word	0x416312d0
   80518:	00000000 	.word	0x00000000
   8051c:	412e8480 	.word	0x412e8480
   80520:	00081235 	.word	0x00081235
   80524:	00081301 	.word	0x00081301
   80528:	00081555 	.word	0x00081555
   8052c:	00081725 	.word	0x00081725
   80530:	000804c5 	.word	0x000804c5

00080534 <Dummy_Handler>:
   80534:	e7fe      	b.n	80534 <Dummy_Handler>
	...

00080538 <Reset_Handler>:
   80538:	b508      	push	{r3, lr}
   8053a:	4b18      	ldr	r3, [pc, #96]	; (8059c <Reset_Handler+0x64>)
   8053c:	4a18      	ldr	r2, [pc, #96]	; (805a0 <Reset_Handler+0x68>)
   8053e:	429a      	cmp	r2, r3
   80540:	d010      	beq.n	80564 <Reset_Handler+0x2c>
   80542:	4b18      	ldr	r3, [pc, #96]	; (805a4 <Reset_Handler+0x6c>)
   80544:	4a15      	ldr	r2, [pc, #84]	; (8059c <Reset_Handler+0x64>)
   80546:	429a      	cmp	r2, r3
   80548:	d20c      	bcs.n	80564 <Reset_Handler+0x2c>
   8054a:	3b01      	subs	r3, #1
   8054c:	1a9b      	subs	r3, r3, r2
   8054e:	f023 0303 	bic.w	r3, r3, #3
   80552:	3304      	adds	r3, #4
   80554:	4413      	add	r3, r2
   80556:	4912      	ldr	r1, [pc, #72]	; (805a0 <Reset_Handler+0x68>)
   80558:	f851 0b04 	ldr.w	r0, [r1], #4
   8055c:	f842 0b04 	str.w	r0, [r2], #4
   80560:	429a      	cmp	r2, r3
   80562:	d1f9      	bne.n	80558 <Reset_Handler+0x20>
   80564:	4b10      	ldr	r3, [pc, #64]	; (805a8 <Reset_Handler+0x70>)
   80566:	4a11      	ldr	r2, [pc, #68]	; (805ac <Reset_Handler+0x74>)
   80568:	429a      	cmp	r2, r3
   8056a:	d20a      	bcs.n	80582 <Reset_Handler+0x4a>
   8056c:	3b01      	subs	r3, #1
   8056e:	1a9b      	subs	r3, r3, r2
   80570:	f023 0303 	bic.w	r3, r3, #3
   80574:	3304      	adds	r3, #4
   80576:	4413      	add	r3, r2
   80578:	2100      	movs	r1, #0
   8057a:	f842 1b04 	str.w	r1, [r2], #4
   8057e:	4293      	cmp	r3, r2
   80580:	d1fb      	bne.n	8057a <Reset_Handler+0x42>
   80582:	4b0b      	ldr	r3, [pc, #44]	; (805b0 <Reset_Handler+0x78>)
   80584:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80588:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8058c:	4a09      	ldr	r2, [pc, #36]	; (805b4 <Reset_Handler+0x7c>)
   8058e:	6093      	str	r3, [r2, #8]
   80590:	4b09      	ldr	r3, [pc, #36]	; (805b8 <Reset_Handler+0x80>)
   80592:	4798      	blx	r3
   80594:	4b09      	ldr	r3, [pc, #36]	; (805bc <Reset_Handler+0x84>)
   80596:	4798      	blx	r3
   80598:	e7fe      	b.n	80598 <Reset_Handler+0x60>
   8059a:	bf00      	nop
   8059c:	20000000 	.word	0x20000000
   805a0:	00081f28 	.word	0x00081f28
   805a4:	20000434 	.word	0x20000434
   805a8:	20000510 	.word	0x20000510
   805ac:	20000434 	.word	0x20000434
   805b0:	00080000 	.word	0x00080000
   805b4:	e000ed00 	.word	0xe000ed00
   805b8:	00081c7d 	.word	0x00081c7d
   805bc:	0008080d 	.word	0x0008080d

000805c0 <SystemInit>:
   805c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   805c4:	4a20      	ldr	r2, [pc, #128]	; (80648 <SystemInit+0x88>)
   805c6:	6013      	str	r3, [r2, #0]
   805c8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   805cc:	6013      	str	r3, [r2, #0]
   805ce:	4b1f      	ldr	r3, [pc, #124]	; (8064c <SystemInit+0x8c>)
   805d0:	6a1b      	ldr	r3, [r3, #32]
   805d2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   805d6:	d107      	bne.n	805e8 <SystemInit+0x28>
   805d8:	4a1d      	ldr	r2, [pc, #116]	; (80650 <SystemInit+0x90>)
   805da:	4b1c      	ldr	r3, [pc, #112]	; (8064c <SystemInit+0x8c>)
   805dc:	621a      	str	r2, [r3, #32]
   805de:	461a      	mov	r2, r3
   805e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805e2:	f013 0f01 	tst.w	r3, #1
   805e6:	d0fb      	beq.n	805e0 <SystemInit+0x20>
   805e8:	4a1a      	ldr	r2, [pc, #104]	; (80654 <SystemInit+0x94>)
   805ea:	4b18      	ldr	r3, [pc, #96]	; (8064c <SystemInit+0x8c>)
   805ec:	621a      	str	r2, [r3, #32]
   805ee:	461a      	mov	r2, r3
   805f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   805f6:	d0fb      	beq.n	805f0 <SystemInit+0x30>
   805f8:	4a14      	ldr	r2, [pc, #80]	; (8064c <SystemInit+0x8c>)
   805fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   805fc:	f023 0303 	bic.w	r3, r3, #3
   80600:	f043 0301 	orr.w	r3, r3, #1
   80604:	6313      	str	r3, [r2, #48]	; 0x30
   80606:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80608:	f013 0f08 	tst.w	r3, #8
   8060c:	d0fb      	beq.n	80606 <SystemInit+0x46>
   8060e:	4a12      	ldr	r2, [pc, #72]	; (80658 <SystemInit+0x98>)
   80610:	4b0e      	ldr	r3, [pc, #56]	; (8064c <SystemInit+0x8c>)
   80612:	629a      	str	r2, [r3, #40]	; 0x28
   80614:	461a      	mov	r2, r3
   80616:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80618:	f013 0f02 	tst.w	r3, #2
   8061c:	d0fb      	beq.n	80616 <SystemInit+0x56>
   8061e:	2211      	movs	r2, #17
   80620:	4b0a      	ldr	r3, [pc, #40]	; (8064c <SystemInit+0x8c>)
   80622:	631a      	str	r2, [r3, #48]	; 0x30
   80624:	461a      	mov	r2, r3
   80626:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80628:	f013 0f08 	tst.w	r3, #8
   8062c:	d0fb      	beq.n	80626 <SystemInit+0x66>
   8062e:	2212      	movs	r2, #18
   80630:	4b06      	ldr	r3, [pc, #24]	; (8064c <SystemInit+0x8c>)
   80632:	631a      	str	r2, [r3, #48]	; 0x30
   80634:	461a      	mov	r2, r3
   80636:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80638:	f013 0f08 	tst.w	r3, #8
   8063c:	d0fb      	beq.n	80636 <SystemInit+0x76>
   8063e:	4a07      	ldr	r2, [pc, #28]	; (8065c <SystemInit+0x9c>)
   80640:	4b07      	ldr	r3, [pc, #28]	; (80660 <SystemInit+0xa0>)
   80642:	601a      	str	r2, [r3, #0]
   80644:	4770      	bx	lr
   80646:	bf00      	nop
   80648:	400e0a00 	.word	0x400e0a00
   8064c:	400e0600 	.word	0x400e0600
   80650:	00370809 	.word	0x00370809
   80654:	01370809 	.word	0x01370809
   80658:	200d3f01 	.word	0x200d3f01
   8065c:	0501bd00 	.word	0x0501bd00
   80660:	20000004 	.word	0x20000004

00080664 <adc_init>:

#define PASSWD_PIO_ADC 0x41444300
#define IR_THRESHOLD 300

void adc_init(void){
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;//(1 << 6);		//enable ADC clock
   80664:	4a0a      	ldr	r2, [pc, #40]	; (80690 <adc_init+0x2c>)
   80666:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8066a:	f043 0320 	orr.w	r3, r3, #32
   8066e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	SLEEP = 0 => Normal Mode
	LOWRES = 0 => 12-bit resolution (because it makes more sense)
	TRGSEL = 000 => don't care about the value since TRGEN is 0
	TRGEN = 0 => Hardware triggers are disabled 
	*/
	ADC->ADC_MR |= ADC_MR_FREERUN_ON;//0b00010000000000001000000010000000;
   80672:	4b08      	ldr	r3, [pc, #32]	; (80694 <adc_init+0x30>)
   80674:	685a      	ldr	r2, [r3, #4]
   80676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8067a:	605a      	str	r2, [r3, #4]
	ADC->ADC_CHER |= ADC_CHER_CH0;//0x00000001;		//enables channel 0
   8067c:	691a      	ldr	r2, [r3, #16]
   8067e:	f042 0201 	orr.w	r2, r2, #1
   80682:	611a      	str	r2, [r3, #16]
	ADC->ADC_CR |= ADC_CR_START;//0x00000002;		//starts analog-to-digital conversion
   80684:	681a      	ldr	r2, [r3, #0]
   80686:	f042 0202 	orr.w	r2, r2, #2
   8068a:	601a      	str	r2, [r3, #0]
   8068c:	4770      	bx	lr
   8068e:	bf00      	nop
   80690:	400e0600 	.word	0x400e0600
   80694:	400c0000 	.word	0x400c0000

00080698 <adc_read>:
	//ADC->ADC_LCDR; //the last converted data of all channels is stored here with the channel number until a new conversion is complete
	//channel and pin numbre are inverted, that is pin A0 is channel 7 and channel 0 is pin A7
}

int adc_read(void){
	return ADC->ADC_CDR[0];
   80698:	4b01      	ldr	r3, [pc, #4]	; (806a0 <adc_read+0x8>)
   8069a:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
   8069c:	4770      	bx	lr
   8069e:	bf00      	nop
   806a0:	400c0000 	.word	0x400c0000

000806a4 <is_goal>:

int is_goal(int value, int score){
   806a4:	b510      	push	{r4, lr}
   806a6:	460c      	mov	r4, r1
	if(value < IR_THRESHOLD){
   806a8:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   806ac:	db05      	blt.n	806ba <is_goal+0x16>
		score++;
		pause_game(score);
	}
	printf("score: %d\n\r", score);
   806ae:	4621      	mov	r1, r4
   806b0:	4804      	ldr	r0, [pc, #16]	; (806c4 <is_goal+0x20>)
   806b2:	4b05      	ldr	r3, [pc, #20]	; (806c8 <is_goal+0x24>)
   806b4:	4798      	blx	r3
	return score;
}
   806b6:	4620      	mov	r0, r4
   806b8:	bd10      	pop	{r4, pc}
		score++;
   806ba:	3401      	adds	r4, #1
		pause_game(score);
   806bc:	4620      	mov	r0, r4
   806be:	4b03      	ldr	r3, [pc, #12]	; (806cc <is_goal+0x28>)
   806c0:	4798      	blx	r3
   806c2:	e7f4      	b.n	806ae <is_goal+0xa>
   806c4:	00081e78 	.word	0x00081e78
   806c8:	00080d99 	.word	0x00080d99
   806cc:	000804a9 	.word	0x000804a9

000806d0 <button_pressed>:
	}
	return msg;
}

void button_pressed(char d){
	PIOC -> PIO_PER = PIO_PC16;		//enables input/output function
   806d0:	4b06      	ldr	r3, [pc, #24]	; (806ec <button_pressed+0x1c>)
   806d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   806d6:	601a      	str	r2, [r3, #0]
	PIOC -> PIO_OER = PIO_PC16;		//sets pin PC16 (pin 47) as output
   806d8:	611a      	str	r2, [r3, #16]
	PIOC -> PIO_PUDR = PIO_PC16;	//disables pull-ups
   806da:	661a      	str	r2, [r3, #96]	; 0x60
	if((int)d == 0){
   806dc:	b120      	cbz	r0, 806e8 <button_pressed+0x18>
		PIOC -> PIO_SODR = PIO_PC16;	//sets output data register
	}
	else{
		PIOC -> PIO_CODR = PIO_PC16;	//clear output data register
   806de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   806e2:	4b02      	ldr	r3, [pc, #8]	; (806ec <button_pressed+0x1c>)
   806e4:	635a      	str	r2, [r3, #52]	; 0x34
   806e6:	4770      	bx	lr
		PIOC -> PIO_SODR = PIO_PC16;	//sets output data register
   806e8:	631a      	str	r2, [r3, #48]	; 0x30
   806ea:	4770      	bx	lr
   806ec:	400e1200 	.word	0x400e1200

000806f0 <normalize_position>:
	}
}

int normalize_position(char d, int center){
   806f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806f2:	460c      	mov	r4, r1
		int value = (int)d;
		int position = 0;
		if((int)value <= center){
   806f4:	4288      	cmp	r0, r1
   806f6:	dd18      	ble.n	8072a <normalize_position+0x3a>
			position = (((float)value/(float)center)*100);
		}
		else if((int)value > center){
			position = ((((255-(float)value)/(255-(float) center))*(-100)))+200;
   806f8:	4e13      	ldr	r6, [pc, #76]	; (80748 <normalize_position+0x58>)
   806fa:	47b0      	blx	r6
   806fc:	4d13      	ldr	r5, [pc, #76]	; (8074c <normalize_position+0x5c>)
   806fe:	4601      	mov	r1, r0
   80700:	4813      	ldr	r0, [pc, #76]	; (80750 <normalize_position+0x60>)
   80702:	47a8      	blx	r5
   80704:	4607      	mov	r7, r0
   80706:	4620      	mov	r0, r4
   80708:	47b0      	blx	r6
   8070a:	4601      	mov	r1, r0
   8070c:	4810      	ldr	r0, [pc, #64]	; (80750 <normalize_position+0x60>)
   8070e:	47a8      	blx	r5
   80710:	4601      	mov	r1, r0
   80712:	4638      	mov	r0, r7
   80714:	4b0f      	ldr	r3, [pc, #60]	; (80754 <normalize_position+0x64>)
   80716:	4798      	blx	r3
   80718:	490f      	ldr	r1, [pc, #60]	; (80758 <normalize_position+0x68>)
   8071a:	4b10      	ldr	r3, [pc, #64]	; (8075c <normalize_position+0x6c>)
   8071c:	4798      	blx	r3
   8071e:	4910      	ldr	r1, [pc, #64]	; (80760 <normalize_position+0x70>)
   80720:	4b10      	ldr	r3, [pc, #64]	; (80764 <normalize_position+0x74>)
   80722:	4798      	blx	r3
   80724:	4b10      	ldr	r3, [pc, #64]	; (80768 <normalize_position+0x78>)
   80726:	4798      	blx	r3
		}
		return position;
}
   80728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			position = (((float)value/(float)center)*100);
   8072a:	4d07      	ldr	r5, [pc, #28]	; (80748 <normalize_position+0x58>)
   8072c:	47a8      	blx	r5
   8072e:	4606      	mov	r6, r0
   80730:	4620      	mov	r0, r4
   80732:	47a8      	blx	r5
   80734:	4601      	mov	r1, r0
   80736:	4630      	mov	r0, r6
   80738:	4b06      	ldr	r3, [pc, #24]	; (80754 <normalize_position+0x64>)
   8073a:	4798      	blx	r3
   8073c:	490b      	ldr	r1, [pc, #44]	; (8076c <normalize_position+0x7c>)
   8073e:	4b07      	ldr	r3, [pc, #28]	; (8075c <normalize_position+0x6c>)
   80740:	4798      	blx	r3
   80742:	4b09      	ldr	r3, [pc, #36]	; (80768 <normalize_position+0x78>)
   80744:	4798      	blx	r3
   80746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80748:	000818e9 	.word	0x000818e9
   8074c:	0008177d 	.word	0x0008177d
   80750:	437f0000 	.word	0x437f0000
   80754:	00081af9 	.word	0x00081af9
   80758:	c2c80000 	.word	0xc2c80000
   8075c:	00081991 	.word	0x00081991
   80760:	43480000 	.word	0x43480000
   80764:	00081781 	.word	0x00081781
   80768:	00081c31 	.word	0x00081c31
   8076c:	42c80000 	.word	0x42c80000

00080770 <get_positions>:
CAN_MESSAGE get_positions(void){
   80770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80774:	b084      	sub	sp, #16
   80776:	4604      	mov	r4, r0
	if(new_message_received()){
   80778:	4b1a      	ldr	r3, [pc, #104]	; (807e4 <get_positions+0x74>)
   8077a:	4798      	blx	r3
   8077c:	b950      	cbnz	r0, 80794 <get_positions+0x24>
	return msg;
   8077e:	4b1a      	ldr	r3, [pc, #104]	; (807e8 <get_positions+0x78>)
   80780:	6819      	ldr	r1, [r3, #0]
   80782:	685a      	ldr	r2, [r3, #4]
   80784:	689b      	ldr	r3, [r3, #8]
   80786:	6021      	str	r1, [r4, #0]
   80788:	6062      	str	r2, [r4, #4]
   8078a:	60a3      	str	r3, [r4, #8]
}
   8078c:	4620      	mov	r0, r4
   8078e:	b004      	add	sp, #16
   80790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		msg = get_message();
   80794:	4d14      	ldr	r5, [pc, #80]	; (807e8 <get_positions+0x78>)
   80796:	4668      	mov	r0, sp
   80798:	4b14      	ldr	r3, [pc, #80]	; (807ec <get_positions+0x7c>)
   8079a:	4798      	blx	r3
   8079c:	9900      	ldr	r1, [sp, #0]
   8079e:	9a01      	ldr	r2, [sp, #4]
   807a0:	9b02      	ldr	r3, [sp, #8]
   807a2:	6029      	str	r1, [r5, #0]
   807a4:	606a      	str	r2, [r5, #4]
   807a6:	60ab      	str	r3, [r5, #8]
		print_message(msg);
   807a8:	6828      	ldr	r0, [r5, #0]
   807aa:	6869      	ldr	r1, [r5, #4]
   807ac:	68aa      	ldr	r2, [r5, #8]
   807ae:	4b10      	ldr	r3, [pc, #64]	; (807f0 <get_positions+0x80>)
   807b0:	4798      	blx	r3
		centerH = (int)msg.data[3];
   807b2:	79ae      	ldrb	r6, [r5, #6]
   807b4:	4b0f      	ldr	r3, [pc, #60]	; (807f4 <get_positions+0x84>)
   807b6:	601e      	str	r6, [r3, #0]
		centerV = (int)msg.data[4];
   807b8:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80808 <get_positions+0x98>
   807bc:	79eb      	ldrb	r3, [r5, #7]
   807be:	f8c8 3000 	str.w	r3, [r8]
		int new_data_H = normalize_position(msg.data[0], centerH);
   807c2:	4631      	mov	r1, r6
   807c4:	78e8      	ldrb	r0, [r5, #3]
   807c6:	4f0c      	ldr	r7, [pc, #48]	; (807f8 <get_positions+0x88>)
   807c8:	47b8      	blx	r7
		move_motor(new_data_H, centerH);
   807ca:	4631      	mov	r1, r6
   807cc:	4b0b      	ldr	r3, [pc, #44]	; (807fc <get_positions+0x8c>)
   807ce:	4798      	blx	r3
		int new_data_V = normalize_position(msg.data[1], centerV);
   807d0:	f8d8 1000 	ldr.w	r1, [r8]
   807d4:	7928      	ldrb	r0, [r5, #4]
   807d6:	47b8      	blx	r7
		move_servo(new_data_V);
   807d8:	4b09      	ldr	r3, [pc, #36]	; (80800 <get_positions+0x90>)
   807da:	4798      	blx	r3
		button_pressed(msg.data[2]);
   807dc:	7968      	ldrb	r0, [r5, #5]
   807de:	4b09      	ldr	r3, [pc, #36]	; (80804 <get_positions+0x94>)
   807e0:	4798      	blx	r3
   807e2:	e7cc      	b.n	8077e <get_positions+0xe>
   807e4:	00080365 	.word	0x00080365
   807e8:	20000464 	.word	0x20000464
   807ec:	00080371 	.word	0x00080371
   807f0:	00080395 	.word	0x00080395
   807f4:	20000470 	.word	0x20000470
   807f8:	000806f1 	.word	0x000806f1
   807fc:	000809b9 	.word	0x000809b9
   80800:	00080e41 	.word	0x00080e41
   80804:	000806d1 	.word	0x000806d1
   80808:	2000048c 	.word	0x2000048c

0008080c <main>:
#include "motorbox.h"
#include "handmade_delay.h"

CAN_MESSAGE message;

int main(void) {
   8080c:	b508      	push	{r3, lr}
    // Initialize the SAM system 
    SystemInit();
   8080e:	4b0e      	ldr	r3, [pc, #56]	; (80848 <main+0x3c>)
   80810:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;		//disable the watchdog timer
   80812:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80816:	4b0d      	ldr	r3, [pc, #52]	; (8084c <main+0x40>)
   80818:	605a      	str	r2, [r3, #4]
	configure_uart();
   8081a:	4b0d      	ldr	r3, [pc, #52]	; (80850 <main+0x44>)
   8081c:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561);
   8081e:	480d      	ldr	r0, [pc, #52]	; (80854 <main+0x48>)
   80820:	4b0d      	ldr	r3, [pc, #52]	; (80858 <main+0x4c>)
   80822:	4798      	blx	r3
	motorbox_init();
   80824:	4b0d      	ldr	r3, [pc, #52]	; (8085c <main+0x50>)
   80826:	4798      	blx	r3
	dac_init();
   80828:	4b0d      	ldr	r3, [pc, #52]	; (80860 <main+0x54>)
   8082a:	4798      	blx	r3
	pwm_init();
   8082c:	4b0d      	ldr	r3, [pc, #52]	; (80864 <main+0x58>)
   8082e:	4798      	blx	r3
	adc_init();
   80830:	4b0d      	ldr	r3, [pc, #52]	; (80868 <main+0x5c>)
   80832:	4798      	blx	r3
	pid_Init();
   80834:	4b0d      	ldr	r3, [pc, #52]	; (8086c <main+0x60>)
   80836:	4798      	blx	r3
	delay_us(20);
   80838:	2014      	movs	r0, #20
   8083a:	4b0d      	ldr	r3, [pc, #52]	; (80870 <main+0x64>)
   8083c:	4798      	blx	r3
	start_game();
   8083e:	4b0d      	ldr	r3, [pc, #52]	; (80874 <main+0x68>)
   80840:	4798      	blx	r3
	return 0;
}
   80842:	2000      	movs	r0, #0
   80844:	bd08      	pop	{r3, pc}
   80846:	bf00      	nop
   80848:	000805c1 	.word	0x000805c1
   8084c:	400e1a50 	.word	0x400e1a50
   80850:	00080e9d 	.word	0x00080e9d
   80854:	00290561 	.word	0x00290561
   80858:	00080251 	.word	0x00080251
   8085c:	000808a9 	.word	0x000808a9
   80860:	00080879 	.word	0x00080879
   80864:	00080dbd 	.word	0x00080dbd
   80868:	00080665 	.word	0x00080665
   8086c:	00080a15 	.word	0x00080a15
   80870:	000804e9 	.word	0x000804e9
   80874:	000803f5 	.word	0x000803f5

00080878 <dac_init>:

#define LEFT_CUTOFF	50
#define RIGHT_CUTOFF 150

void dac_init(void){
	PMC->PMC_PCER1 |= PMC_PCER1_PID38; //enable clock for DACC
   80878:	4a08      	ldr	r2, [pc, #32]	; (8089c <dac_init+0x24>)
   8087a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8087e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80882:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	REG_DACC_MR = DACC_MR_USER_SEL_CHANNEL1;
   80886:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   8088a:	4b05      	ldr	r3, [pc, #20]	; (808a0 <dac_init+0x28>)
   8088c:	601a      	str	r2, [r3, #0]
	REG_DACC_CHER |= DACC_CHER_CH1;
   8088e:	4a05      	ldr	r2, [pc, #20]	; (808a4 <dac_init+0x2c>)
   80890:	6813      	ldr	r3, [r2, #0]
   80892:	f043 0302 	orr.w	r3, r3, #2
   80896:	6013      	str	r3, [r2, #0]
   80898:	4770      	bx	lr
   8089a:	bf00      	nop
   8089c:	400e0600 	.word	0x400e0600
   808a0:	400c8004 	.word	0x400c8004
   808a4:	400c8010 	.word	0x400c8010

000808a8 <motorbox_init>:
}

void motorbox_init(void){
   808a8:	b538      	push	{r3, r4, r5, lr}
	PIOC -> PIO_WPMR = (0x50494F << 8);	//disables write protect
   808aa:	4915      	ldr	r1, [pc, #84]	; (80900 <motorbox_init+0x58>)
   808ac:	4b15      	ldr	r3, [pc, #84]	; (80904 <motorbox_init+0x5c>)
   808ae:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4

	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   808b2:	4b15      	ldr	r3, [pc, #84]	; (80908 <motorbox_init+0x60>)
   808b4:	691a      	ldr	r2, [r3, #16]
   808b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   808ba:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= (1 << ID_PIOD);
   808bc:	691a      	ldr	r2, [r3, #16]
   808be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   808c2:	611a      	str	r2, [r3, #16]
	
	//!OE
	PIOD -> PIO_PER = PIO_PD0;		//enables input/output function
   808c4:	4c11      	ldr	r4, [pc, #68]	; (8090c <motorbox_init+0x64>)
   808c6:	2201      	movs	r2, #1
   808c8:	6022      	str	r2, [r4, #0]
	PIOD -> PIO_OER = PIO_PD0;		//enables output
   808ca:	6122      	str	r2, [r4, #16]
	//SEL
	PIOD -> PIO_PER = PIO_PD2;		//enables input/output function
   808cc:	2304      	movs	r3, #4
   808ce:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD2;		//enables output
   808d0:	6123      	str	r3, [r4, #16]
	//DIR
	PIOD -> PIO_PER = PIO_PD10;		//enables input/output function
   808d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   808d6:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD10;		//enables output	
   808d8:	6123      	str	r3, [r4, #16]
	//!RES
	PIOD -> PIO_PER = PIO_PD1;		//enables input/output function
   808da:	2502      	movs	r5, #2
   808dc:	6025      	str	r5, [r4, #0]
	PIOD -> PIO_OER = PIO_PD1;		//enables output	
   808de:	6125      	str	r5, [r4, #16]
	//EN
	PIOD -> PIO_PER = PIO_PD9;		//enables input/output function
   808e0:	f44f 7300 	mov.w	r3, #512	; 0x200
   808e4:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD9;		//enables output
   808e6:	6123      	str	r3, [r4, #16]

	PIOC -> PIO_IFER = (0xFF << 1);
   808e8:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
   808ec:	6208      	str	r0, [r1, #32]
	PIOC -> PIO_PUDR = (0xFF << 1);		//disables pull down register
   808ee:	6608      	str	r0, [r1, #96]	; 0x60
	
	PIOD -> PIO_CODR = PIO_PD0;		//set !OE to low
   808f0:	6362      	str	r2, [r4, #52]	; 0x34
	PIOD -> PIO_SODR = PIO_PD9;		//set EN to high
   808f2:	6323      	str	r3, [r4, #48]	; 0x30
	PIOD -> PIO_CODR = PIO_PD1;		//set !RES to low
   808f4:	6365      	str	r5, [r4, #52]	; 0x34
	delay_us(30);	
   808f6:	201e      	movs	r0, #30
   808f8:	4b05      	ldr	r3, [pc, #20]	; (80910 <motorbox_init+0x68>)
   808fa:	4798      	blx	r3
	PIOD -> PIO_SODR = PIO_PD1;		//set !RES to high
   808fc:	6325      	str	r5, [r4, #48]	; 0x30
   808fe:	bd38      	pop	{r3, r4, r5, pc}
   80900:	400e1200 	.word	0x400e1200
   80904:	50494f00 	.word	0x50494f00
   80908:	400e0600 	.word	0x400e0600
   8090c:	400e1400 	.word	0x400e1400
   80910:	000804e9 	.word	0x000804e9

00080914 <receive_data>:
}

int16_t receive_data(void){
   80914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t data;
	PIOD -> PIO_CODR = PIO_PD0;		//set !OE to low
   80918:	4d0d      	ldr	r5, [pc, #52]	; (80950 <receive_data+0x3c>)
   8091a:	2601      	movs	r6, #1
   8091c:	636e      	str	r6, [r5, #52]	; 0x34
	PIOD -> PIO_CODR = PIO_PD2;		//set SEL to low
   8091e:	f04f 0904 	mov.w	r9, #4
   80922:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
	delay_us(20);					//wait 20 microseconds
   80926:	2014      	movs	r0, #20
   80928:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80958 <receive_data+0x44>
   8092c:	47c0      	blx	r8
	data |= ((PIOC->PIO_PDSR >> 1) & 0xFF) << 8 ;	//read MSB
   8092e:	4f09      	ldr	r7, [pc, #36]	; (80954 <receive_data+0x40>)
   80930:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   80932:	01e4      	lsls	r4, r4, #7
   80934:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	PIOD -> PIO_SODR = PIO_PD2;		//set SEL to high
   80938:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
	delay_us(20);					//wait 20 microseconds
   8093c:	2014      	movs	r0, #20
   8093e:	47c0      	blx	r8
	data |= (PIOC->PIO_PDSR >> 1) & 0xFF ;	//read LSB
   80940:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
	PIOD -> PIO_SODR = PIO_PD0;		//set !OE to high
   80942:	632e      	str	r6, [r5, #48]	; 0x30
	data |= (PIOC->PIO_PDSR >> 1) & 0xFF ;	//read LSB
   80944:	f3c0 0047 	ubfx	r0, r0, #1, #8
   80948:	4320      	orrs	r0, r4
	return data; 
}
   8094a:	b200      	sxth	r0, r0
   8094c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80950:	400e1400 	.word	0x400e1400
   80954:	400e1200 	.word	0x400e1200
   80958:	000804e9 	.word	0x000804e9
   8095c:	00000000 	.word	0x00000000

00080960 <calibrate_motor>:

int calibrate_motor(int16_t position_from_motor){
   80960:	b510      	push	{r4, lr}
	int new_position;
	new_position = abs(((position_from_motor/40)*0.91)-200);
   80962:	4b0f      	ldr	r3, [pc, #60]	; (809a0 <calibrate_motor+0x40>)
   80964:	fb83 2300 	smull	r2, r3, r3, r0
   80968:	17c0      	asrs	r0, r0, #31
   8096a:	ebc0 1023 	rsb	r0, r0, r3, asr #4
   8096e:	b200      	sxth	r0, r0
   80970:	4b0c      	ldr	r3, [pc, #48]	; (809a4 <calibrate_motor+0x44>)
   80972:	4798      	blx	r3
   80974:	a308      	add	r3, pc, #32	; (adr r3, 80998 <calibrate_motor+0x38>)
   80976:	e9d3 2300 	ldrd	r2, r3, [r3]
   8097a:	4c0b      	ldr	r4, [pc, #44]	; (809a8 <calibrate_motor+0x48>)
   8097c:	47a0      	blx	r4
   8097e:	2200      	movs	r2, #0
   80980:	4b0a      	ldr	r3, [pc, #40]	; (809ac <calibrate_motor+0x4c>)
   80982:	4c0b      	ldr	r4, [pc, #44]	; (809b0 <calibrate_motor+0x50>)
   80984:	47a0      	blx	r4
   80986:	4b0b      	ldr	r3, [pc, #44]	; (809b4 <calibrate_motor+0x54>)
   80988:	4798      	blx	r3
	return new_position;
}
   8098a:	2800      	cmp	r0, #0
   8098c:	bfb8      	it	lt
   8098e:	4240      	neglt	r0, r0
   80990:	bd10      	pop	{r4, pc}
   80992:	bf00      	nop
   80994:	f3af 8000 	nop.w
   80998:	51eb851f 	.word	0x51eb851f
   8099c:	3fed1eb8 	.word	0x3fed1eb8
   809a0:	66666667 	.word	0x66666667
   809a4:	00081235 	.word	0x00081235
   809a8:	00081301 	.word	0x00081301
   809ac:	40690000 	.word	0x40690000
   809b0:	00080f99 	.word	0x00080f99
   809b4:	00081725 	.word	0x00081725

000809b8 <move_motor>:

void move_motor(int joystick_position, int center){
   809b8:	b510      	push	{r4, lr}
   809ba:	4604      	mov	r4, r0
	//printf("joy stick: %d\n\r", joystick_position);

	int16_t motor_data = receive_data();
   809bc:	4b10      	ldr	r3, [pc, #64]	; (80a00 <move_motor+0x48>)
   809be:	4798      	blx	r3
	int calibrated_motor_data = calibrate_motor(motor_data);
   809c0:	4b10      	ldr	r3, [pc, #64]	; (80a04 <move_motor+0x4c>)
   809c2:	4798      	blx	r3
	int16_t pid_output = pid_Controller(joystick_position, calibrated_motor_data);
   809c4:	b201      	sxth	r1, r0
   809c6:	b220      	sxth	r0, r4
   809c8:	4b0f      	ldr	r3, [pc, #60]	; (80a08 <move_motor+0x50>)
   809ca:	4798      	blx	r3
	//printf("Calib Motor Data : %d\n\r", calibrated_motor_data);
	//printf("PID : %d\n\r", pid_output);
	
	DACC->DACC_CDR = (1 & 0b11) << 12 | DACC_CDR_DATA(abs(pid_output)*15);
   809cc:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
   809d0:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
   809d4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   809d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   809dc:	4a0b      	ldr	r2, [pc, #44]	; (80a0c <move_motor+0x54>)
   809de:	6213      	str	r3, [r2, #32]
	//printf("Output to register: %d \n\r", (1 & 0b11) << 12 | DACC_CDR_DATA(pid_output*10));
	
	if(pid_output > 0){
   809e0:	2800      	cmp	r0, #0
   809e2:	dd04      	ble.n	809ee <move_motor+0x36>
		PIOD -> PIO_CODR = PIO_PD10;
   809e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   809e8:	4b09      	ldr	r3, [pc, #36]	; (80a10 <move_motor+0x58>)
   809ea:	635a      	str	r2, [r3, #52]	; 0x34
   809ec:	bd10      	pop	{r4, pc}
	}
	else if(pid_output < 0){
   809ee:	2800      	cmp	r0, #0
   809f0:	db00      	blt.n	809f4 <move_motor+0x3c>
   809f2:	bd10      	pop	{r4, pc}
		PIOD -> PIO_SODR = PIO_PD10;
   809f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   809f8:	4b05      	ldr	r3, [pc, #20]	; (80a10 <move_motor+0x58>)
   809fa:	631a      	str	r2, [r3, #48]	; 0x30
	}
   809fc:	e7f9      	b.n	809f2 <move_motor+0x3a>
   809fe:	bf00      	nop
   80a00:	00080915 	.word	0x00080915
   80a04:	00080961 	.word	0x00080961
   80a08:	00080a39 	.word	0x00080a39
   80a0c:	400c8000 	.word	0x400c8000
   80a10:	400e1400 	.word	0x400e1400

00080a14 <pid_Init>:


void pid_Init(void)
// Set up PID controller parameters
{
	pid.id = 1;
   80a14:	4b07      	ldr	r3, [pc, #28]	; (80a34 <pid_Init+0x20>)
   80a16:	2101      	movs	r1, #1
   80a18:	6019      	str	r1, [r3, #0]
	pid.sumError = 0;
   80a1a:	2200      	movs	r2, #0
   80a1c:	609a      	str	r2, [r3, #8]
	pid.lastProcessValue = 0;
   80a1e:	809a      	strh	r2, [r3, #4]
	pid.P_Factor = K_P;
   80a20:	8199      	strh	r1, [r3, #12]
	pid.I_Factor = K_I;
   80a22:	81da      	strh	r2, [r3, #14]
	pid.D_Factor = K_D;
   80a24:	821a      	strh	r2, [r3, #16]
	// Limits to avoid overflow
	pid.maxError = MAX_INT / (pid.P_Factor + 1);
   80a26:	f643 72ff 	movw	r2, #16383	; 0x3fff
   80a2a:	825a      	strh	r2, [r3, #18]
	pid.maxSumError = MAX_I_TERM / (pid.I_Factor + 1);
   80a2c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   80a30:	615a      	str	r2, [r3, #20]
   80a32:	4770      	bx	lr
   80a34:	20000490 	.word	0x20000490

00080a38 <pid_Controller>:
}


int16_t pid_Controller(int16_t setPoint, int16_t processValue)
{
   80a38:	b430      	push	{r4, r5}
	int16_t error, p_term, d_term;
	int32_t i_term, ret, temp;
	
	error = processValue - setPoint;
   80a3a:	1a08      	subs	r0, r1, r0
   80a3c:	b280      	uxth	r0, r0
   80a3e:	b203      	sxth	r3, r0
	
	// Calculate Pterm and limit error overflow
	if (error > pid.maxError){
   80a40:	4a20      	ldr	r2, [pc, #128]	; (80ac4 <pid_Controller+0x8c>)
   80a42:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
   80a46:	4293      	cmp	r3, r2
   80a48:	dc08      	bgt.n	80a5c <pid_Controller+0x24>
		p_term = MAX_INT;
	}
	else if (error < -pid.maxError){
   80a4a:	4252      	negs	r2, r2
   80a4c:	4293      	cmp	r3, r2
   80a4e:	db28      	blt.n	80aa2 <pid_Controller+0x6a>
		p_term = -MAX_INT;
	}
	else{
		p_term = pid.P_Factor * error;
   80a50:	4a1c      	ldr	r2, [pc, #112]	; (80ac4 <pid_Controller+0x8c>)
   80a52:	8992      	ldrh	r2, [r2, #12]
   80a54:	fb02 f000 	mul.w	r0, r2, r0
   80a58:	b200      	sxth	r0, r0
   80a5a:	e001      	b.n	80a60 <pid_Controller+0x28>
		p_term = MAX_INT;
   80a5c:	f647 70ff 	movw	r0, #32767	; 0x7fff
	}

	// Calculate Iterm and limit integral runaway
	temp = pid.sumError + (int32_t)error;
   80a60:	4a18      	ldr	r2, [pc, #96]	; (80ac4 <pid_Controller+0x8c>)
   80a62:	6894      	ldr	r4, [r2, #8]
   80a64:	4423      	add	r3, r4
	if(temp > pid.maxSumError){
   80a66:	6952      	ldr	r2, [r2, #20]
   80a68:	4293      	cmp	r3, r2
   80a6a:	dd1c      	ble.n	80aa6 <pid_Controller+0x6e>
		i_term = MAX_I_TERM;
		pid.sumError = pid.maxSumError;
   80a6c:	4b15      	ldr	r3, [pc, #84]	; (80ac4 <pid_Controller+0x8c>)
   80a6e:	609a      	str	r2, [r3, #8]
		i_term = MAX_I_TERM;
   80a70:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
		pid.sumError = temp;
		i_term = pid.I_Factor * pid.sumError;
	}

	// Calculate Dterm
	d_term = pid.D_Factor * (pid.lastProcessValue - processValue);
   80a74:	4c13      	ldr	r4, [pc, #76]	; (80ac4 <pid_Controller+0x8c>)
   80a76:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   80a7a:	1a52      	subs	r2, r2, r1
   80a7c:	8a25      	ldrh	r5, [r4, #16]
   80a7e:	fb02 f205 	mul.w	r2, r2, r5
   80a82:	b212      	sxth	r2, r2

	pid.lastProcessValue = processValue;
   80a84:	80a1      	strh	r1, [r4, #4]
	ret = (p_term + i_term + d_term); // SCALING_FACTOR;
   80a86:	4418      	add	r0, r3
   80a88:	4410      	add	r0, r2
   80a8a:	4b0f      	ldr	r3, [pc, #60]	; (80ac8 <pid_Controller+0x90>)
   80a8c:	4298      	cmp	r0, r3
   80a8e:	bfb8      	it	lt
   80a90:	4618      	movlt	r0, r3
		ret = MAX_INT;
	}
	else if(ret < -MAX_INT){
		ret = -MAX_INT;
	}
	return((int16_t)ret);
   80a92:	f647 73ff 	movw	r3, #32767	; 0x7fff
   80a96:	4298      	cmp	r0, r3
   80a98:	bfa8      	it	ge
   80a9a:	4618      	movge	r0, r3
}
   80a9c:	b200      	sxth	r0, r0
   80a9e:	bc30      	pop	{r4, r5}
   80aa0:	4770      	bx	lr
		p_term = -MAX_INT;
   80aa2:	4809      	ldr	r0, [pc, #36]	; (80ac8 <pid_Controller+0x90>)
   80aa4:	e7dc      	b.n	80a60 <pid_Controller+0x28>
	else if(temp < -pid.maxSumError){
   80aa6:	4252      	negs	r2, r2
   80aa8:	4293      	cmp	r3, r2
   80aaa:	da03      	bge.n	80ab4 <pid_Controller+0x7c>
		pid.sumError = -pid.maxSumError;
   80aac:	4b05      	ldr	r3, [pc, #20]	; (80ac4 <pid_Controller+0x8c>)
   80aae:	609a      	str	r2, [r3, #8]
		i_term = -MAX_I_TERM;
   80ab0:	4b06      	ldr	r3, [pc, #24]	; (80acc <pid_Controller+0x94>)
   80ab2:	e7df      	b.n	80a74 <pid_Controller+0x3c>
		pid.sumError = temp;
   80ab4:	4a03      	ldr	r2, [pc, #12]	; (80ac4 <pid_Controller+0x8c>)
   80ab6:	6093      	str	r3, [r2, #8]
		i_term = pid.I_Factor * pid.sumError;
   80ab8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
   80abc:	fb03 f302 	mul.w	r3, r3, r2
   80ac0:	e7d8      	b.n	80a74 <pid_Controller+0x3c>
   80ac2:	bf00      	nop
   80ac4:	20000490 	.word	0x20000490
   80ac8:	ffff8001 	.word	0xffff8001
   80acc:	c0000001 	.word	0xc0000001

00080ad0 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80ad4:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80ad6:	1e16      	subs	r6, r2, #0
   80ad8:	dd48      	ble.n	80b6c <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80ada:	780a      	ldrb	r2, [r1, #0]
   80adc:	2a00      	cmp	r2, #0
   80ade:	d035      	beq.n	80b4c <prints+0x7c>
   80ae0:	460a      	mov	r2, r1
   80ae2:	2400      	movs	r4, #0
   80ae4:	3401      	adds	r4, #1
   80ae6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80aea:	2900      	cmp	r1, #0
   80aec:	d1fa      	bne.n	80ae4 <prints+0x14>
		if (len >= width) width = 0;
   80aee:	42a6      	cmp	r6, r4
   80af0:	dc2d      	bgt.n	80b4e <prints+0x7e>
   80af2:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80af4:	f003 0202 	and.w	r2, r3, #2
   80af8:	2a00      	cmp	r2, #0
   80afa:	bf0c      	ite	eq
   80afc:	f04f 0820 	moveq.w	r8, #32
   80b00:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80b04:	f013 0301 	ands.w	r3, r3, #1
   80b08:	d123      	bne.n	80b52 <prints+0x82>
		for ( ; width > 0; --width) {
   80b0a:	2c00      	cmp	r4, #0
   80b0c:	dd28      	ble.n	80b60 <prints+0x90>
   80b0e:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80b10:	fa5f f988 	uxtb.w	r9, r8
   80b14:	4f18      	ldr	r7, [pc, #96]	; (80b78 <prints+0xa8>)
   80b16:	4648      	mov	r0, r9
   80b18:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80b1a:	3e01      	subs	r6, #1
   80b1c:	d1fb      	bne.n	80b16 <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80b1e:	7828      	ldrb	r0, [r5, #0]
   80b20:	b188      	cbz	r0, 80b46 <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   80b22:	4f15      	ldr	r7, [pc, #84]	; (80b78 <prints+0xa8>)
   80b24:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80b26:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80b28:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80b2c:	2800      	cmp	r0, #0
   80b2e:	d1f9      	bne.n	80b24 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80b30:	2e00      	cmp	r6, #0
   80b32:	dd08      	ble.n	80b46 <prints+0x76>
   80b34:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80b36:	fa5f f888 	uxtb.w	r8, r8
   80b3a:	4f0f      	ldr	r7, [pc, #60]	; (80b78 <prints+0xa8>)
   80b3c:	4640      	mov	r0, r8
   80b3e:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80b40:	3d01      	subs	r5, #1
   80b42:	d1fb      	bne.n	80b3c <prints+0x6c>
   80b44:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80b46:	4620      	mov	r0, r4
   80b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80b4c:	2400      	movs	r4, #0
		else width -= len;
   80b4e:	1b34      	subs	r4, r6, r4
   80b50:	e7d0      	b.n	80af4 <prints+0x24>
   80b52:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80b54:	7828      	ldrb	r0, [r5, #0]
   80b56:	b108      	cbz	r0, 80b5c <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80b58:	2400      	movs	r4, #0
   80b5a:	e7e2      	b.n	80b22 <prints+0x52>
   80b5c:	2400      	movs	r4, #0
   80b5e:	e7e7      	b.n	80b30 <prints+0x60>
		for ( ; width > 0; --width) {
   80b60:	4626      	mov	r6, r4
   80b62:	461c      	mov	r4, r3
   80b64:	e7db      	b.n	80b1e <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80b66:	f04f 0820 	mov.w	r8, #32
   80b6a:	e7d8      	b.n	80b1e <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80b6c:	f013 0401 	ands.w	r4, r3, #1
   80b70:	d0f9      	beq.n	80b66 <prints+0x96>
	register int pc = 0, padchar = ' ';
   80b72:	f04f 0820 	mov.w	r8, #32
   80b76:	e7ed      	b.n	80b54 <prints+0x84>
   80b78:	00080f05 	.word	0x00080f05

00080b7c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b7e:	b085      	sub	sp, #20
   80b80:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80b82:	b381      	cbz	r1, 80be6 <printi+0x6a>
   80b84:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80b86:	b10b      	cbz	r3, 80b8c <printi+0x10>
   80b88:	2a0a      	cmp	r2, #10
   80b8a:	d038      	beq.n	80bfe <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80b8c:	2300      	movs	r3, #0
   80b8e:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   80b92:	2600      	movs	r6, #0
   80b94:	2900      	cmp	r1, #0
   80b96:	d046      	beq.n	80c26 <printi+0xaa>
   80b98:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80b9c:	990c      	ldr	r1, [sp, #48]	; 0x30
   80b9e:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80ba0:	fbb4 f3f2 	udiv	r3, r4, r2
   80ba4:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80ba8:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   80baa:	bfc8      	it	gt
   80bac:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   80bae:	3330      	adds	r3, #48	; 0x30
   80bb0:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80bb4:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80bb8:	2c00      	cmp	r4, #0
   80bba:	d1f1      	bne.n	80ba0 <printi+0x24>
	}

	if (neg) {
   80bbc:	b156      	cbz	r6, 80bd4 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   80bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80bc0:	b11b      	cbz	r3, 80bca <printi+0x4e>
   80bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bc4:	f013 0f02 	tst.w	r3, #2
   80bc8:	d125      	bne.n	80c16 <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80bca:	232d      	movs	r3, #45	; 0x2d
   80bcc:	f805 3c01 	strb.w	r3, [r5, #-1]
   80bd0:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80bd2:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80bd8:	4629      	mov	r1, r5
   80bda:	4638      	mov	r0, r7
   80bdc:	4c14      	ldr	r4, [pc, #80]	; (80c30 <printi+0xb4>)
   80bde:	47a0      	blx	r4
   80be0:	4430      	add	r0, r6
}
   80be2:	b005      	add	sp, #20
   80be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80be6:	2330      	movs	r3, #48	; 0x30
   80be8:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80bec:	2300      	movs	r3, #0
   80bee:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80bf6:	a901      	add	r1, sp, #4
   80bf8:	4c0d      	ldr	r4, [pc, #52]	; (80c30 <printi+0xb4>)
   80bfa:	47a0      	blx	r4
   80bfc:	e7f1      	b.n	80be2 <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80bfe:	2900      	cmp	r1, #0
   80c00:	dac4      	bge.n	80b8c <printi+0x10>
		u = -i;
   80c02:	424c      	negs	r4, r1
	*s = '\0';
   80c04:	2300      	movs	r3, #0
   80c06:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80c0a:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80c0e:	2c00      	cmp	r4, #0
   80c10:	d0d5      	beq.n	80bbe <printi+0x42>
		neg = 1;
   80c12:	2601      	movs	r6, #1
   80c14:	e7c0      	b.n	80b98 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80c16:	202d      	movs	r0, #45	; 0x2d
   80c18:	4b06      	ldr	r3, [pc, #24]	; (80c34 <printi+0xb8>)
   80c1a:	4798      	blx	r3
			--width;
   80c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80c1e:	3b01      	subs	r3, #1
   80c20:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80c22:	2601      	movs	r6, #1
			--width;
   80c24:	e7d6      	b.n	80bd4 <printi+0x58>
	register int t, neg = 0, pc = 0;
   80c26:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80c28:	f10d 050f 	add.w	r5, sp, #15
   80c2c:	e7d2      	b.n	80bd4 <printi+0x58>
   80c2e:	bf00      	nop
   80c30:	00080ad1 	.word	0x00080ad1
   80c34:	00080f05 	.word	0x00080f05

00080c38 <print>:

static int print( char **out, const char *format, va_list args )
{
   80c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c3c:	b087      	sub	sp, #28
   80c3e:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80c40:	780b      	ldrb	r3, [r1, #0]
   80c42:	2b00      	cmp	r3, #0
   80c44:	f000 8094 	beq.w	80d70 <print+0x138>
   80c48:	468b      	mov	fp, r1
   80c4a:	4617      	mov	r7, r2
   80c4c:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80c4e:	4e4e      	ldr	r6, [pc, #312]	; (80d88 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80c50:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80d90 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80c54:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80d94 <print+0x15c>
   80c58:	e046      	b.n	80ce8 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80c5a:	2200      	movs	r2, #0
   80c5c:	e070      	b.n	80d40 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80c5e:	6839      	ldr	r1, [r7, #0]
   80c60:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80c62:	484a      	ldr	r0, [pc, #296]	; (80d8c <print+0x154>)
   80c64:	2900      	cmp	r1, #0
   80c66:	bf08      	it	eq
   80c68:	4601      	moveq	r1, r0
   80c6a:	4640      	mov	r0, r8
   80c6c:	47d0      	blx	sl
   80c6e:	4405      	add	r5, r0
				continue;
   80c70:	e035      	b.n	80cde <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80c72:	6839      	ldr	r1, [r7, #0]
   80c74:	3704      	adds	r7, #4
   80c76:	2061      	movs	r0, #97	; 0x61
   80c78:	9002      	str	r0, [sp, #8]
   80c7a:	9301      	str	r3, [sp, #4]
   80c7c:	9200      	str	r2, [sp, #0]
   80c7e:	2301      	movs	r3, #1
   80c80:	220a      	movs	r2, #10
   80c82:	4640      	mov	r0, r8
   80c84:	47c8      	blx	r9
   80c86:	4405      	add	r5, r0
				continue;
   80c88:	e029      	b.n	80cde <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80c8a:	6839      	ldr	r1, [r7, #0]
   80c8c:	3704      	adds	r7, #4
   80c8e:	2061      	movs	r0, #97	; 0x61
   80c90:	9002      	str	r0, [sp, #8]
   80c92:	9301      	str	r3, [sp, #4]
   80c94:	9200      	str	r2, [sp, #0]
   80c96:	2300      	movs	r3, #0
   80c98:	2210      	movs	r2, #16
   80c9a:	4640      	mov	r0, r8
   80c9c:	47c8      	blx	r9
   80c9e:	4405      	add	r5, r0
				continue;
   80ca0:	e01d      	b.n	80cde <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80ca2:	6839      	ldr	r1, [r7, #0]
   80ca4:	3704      	adds	r7, #4
   80ca6:	2041      	movs	r0, #65	; 0x41
   80ca8:	9002      	str	r0, [sp, #8]
   80caa:	9301      	str	r3, [sp, #4]
   80cac:	9200      	str	r2, [sp, #0]
   80cae:	2300      	movs	r3, #0
   80cb0:	2210      	movs	r2, #16
   80cb2:	4640      	mov	r0, r8
   80cb4:	47c8      	blx	r9
   80cb6:	4405      	add	r5, r0
				continue;
   80cb8:	e011      	b.n	80cde <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80cba:	6839      	ldr	r1, [r7, #0]
   80cbc:	3704      	adds	r7, #4
   80cbe:	2061      	movs	r0, #97	; 0x61
   80cc0:	9002      	str	r0, [sp, #8]
   80cc2:	9301      	str	r3, [sp, #4]
   80cc4:	9200      	str	r2, [sp, #0]
   80cc6:	2300      	movs	r3, #0
   80cc8:	220a      	movs	r2, #10
   80cca:	4640      	mov	r0, r8
   80ccc:	47c8      	blx	r9
   80cce:	4405      	add	r5, r0
				continue;
   80cd0:	e005      	b.n	80cde <print+0xa6>
			++format;
   80cd2:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80cd4:	f89b 0000 	ldrb.w	r0, [fp]
   80cd8:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80cda:	3501      	adds	r5, #1
   80cdc:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80cde:	f104 0b01 	add.w	fp, r4, #1
   80ce2:	7863      	ldrb	r3, [r4, #1]
   80ce4:	2b00      	cmp	r3, #0
   80ce6:	d044      	beq.n	80d72 <print+0x13a>
		if (*format == '%') {
   80ce8:	2b25      	cmp	r3, #37	; 0x25
   80cea:	d1f3      	bne.n	80cd4 <print+0x9c>
			++format;
   80cec:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80cf0:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80cf4:	2b00      	cmp	r3, #0
   80cf6:	d03c      	beq.n	80d72 <print+0x13a>
			if (*format == '%') goto out;
   80cf8:	2b25      	cmp	r3, #37	; 0x25
   80cfa:	d0ea      	beq.n	80cd2 <print+0x9a>
			if (*format == '-') {
   80cfc:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80cfe:	bf06      	itte	eq
   80d00:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80d04:	2301      	moveq	r3, #1
			width = pad = 0;
   80d06:	2300      	movne	r3, #0
			while (*format == '0') {
   80d08:	7822      	ldrb	r2, [r4, #0]
   80d0a:	2a30      	cmp	r2, #48	; 0x30
   80d0c:	d105      	bne.n	80d1a <print+0xe2>
				pad |= PAD_ZERO;
   80d0e:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80d12:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80d16:	2a30      	cmp	r2, #48	; 0x30
   80d18:	d0f9      	beq.n	80d0e <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80d1a:	7821      	ldrb	r1, [r4, #0]
   80d1c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80d20:	b2d2      	uxtb	r2, r2
   80d22:	2a09      	cmp	r2, #9
   80d24:	d899      	bhi.n	80c5a <print+0x22>
   80d26:	2200      	movs	r2, #0
				width *= 10;
   80d28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80d2c:	3930      	subs	r1, #48	; 0x30
   80d2e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80d32:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80d36:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80d3a:	b2c0      	uxtb	r0, r0
   80d3c:	2809      	cmp	r0, #9
   80d3e:	d9f3      	bls.n	80d28 <print+0xf0>
			if( *format == 's' ) {
   80d40:	2973      	cmp	r1, #115	; 0x73
   80d42:	d08c      	beq.n	80c5e <print+0x26>
			if( *format == 'd' ) {
   80d44:	2964      	cmp	r1, #100	; 0x64
   80d46:	d094      	beq.n	80c72 <print+0x3a>
			if( *format == 'x' ) {
   80d48:	2978      	cmp	r1, #120	; 0x78
   80d4a:	d09e      	beq.n	80c8a <print+0x52>
			if( *format == 'X' ) {
   80d4c:	2958      	cmp	r1, #88	; 0x58
   80d4e:	d0a8      	beq.n	80ca2 <print+0x6a>
			if( *format == 'u' ) {
   80d50:	2975      	cmp	r1, #117	; 0x75
   80d52:	d0b2      	beq.n	80cba <print+0x82>
			if( *format == 'c' ) {
   80d54:	2963      	cmp	r1, #99	; 0x63
   80d56:	d1c2      	bne.n	80cde <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80d58:	6839      	ldr	r1, [r7, #0]
   80d5a:	3704      	adds	r7, #4
   80d5c:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80d60:	2100      	movs	r1, #0
   80d62:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80d66:	a905      	add	r1, sp, #20
   80d68:	4640      	mov	r0, r8
   80d6a:	47d0      	blx	sl
   80d6c:	4405      	add	r5, r0
				continue;
   80d6e:	e7b6      	b.n	80cde <print+0xa6>
	register int pc = 0;
   80d70:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80d72:	f1b8 0f00 	cmp.w	r8, #0
   80d76:	d003      	beq.n	80d80 <print+0x148>
   80d78:	f8d8 3000 	ldr.w	r3, [r8]
   80d7c:	2200      	movs	r2, #0
   80d7e:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80d80:	4628      	mov	r0, r5
   80d82:	b007      	add	sp, #28
   80d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d88:	00080f05 	.word	0x00080f05
   80d8c:	00081e84 	.word	0x00081e84
   80d90:	00080ad1 	.word	0x00080ad1
   80d94:	00080b7d 	.word	0x00080b7d

00080d98 <printf>:

int printf(const char *format, ...)
{
   80d98:	b40f      	push	{r0, r1, r2, r3}
   80d9a:	b500      	push	{lr}
   80d9c:	b083      	sub	sp, #12
   80d9e:	aa04      	add	r2, sp, #16
   80da0:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80da4:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80da6:	2000      	movs	r0, #0
   80da8:	4b03      	ldr	r3, [pc, #12]	; (80db8 <printf+0x20>)
   80daa:	4798      	blx	r3
}
   80dac:	b003      	add	sp, #12
   80dae:	f85d eb04 	ldr.w	lr, [sp], #4
   80db2:	b004      	add	sp, #16
   80db4:	4770      	bx	lr
   80db6:	bf00      	nop
   80db8:	00080c39 	.word	0x00080c39

00080dbc <pwm_init>:
#define CENTER 1.5
#define RIGHT 1.25
#define COMPLETE_RIGHT 1.0

void pwm_init(void){
	PIOC -> PIO_PDR |= PIO_PDR_P18;		//enable peripheral control of the pin
   80dbc:	4b11      	ldr	r3, [pc, #68]	; (80e04 <pwm_init+0x48>)
   80dbe:	685a      	ldr	r2, [r3, #4]
   80dc0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80dc4:	605a      	str	r2, [r3, #4]
	PIOC -> PIO_ABSR |= PIO_ABSR_P18;	//set it to peripheral B mode
   80dc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80dc8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80dcc:	671a      	str	r2, [r3, #112]	; 0x70
	//need to clear WPEN bit in PMC Write Protect Register (we are assuming it defaults to 0)
	PIOC->PIO_WPMR = PASSWD_PIO_PWM;	//disable write protection
   80dce:	4a0e      	ldr	r2, [pc, #56]	; (80e08 <pwm_init+0x4c>)
   80dd0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER1 |= (1 << 4);		//enable PWM clock
   80dd4:	4a0d      	ldr	r2, [pc, #52]	; (80e0c <pwm_init+0x50>)
   80dd6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80dda:	f043 0310 	orr.w	r3, r3, #16
   80dde:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	REG_PWM_CMR6 = 0xC;
   80de2:	220c      	movs	r2, #12
   80de4:	4b0a      	ldr	r3, [pc, #40]	; (80e10 <pwm_init+0x54>)
   80de6:	601a      	str	r2, [r3, #0]
	PWM->PWM_CLK = 0x00540000;
   80de8:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
   80dec:	f44f 02a8 	mov.w	r2, #5505024	; 0x540000
   80df0:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD6 = 20000;
   80df2:	f644 6120 	movw	r1, #20000	; 0x4e20
   80df6:	4a07      	ldr	r2, [pc, #28]	; (80e14 <pwm_init+0x58>)
   80df8:	6011      	str	r1, [r2, #0]

	PWM->PWM_ENA |= PWM_ENA_CHID6; // enable PWM channel 6
   80dfa:	685a      	ldr	r2, [r3, #4]
   80dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80e00:	605a      	str	r2, [r3, #4]
   80e02:	4770      	bx	lr
   80e04:	400e1200 	.word	0x400e1200
   80e08:	50494f00 	.word	0x50494f00
   80e0c:	400e0600 	.word	0x400e0600
   80e10:	400942c0 	.word	0x400942c0
   80e14:	400942cc 	.word	0x400942cc

00080e18 <set_duty_cycle>:
		printf("ERROR! Invalid position");
	}
	set_duty_cycle(dty);
}

void set_duty_cycle(int dty){
   80e18:	b508      	push	{r3, lr}
	//calculates what value to set the REG_PWM_CDTY6 register to and then sets it to that value
	//the range of the CDTY6 must be between 18000 (2 ms duty cycle) and 19000 (1 ms duty cycle)
	if((MAX_DUTY_CYCLE <= dty) && (dty <= MIN_DUTY_CYCLE)){
   80e1a:	f5a0 438c 	sub.w	r3, r0, #17920	; 0x4600
   80e1e:	3b50      	subs	r3, #80	; 0x50
   80e20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   80e24:	d802      	bhi.n	80e2c <set_duty_cycle+0x14>
		REG_PWM_CDTY6 = dty;
   80e26:	4b03      	ldr	r3, [pc, #12]	; (80e34 <set_duty_cycle+0x1c>)
   80e28:	6018      	str	r0, [r3, #0]
   80e2a:	bd08      	pop	{r3, pc}
	}
	else{
		printf("ERROR! Duty cycle out of range. Must be between 1 and 2\n\r");
   80e2c:	4802      	ldr	r0, [pc, #8]	; (80e38 <set_duty_cycle+0x20>)
   80e2e:	4b03      	ldr	r3, [pc, #12]	; (80e3c <set_duty_cycle+0x24>)
   80e30:	4798      	blx	r3
   80e32:	bd08      	pop	{r3, pc}
   80e34:	400942c4 	.word	0x400942c4
   80e38:	00081e8c 	.word	0x00081e8c
   80e3c:	00080d99 	.word	0x00080d99

00080e40 <move_servo>:
void move_servo(int pos){
   80e40:	b508      	push	{r3, lr}
	if (pos < MAX_BOTTOM_CUTOFF){
   80e42:	281d      	cmp	r0, #29
   80e44:	dd16      	ble.n	80e74 <move_servo+0x34>
	else if ((MAX_BOTTOM_CUTOFF < pos) && (pos < BOTTOM_CUTOFF)){
   80e46:	f1a0 031f 	sub.w	r3, r0, #31
   80e4a:	2b26      	cmp	r3, #38	; 0x26
   80e4c:	d917      	bls.n	80e7e <move_servo+0x3e>
	else if ((BOTTOM_CUTOFF < pos) && (pos < TOP_CUTOFF)){
   80e4e:	f1a0 0347 	sub.w	r3, r0, #71	; 0x47
   80e52:	2b3a      	cmp	r3, #58	; 0x3a
   80e54:	d916      	bls.n	80e84 <move_servo+0x44>
	else if ((TOP_CUTOFF < pos) && (pos < MAX_TOP_CUTOFF)){
   80e56:	f1a0 0383 	sub.w	r3, r0, #131	; 0x83
   80e5a:	2b26      	cmp	r3, #38	; 0x26
   80e5c:	d915      	bls.n	80e8a <move_servo+0x4a>
	else if (pos > MAX_TOP_CUTOFF) {
   80e5e:	28aa      	cmp	r0, #170	; 0xaa
   80e60:	dd02      	ble.n	80e68 <move_servo+0x28>
		dty = 20000 - 1000*COMPLETE_RIGHT;
   80e62:	f644 2038 	movw	r0, #19000	; 0x4a38
   80e66:	e007      	b.n	80e78 <move_servo+0x38>
		printf("ERROR! Invalid position");
   80e68:	4809      	ldr	r0, [pc, #36]	; (80e90 <move_servo+0x50>)
   80e6a:	4b0a      	ldr	r3, [pc, #40]	; (80e94 <move_servo+0x54>)
   80e6c:	4798      	blx	r3
	int dty = 20000 - 1000*CENTER;
   80e6e:	f644 0044 	movw	r0, #18500	; 0x4844
   80e72:	e001      	b.n	80e78 <move_servo+0x38>
		dty = 20000 - 1000*COMPLETE_LEFT;
   80e74:	f244 6050 	movw	r0, #18000	; 0x4650
	set_duty_cycle(dty);
   80e78:	4b07      	ldr	r3, [pc, #28]	; (80e98 <move_servo+0x58>)
   80e7a:	4798      	blx	r3
   80e7c:	bd08      	pop	{r3, pc}
		dty = 20000 - 1000*LEFT;
   80e7e:	f244 704a 	movw	r0, #18250	; 0x474a
   80e82:	e7f9      	b.n	80e78 <move_servo+0x38>
		dty = 20000 - 1000*CENTER;
   80e84:	f644 0044 	movw	r0, #18500	; 0x4844
   80e88:	e7f6      	b.n	80e78 <move_servo+0x38>
		dty = 20000 - 1000*RIGHT;
   80e8a:	f644 103e 	movw	r0, #18750	; 0x493e
   80e8e:	e7f3      	b.n	80e78 <move_servo+0x38>
   80e90:	00081ec8 	.word	0x00081ec8
   80e94:	00080d99 	.word	0x00080d99
   80e98:	00080e19 	.word	0x00080e19

00080e9c <configure_uart>:
	uint32_t ul_sr;

	/*
	Initialize UART ring buffer as empty
	*/
	rx_buffer.head=0;
   80e9c:	4b16      	ldr	r3, [pc, #88]	; (80ef8 <configure_uart+0x5c>)
   80e9e:	2200      	movs	r2, #0
   80ea0:	701a      	strb	r2, [r3, #0]
	rx_buffer.tail=0;
   80ea2:	705a      	strb	r2, [r3, #1]
	/*
	Initialize UART communication
	*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ea4:	4b15      	ldr	r3, [pc, #84]	; (80efc <configure_uart+0x60>)
   80ea6:	f44f 7140 	mov.w	r1, #768	; 0x300
   80eaa:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80eac:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80eb0:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80eb2:	4002      	ands	r2, r0
   80eb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80eb8:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80eba:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
   80ec0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80ec4:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80ec6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80eca:	21ac      	movs	r1, #172	; 0xac
   80ecc:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80ece:	f240 2123 	movw	r1, #547	; 0x223
   80ed2:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80ed8:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80eda:	f240 2102 	movw	r1, #514	; 0x202
   80ede:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80ee2:	f04f 31ff 	mov.w	r1, #4294967295
   80ee6:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80ee8:	21e1      	movs	r1, #225	; 0xe1
   80eea:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80eec:	4904      	ldr	r1, [pc, #16]	; (80f00 <configure_uart+0x64>)
   80eee:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80ef0:	2250      	movs	r2, #80	; 0x50
   80ef2:	601a      	str	r2, [r3, #0]
   80ef4:	4770      	bx	lr
   80ef6:	bf00      	nop
   80ef8:	200004a8 	.word	0x200004a8
   80efc:	400e0e00 	.word	0x400e0e00
   80f00:	e000e100 	.word	0xe000e100

00080f04 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80f04:	4b07      	ldr	r3, [pc, #28]	; (80f24 <uart_putchar+0x20>)
   80f06:	695b      	ldr	r3, [r3, #20]
   80f08:	f013 0f02 	tst.w	r3, #2
   80f0c:	d008      	beq.n	80f20 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80f0e:	4b05      	ldr	r3, [pc, #20]	; (80f24 <uart_putchar+0x20>)
   80f10:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80f12:	461a      	mov	r2, r3
   80f14:	6953      	ldr	r3, [r2, #20]
   80f16:	f413 7f00 	tst.w	r3, #512	; 0x200
   80f1a:	d0fb      	beq.n	80f14 <uart_putchar+0x10>
	return 0;
   80f1c:	2000      	movs	r0, #0
   80f1e:	4770      	bx	lr
	return 1;
   80f20:	2001      	movs	r0, #1
}
   80f22:	4770      	bx	lr
   80f24:	400e0800 	.word	0x400e0800

00080f28 <UART_Handler>:

void UART_Handler(void)
{
   80f28:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80f2a:	4b15      	ldr	r3, [pc, #84]	; (80f80 <UART_Handler+0x58>)
   80f2c:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80f2e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80f32:	d003      	beq.n	80f3c <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80f34:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80f38:	4a11      	ldr	r2, [pc, #68]	; (80f80 <UART_Handler+0x58>)
   80f3a:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80f3c:	f013 0f01 	tst.w	r3, #1
   80f40:	d012      	beq.n	80f68 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80f42:	4810      	ldr	r0, [pc, #64]	; (80f84 <UART_Handler+0x5c>)
   80f44:	7842      	ldrb	r2, [r0, #1]
   80f46:	1c53      	adds	r3, r2, #1
   80f48:	4259      	negs	r1, r3
   80f4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80f4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80f52:	bf58      	it	pl
   80f54:	424b      	negpl	r3, r1
   80f56:	7801      	ldrb	r1, [r0, #0]
   80f58:	428b      	cmp	r3, r1
   80f5a:	d006      	beq.n	80f6a <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80f5c:	4908      	ldr	r1, [pc, #32]	; (80f80 <UART_Handler+0x58>)
   80f5e:	6988      	ldr	r0, [r1, #24]
   80f60:	4908      	ldr	r1, [pc, #32]	; (80f84 <UART_Handler+0x5c>)
   80f62:	440a      	add	r2, r1
   80f64:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80f66:	704b      	strb	r3, [r1, #1]
   80f68:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80f6a:	4807      	ldr	r0, [pc, #28]	; (80f88 <UART_Handler+0x60>)
   80f6c:	4b07      	ldr	r3, [pc, #28]	; (80f8c <UART_Handler+0x64>)
   80f6e:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80f70:	4b03      	ldr	r3, [pc, #12]	; (80f80 <UART_Handler+0x58>)
   80f72:	699a      	ldr	r2, [r3, #24]
   80f74:	4b03      	ldr	r3, [pc, #12]	; (80f84 <UART_Handler+0x5c>)
   80f76:	7859      	ldrb	r1, [r3, #1]
   80f78:	440b      	add	r3, r1
   80f7a:	709a      	strb	r2, [r3, #2]
			return;
   80f7c:	bd08      	pop	{r3, pc}
   80f7e:	bf00      	nop
   80f80:	400e0800 	.word	0x400e0800
   80f84:	200004a8 	.word	0x200004a8
   80f88:	00081ee0 	.word	0x00081ee0
   80f8c:	00080d99 	.word	0x00080d99

00080f90 <__aeabi_drsub>:
   80f90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80f94:	e002      	b.n	80f9c <__adddf3>
   80f96:	bf00      	nop

00080f98 <__aeabi_dsub>:
   80f98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080f9c <__adddf3>:
   80f9c:	b530      	push	{r4, r5, lr}
   80f9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80fa2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80fa6:	ea94 0f05 	teq	r4, r5
   80faa:	bf08      	it	eq
   80fac:	ea90 0f02 	teqeq	r0, r2
   80fb0:	bf1f      	itttt	ne
   80fb2:	ea54 0c00 	orrsne.w	ip, r4, r0
   80fb6:	ea55 0c02 	orrsne.w	ip, r5, r2
   80fba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80fbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80fc2:	f000 80e2 	beq.w	8118a <__adddf3+0x1ee>
   80fc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80fca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80fce:	bfb8      	it	lt
   80fd0:	426d      	neglt	r5, r5
   80fd2:	dd0c      	ble.n	80fee <__adddf3+0x52>
   80fd4:	442c      	add	r4, r5
   80fd6:	ea80 0202 	eor.w	r2, r0, r2
   80fda:	ea81 0303 	eor.w	r3, r1, r3
   80fde:	ea82 0000 	eor.w	r0, r2, r0
   80fe2:	ea83 0101 	eor.w	r1, r3, r1
   80fe6:	ea80 0202 	eor.w	r2, r0, r2
   80fea:	ea81 0303 	eor.w	r3, r1, r3
   80fee:	2d36      	cmp	r5, #54	; 0x36
   80ff0:	bf88      	it	hi
   80ff2:	bd30      	pophi	{r4, r5, pc}
   80ff4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80ff8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80ffc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81000:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81004:	d002      	beq.n	8100c <__adddf3+0x70>
   81006:	4240      	negs	r0, r0
   81008:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8100c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81010:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81014:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81018:	d002      	beq.n	81020 <__adddf3+0x84>
   8101a:	4252      	negs	r2, r2
   8101c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81020:	ea94 0f05 	teq	r4, r5
   81024:	f000 80a7 	beq.w	81176 <__adddf3+0x1da>
   81028:	f1a4 0401 	sub.w	r4, r4, #1
   8102c:	f1d5 0e20 	rsbs	lr, r5, #32
   81030:	db0d      	blt.n	8104e <__adddf3+0xb2>
   81032:	fa02 fc0e 	lsl.w	ip, r2, lr
   81036:	fa22 f205 	lsr.w	r2, r2, r5
   8103a:	1880      	adds	r0, r0, r2
   8103c:	f141 0100 	adc.w	r1, r1, #0
   81040:	fa03 f20e 	lsl.w	r2, r3, lr
   81044:	1880      	adds	r0, r0, r2
   81046:	fa43 f305 	asr.w	r3, r3, r5
   8104a:	4159      	adcs	r1, r3
   8104c:	e00e      	b.n	8106c <__adddf3+0xd0>
   8104e:	f1a5 0520 	sub.w	r5, r5, #32
   81052:	f10e 0e20 	add.w	lr, lr, #32
   81056:	2a01      	cmp	r2, #1
   81058:	fa03 fc0e 	lsl.w	ip, r3, lr
   8105c:	bf28      	it	cs
   8105e:	f04c 0c02 	orrcs.w	ip, ip, #2
   81062:	fa43 f305 	asr.w	r3, r3, r5
   81066:	18c0      	adds	r0, r0, r3
   81068:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8106c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81070:	d507      	bpl.n	81082 <__adddf3+0xe6>
   81072:	f04f 0e00 	mov.w	lr, #0
   81076:	f1dc 0c00 	rsbs	ip, ip, #0
   8107a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8107e:	eb6e 0101 	sbc.w	r1, lr, r1
   81082:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81086:	d31b      	bcc.n	810c0 <__adddf3+0x124>
   81088:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8108c:	d30c      	bcc.n	810a8 <__adddf3+0x10c>
   8108e:	0849      	lsrs	r1, r1, #1
   81090:	ea5f 0030 	movs.w	r0, r0, rrx
   81094:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81098:	f104 0401 	add.w	r4, r4, #1
   8109c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   810a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   810a4:	f080 809a 	bcs.w	811dc <__adddf3+0x240>
   810a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   810ac:	bf08      	it	eq
   810ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   810b2:	f150 0000 	adcs.w	r0, r0, #0
   810b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   810ba:	ea41 0105 	orr.w	r1, r1, r5
   810be:	bd30      	pop	{r4, r5, pc}
   810c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   810c4:	4140      	adcs	r0, r0
   810c6:	eb41 0101 	adc.w	r1, r1, r1
   810ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   810ce:	f1a4 0401 	sub.w	r4, r4, #1
   810d2:	d1e9      	bne.n	810a8 <__adddf3+0x10c>
   810d4:	f091 0f00 	teq	r1, #0
   810d8:	bf04      	itt	eq
   810da:	4601      	moveq	r1, r0
   810dc:	2000      	moveq	r0, #0
   810de:	fab1 f381 	clz	r3, r1
   810e2:	bf08      	it	eq
   810e4:	3320      	addeq	r3, #32
   810e6:	f1a3 030b 	sub.w	r3, r3, #11
   810ea:	f1b3 0220 	subs.w	r2, r3, #32
   810ee:	da0c      	bge.n	8110a <__adddf3+0x16e>
   810f0:	320c      	adds	r2, #12
   810f2:	dd08      	ble.n	81106 <__adddf3+0x16a>
   810f4:	f102 0c14 	add.w	ip, r2, #20
   810f8:	f1c2 020c 	rsb	r2, r2, #12
   810fc:	fa01 f00c 	lsl.w	r0, r1, ip
   81100:	fa21 f102 	lsr.w	r1, r1, r2
   81104:	e00c      	b.n	81120 <__adddf3+0x184>
   81106:	f102 0214 	add.w	r2, r2, #20
   8110a:	bfd8      	it	le
   8110c:	f1c2 0c20 	rsble	ip, r2, #32
   81110:	fa01 f102 	lsl.w	r1, r1, r2
   81114:	fa20 fc0c 	lsr.w	ip, r0, ip
   81118:	bfdc      	itt	le
   8111a:	ea41 010c 	orrle.w	r1, r1, ip
   8111e:	4090      	lslle	r0, r2
   81120:	1ae4      	subs	r4, r4, r3
   81122:	bfa2      	ittt	ge
   81124:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81128:	4329      	orrge	r1, r5
   8112a:	bd30      	popge	{r4, r5, pc}
   8112c:	ea6f 0404 	mvn.w	r4, r4
   81130:	3c1f      	subs	r4, #31
   81132:	da1c      	bge.n	8116e <__adddf3+0x1d2>
   81134:	340c      	adds	r4, #12
   81136:	dc0e      	bgt.n	81156 <__adddf3+0x1ba>
   81138:	f104 0414 	add.w	r4, r4, #20
   8113c:	f1c4 0220 	rsb	r2, r4, #32
   81140:	fa20 f004 	lsr.w	r0, r0, r4
   81144:	fa01 f302 	lsl.w	r3, r1, r2
   81148:	ea40 0003 	orr.w	r0, r0, r3
   8114c:	fa21 f304 	lsr.w	r3, r1, r4
   81150:	ea45 0103 	orr.w	r1, r5, r3
   81154:	bd30      	pop	{r4, r5, pc}
   81156:	f1c4 040c 	rsb	r4, r4, #12
   8115a:	f1c4 0220 	rsb	r2, r4, #32
   8115e:	fa20 f002 	lsr.w	r0, r0, r2
   81162:	fa01 f304 	lsl.w	r3, r1, r4
   81166:	ea40 0003 	orr.w	r0, r0, r3
   8116a:	4629      	mov	r1, r5
   8116c:	bd30      	pop	{r4, r5, pc}
   8116e:	fa21 f004 	lsr.w	r0, r1, r4
   81172:	4629      	mov	r1, r5
   81174:	bd30      	pop	{r4, r5, pc}
   81176:	f094 0f00 	teq	r4, #0
   8117a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8117e:	bf06      	itte	eq
   81180:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81184:	3401      	addeq	r4, #1
   81186:	3d01      	subne	r5, #1
   81188:	e74e      	b.n	81028 <__adddf3+0x8c>
   8118a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8118e:	bf18      	it	ne
   81190:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81194:	d029      	beq.n	811ea <__adddf3+0x24e>
   81196:	ea94 0f05 	teq	r4, r5
   8119a:	bf08      	it	eq
   8119c:	ea90 0f02 	teqeq	r0, r2
   811a0:	d005      	beq.n	811ae <__adddf3+0x212>
   811a2:	ea54 0c00 	orrs.w	ip, r4, r0
   811a6:	bf04      	itt	eq
   811a8:	4619      	moveq	r1, r3
   811aa:	4610      	moveq	r0, r2
   811ac:	bd30      	pop	{r4, r5, pc}
   811ae:	ea91 0f03 	teq	r1, r3
   811b2:	bf1e      	ittt	ne
   811b4:	2100      	movne	r1, #0
   811b6:	2000      	movne	r0, #0
   811b8:	bd30      	popne	{r4, r5, pc}
   811ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   811be:	d105      	bne.n	811cc <__adddf3+0x230>
   811c0:	0040      	lsls	r0, r0, #1
   811c2:	4149      	adcs	r1, r1
   811c4:	bf28      	it	cs
   811c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   811ca:	bd30      	pop	{r4, r5, pc}
   811cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   811d0:	bf3c      	itt	cc
   811d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   811d6:	bd30      	popcc	{r4, r5, pc}
   811d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   811dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   811e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   811e4:	f04f 0000 	mov.w	r0, #0
   811e8:	bd30      	pop	{r4, r5, pc}
   811ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   811ee:	bf1a      	itte	ne
   811f0:	4619      	movne	r1, r3
   811f2:	4610      	movne	r0, r2
   811f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   811f8:	bf1c      	itt	ne
   811fa:	460b      	movne	r3, r1
   811fc:	4602      	movne	r2, r0
   811fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81202:	bf06      	itte	eq
   81204:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81208:	ea91 0f03 	teqeq	r1, r3
   8120c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81210:	bd30      	pop	{r4, r5, pc}
   81212:	bf00      	nop

00081214 <__aeabi_ui2d>:
   81214:	f090 0f00 	teq	r0, #0
   81218:	bf04      	itt	eq
   8121a:	2100      	moveq	r1, #0
   8121c:	4770      	bxeq	lr
   8121e:	b530      	push	{r4, r5, lr}
   81220:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81224:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81228:	f04f 0500 	mov.w	r5, #0
   8122c:	f04f 0100 	mov.w	r1, #0
   81230:	e750      	b.n	810d4 <__adddf3+0x138>
   81232:	bf00      	nop

00081234 <__aeabi_i2d>:
   81234:	f090 0f00 	teq	r0, #0
   81238:	bf04      	itt	eq
   8123a:	2100      	moveq	r1, #0
   8123c:	4770      	bxeq	lr
   8123e:	b530      	push	{r4, r5, lr}
   81240:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81244:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81248:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8124c:	bf48      	it	mi
   8124e:	4240      	negmi	r0, r0
   81250:	f04f 0100 	mov.w	r1, #0
   81254:	e73e      	b.n	810d4 <__adddf3+0x138>
   81256:	bf00      	nop

00081258 <__aeabi_f2d>:
   81258:	0042      	lsls	r2, r0, #1
   8125a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8125e:	ea4f 0131 	mov.w	r1, r1, rrx
   81262:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81266:	bf1f      	itttt	ne
   81268:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8126c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81270:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81274:	4770      	bxne	lr
   81276:	f092 0f00 	teq	r2, #0
   8127a:	bf14      	ite	ne
   8127c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81280:	4770      	bxeq	lr
   81282:	b530      	push	{r4, r5, lr}
   81284:	f44f 7460 	mov.w	r4, #896	; 0x380
   81288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8128c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81290:	e720      	b.n	810d4 <__adddf3+0x138>
   81292:	bf00      	nop

00081294 <__aeabi_ul2d>:
   81294:	ea50 0201 	orrs.w	r2, r0, r1
   81298:	bf08      	it	eq
   8129a:	4770      	bxeq	lr
   8129c:	b530      	push	{r4, r5, lr}
   8129e:	f04f 0500 	mov.w	r5, #0
   812a2:	e00a      	b.n	812ba <__aeabi_l2d+0x16>

000812a4 <__aeabi_l2d>:
   812a4:	ea50 0201 	orrs.w	r2, r0, r1
   812a8:	bf08      	it	eq
   812aa:	4770      	bxeq	lr
   812ac:	b530      	push	{r4, r5, lr}
   812ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   812b2:	d502      	bpl.n	812ba <__aeabi_l2d+0x16>
   812b4:	4240      	negs	r0, r0
   812b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   812ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   812be:	f104 0432 	add.w	r4, r4, #50	; 0x32
   812c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   812c6:	f43f aedc 	beq.w	81082 <__adddf3+0xe6>
   812ca:	f04f 0203 	mov.w	r2, #3
   812ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812d2:	bf18      	it	ne
   812d4:	3203      	addne	r2, #3
   812d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812da:	bf18      	it	ne
   812dc:	3203      	addne	r2, #3
   812de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   812e2:	f1c2 0320 	rsb	r3, r2, #32
   812e6:	fa00 fc03 	lsl.w	ip, r0, r3
   812ea:	fa20 f002 	lsr.w	r0, r0, r2
   812ee:	fa01 fe03 	lsl.w	lr, r1, r3
   812f2:	ea40 000e 	orr.w	r0, r0, lr
   812f6:	fa21 f102 	lsr.w	r1, r1, r2
   812fa:	4414      	add	r4, r2
   812fc:	e6c1      	b.n	81082 <__adddf3+0xe6>
   812fe:	bf00      	nop

00081300 <__aeabi_dmul>:
   81300:	b570      	push	{r4, r5, r6, lr}
   81302:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81306:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8130a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8130e:	bf1d      	ittte	ne
   81310:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81314:	ea94 0f0c 	teqne	r4, ip
   81318:	ea95 0f0c 	teqne	r5, ip
   8131c:	f000 f8de 	bleq	814dc <__aeabi_dmul+0x1dc>
   81320:	442c      	add	r4, r5
   81322:	ea81 0603 	eor.w	r6, r1, r3
   81326:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8132a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8132e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81332:	bf18      	it	ne
   81334:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8133c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81340:	d038      	beq.n	813b4 <__aeabi_dmul+0xb4>
   81342:	fba0 ce02 	umull	ip, lr, r0, r2
   81346:	f04f 0500 	mov.w	r5, #0
   8134a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8134e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81352:	fbe0 e503 	umlal	lr, r5, r0, r3
   81356:	f04f 0600 	mov.w	r6, #0
   8135a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8135e:	f09c 0f00 	teq	ip, #0
   81362:	bf18      	it	ne
   81364:	f04e 0e01 	orrne.w	lr, lr, #1
   81368:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8136c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81370:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81374:	d204      	bcs.n	81380 <__aeabi_dmul+0x80>
   81376:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8137a:	416d      	adcs	r5, r5
   8137c:	eb46 0606 	adc.w	r6, r6, r6
   81380:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81384:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81388:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8138c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81390:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81394:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81398:	bf88      	it	hi
   8139a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8139e:	d81e      	bhi.n	813de <__aeabi_dmul+0xde>
   813a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   813a4:	bf08      	it	eq
   813a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   813aa:	f150 0000 	adcs.w	r0, r0, #0
   813ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   813b2:	bd70      	pop	{r4, r5, r6, pc}
   813b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   813b8:	ea46 0101 	orr.w	r1, r6, r1
   813bc:	ea40 0002 	orr.w	r0, r0, r2
   813c0:	ea81 0103 	eor.w	r1, r1, r3
   813c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   813c8:	bfc2      	ittt	gt
   813ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   813ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   813d2:	bd70      	popgt	{r4, r5, r6, pc}
   813d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   813d8:	f04f 0e00 	mov.w	lr, #0
   813dc:	3c01      	subs	r4, #1
   813de:	f300 80ab 	bgt.w	81538 <__aeabi_dmul+0x238>
   813e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   813e6:	bfde      	ittt	le
   813e8:	2000      	movle	r0, #0
   813ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   813ee:	bd70      	pople	{r4, r5, r6, pc}
   813f0:	f1c4 0400 	rsb	r4, r4, #0
   813f4:	3c20      	subs	r4, #32
   813f6:	da35      	bge.n	81464 <__aeabi_dmul+0x164>
   813f8:	340c      	adds	r4, #12
   813fa:	dc1b      	bgt.n	81434 <__aeabi_dmul+0x134>
   813fc:	f104 0414 	add.w	r4, r4, #20
   81400:	f1c4 0520 	rsb	r5, r4, #32
   81404:	fa00 f305 	lsl.w	r3, r0, r5
   81408:	fa20 f004 	lsr.w	r0, r0, r4
   8140c:	fa01 f205 	lsl.w	r2, r1, r5
   81410:	ea40 0002 	orr.w	r0, r0, r2
   81414:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81418:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8141c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81420:	fa21 f604 	lsr.w	r6, r1, r4
   81424:	eb42 0106 	adc.w	r1, r2, r6
   81428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8142c:	bf08      	it	eq
   8142e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81432:	bd70      	pop	{r4, r5, r6, pc}
   81434:	f1c4 040c 	rsb	r4, r4, #12
   81438:	f1c4 0520 	rsb	r5, r4, #32
   8143c:	fa00 f304 	lsl.w	r3, r0, r4
   81440:	fa20 f005 	lsr.w	r0, r0, r5
   81444:	fa01 f204 	lsl.w	r2, r1, r4
   81448:	ea40 0002 	orr.w	r0, r0, r2
   8144c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81450:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81454:	f141 0100 	adc.w	r1, r1, #0
   81458:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8145c:	bf08      	it	eq
   8145e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81462:	bd70      	pop	{r4, r5, r6, pc}
   81464:	f1c4 0520 	rsb	r5, r4, #32
   81468:	fa00 f205 	lsl.w	r2, r0, r5
   8146c:	ea4e 0e02 	orr.w	lr, lr, r2
   81470:	fa20 f304 	lsr.w	r3, r0, r4
   81474:	fa01 f205 	lsl.w	r2, r1, r5
   81478:	ea43 0302 	orr.w	r3, r3, r2
   8147c:	fa21 f004 	lsr.w	r0, r1, r4
   81480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81484:	fa21 f204 	lsr.w	r2, r1, r4
   81488:	ea20 0002 	bic.w	r0, r0, r2
   8148c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81490:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81494:	bf08      	it	eq
   81496:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8149a:	bd70      	pop	{r4, r5, r6, pc}
   8149c:	f094 0f00 	teq	r4, #0
   814a0:	d10f      	bne.n	814c2 <__aeabi_dmul+0x1c2>
   814a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   814a6:	0040      	lsls	r0, r0, #1
   814a8:	eb41 0101 	adc.w	r1, r1, r1
   814ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814b0:	bf08      	it	eq
   814b2:	3c01      	subeq	r4, #1
   814b4:	d0f7      	beq.n	814a6 <__aeabi_dmul+0x1a6>
   814b6:	ea41 0106 	orr.w	r1, r1, r6
   814ba:	f095 0f00 	teq	r5, #0
   814be:	bf18      	it	ne
   814c0:	4770      	bxne	lr
   814c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   814c6:	0052      	lsls	r2, r2, #1
   814c8:	eb43 0303 	adc.w	r3, r3, r3
   814cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   814d0:	bf08      	it	eq
   814d2:	3d01      	subeq	r5, #1
   814d4:	d0f7      	beq.n	814c6 <__aeabi_dmul+0x1c6>
   814d6:	ea43 0306 	orr.w	r3, r3, r6
   814da:	4770      	bx	lr
   814dc:	ea94 0f0c 	teq	r4, ip
   814e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   814e4:	bf18      	it	ne
   814e6:	ea95 0f0c 	teqne	r5, ip
   814ea:	d00c      	beq.n	81506 <__aeabi_dmul+0x206>
   814ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814f0:	bf18      	it	ne
   814f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814f6:	d1d1      	bne.n	8149c <__aeabi_dmul+0x19c>
   814f8:	ea81 0103 	eor.w	r1, r1, r3
   814fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81500:	f04f 0000 	mov.w	r0, #0
   81504:	bd70      	pop	{r4, r5, r6, pc}
   81506:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8150a:	bf06      	itte	eq
   8150c:	4610      	moveq	r0, r2
   8150e:	4619      	moveq	r1, r3
   81510:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81514:	d019      	beq.n	8154a <__aeabi_dmul+0x24a>
   81516:	ea94 0f0c 	teq	r4, ip
   8151a:	d102      	bne.n	81522 <__aeabi_dmul+0x222>
   8151c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81520:	d113      	bne.n	8154a <__aeabi_dmul+0x24a>
   81522:	ea95 0f0c 	teq	r5, ip
   81526:	d105      	bne.n	81534 <__aeabi_dmul+0x234>
   81528:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8152c:	bf1c      	itt	ne
   8152e:	4610      	movne	r0, r2
   81530:	4619      	movne	r1, r3
   81532:	d10a      	bne.n	8154a <__aeabi_dmul+0x24a>
   81534:	ea81 0103 	eor.w	r1, r1, r3
   81538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8153c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81544:	f04f 0000 	mov.w	r0, #0
   81548:	bd70      	pop	{r4, r5, r6, pc}
   8154a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8154e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81552:	bd70      	pop	{r4, r5, r6, pc}

00081554 <__aeabi_ddiv>:
   81554:	b570      	push	{r4, r5, r6, lr}
   81556:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8155a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8155e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81562:	bf1d      	ittte	ne
   81564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81568:	ea94 0f0c 	teqne	r4, ip
   8156c:	ea95 0f0c 	teqne	r5, ip
   81570:	f000 f8a7 	bleq	816c2 <__aeabi_ddiv+0x16e>
   81574:	eba4 0405 	sub.w	r4, r4, r5
   81578:	ea81 0e03 	eor.w	lr, r1, r3
   8157c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81580:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81584:	f000 8088 	beq.w	81698 <__aeabi_ddiv+0x144>
   81588:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8158c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81590:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81594:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81598:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8159c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   815a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   815a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   815a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   815ac:	429d      	cmp	r5, r3
   815ae:	bf08      	it	eq
   815b0:	4296      	cmpeq	r6, r2
   815b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   815b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   815ba:	d202      	bcs.n	815c2 <__aeabi_ddiv+0x6e>
   815bc:	085b      	lsrs	r3, r3, #1
   815be:	ea4f 0232 	mov.w	r2, r2, rrx
   815c2:	1ab6      	subs	r6, r6, r2
   815c4:	eb65 0503 	sbc.w	r5, r5, r3
   815c8:	085b      	lsrs	r3, r3, #1
   815ca:	ea4f 0232 	mov.w	r2, r2, rrx
   815ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   815d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   815d6:	ebb6 0e02 	subs.w	lr, r6, r2
   815da:	eb75 0e03 	sbcs.w	lr, r5, r3
   815de:	bf22      	ittt	cs
   815e0:	1ab6      	subcs	r6, r6, r2
   815e2:	4675      	movcs	r5, lr
   815e4:	ea40 000c 	orrcs.w	r0, r0, ip
   815e8:	085b      	lsrs	r3, r3, #1
   815ea:	ea4f 0232 	mov.w	r2, r2, rrx
   815ee:	ebb6 0e02 	subs.w	lr, r6, r2
   815f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   815f6:	bf22      	ittt	cs
   815f8:	1ab6      	subcs	r6, r6, r2
   815fa:	4675      	movcs	r5, lr
   815fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81600:	085b      	lsrs	r3, r3, #1
   81602:	ea4f 0232 	mov.w	r2, r2, rrx
   81606:	ebb6 0e02 	subs.w	lr, r6, r2
   8160a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8160e:	bf22      	ittt	cs
   81610:	1ab6      	subcs	r6, r6, r2
   81612:	4675      	movcs	r5, lr
   81614:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81618:	085b      	lsrs	r3, r3, #1
   8161a:	ea4f 0232 	mov.w	r2, r2, rrx
   8161e:	ebb6 0e02 	subs.w	lr, r6, r2
   81622:	eb75 0e03 	sbcs.w	lr, r5, r3
   81626:	bf22      	ittt	cs
   81628:	1ab6      	subcs	r6, r6, r2
   8162a:	4675      	movcs	r5, lr
   8162c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81630:	ea55 0e06 	orrs.w	lr, r5, r6
   81634:	d018      	beq.n	81668 <__aeabi_ddiv+0x114>
   81636:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8163a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8163e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81642:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81646:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8164a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8164e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81652:	d1c0      	bne.n	815d6 <__aeabi_ddiv+0x82>
   81654:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81658:	d10b      	bne.n	81672 <__aeabi_ddiv+0x11e>
   8165a:	ea41 0100 	orr.w	r1, r1, r0
   8165e:	f04f 0000 	mov.w	r0, #0
   81662:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81666:	e7b6      	b.n	815d6 <__aeabi_ddiv+0x82>
   81668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8166c:	bf04      	itt	eq
   8166e:	4301      	orreq	r1, r0
   81670:	2000      	moveq	r0, #0
   81672:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81676:	bf88      	it	hi
   81678:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8167c:	f63f aeaf 	bhi.w	813de <__aeabi_dmul+0xde>
   81680:	ebb5 0c03 	subs.w	ip, r5, r3
   81684:	bf04      	itt	eq
   81686:	ebb6 0c02 	subseq.w	ip, r6, r2
   8168a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8168e:	f150 0000 	adcs.w	r0, r0, #0
   81692:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81696:	bd70      	pop	{r4, r5, r6, pc}
   81698:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8169c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   816a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   816a4:	bfc2      	ittt	gt
   816a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   816aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   816ae:	bd70      	popgt	{r4, r5, r6, pc}
   816b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   816b4:	f04f 0e00 	mov.w	lr, #0
   816b8:	3c01      	subs	r4, #1
   816ba:	e690      	b.n	813de <__aeabi_dmul+0xde>
   816bc:	ea45 0e06 	orr.w	lr, r5, r6
   816c0:	e68d      	b.n	813de <__aeabi_dmul+0xde>
   816c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   816c6:	ea94 0f0c 	teq	r4, ip
   816ca:	bf08      	it	eq
   816cc:	ea95 0f0c 	teqeq	r5, ip
   816d0:	f43f af3b 	beq.w	8154a <__aeabi_dmul+0x24a>
   816d4:	ea94 0f0c 	teq	r4, ip
   816d8:	d10a      	bne.n	816f0 <__aeabi_ddiv+0x19c>
   816da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   816de:	f47f af34 	bne.w	8154a <__aeabi_dmul+0x24a>
   816e2:	ea95 0f0c 	teq	r5, ip
   816e6:	f47f af25 	bne.w	81534 <__aeabi_dmul+0x234>
   816ea:	4610      	mov	r0, r2
   816ec:	4619      	mov	r1, r3
   816ee:	e72c      	b.n	8154a <__aeabi_dmul+0x24a>
   816f0:	ea95 0f0c 	teq	r5, ip
   816f4:	d106      	bne.n	81704 <__aeabi_ddiv+0x1b0>
   816f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   816fa:	f43f aefd 	beq.w	814f8 <__aeabi_dmul+0x1f8>
   816fe:	4610      	mov	r0, r2
   81700:	4619      	mov	r1, r3
   81702:	e722      	b.n	8154a <__aeabi_dmul+0x24a>
   81704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81708:	bf18      	it	ne
   8170a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8170e:	f47f aec5 	bne.w	8149c <__aeabi_dmul+0x19c>
   81712:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81716:	f47f af0d 	bne.w	81534 <__aeabi_dmul+0x234>
   8171a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8171e:	f47f aeeb 	bne.w	814f8 <__aeabi_dmul+0x1f8>
   81722:	e712      	b.n	8154a <__aeabi_dmul+0x24a>

00081724 <__aeabi_d2iz>:
   81724:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81728:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8172c:	d215      	bcs.n	8175a <__aeabi_d2iz+0x36>
   8172e:	d511      	bpl.n	81754 <__aeabi_d2iz+0x30>
   81730:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81734:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81738:	d912      	bls.n	81760 <__aeabi_d2iz+0x3c>
   8173a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8173e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81742:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81746:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8174a:	fa23 f002 	lsr.w	r0, r3, r2
   8174e:	bf18      	it	ne
   81750:	4240      	negne	r0, r0
   81752:	4770      	bx	lr
   81754:	f04f 0000 	mov.w	r0, #0
   81758:	4770      	bx	lr
   8175a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8175e:	d105      	bne.n	8176c <__aeabi_d2iz+0x48>
   81760:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81764:	bf08      	it	eq
   81766:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8176a:	4770      	bx	lr
   8176c:	f04f 0000 	mov.w	r0, #0
   81770:	4770      	bx	lr
   81772:	bf00      	nop

00081774 <__aeabi_frsub>:
   81774:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   81778:	e002      	b.n	81780 <__addsf3>
   8177a:	bf00      	nop

0008177c <__aeabi_fsub>:
   8177c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00081780 <__addsf3>:
   81780:	0042      	lsls	r2, r0, #1
   81782:	bf1f      	itttt	ne
   81784:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   81788:	ea92 0f03 	teqne	r2, r3
   8178c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   81790:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81794:	d06a      	beq.n	8186c <__addsf3+0xec>
   81796:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8179a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8179e:	bfc1      	itttt	gt
   817a0:	18d2      	addgt	r2, r2, r3
   817a2:	4041      	eorgt	r1, r0
   817a4:	4048      	eorgt	r0, r1
   817a6:	4041      	eorgt	r1, r0
   817a8:	bfb8      	it	lt
   817aa:	425b      	neglt	r3, r3
   817ac:	2b19      	cmp	r3, #25
   817ae:	bf88      	it	hi
   817b0:	4770      	bxhi	lr
   817b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   817b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   817ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   817be:	bf18      	it	ne
   817c0:	4240      	negne	r0, r0
   817c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   817c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   817ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   817ce:	bf18      	it	ne
   817d0:	4249      	negne	r1, r1
   817d2:	ea92 0f03 	teq	r2, r3
   817d6:	d03f      	beq.n	81858 <__addsf3+0xd8>
   817d8:	f1a2 0201 	sub.w	r2, r2, #1
   817dc:	fa41 fc03 	asr.w	ip, r1, r3
   817e0:	eb10 000c 	adds.w	r0, r0, ip
   817e4:	f1c3 0320 	rsb	r3, r3, #32
   817e8:	fa01 f103 	lsl.w	r1, r1, r3
   817ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   817f0:	d502      	bpl.n	817f8 <__addsf3+0x78>
   817f2:	4249      	negs	r1, r1
   817f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   817f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   817fc:	d313      	bcc.n	81826 <__addsf3+0xa6>
   817fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   81802:	d306      	bcc.n	81812 <__addsf3+0x92>
   81804:	0840      	lsrs	r0, r0, #1
   81806:	ea4f 0131 	mov.w	r1, r1, rrx
   8180a:	f102 0201 	add.w	r2, r2, #1
   8180e:	2afe      	cmp	r2, #254	; 0xfe
   81810:	d251      	bcs.n	818b6 <__addsf3+0x136>
   81812:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   81816:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8181a:	bf08      	it	eq
   8181c:	f020 0001 	biceq.w	r0, r0, #1
   81820:	ea40 0003 	orr.w	r0, r0, r3
   81824:	4770      	bx	lr
   81826:	0049      	lsls	r1, r1, #1
   81828:	eb40 0000 	adc.w	r0, r0, r0
   8182c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81830:	f1a2 0201 	sub.w	r2, r2, #1
   81834:	d1ed      	bne.n	81812 <__addsf3+0x92>
   81836:	fab0 fc80 	clz	ip, r0
   8183a:	f1ac 0c08 	sub.w	ip, ip, #8
   8183e:	ebb2 020c 	subs.w	r2, r2, ip
   81842:	fa00 f00c 	lsl.w	r0, r0, ip
   81846:	bfaa      	itet	ge
   81848:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8184c:	4252      	neglt	r2, r2
   8184e:	4318      	orrge	r0, r3
   81850:	bfbc      	itt	lt
   81852:	40d0      	lsrlt	r0, r2
   81854:	4318      	orrlt	r0, r3
   81856:	4770      	bx	lr
   81858:	f092 0f00 	teq	r2, #0
   8185c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81860:	bf06      	itte	eq
   81862:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   81866:	3201      	addeq	r2, #1
   81868:	3b01      	subne	r3, #1
   8186a:	e7b5      	b.n	817d8 <__addsf3+0x58>
   8186c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81870:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81874:	bf18      	it	ne
   81876:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8187a:	d021      	beq.n	818c0 <__addsf3+0x140>
   8187c:	ea92 0f03 	teq	r2, r3
   81880:	d004      	beq.n	8188c <__addsf3+0x10c>
   81882:	f092 0f00 	teq	r2, #0
   81886:	bf08      	it	eq
   81888:	4608      	moveq	r0, r1
   8188a:	4770      	bx	lr
   8188c:	ea90 0f01 	teq	r0, r1
   81890:	bf1c      	itt	ne
   81892:	2000      	movne	r0, #0
   81894:	4770      	bxne	lr
   81896:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8189a:	d104      	bne.n	818a6 <__addsf3+0x126>
   8189c:	0040      	lsls	r0, r0, #1
   8189e:	bf28      	it	cs
   818a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   818a4:	4770      	bx	lr
   818a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   818aa:	bf3c      	itt	cc
   818ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   818b0:	4770      	bxcc	lr
   818b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   818b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   818ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   818be:	4770      	bx	lr
   818c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   818c4:	bf16      	itet	ne
   818c6:	4608      	movne	r0, r1
   818c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   818cc:	4601      	movne	r1, r0
   818ce:	0242      	lsls	r2, r0, #9
   818d0:	bf06      	itte	eq
   818d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   818d6:	ea90 0f01 	teqeq	r0, r1
   818da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   818de:	4770      	bx	lr

000818e0 <__aeabi_ui2f>:
   818e0:	f04f 0300 	mov.w	r3, #0
   818e4:	e004      	b.n	818f0 <__aeabi_i2f+0x8>
   818e6:	bf00      	nop

000818e8 <__aeabi_i2f>:
   818e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   818ec:	bf48      	it	mi
   818ee:	4240      	negmi	r0, r0
   818f0:	ea5f 0c00 	movs.w	ip, r0
   818f4:	bf08      	it	eq
   818f6:	4770      	bxeq	lr
   818f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   818fc:	4601      	mov	r1, r0
   818fe:	f04f 0000 	mov.w	r0, #0
   81902:	e01c      	b.n	8193e <__aeabi_l2f+0x2a>

00081904 <__aeabi_ul2f>:
   81904:	ea50 0201 	orrs.w	r2, r0, r1
   81908:	bf08      	it	eq
   8190a:	4770      	bxeq	lr
   8190c:	f04f 0300 	mov.w	r3, #0
   81910:	e00a      	b.n	81928 <__aeabi_l2f+0x14>
   81912:	bf00      	nop

00081914 <__aeabi_l2f>:
   81914:	ea50 0201 	orrs.w	r2, r0, r1
   81918:	bf08      	it	eq
   8191a:	4770      	bxeq	lr
   8191c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81920:	d502      	bpl.n	81928 <__aeabi_l2f+0x14>
   81922:	4240      	negs	r0, r0
   81924:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81928:	ea5f 0c01 	movs.w	ip, r1
   8192c:	bf02      	ittt	eq
   8192e:	4684      	moveq	ip, r0
   81930:	4601      	moveq	r1, r0
   81932:	2000      	moveq	r0, #0
   81934:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81938:	bf08      	it	eq
   8193a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8193e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81942:	fabc f28c 	clz	r2, ip
   81946:	3a08      	subs	r2, #8
   81948:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8194c:	db10      	blt.n	81970 <__aeabi_l2f+0x5c>
   8194e:	fa01 fc02 	lsl.w	ip, r1, r2
   81952:	4463      	add	r3, ip
   81954:	fa00 fc02 	lsl.w	ip, r0, r2
   81958:	f1c2 0220 	rsb	r2, r2, #32
   8195c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81960:	fa20 f202 	lsr.w	r2, r0, r2
   81964:	eb43 0002 	adc.w	r0, r3, r2
   81968:	bf08      	it	eq
   8196a:	f020 0001 	biceq.w	r0, r0, #1
   8196e:	4770      	bx	lr
   81970:	f102 0220 	add.w	r2, r2, #32
   81974:	fa01 fc02 	lsl.w	ip, r1, r2
   81978:	f1c2 0220 	rsb	r2, r2, #32
   8197c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81980:	fa21 f202 	lsr.w	r2, r1, r2
   81984:	eb43 0002 	adc.w	r0, r3, r2
   81988:	bf08      	it	eq
   8198a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8198e:	4770      	bx	lr

00081990 <__aeabi_fmul>:
   81990:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81994:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81998:	bf1e      	ittt	ne
   8199a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8199e:	ea92 0f0c 	teqne	r2, ip
   819a2:	ea93 0f0c 	teqne	r3, ip
   819a6:	d06f      	beq.n	81a88 <__aeabi_fmul+0xf8>
   819a8:	441a      	add	r2, r3
   819aa:	ea80 0c01 	eor.w	ip, r0, r1
   819ae:	0240      	lsls	r0, r0, #9
   819b0:	bf18      	it	ne
   819b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   819b6:	d01e      	beq.n	819f6 <__aeabi_fmul+0x66>
   819b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   819bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   819c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   819c4:	fba0 3101 	umull	r3, r1, r0, r1
   819c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   819cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   819d0:	bf3e      	ittt	cc
   819d2:	0049      	lslcc	r1, r1, #1
   819d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   819d8:	005b      	lslcc	r3, r3, #1
   819da:	ea40 0001 	orr.w	r0, r0, r1
   819de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   819e2:	2afd      	cmp	r2, #253	; 0xfd
   819e4:	d81d      	bhi.n	81a22 <__aeabi_fmul+0x92>
   819e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   819ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   819ee:	bf08      	it	eq
   819f0:	f020 0001 	biceq.w	r0, r0, #1
   819f4:	4770      	bx	lr
   819f6:	f090 0f00 	teq	r0, #0
   819fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   819fe:	bf08      	it	eq
   81a00:	0249      	lsleq	r1, r1, #9
   81a02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81a06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81a0a:	3a7f      	subs	r2, #127	; 0x7f
   81a0c:	bfc2      	ittt	gt
   81a0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81a12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81a16:	4770      	bxgt	lr
   81a18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81a1c:	f04f 0300 	mov.w	r3, #0
   81a20:	3a01      	subs	r2, #1
   81a22:	dc5d      	bgt.n	81ae0 <__aeabi_fmul+0x150>
   81a24:	f112 0f19 	cmn.w	r2, #25
   81a28:	bfdc      	itt	le
   81a2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81a2e:	4770      	bxle	lr
   81a30:	f1c2 0200 	rsb	r2, r2, #0
   81a34:	0041      	lsls	r1, r0, #1
   81a36:	fa21 f102 	lsr.w	r1, r1, r2
   81a3a:	f1c2 0220 	rsb	r2, r2, #32
   81a3e:	fa00 fc02 	lsl.w	ip, r0, r2
   81a42:	ea5f 0031 	movs.w	r0, r1, rrx
   81a46:	f140 0000 	adc.w	r0, r0, #0
   81a4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81a4e:	bf08      	it	eq
   81a50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81a54:	4770      	bx	lr
   81a56:	f092 0f00 	teq	r2, #0
   81a5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81a5e:	bf02      	ittt	eq
   81a60:	0040      	lsleq	r0, r0, #1
   81a62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81a66:	3a01      	subeq	r2, #1
   81a68:	d0f9      	beq.n	81a5e <__aeabi_fmul+0xce>
   81a6a:	ea40 000c 	orr.w	r0, r0, ip
   81a6e:	f093 0f00 	teq	r3, #0
   81a72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81a76:	bf02      	ittt	eq
   81a78:	0049      	lsleq	r1, r1, #1
   81a7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81a7e:	3b01      	subeq	r3, #1
   81a80:	d0f9      	beq.n	81a76 <__aeabi_fmul+0xe6>
   81a82:	ea41 010c 	orr.w	r1, r1, ip
   81a86:	e78f      	b.n	819a8 <__aeabi_fmul+0x18>
   81a88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81a8c:	ea92 0f0c 	teq	r2, ip
   81a90:	bf18      	it	ne
   81a92:	ea93 0f0c 	teqne	r3, ip
   81a96:	d00a      	beq.n	81aae <__aeabi_fmul+0x11e>
   81a98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81a9c:	bf18      	it	ne
   81a9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81aa2:	d1d8      	bne.n	81a56 <__aeabi_fmul+0xc6>
   81aa4:	ea80 0001 	eor.w	r0, r0, r1
   81aa8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81aac:	4770      	bx	lr
   81aae:	f090 0f00 	teq	r0, #0
   81ab2:	bf17      	itett	ne
   81ab4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81ab8:	4608      	moveq	r0, r1
   81aba:	f091 0f00 	teqne	r1, #0
   81abe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81ac2:	d014      	beq.n	81aee <__aeabi_fmul+0x15e>
   81ac4:	ea92 0f0c 	teq	r2, ip
   81ac8:	d101      	bne.n	81ace <__aeabi_fmul+0x13e>
   81aca:	0242      	lsls	r2, r0, #9
   81acc:	d10f      	bne.n	81aee <__aeabi_fmul+0x15e>
   81ace:	ea93 0f0c 	teq	r3, ip
   81ad2:	d103      	bne.n	81adc <__aeabi_fmul+0x14c>
   81ad4:	024b      	lsls	r3, r1, #9
   81ad6:	bf18      	it	ne
   81ad8:	4608      	movne	r0, r1
   81ada:	d108      	bne.n	81aee <__aeabi_fmul+0x15e>
   81adc:	ea80 0001 	eor.w	r0, r0, r1
   81ae0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81ae4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81ae8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81aec:	4770      	bx	lr
   81aee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81af2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81af6:	4770      	bx	lr

00081af8 <__aeabi_fdiv>:
   81af8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81afc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81b00:	bf1e      	ittt	ne
   81b02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81b06:	ea92 0f0c 	teqne	r2, ip
   81b0a:	ea93 0f0c 	teqne	r3, ip
   81b0e:	d069      	beq.n	81be4 <__aeabi_fdiv+0xec>
   81b10:	eba2 0203 	sub.w	r2, r2, r3
   81b14:	ea80 0c01 	eor.w	ip, r0, r1
   81b18:	0249      	lsls	r1, r1, #9
   81b1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81b1e:	d037      	beq.n	81b90 <__aeabi_fdiv+0x98>
   81b20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81b24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81b28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81b2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81b30:	428b      	cmp	r3, r1
   81b32:	bf38      	it	cc
   81b34:	005b      	lslcc	r3, r3, #1
   81b36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81b3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81b3e:	428b      	cmp	r3, r1
   81b40:	bf24      	itt	cs
   81b42:	1a5b      	subcs	r3, r3, r1
   81b44:	ea40 000c 	orrcs.w	r0, r0, ip
   81b48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81b4c:	bf24      	itt	cs
   81b4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81b52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81b56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81b5a:	bf24      	itt	cs
   81b5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81b60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81b64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81b68:	bf24      	itt	cs
   81b6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81b6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81b72:	011b      	lsls	r3, r3, #4
   81b74:	bf18      	it	ne
   81b76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81b7a:	d1e0      	bne.n	81b3e <__aeabi_fdiv+0x46>
   81b7c:	2afd      	cmp	r2, #253	; 0xfd
   81b7e:	f63f af50 	bhi.w	81a22 <__aeabi_fmul+0x92>
   81b82:	428b      	cmp	r3, r1
   81b84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81b88:	bf08      	it	eq
   81b8a:	f020 0001 	biceq.w	r0, r0, #1
   81b8e:	4770      	bx	lr
   81b90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81b94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81b98:	327f      	adds	r2, #127	; 0x7f
   81b9a:	bfc2      	ittt	gt
   81b9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81ba0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81ba4:	4770      	bxgt	lr
   81ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81baa:	f04f 0300 	mov.w	r3, #0
   81bae:	3a01      	subs	r2, #1
   81bb0:	e737      	b.n	81a22 <__aeabi_fmul+0x92>
   81bb2:	f092 0f00 	teq	r2, #0
   81bb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81bba:	bf02      	ittt	eq
   81bbc:	0040      	lsleq	r0, r0, #1
   81bbe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81bc2:	3a01      	subeq	r2, #1
   81bc4:	d0f9      	beq.n	81bba <__aeabi_fdiv+0xc2>
   81bc6:	ea40 000c 	orr.w	r0, r0, ip
   81bca:	f093 0f00 	teq	r3, #0
   81bce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81bd2:	bf02      	ittt	eq
   81bd4:	0049      	lsleq	r1, r1, #1
   81bd6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81bda:	3b01      	subeq	r3, #1
   81bdc:	d0f9      	beq.n	81bd2 <__aeabi_fdiv+0xda>
   81bde:	ea41 010c 	orr.w	r1, r1, ip
   81be2:	e795      	b.n	81b10 <__aeabi_fdiv+0x18>
   81be4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81be8:	ea92 0f0c 	teq	r2, ip
   81bec:	d108      	bne.n	81c00 <__aeabi_fdiv+0x108>
   81bee:	0242      	lsls	r2, r0, #9
   81bf0:	f47f af7d 	bne.w	81aee <__aeabi_fmul+0x15e>
   81bf4:	ea93 0f0c 	teq	r3, ip
   81bf8:	f47f af70 	bne.w	81adc <__aeabi_fmul+0x14c>
   81bfc:	4608      	mov	r0, r1
   81bfe:	e776      	b.n	81aee <__aeabi_fmul+0x15e>
   81c00:	ea93 0f0c 	teq	r3, ip
   81c04:	d104      	bne.n	81c10 <__aeabi_fdiv+0x118>
   81c06:	024b      	lsls	r3, r1, #9
   81c08:	f43f af4c 	beq.w	81aa4 <__aeabi_fmul+0x114>
   81c0c:	4608      	mov	r0, r1
   81c0e:	e76e      	b.n	81aee <__aeabi_fmul+0x15e>
   81c10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81c14:	bf18      	it	ne
   81c16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81c1a:	d1ca      	bne.n	81bb2 <__aeabi_fdiv+0xba>
   81c1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81c20:	f47f af5c 	bne.w	81adc <__aeabi_fmul+0x14c>
   81c24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81c28:	f47f af3c 	bne.w	81aa4 <__aeabi_fmul+0x114>
   81c2c:	e75f      	b.n	81aee <__aeabi_fmul+0x15e>
   81c2e:	bf00      	nop

00081c30 <__aeabi_f2iz>:
   81c30:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81c34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81c38:	d30f      	bcc.n	81c5a <__aeabi_f2iz+0x2a>
   81c3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81c3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81c42:	d90d      	bls.n	81c60 <__aeabi_f2iz+0x30>
   81c44:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81c4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81c50:	fa23 f002 	lsr.w	r0, r3, r2
   81c54:	bf18      	it	ne
   81c56:	4240      	negne	r0, r0
   81c58:	4770      	bx	lr
   81c5a:	f04f 0000 	mov.w	r0, #0
   81c5e:	4770      	bx	lr
   81c60:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81c64:	d101      	bne.n	81c6a <__aeabi_f2iz+0x3a>
   81c66:	0242      	lsls	r2, r0, #9
   81c68:	d105      	bne.n	81c76 <__aeabi_f2iz+0x46>
   81c6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81c6e:	bf08      	it	eq
   81c70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81c74:	4770      	bx	lr
   81c76:	f04f 0000 	mov.w	r0, #0
   81c7a:	4770      	bx	lr

00081c7c <__libc_init_array>:
   81c7c:	b570      	push	{r4, r5, r6, lr}
   81c7e:	4e0f      	ldr	r6, [pc, #60]	; (81cbc <__libc_init_array+0x40>)
   81c80:	4d0f      	ldr	r5, [pc, #60]	; (81cc0 <__libc_init_array+0x44>)
   81c82:	1b76      	subs	r6, r6, r5
   81c84:	10b6      	asrs	r6, r6, #2
   81c86:	bf18      	it	ne
   81c88:	2400      	movne	r4, #0
   81c8a:	d005      	beq.n	81c98 <__libc_init_array+0x1c>
   81c8c:	3401      	adds	r4, #1
   81c8e:	f855 3b04 	ldr.w	r3, [r5], #4
   81c92:	4798      	blx	r3
   81c94:	42a6      	cmp	r6, r4
   81c96:	d1f9      	bne.n	81c8c <__libc_init_array+0x10>
   81c98:	4e0a      	ldr	r6, [pc, #40]	; (81cc4 <__libc_init_array+0x48>)
   81c9a:	4d0b      	ldr	r5, [pc, #44]	; (81cc8 <__libc_init_array+0x4c>)
   81c9c:	f000 f932 	bl	81f04 <_init>
   81ca0:	1b76      	subs	r6, r6, r5
   81ca2:	10b6      	asrs	r6, r6, #2
   81ca4:	bf18      	it	ne
   81ca6:	2400      	movne	r4, #0
   81ca8:	d006      	beq.n	81cb8 <__libc_init_array+0x3c>
   81caa:	3401      	adds	r4, #1
   81cac:	f855 3b04 	ldr.w	r3, [r5], #4
   81cb0:	4798      	blx	r3
   81cb2:	42a6      	cmp	r6, r4
   81cb4:	d1f9      	bne.n	81caa <__libc_init_array+0x2e>
   81cb6:	bd70      	pop	{r4, r5, r6, pc}
   81cb8:	bd70      	pop	{r4, r5, r6, pc}
   81cba:	bf00      	nop
   81cbc:	00081f10 	.word	0x00081f10
   81cc0:	00081f10 	.word	0x00081f10
   81cc4:	00081f18 	.word	0x00081f18
   81cc8:	00081f10 	.word	0x00081f10

00081ccc <register_fini>:
   81ccc:	4b02      	ldr	r3, [pc, #8]	; (81cd8 <register_fini+0xc>)
   81cce:	b113      	cbz	r3, 81cd6 <register_fini+0xa>
   81cd0:	4802      	ldr	r0, [pc, #8]	; (81cdc <register_fini+0x10>)
   81cd2:	f000 b805 	b.w	81ce0 <atexit>
   81cd6:	4770      	bx	lr
   81cd8:	00000000 	.word	0x00000000
   81cdc:	00081ced 	.word	0x00081ced

00081ce0 <atexit>:
   81ce0:	2300      	movs	r3, #0
   81ce2:	4601      	mov	r1, r0
   81ce4:	461a      	mov	r2, r3
   81ce6:	4618      	mov	r0, r3
   81ce8:	f000 b81e 	b.w	81d28 <__register_exitproc>

00081cec <__libc_fini_array>:
   81cec:	b538      	push	{r3, r4, r5, lr}
   81cee:	4c0a      	ldr	r4, [pc, #40]	; (81d18 <__libc_fini_array+0x2c>)
   81cf0:	4d0a      	ldr	r5, [pc, #40]	; (81d1c <__libc_fini_array+0x30>)
   81cf2:	1b64      	subs	r4, r4, r5
   81cf4:	10a4      	asrs	r4, r4, #2
   81cf6:	d00a      	beq.n	81d0e <__libc_fini_array+0x22>
   81cf8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81cfc:	3b01      	subs	r3, #1
   81cfe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81d02:	3c01      	subs	r4, #1
   81d04:	f855 3904 	ldr.w	r3, [r5], #-4
   81d08:	4798      	blx	r3
   81d0a:	2c00      	cmp	r4, #0
   81d0c:	d1f9      	bne.n	81d02 <__libc_fini_array+0x16>
   81d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81d12:	f000 b901 	b.w	81f18 <_fini>
   81d16:	bf00      	nop
   81d18:	00081f28 	.word	0x00081f28
   81d1c:	00081f24 	.word	0x00081f24

00081d20 <__retarget_lock_acquire_recursive>:
   81d20:	4770      	bx	lr
   81d22:	bf00      	nop

00081d24 <__retarget_lock_release_recursive>:
   81d24:	4770      	bx	lr
   81d26:	bf00      	nop

00081d28 <__register_exitproc>:
   81d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81d2c:	4d2c      	ldr	r5, [pc, #176]	; (81de0 <__register_exitproc+0xb8>)
   81d2e:	4606      	mov	r6, r0
   81d30:	6828      	ldr	r0, [r5, #0]
   81d32:	4698      	mov	r8, r3
   81d34:	460f      	mov	r7, r1
   81d36:	4691      	mov	r9, r2
   81d38:	f7ff fff2 	bl	81d20 <__retarget_lock_acquire_recursive>
   81d3c:	4b29      	ldr	r3, [pc, #164]	; (81de4 <__register_exitproc+0xbc>)
   81d3e:	681c      	ldr	r4, [r3, #0]
   81d40:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81d44:	2b00      	cmp	r3, #0
   81d46:	d03e      	beq.n	81dc6 <__register_exitproc+0x9e>
   81d48:	685a      	ldr	r2, [r3, #4]
   81d4a:	2a1f      	cmp	r2, #31
   81d4c:	dc1c      	bgt.n	81d88 <__register_exitproc+0x60>
   81d4e:	f102 0e01 	add.w	lr, r2, #1
   81d52:	b176      	cbz	r6, 81d72 <__register_exitproc+0x4a>
   81d54:	2101      	movs	r1, #1
   81d56:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81d5a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81d5e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81d62:	4091      	lsls	r1, r2
   81d64:	4308      	orrs	r0, r1
   81d66:	2e02      	cmp	r6, #2
   81d68:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81d6c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81d70:	d023      	beq.n	81dba <__register_exitproc+0x92>
   81d72:	3202      	adds	r2, #2
   81d74:	f8c3 e004 	str.w	lr, [r3, #4]
   81d78:	6828      	ldr	r0, [r5, #0]
   81d7a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81d7e:	f7ff ffd1 	bl	81d24 <__retarget_lock_release_recursive>
   81d82:	2000      	movs	r0, #0
   81d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81d88:	4b17      	ldr	r3, [pc, #92]	; (81de8 <__register_exitproc+0xc0>)
   81d8a:	b30b      	cbz	r3, 81dd0 <__register_exitproc+0xa8>
   81d8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81d90:	f3af 8000 	nop.w
   81d94:	4603      	mov	r3, r0
   81d96:	b1d8      	cbz	r0, 81dd0 <__register_exitproc+0xa8>
   81d98:	2000      	movs	r0, #0
   81d9a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81d9e:	f04f 0e01 	mov.w	lr, #1
   81da2:	6058      	str	r0, [r3, #4]
   81da4:	6019      	str	r1, [r3, #0]
   81da6:	4602      	mov	r2, r0
   81da8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81dac:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81db0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81db4:	2e00      	cmp	r6, #0
   81db6:	d0dc      	beq.n	81d72 <__register_exitproc+0x4a>
   81db8:	e7cc      	b.n	81d54 <__register_exitproc+0x2c>
   81dba:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81dbe:	4301      	orrs	r1, r0
   81dc0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81dc4:	e7d5      	b.n	81d72 <__register_exitproc+0x4a>
   81dc6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81dca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81dce:	e7bb      	b.n	81d48 <__register_exitproc+0x20>
   81dd0:	6828      	ldr	r0, [r5, #0]
   81dd2:	f7ff ffa7 	bl	81d24 <__retarget_lock_release_recursive>
   81dd6:	f04f 30ff 	mov.w	r0, #4294967295
   81dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81dde:	bf00      	nop
   81de0:	20000430 	.word	0x20000430
   81de4:	00081f00 	.word	0x00081f00
   81de8:	00000000 	.word	0x00000000
   81dec:	304e4143 	.word	0x304e4143
   81df0:	73656d20 	.word	0x73656d20
   81df4:	65676173 	.word	0x65676173
   81df8:	72726120 	.word	0x72726120
   81dfc:	64657669 	.word	0x64657669
   81e00:	206e6920 	.word	0x206e6920
   81e04:	2d6e6f6e 	.word	0x2d6e6f6e
   81e08:	64657375 	.word	0x64657375
   81e0c:	69616d20 	.word	0x69616d20
   81e10:	786f626c 	.word	0x786f626c
   81e14:	00000d0a 	.word	0x00000d0a
   81e18:	2077656e 	.word	0x2077656e
   81e1c:	7373656d 	.word	0x7373656d
   81e20:	3a656761 	.word	0x3a656761
   81e24:	000d0a20 	.word	0x000d0a20
   81e28:	7373656d 	.word	0x7373656d
   81e2c:	20656761 	.word	0x20656761
   81e30:	203a6469 	.word	0x203a6469
   81e34:	0d0a6425 	.word	0x0d0a6425
   81e38:	00000000 	.word	0x00000000
   81e3c:	7373656d 	.word	0x7373656d
   81e40:	20656761 	.word	0x20656761
   81e44:	61746164 	.word	0x61746164
   81e48:	6e656c20 	.word	0x6e656c20
   81e4c:	3a687467 	.word	0x3a687467
   81e50:	0a642520 	.word	0x0a642520
   81e54:	73656d0d 	.word	0x73656d0d
   81e58:	65676173 	.word	0x65676173
   81e5c:	74616420 	.word	0x74616420
   81e60:	00203a61 	.word	0x00203a61
   81e64:	00206425 	.word	0x00206425
   81e68:	000d0a0a 	.word	0x000d0a0a
   81e6c:	656d6167 	.word	0x656d6167
   81e70:	65766f20 	.word	0x65766f20
   81e74:	000d0a72 	.word	0x000d0a72
   81e78:	726f6373 	.word	0x726f6373
   81e7c:	25203a65 	.word	0x25203a65
   81e80:	000d0a64 	.word	0x000d0a64
   81e84:	6c756e28 	.word	0x6c756e28
   81e88:	0000296c 	.word	0x0000296c
   81e8c:	4f525245 	.word	0x4f525245
   81e90:	44202152 	.word	0x44202152
   81e94:	20797475 	.word	0x20797475
   81e98:	6c637963 	.word	0x6c637963
   81e9c:	756f2065 	.word	0x756f2065
   81ea0:	666f2074 	.word	0x666f2074
   81ea4:	6e617220 	.word	0x6e617220
   81ea8:	202e6567 	.word	0x202e6567
   81eac:	7473754d 	.word	0x7473754d
   81eb0:	20656220 	.word	0x20656220
   81eb4:	77746562 	.word	0x77746562
   81eb8:	206e6565 	.word	0x206e6565
   81ebc:	6e612031 	.word	0x6e612031
   81ec0:	0a322064 	.word	0x0a322064
   81ec4:	0000000d 	.word	0x0000000d
   81ec8:	4f525245 	.word	0x4f525245
   81ecc:	49202152 	.word	0x49202152
   81ed0:	6c61766e 	.word	0x6c61766e
   81ed4:	70206469 	.word	0x70206469
   81ed8:	7469736f 	.word	0x7469736f
   81edc:	006e6f69 	.word	0x006e6f69
   81ee0:	3a525245 	.word	0x3a525245
   81ee4:	52415520 	.word	0x52415520
   81ee8:	58522054 	.word	0x58522054
   81eec:	66756220 	.word	0x66756220
   81ef0:	20726566 	.word	0x20726566
   81ef4:	66207369 	.word	0x66207369
   81ef8:	0a6c6c75 	.word	0x0a6c6c75
   81efc:	0000000d 	.word	0x0000000d

00081f00 <_global_impure_ptr>:
   81f00:	20000008                                ... 

00081f04 <_init>:
   81f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81f06:	bf00      	nop
   81f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81f0a:	bc08      	pop	{r3}
   81f0c:	469e      	mov	lr, r3
   81f0e:	4770      	bx	lr

00081f10 <__init_array_start>:
   81f10:	00081ccd 	.word	0x00081ccd

00081f14 <__frame_dummy_init_array_entry>:
   81f14:	00080119                                ....

00081f18 <_fini>:
   81f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81f1a:	bf00      	nop
   81f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81f1e:	bc08      	pop	{r3}
   81f20:	469e      	mov	lr, r3
   81f22:	4770      	bx	lr

00081f24 <__fini_array_start>:
   81f24:	000800f5 	.word	0x000800f5
