
G3_ES_Project_Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080bc4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a0  20000434  00080ff8  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004d4  00081098  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008d8  0008149c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00004500  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c8f  00000000  00000000  000249b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001178  00000000  00000000  00025645  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000178  00000000  00000000  000267bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00026935  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00010a22  00000000  00000000  00026a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002c27  00000000  00000000  0003748f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000543a5  00000000  00000000  0003a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000504  00000000  00000000  0008e45c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d8 08 00 20 f9 03 08 00 f5 03 08 00 f5 03 08 00     ... ............
   80010:	f5 03 08 00 f5 03 08 00 f5 03 08 00 00 00 00 00     ................
	...
   8002c:	f5 03 08 00 f5 03 08 00 00 00 00 00 f5 03 08 00     ................
   8003c:	f5 03 08 00 f5 03 08 00 f5 03 08 00 f5 03 08 00     ................
   8004c:	f5 03 08 00 f5 03 08 00 f5 03 08 00 f5 03 08 00     ................
   8005c:	f5 03 08 00 1d 09 08 00 f5 03 08 00 00 00 00 00     ................
   8006c:	f5 03 08 00 f5 03 08 00 f5 03 08 00 f5 03 08 00     ................
	...
   80084:	f5 03 08 00 f5 03 08 00 f5 03 08 00 f5 03 08 00     ................
   80094:	f5 03 08 00 f5 03 08 00 f5 03 08 00 f5 03 08 00     ................
   800a4:	00 00 00 00 f5 03 08 00 f5 03 08 00 f5 03 08 00     ................
   800b4:	f5 03 08 00 f5 03 08 00 f5 03 08 00 f5 03 08 00     ................
   800c4:	f5 03 08 00 f5 03 08 00 f5 03 08 00 f5 03 08 00     ................
   800d4:	f5 03 08 00 f5 03 08 00 f5 03 08 00 f5 03 08 00     ................
   800e4:	f5 03 08 00 f5 03 08 00 e5 02 08 00 f5 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080bc4 	.word	0x00080bc4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080bc4 	.word	0x00080bc4
   80154:	20000438 	.word	0x20000438
   80158:	00080bc4 	.word	0x00080bc4
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \param num_rx_mb Number of receive mailboxes, 	rx mb indexes: [num_tx_mb, num_rx_mb-1]
 *
 * \retval Success(0) or failure(1)
 */
uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8){
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>
	}
	
	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	//bit timing: BRP = 3 & 16TQ => SyncSeg = 1, PropSeg = 2, PS1 = 7, PS2 = 6, SJW = 1
	//can_br = 0b00000000000000110001001001110110;
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_init_def_tx_rx_mb>:
{
   80250:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80252:	2202      	movs	r2, #2
   80254:	2101      	movs	r1, #1
   80256:	4b01      	ldr	r3, [pc, #4]	; (8025c <can_init_def_tx_rx_mb+0xc>)
   80258:	4798      	blx	r3
}
   8025a:	bd08      	pop	{r3, pc}
   8025c:	00080161 	.word	0x00080161

00080260 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80260:	014b      	lsls	r3, r1, #5
   80262:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80266:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8026a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80272:	d033      	beq.n	802dc <can_receive+0x7c>
{
   80274:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80276:	014b      	lsls	r3, r1, #5
   80278:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80280:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80284:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80288:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8028c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80290:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80296:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8029a:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8029c:	461d      	mov	r5, r3
   8029e:	b15b      	cbz	r3, 802b8 <can_receive+0x58>
   802a0:	3003      	adds	r0, #3
   802a2:	2300      	movs	r3, #0
		{
			if(i < 4)
   802a4:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   802a6:	bfd9      	ittee	le
   802a8:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   802aa:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802ac:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   802ae:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802b0:	3301      	adds	r3, #1
   802b2:	3001      	adds	r0, #1
   802b4:	42ab      	cmp	r3, r5
   802b6:	d1f5      	bne.n	802a4 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802b8:	4b09      	ldr	r3, [pc, #36]	; (802e0 <can_receive+0x80>)
   802ba:	f101 0210 	add.w	r2, r1, #16
   802be:	0152      	lsls	r2, r2, #5
   802c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802c4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802d2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802d6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802d8:	bc30      	pop	{r4, r5}
   802da:	4770      	bx	lr
		return 1;
   802dc:	2001      	movs	r0, #1
   802de:	4770      	bx	lr
   802e0:	400b4000 	.word	0x400b4000

000802e4 <CAN0_Handler>:
{
   802e4:	b510      	push	{r4, lr}
	char can_sr = CAN0->CAN_SR;
   802e6:	4b18      	ldr	r3, [pc, #96]	; (80348 <CAN0_Handler+0x64>)
   802e8:	691c      	ldr	r4, [r3, #16]
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802ea:	f014 0f06 	tst.w	r4, #6
   802ee:	d013      	beq.n	80318 <CAN0_Handler+0x34>
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802f0:	f014 0f02 	tst.w	r4, #2
   802f4:	d11c      	bne.n	80330 <CAN0_Handler+0x4c>
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802f6:	f014 0f04 	tst.w	r4, #4
   802fa:	d021      	beq.n	80340 <CAN0_Handler+0x5c>
			can_receive(&message, 2);
   802fc:	2102      	movs	r1, #2
   802fe:	4813      	ldr	r0, [pc, #76]	; (8034c <CAN0_Handler+0x68>)
   80300:	4b13      	ldr	r3, [pc, #76]	; (80350 <CAN0_Handler+0x6c>)
   80302:	4798      	blx	r3
			newMessage = 1;
   80304:	2201      	movs	r2, #1
   80306:	4b13      	ldr	r3, [pc, #76]	; (80354 <CAN0_Handler+0x70>)
   80308:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < message.data_length; i++)
   8030a:	4b10      	ldr	r3, [pc, #64]	; (8034c <CAN0_Handler+0x68>)
   8030c:	789a      	ldrb	r2, [r3, #2]
   8030e:	b11a      	cbz	r2, 80318 <CAN0_Handler+0x34>
   80310:	2300      	movs	r3, #0
   80312:	3301      	adds	r3, #1
   80314:	4293      	cmp	r3, r2
   80316:	d1fc      	bne.n	80312 <CAN0_Handler+0x2e>
	if(can_sr & CAN_SR_MB0)
   80318:	f014 0f01 	tst.w	r4, #1
   8031c:	d002      	beq.n	80324 <CAN0_Handler+0x40>
		CAN0->CAN_IDR = CAN_IER_MB0;
   8031e:	2201      	movs	r2, #1
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <CAN0_Handler+0x64>)
   80322:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80324:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80328:	4b0b      	ldr	r3, [pc, #44]	; (80358 <CAN0_Handler+0x74>)
   8032a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8032e:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   80330:	2101      	movs	r1, #1
   80332:	4806      	ldr	r0, [pc, #24]	; (8034c <CAN0_Handler+0x68>)
   80334:	4b06      	ldr	r3, [pc, #24]	; (80350 <CAN0_Handler+0x6c>)
   80336:	4798      	blx	r3
			 newMessage = 1;
   80338:	2201      	movs	r2, #1
   8033a:	4b06      	ldr	r3, [pc, #24]	; (80354 <CAN0_Handler+0x70>)
   8033c:	601a      	str	r2, [r3, #0]
   8033e:	e7e4      	b.n	8030a <CAN0_Handler+0x26>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80340:	4806      	ldr	r0, [pc, #24]	; (8035c <CAN0_Handler+0x78>)
   80342:	4b07      	ldr	r3, [pc, #28]	; (80360 <CAN0_Handler+0x7c>)
   80344:	4798      	blx	r3
   80346:	e7e0      	b.n	8030a <CAN0_Handler+0x26>
   80348:	400b4000 	.word	0x400b4000
   8034c:	20000454 	.word	0x20000454
   80350:	00080261 	.word	0x00080261
   80354:	20000450 	.word	0x20000450
   80358:	e000e100 	.word	0xe000e100
   8035c:	00080af4 	.word	0x00080af4
   80360:	0008086d 	.word	0x0008086d

00080364 <new_message_received>:

// Move the can handler in this file and use these functions to get the message in main
int new_message_received(void){
	return newMessage;
}
   80364:	4b01      	ldr	r3, [pc, #4]	; (8036c <new_message_received+0x8>)
   80366:	6818      	ldr	r0, [r3, #0]
   80368:	4770      	bx	lr
   8036a:	bf00      	nop
   8036c:	20000450 	.word	0x20000450

00080370 <get_message>:


CAN_MESSAGE get_message(void){
   80370:	b410      	push	{r4}
	newMessage = 0;
   80372:	2100      	movs	r1, #0
   80374:	4a05      	ldr	r2, [pc, #20]	; (8038c <get_message+0x1c>)
   80376:	6011      	str	r1, [r2, #0]
	return message;
   80378:	4a05      	ldr	r2, [pc, #20]	; (80390 <get_message+0x20>)
   8037a:	6814      	ldr	r4, [r2, #0]
   8037c:	6851      	ldr	r1, [r2, #4]
   8037e:	6892      	ldr	r2, [r2, #8]
   80380:	6004      	str	r4, [r0, #0]
   80382:	6041      	str	r1, [r0, #4]
   80384:	6082      	str	r2, [r0, #8]
}
   80386:	bc10      	pop	{r4}
   80388:	4770      	bx	lr
   8038a:	bf00      	nop
   8038c:	20000450 	.word	0x20000450
   80390:	20000454 	.word	0x20000454

00080394 <print_message>:

void print_message(CAN_MESSAGE msg){
   80394:	b5f0      	push	{r4, r5, r6, r7, lr}
   80396:	b085      	sub	sp, #20
   80398:	ab04      	add	r3, sp, #16
   8039a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   8039e:	f89d 5006 	ldrb.w	r5, [sp, #6]
	printf("new message: \n\r");
   803a2:	480e      	ldr	r0, [pc, #56]	; (803dc <print_message+0x48>)
   803a4:	4c0e      	ldr	r4, [pc, #56]	; (803e0 <print_message+0x4c>)
   803a6:	47a0      	blx	r4
	printf("message id: %d\n\r", msg.id);
   803a8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   803ac:	480d      	ldr	r0, [pc, #52]	; (803e4 <print_message+0x50>)
   803ae:	47a0      	blx	r4
	printf("message data length: %d\n\rmessage data: ", msg.data_length);
   803b0:	4629      	mov	r1, r5
   803b2:	480d      	ldr	r0, [pc, #52]	; (803e8 <print_message+0x54>)
   803b4:	47a0      	blx	r4
	for (int i = 0; i < msg.data_length; i++)
   803b6:	b165      	cbz	r5, 803d2 <print_message+0x3e>
   803b8:	f10d 0407 	add.w	r4, sp, #7
   803bc:	ab04      	add	r3, sp, #16
   803be:	441d      	add	r5, r3
   803c0:	3d09      	subs	r5, #9
	{
		printf("%d ", msg.data[i]);
   803c2:	4f0a      	ldr	r7, [pc, #40]	; (803ec <print_message+0x58>)
   803c4:	4e06      	ldr	r6, [pc, #24]	; (803e0 <print_message+0x4c>)
   803c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   803ca:	4638      	mov	r0, r7
   803cc:	47b0      	blx	r6
	for (int i = 0; i < msg.data_length; i++)
   803ce:	42ac      	cmp	r4, r5
   803d0:	d1f9      	bne.n	803c6 <print_message+0x32>
	}
	printf("\n\n\r");
   803d2:	4807      	ldr	r0, [pc, #28]	; (803f0 <print_message+0x5c>)
   803d4:	4b02      	ldr	r3, [pc, #8]	; (803e0 <print_message+0x4c>)
   803d6:	4798      	blx	r3
}
   803d8:	b005      	add	sp, #20
   803da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   803dc:	00080b20 	.word	0x00080b20
   803e0:	0008086d 	.word	0x0008086d
   803e4:	00080b30 	.word	0x00080b30
   803e8:	00080b44 	.word	0x00080b44
   803ec:	00080b6c 	.word	0x00080b6c
   803f0:	00080b70 	.word	0x00080b70

000803f4 <Dummy_Handler>:
   803f4:	e7fe      	b.n	803f4 <Dummy_Handler>
	...

000803f8 <Reset_Handler>:
   803f8:	b508      	push	{r3, lr}
   803fa:	4b18      	ldr	r3, [pc, #96]	; (8045c <Reset_Handler+0x64>)
   803fc:	4a18      	ldr	r2, [pc, #96]	; (80460 <Reset_Handler+0x68>)
   803fe:	429a      	cmp	r2, r3
   80400:	d010      	beq.n	80424 <Reset_Handler+0x2c>
   80402:	4b18      	ldr	r3, [pc, #96]	; (80464 <Reset_Handler+0x6c>)
   80404:	4a15      	ldr	r2, [pc, #84]	; (8045c <Reset_Handler+0x64>)
   80406:	429a      	cmp	r2, r3
   80408:	d20c      	bcs.n	80424 <Reset_Handler+0x2c>
   8040a:	3b01      	subs	r3, #1
   8040c:	1a9b      	subs	r3, r3, r2
   8040e:	f023 0303 	bic.w	r3, r3, #3
   80412:	3304      	adds	r3, #4
   80414:	4413      	add	r3, r2
   80416:	4912      	ldr	r1, [pc, #72]	; (80460 <Reset_Handler+0x68>)
   80418:	f851 0b04 	ldr.w	r0, [r1], #4
   8041c:	f842 0b04 	str.w	r0, [r2], #4
   80420:	429a      	cmp	r2, r3
   80422:	d1f9      	bne.n	80418 <Reset_Handler+0x20>
   80424:	4b10      	ldr	r3, [pc, #64]	; (80468 <Reset_Handler+0x70>)
   80426:	4a11      	ldr	r2, [pc, #68]	; (8046c <Reset_Handler+0x74>)
   80428:	429a      	cmp	r2, r3
   8042a:	d20a      	bcs.n	80442 <Reset_Handler+0x4a>
   8042c:	3b01      	subs	r3, #1
   8042e:	1a9b      	subs	r3, r3, r2
   80430:	f023 0303 	bic.w	r3, r3, #3
   80434:	3304      	adds	r3, #4
   80436:	4413      	add	r3, r2
   80438:	2100      	movs	r1, #0
   8043a:	f842 1b04 	str.w	r1, [r2], #4
   8043e:	4293      	cmp	r3, r2
   80440:	d1fb      	bne.n	8043a <Reset_Handler+0x42>
   80442:	4b0b      	ldr	r3, [pc, #44]	; (80470 <Reset_Handler+0x78>)
   80444:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80448:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8044c:	4a09      	ldr	r2, [pc, #36]	; (80474 <Reset_Handler+0x7c>)
   8044e:	6093      	str	r3, [r2, #8]
   80450:	4b09      	ldr	r3, [pc, #36]	; (80478 <Reset_Handler+0x80>)
   80452:	4798      	blx	r3
   80454:	4b09      	ldr	r3, [pc, #36]	; (8047c <Reset_Handler+0x84>)
   80456:	4798      	blx	r3
   80458:	e7fe      	b.n	80458 <Reset_Handler+0x60>
   8045a:	bf00      	nop
   8045c:	20000000 	.word	0x20000000
   80460:	00080bc4 	.word	0x00080bc4
   80464:	20000434 	.word	0x20000434
   80468:	200004d4 	.word	0x200004d4
   8046c:	20000434 	.word	0x20000434
   80470:	00080000 	.word	0x00080000
   80474:	e000ed00 	.word	0xe000ed00
   80478:	00080985 	.word	0x00080985
   8047c:	00080569 	.word	0x00080569

00080480 <SystemInit>:
   80480:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80484:	4a20      	ldr	r2, [pc, #128]	; (80508 <SystemInit+0x88>)
   80486:	6013      	str	r3, [r2, #0]
   80488:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8048c:	6013      	str	r3, [r2, #0]
   8048e:	4b1f      	ldr	r3, [pc, #124]	; (8050c <SystemInit+0x8c>)
   80490:	6a1b      	ldr	r3, [r3, #32]
   80492:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80496:	d107      	bne.n	804a8 <SystemInit+0x28>
   80498:	4a1d      	ldr	r2, [pc, #116]	; (80510 <SystemInit+0x90>)
   8049a:	4b1c      	ldr	r3, [pc, #112]	; (8050c <SystemInit+0x8c>)
   8049c:	621a      	str	r2, [r3, #32]
   8049e:	461a      	mov	r2, r3
   804a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804a2:	f013 0f01 	tst.w	r3, #1
   804a6:	d0fb      	beq.n	804a0 <SystemInit+0x20>
   804a8:	4a1a      	ldr	r2, [pc, #104]	; (80514 <SystemInit+0x94>)
   804aa:	4b18      	ldr	r3, [pc, #96]	; (8050c <SystemInit+0x8c>)
   804ac:	621a      	str	r2, [r3, #32]
   804ae:	461a      	mov	r2, r3
   804b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   804b6:	d0fb      	beq.n	804b0 <SystemInit+0x30>
   804b8:	4a14      	ldr	r2, [pc, #80]	; (8050c <SystemInit+0x8c>)
   804ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
   804bc:	f023 0303 	bic.w	r3, r3, #3
   804c0:	f043 0301 	orr.w	r3, r3, #1
   804c4:	6313      	str	r3, [r2, #48]	; 0x30
   804c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804c8:	f013 0f08 	tst.w	r3, #8
   804cc:	d0fb      	beq.n	804c6 <SystemInit+0x46>
   804ce:	4a12      	ldr	r2, [pc, #72]	; (80518 <SystemInit+0x98>)
   804d0:	4b0e      	ldr	r3, [pc, #56]	; (8050c <SystemInit+0x8c>)
   804d2:	629a      	str	r2, [r3, #40]	; 0x28
   804d4:	461a      	mov	r2, r3
   804d6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804d8:	f013 0f02 	tst.w	r3, #2
   804dc:	d0fb      	beq.n	804d6 <SystemInit+0x56>
   804de:	2211      	movs	r2, #17
   804e0:	4b0a      	ldr	r3, [pc, #40]	; (8050c <SystemInit+0x8c>)
   804e2:	631a      	str	r2, [r3, #48]	; 0x30
   804e4:	461a      	mov	r2, r3
   804e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804e8:	f013 0f08 	tst.w	r3, #8
   804ec:	d0fb      	beq.n	804e6 <SystemInit+0x66>
   804ee:	2212      	movs	r2, #18
   804f0:	4b06      	ldr	r3, [pc, #24]	; (8050c <SystemInit+0x8c>)
   804f2:	631a      	str	r2, [r3, #48]	; 0x30
   804f4:	461a      	mov	r2, r3
   804f6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804f8:	f013 0f08 	tst.w	r3, #8
   804fc:	d0fb      	beq.n	804f6 <SystemInit+0x76>
   804fe:	4a07      	ldr	r2, [pc, #28]	; (8051c <SystemInit+0x9c>)
   80500:	4b07      	ldr	r3, [pc, #28]	; (80520 <SystemInit+0xa0>)
   80502:	601a      	str	r2, [r3, #0]
   80504:	4770      	bx	lr
   80506:	bf00      	nop
   80508:	400e0a00 	.word	0x400e0a00
   8050c:	400e0600 	.word	0x400e0600
   80510:	00370809 	.word	0x00370809
   80514:	01370809 	.word	0x01370809
   80518:	200d3f01 	.word	0x200d3f01
   8051c:	0501bd00 	.word	0x0501bd00
   80520:	20000000 	.word	0x20000000

00080524 <get_Positions>:
 */ 
#include "can_controller.h"

CAN_MESSAGE msg;

CAN_MESSAGE get_Positions(void){
   80524:	b530      	push	{r4, r5, lr}
   80526:	b085      	sub	sp, #20
   80528:	4605      	mov	r5, r0
	if(new_message_received()){
   8052a:	4b0b      	ldr	r3, [pc, #44]	; (80558 <get_Positions+0x34>)
   8052c:	4798      	blx	r3
   8052e:	b910      	cbnz	r0, 80536 <get_Positions+0x12>
		msg = get_message();
		print_message(msg);
	}
}
   80530:	4628      	mov	r0, r5
   80532:	b005      	add	sp, #20
   80534:	bd30      	pop	{r4, r5, pc}
		msg = get_message();
   80536:	4c09      	ldr	r4, [pc, #36]	; (8055c <get_Positions+0x38>)
   80538:	4668      	mov	r0, sp
   8053a:	4b09      	ldr	r3, [pc, #36]	; (80560 <get_Positions+0x3c>)
   8053c:	4798      	blx	r3
   8053e:	9900      	ldr	r1, [sp, #0]
   80540:	9a01      	ldr	r2, [sp, #4]
   80542:	9b02      	ldr	r3, [sp, #8]
   80544:	6021      	str	r1, [r4, #0]
   80546:	6062      	str	r2, [r4, #4]
   80548:	60a3      	str	r3, [r4, #8]
		print_message(msg);
   8054a:	6820      	ldr	r0, [r4, #0]
   8054c:	6861      	ldr	r1, [r4, #4]
   8054e:	68a2      	ldr	r2, [r4, #8]
   80550:	4b04      	ldr	r3, [pc, #16]	; (80564 <get_Positions+0x40>)
   80552:	4798      	blx	r3
   80554:	e7ec      	b.n	80530 <get_Positions+0xc>
   80556:	bf00      	nop
   80558:	00080365 	.word	0x00080365
   8055c:	20000460 	.word	0x20000460
   80560:	00080371 	.word	0x00080371
   80564:	00080395 	.word	0x00080395

00080568 <main>:
#define TQ (2*(BRP+1))/FOSC		//500ns
#define BITTIME 1/(TQ*CANBAUD)	//13TQ => SyncSeg = 1, PropSeg = 1, PS1 = 6, PS2 = 5, SJW = 1
*/

int main(void)
{
   80568:	b510      	push	{r4, lr}
   8056a:	b084      	sub	sp, #16
    /* Initialize the SAM system */
    SystemInit();
   8056c:	4b07      	ldr	r3, [pc, #28]	; (8058c <main+0x24>)
   8056e:	4798      	blx	r3
    WDT->WDT_MR = WDT_MR_WDDIS;		//disable the watchdog timer
   80570:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80574:	4b06      	ldr	r3, [pc, #24]	; (80590 <main+0x28>)
   80576:	605a      	str	r2, [r3, #4]
	configure_uart();
   80578:	4b06      	ldr	r3, [pc, #24]	; (80594 <main+0x2c>)
   8057a:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561);
   8057c:	4806      	ldr	r0, [pc, #24]	; (80598 <main+0x30>)
   8057e:	4b07      	ldr	r3, [pc, #28]	; (8059c <main+0x34>)
   80580:	4798      	blx	r3
	while (1){
		/*msg.id = 2;
		msg.data_length = 1;
		msg.data[0] = 'x';
		*/
		msg = get_Positions();
   80582:	4c07      	ldr	r4, [pc, #28]	; (805a0 <main+0x38>)
   80584:	a801      	add	r0, sp, #4
   80586:	47a0      	blx	r4
   80588:	e7fc      	b.n	80584 <main+0x1c>
   8058a:	bf00      	nop
   8058c:	00080481 	.word	0x00080481
   80590:	400e1a50 	.word	0x400e1a50
   80594:	00080891 	.word	0x00080891
   80598:	00290561 	.word	0x00290561
   8059c:	00080251 	.word	0x00080251
   805a0:	00080525 	.word	0x00080525

000805a4 <prints>:
   805a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   805a8:	460d      	mov	r5, r1
   805aa:	1e16      	subs	r6, r2, #0
   805ac:	dd48      	ble.n	80640 <prints+0x9c>
   805ae:	780a      	ldrb	r2, [r1, #0]
   805b0:	2a00      	cmp	r2, #0
   805b2:	d035      	beq.n	80620 <prints+0x7c>
   805b4:	460a      	mov	r2, r1
   805b6:	2400      	movs	r4, #0
   805b8:	3401      	adds	r4, #1
   805ba:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   805be:	2900      	cmp	r1, #0
   805c0:	d1fa      	bne.n	805b8 <prints+0x14>
   805c2:	42a6      	cmp	r6, r4
   805c4:	dc2d      	bgt.n	80622 <prints+0x7e>
   805c6:	2400      	movs	r4, #0
   805c8:	f003 0202 	and.w	r2, r3, #2
   805cc:	2a00      	cmp	r2, #0
   805ce:	bf0c      	ite	eq
   805d0:	f04f 0820 	moveq.w	r8, #32
   805d4:	f04f 0830 	movne.w	r8, #48	; 0x30
   805d8:	f013 0301 	ands.w	r3, r3, #1
   805dc:	d123      	bne.n	80626 <prints+0x82>
   805de:	2c00      	cmp	r4, #0
   805e0:	dd28      	ble.n	80634 <prints+0x90>
   805e2:	4626      	mov	r6, r4
   805e4:	fa5f f988 	uxtb.w	r9, r8
   805e8:	4f18      	ldr	r7, [pc, #96]	; (8064c <prints+0xa8>)
   805ea:	4648      	mov	r0, r9
   805ec:	47b8      	blx	r7
   805ee:	3e01      	subs	r6, #1
   805f0:	d1fb      	bne.n	805ea <prints+0x46>
   805f2:	7828      	ldrb	r0, [r5, #0]
   805f4:	b188      	cbz	r0, 8061a <prints+0x76>
   805f6:	4f15      	ldr	r7, [pc, #84]	; (8064c <prints+0xa8>)
   805f8:	47b8      	blx	r7
   805fa:	3401      	adds	r4, #1
   805fc:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80600:	2800      	cmp	r0, #0
   80602:	d1f9      	bne.n	805f8 <prints+0x54>
   80604:	2e00      	cmp	r6, #0
   80606:	dd08      	ble.n	8061a <prints+0x76>
   80608:	4635      	mov	r5, r6
   8060a:	fa5f f888 	uxtb.w	r8, r8
   8060e:	4f0f      	ldr	r7, [pc, #60]	; (8064c <prints+0xa8>)
   80610:	4640      	mov	r0, r8
   80612:	47b8      	blx	r7
   80614:	3d01      	subs	r5, #1
   80616:	d1fb      	bne.n	80610 <prints+0x6c>
   80618:	4434      	add	r4, r6
   8061a:	4620      	mov	r0, r4
   8061c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80620:	2400      	movs	r4, #0
   80622:	1b34      	subs	r4, r6, r4
   80624:	e7d0      	b.n	805c8 <prints+0x24>
   80626:	4626      	mov	r6, r4
   80628:	7828      	ldrb	r0, [r5, #0]
   8062a:	b108      	cbz	r0, 80630 <prints+0x8c>
   8062c:	2400      	movs	r4, #0
   8062e:	e7e2      	b.n	805f6 <prints+0x52>
   80630:	2400      	movs	r4, #0
   80632:	e7e7      	b.n	80604 <prints+0x60>
   80634:	4626      	mov	r6, r4
   80636:	461c      	mov	r4, r3
   80638:	e7db      	b.n	805f2 <prints+0x4e>
   8063a:	f04f 0820 	mov.w	r8, #32
   8063e:	e7d8      	b.n	805f2 <prints+0x4e>
   80640:	f013 0401 	ands.w	r4, r3, #1
   80644:	d0f9      	beq.n	8063a <prints+0x96>
   80646:	f04f 0820 	mov.w	r8, #32
   8064a:	e7ed      	b.n	80628 <prints+0x84>
   8064c:	000808f9 	.word	0x000808f9

00080650 <printi>:
   80650:	b5f0      	push	{r4, r5, r6, r7, lr}
   80652:	b085      	sub	sp, #20
   80654:	4607      	mov	r7, r0
   80656:	b381      	cbz	r1, 806ba <printi+0x6a>
   80658:	460c      	mov	r4, r1
   8065a:	b10b      	cbz	r3, 80660 <printi+0x10>
   8065c:	2a0a      	cmp	r2, #10
   8065e:	d038      	beq.n	806d2 <printi+0x82>
   80660:	2300      	movs	r3, #0
   80662:	f88d 300f 	strb.w	r3, [sp, #15]
   80666:	2600      	movs	r6, #0
   80668:	2900      	cmp	r1, #0
   8066a:	d046      	beq.n	806fa <printi+0xaa>
   8066c:	f10d 050f 	add.w	r5, sp, #15
   80670:	990c      	ldr	r1, [sp, #48]	; 0x30
   80672:	393a      	subs	r1, #58	; 0x3a
   80674:	fbb4 f3f2 	udiv	r3, r4, r2
   80678:	fb02 4313 	mls	r3, r2, r3, r4
   8067c:	2b09      	cmp	r3, #9
   8067e:	bfc8      	it	gt
   80680:	185b      	addgt	r3, r3, r1
   80682:	3330      	adds	r3, #48	; 0x30
   80684:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80688:	fbb4 f4f2 	udiv	r4, r4, r2
   8068c:	2c00      	cmp	r4, #0
   8068e:	d1f1      	bne.n	80674 <printi+0x24>
   80690:	b156      	cbz	r6, 806a8 <printi+0x58>
   80692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80694:	b11b      	cbz	r3, 8069e <printi+0x4e>
   80696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80698:	f013 0f02 	tst.w	r3, #2
   8069c:	d125      	bne.n	806ea <printi+0x9a>
   8069e:	232d      	movs	r3, #45	; 0x2d
   806a0:	f805 3c01 	strb.w	r3, [r5, #-1]
   806a4:	3d01      	subs	r5, #1
   806a6:	2600      	movs	r6, #0
   806a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806ac:	4629      	mov	r1, r5
   806ae:	4638      	mov	r0, r7
   806b0:	4c14      	ldr	r4, [pc, #80]	; (80704 <printi+0xb4>)
   806b2:	47a0      	blx	r4
   806b4:	4430      	add	r0, r6
   806b6:	b005      	add	sp, #20
   806b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   806ba:	2330      	movs	r3, #48	; 0x30
   806bc:	f88d 3004 	strb.w	r3, [sp, #4]
   806c0:	2300      	movs	r3, #0
   806c2:	f88d 3005 	strb.w	r3, [sp, #5]
   806c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806ca:	a901      	add	r1, sp, #4
   806cc:	4c0d      	ldr	r4, [pc, #52]	; (80704 <printi+0xb4>)
   806ce:	47a0      	blx	r4
   806d0:	e7f1      	b.n	806b6 <printi+0x66>
   806d2:	2900      	cmp	r1, #0
   806d4:	dac4      	bge.n	80660 <printi+0x10>
   806d6:	424c      	negs	r4, r1
   806d8:	2300      	movs	r3, #0
   806da:	f88d 300f 	strb.w	r3, [sp, #15]
   806de:	f10d 050f 	add.w	r5, sp, #15
   806e2:	2c00      	cmp	r4, #0
   806e4:	d0d5      	beq.n	80692 <printi+0x42>
   806e6:	2601      	movs	r6, #1
   806e8:	e7c0      	b.n	8066c <printi+0x1c>
   806ea:	202d      	movs	r0, #45	; 0x2d
   806ec:	4b06      	ldr	r3, [pc, #24]	; (80708 <printi+0xb8>)
   806ee:	4798      	blx	r3
   806f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806f2:	3b01      	subs	r3, #1
   806f4:	930a      	str	r3, [sp, #40]	; 0x28
   806f6:	2601      	movs	r6, #1
   806f8:	e7d6      	b.n	806a8 <printi+0x58>
   806fa:	461e      	mov	r6, r3
   806fc:	f10d 050f 	add.w	r5, sp, #15
   80700:	e7d2      	b.n	806a8 <printi+0x58>
   80702:	bf00      	nop
   80704:	000805a5 	.word	0x000805a5
   80708:	000808f9 	.word	0x000808f9

0008070c <print>:
   8070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80710:	b087      	sub	sp, #28
   80712:	4680      	mov	r8, r0
   80714:	780b      	ldrb	r3, [r1, #0]
   80716:	2b00      	cmp	r3, #0
   80718:	f000 8094 	beq.w	80844 <print+0x138>
   8071c:	468b      	mov	fp, r1
   8071e:	4617      	mov	r7, r2
   80720:	2500      	movs	r5, #0
   80722:	4e4e      	ldr	r6, [pc, #312]	; (8085c <print+0x150>)
   80724:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80864 <print+0x158>
   80728:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80868 <print+0x15c>
   8072c:	e046      	b.n	807bc <print+0xb0>
   8072e:	2200      	movs	r2, #0
   80730:	e070      	b.n	80814 <print+0x108>
   80732:	6839      	ldr	r1, [r7, #0]
   80734:	3704      	adds	r7, #4
   80736:	484a      	ldr	r0, [pc, #296]	; (80860 <print+0x154>)
   80738:	2900      	cmp	r1, #0
   8073a:	bf08      	it	eq
   8073c:	4601      	moveq	r1, r0
   8073e:	4640      	mov	r0, r8
   80740:	47d0      	blx	sl
   80742:	4405      	add	r5, r0
   80744:	e035      	b.n	807b2 <print+0xa6>
   80746:	6839      	ldr	r1, [r7, #0]
   80748:	3704      	adds	r7, #4
   8074a:	2061      	movs	r0, #97	; 0x61
   8074c:	9002      	str	r0, [sp, #8]
   8074e:	9301      	str	r3, [sp, #4]
   80750:	9200      	str	r2, [sp, #0]
   80752:	2301      	movs	r3, #1
   80754:	220a      	movs	r2, #10
   80756:	4640      	mov	r0, r8
   80758:	47c8      	blx	r9
   8075a:	4405      	add	r5, r0
   8075c:	e029      	b.n	807b2 <print+0xa6>
   8075e:	6839      	ldr	r1, [r7, #0]
   80760:	3704      	adds	r7, #4
   80762:	2061      	movs	r0, #97	; 0x61
   80764:	9002      	str	r0, [sp, #8]
   80766:	9301      	str	r3, [sp, #4]
   80768:	9200      	str	r2, [sp, #0]
   8076a:	2300      	movs	r3, #0
   8076c:	2210      	movs	r2, #16
   8076e:	4640      	mov	r0, r8
   80770:	47c8      	blx	r9
   80772:	4405      	add	r5, r0
   80774:	e01d      	b.n	807b2 <print+0xa6>
   80776:	6839      	ldr	r1, [r7, #0]
   80778:	3704      	adds	r7, #4
   8077a:	2041      	movs	r0, #65	; 0x41
   8077c:	9002      	str	r0, [sp, #8]
   8077e:	9301      	str	r3, [sp, #4]
   80780:	9200      	str	r2, [sp, #0]
   80782:	2300      	movs	r3, #0
   80784:	2210      	movs	r2, #16
   80786:	4640      	mov	r0, r8
   80788:	47c8      	blx	r9
   8078a:	4405      	add	r5, r0
   8078c:	e011      	b.n	807b2 <print+0xa6>
   8078e:	6839      	ldr	r1, [r7, #0]
   80790:	3704      	adds	r7, #4
   80792:	2061      	movs	r0, #97	; 0x61
   80794:	9002      	str	r0, [sp, #8]
   80796:	9301      	str	r3, [sp, #4]
   80798:	9200      	str	r2, [sp, #0]
   8079a:	2300      	movs	r3, #0
   8079c:	220a      	movs	r2, #10
   8079e:	4640      	mov	r0, r8
   807a0:	47c8      	blx	r9
   807a2:	4405      	add	r5, r0
   807a4:	e005      	b.n	807b2 <print+0xa6>
   807a6:	46a3      	mov	fp, r4
   807a8:	f89b 0000 	ldrb.w	r0, [fp]
   807ac:	47b0      	blx	r6
   807ae:	3501      	adds	r5, #1
   807b0:	465c      	mov	r4, fp
   807b2:	f104 0b01 	add.w	fp, r4, #1
   807b6:	7863      	ldrb	r3, [r4, #1]
   807b8:	2b00      	cmp	r3, #0
   807ba:	d044      	beq.n	80846 <print+0x13a>
   807bc:	2b25      	cmp	r3, #37	; 0x25
   807be:	d1f3      	bne.n	807a8 <print+0x9c>
   807c0:	f10b 0401 	add.w	r4, fp, #1
   807c4:	f89b 3001 	ldrb.w	r3, [fp, #1]
   807c8:	2b00      	cmp	r3, #0
   807ca:	d03c      	beq.n	80846 <print+0x13a>
   807cc:	2b25      	cmp	r3, #37	; 0x25
   807ce:	d0ea      	beq.n	807a6 <print+0x9a>
   807d0:	2b2d      	cmp	r3, #45	; 0x2d
   807d2:	bf06      	itte	eq
   807d4:	f10b 0402 	addeq.w	r4, fp, #2
   807d8:	2301      	moveq	r3, #1
   807da:	2300      	movne	r3, #0
   807dc:	7822      	ldrb	r2, [r4, #0]
   807de:	2a30      	cmp	r2, #48	; 0x30
   807e0:	d105      	bne.n	807ee <print+0xe2>
   807e2:	f043 0302 	orr.w	r3, r3, #2
   807e6:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   807ea:	2a30      	cmp	r2, #48	; 0x30
   807ec:	d0f9      	beq.n	807e2 <print+0xd6>
   807ee:	7821      	ldrb	r1, [r4, #0]
   807f0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   807f4:	b2d2      	uxtb	r2, r2
   807f6:	2a09      	cmp	r2, #9
   807f8:	d899      	bhi.n	8072e <print+0x22>
   807fa:	2200      	movs	r2, #0
   807fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80800:	3930      	subs	r1, #48	; 0x30
   80802:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80806:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   8080a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8080e:	b2c0      	uxtb	r0, r0
   80810:	2809      	cmp	r0, #9
   80812:	d9f3      	bls.n	807fc <print+0xf0>
   80814:	2973      	cmp	r1, #115	; 0x73
   80816:	d08c      	beq.n	80732 <print+0x26>
   80818:	2964      	cmp	r1, #100	; 0x64
   8081a:	d094      	beq.n	80746 <print+0x3a>
   8081c:	2978      	cmp	r1, #120	; 0x78
   8081e:	d09e      	beq.n	8075e <print+0x52>
   80820:	2958      	cmp	r1, #88	; 0x58
   80822:	d0a8      	beq.n	80776 <print+0x6a>
   80824:	2975      	cmp	r1, #117	; 0x75
   80826:	d0b2      	beq.n	8078e <print+0x82>
   80828:	2963      	cmp	r1, #99	; 0x63
   8082a:	d1c2      	bne.n	807b2 <print+0xa6>
   8082c:	6839      	ldr	r1, [r7, #0]
   8082e:	3704      	adds	r7, #4
   80830:	f88d 1014 	strb.w	r1, [sp, #20]
   80834:	2100      	movs	r1, #0
   80836:	f88d 1015 	strb.w	r1, [sp, #21]
   8083a:	a905      	add	r1, sp, #20
   8083c:	4640      	mov	r0, r8
   8083e:	47d0      	blx	sl
   80840:	4405      	add	r5, r0
   80842:	e7b6      	b.n	807b2 <print+0xa6>
   80844:	2500      	movs	r5, #0
   80846:	f1b8 0f00 	cmp.w	r8, #0
   8084a:	d003      	beq.n	80854 <print+0x148>
   8084c:	f8d8 3000 	ldr.w	r3, [r8]
   80850:	2200      	movs	r2, #0
   80852:	701a      	strb	r2, [r3, #0]
   80854:	4628      	mov	r0, r5
   80856:	b007      	add	sp, #28
   80858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8085c:	000808f9 	.word	0x000808f9
   80860:	00080b74 	.word	0x00080b74
   80864:	000805a5 	.word	0x000805a5
   80868:	00080651 	.word	0x00080651

0008086c <printf>:
   8086c:	b40f      	push	{r0, r1, r2, r3}
   8086e:	b500      	push	{lr}
   80870:	b083      	sub	sp, #12
   80872:	aa04      	add	r2, sp, #16
   80874:	f852 1b04 	ldr.w	r1, [r2], #4
   80878:	9201      	str	r2, [sp, #4]
   8087a:	2000      	movs	r0, #0
   8087c:	4b03      	ldr	r3, [pc, #12]	; (8088c <printf+0x20>)
   8087e:	4798      	blx	r3
   80880:	b003      	add	sp, #12
   80882:	f85d eb04 	ldr.w	lr, [sp], #4
   80886:	b004      	add	sp, #16
   80888:	4770      	bx	lr
   8088a:	bf00      	nop
   8088c:	0008070d 	.word	0x0008070d

00080890 <configure_uart>:
   80890:	4b16      	ldr	r3, [pc, #88]	; (808ec <configure_uart+0x5c>)
   80892:	2200      	movs	r2, #0
   80894:	701a      	strb	r2, [r3, #0]
   80896:	705a      	strb	r2, [r3, #1]
   80898:	4b15      	ldr	r3, [pc, #84]	; (808f0 <configure_uart+0x60>)
   8089a:	f44f 7140 	mov.w	r1, #768	; 0x300
   8089e:	6459      	str	r1, [r3, #68]	; 0x44
   808a0:	6059      	str	r1, [r3, #4]
   808a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   808a4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   808a6:	4002      	ands	r2, r0
   808a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   808ac:	671a      	str	r2, [r3, #112]	; 0x70
   808ae:	6659      	str	r1, [r3, #100]	; 0x64
   808b0:	f44f 7280 	mov.w	r2, #256	; 0x100
   808b4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   808b8:	611a      	str	r2, [r3, #16]
   808ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
   808be:	21ac      	movs	r1, #172	; 0xac
   808c0:	6019      	str	r1, [r3, #0]
   808c2:	f240 2123 	movw	r1, #547	; 0x223
   808c6:	6219      	str	r1, [r3, #32]
   808c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   808cc:	6059      	str	r1, [r3, #4]
   808ce:	f240 2102 	movw	r1, #514	; 0x202
   808d2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   808d6:	f04f 31ff 	mov.w	r1, #4294967295
   808da:	60d9      	str	r1, [r3, #12]
   808dc:	21e1      	movs	r1, #225	; 0xe1
   808de:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   808e0:	4904      	ldr	r1, [pc, #16]	; (808f4 <configure_uart+0x64>)
   808e2:	600a      	str	r2, [r1, #0]
   808e4:	2250      	movs	r2, #80	; 0x50
   808e6:	601a      	str	r2, [r3, #0]
   808e8:	4770      	bx	lr
   808ea:	bf00      	nop
   808ec:	2000046c 	.word	0x2000046c
   808f0:	400e0e00 	.word	0x400e0e00
   808f4:	e000e100 	.word	0xe000e100

000808f8 <uart_putchar>:
   808f8:	4b07      	ldr	r3, [pc, #28]	; (80918 <uart_putchar+0x20>)
   808fa:	695b      	ldr	r3, [r3, #20]
   808fc:	f013 0f02 	tst.w	r3, #2
   80900:	d008      	beq.n	80914 <uart_putchar+0x1c>
   80902:	4b05      	ldr	r3, [pc, #20]	; (80918 <uart_putchar+0x20>)
   80904:	61d8      	str	r0, [r3, #28]
   80906:	461a      	mov	r2, r3
   80908:	6953      	ldr	r3, [r2, #20]
   8090a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8090e:	d0fb      	beq.n	80908 <uart_putchar+0x10>
   80910:	2000      	movs	r0, #0
   80912:	4770      	bx	lr
   80914:	2001      	movs	r0, #1
   80916:	4770      	bx	lr
   80918:	400e0800 	.word	0x400e0800

0008091c <UART_Handler>:
   8091c:	b508      	push	{r3, lr}
   8091e:	4b15      	ldr	r3, [pc, #84]	; (80974 <UART_Handler+0x58>)
   80920:	695b      	ldr	r3, [r3, #20]
   80922:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80926:	d003      	beq.n	80930 <UART_Handler+0x14>
   80928:	f44f 71a8 	mov.w	r1, #336	; 0x150
   8092c:	4a11      	ldr	r2, [pc, #68]	; (80974 <UART_Handler+0x58>)
   8092e:	6011      	str	r1, [r2, #0]
   80930:	f013 0f01 	tst.w	r3, #1
   80934:	d012      	beq.n	8095c <UART_Handler+0x40>
   80936:	4810      	ldr	r0, [pc, #64]	; (80978 <UART_Handler+0x5c>)
   80938:	7842      	ldrb	r2, [r0, #1]
   8093a:	1c53      	adds	r3, r2, #1
   8093c:	4259      	negs	r1, r3
   8093e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80942:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80946:	bf58      	it	pl
   80948:	424b      	negpl	r3, r1
   8094a:	7801      	ldrb	r1, [r0, #0]
   8094c:	428b      	cmp	r3, r1
   8094e:	d006      	beq.n	8095e <UART_Handler+0x42>
   80950:	4908      	ldr	r1, [pc, #32]	; (80974 <UART_Handler+0x58>)
   80952:	6988      	ldr	r0, [r1, #24]
   80954:	4908      	ldr	r1, [pc, #32]	; (80978 <UART_Handler+0x5c>)
   80956:	440a      	add	r2, r1
   80958:	7090      	strb	r0, [r2, #2]
   8095a:	704b      	strb	r3, [r1, #1]
   8095c:	bd08      	pop	{r3, pc}
   8095e:	4807      	ldr	r0, [pc, #28]	; (8097c <UART_Handler+0x60>)
   80960:	4b07      	ldr	r3, [pc, #28]	; (80980 <UART_Handler+0x64>)
   80962:	4798      	blx	r3
   80964:	4b03      	ldr	r3, [pc, #12]	; (80974 <UART_Handler+0x58>)
   80966:	699a      	ldr	r2, [r3, #24]
   80968:	4b03      	ldr	r3, [pc, #12]	; (80978 <UART_Handler+0x5c>)
   8096a:	7859      	ldrb	r1, [r3, #1]
   8096c:	440b      	add	r3, r1
   8096e:	709a      	strb	r2, [r3, #2]
   80970:	bd08      	pop	{r3, pc}
   80972:	bf00      	nop
   80974:	400e0800 	.word	0x400e0800
   80978:	2000046c 	.word	0x2000046c
   8097c:	00080b7c 	.word	0x00080b7c
   80980:	0008086d 	.word	0x0008086d

00080984 <__libc_init_array>:
   80984:	b570      	push	{r4, r5, r6, lr}
   80986:	4e0f      	ldr	r6, [pc, #60]	; (809c4 <__libc_init_array+0x40>)
   80988:	4d0f      	ldr	r5, [pc, #60]	; (809c8 <__libc_init_array+0x44>)
   8098a:	1b76      	subs	r6, r6, r5
   8098c:	10b6      	asrs	r6, r6, #2
   8098e:	bf18      	it	ne
   80990:	2400      	movne	r4, #0
   80992:	d005      	beq.n	809a0 <__libc_init_array+0x1c>
   80994:	3401      	adds	r4, #1
   80996:	f855 3b04 	ldr.w	r3, [r5], #4
   8099a:	4798      	blx	r3
   8099c:	42a6      	cmp	r6, r4
   8099e:	d1f9      	bne.n	80994 <__libc_init_array+0x10>
   809a0:	4e0a      	ldr	r6, [pc, #40]	; (809cc <__libc_init_array+0x48>)
   809a2:	4d0b      	ldr	r5, [pc, #44]	; (809d0 <__libc_init_array+0x4c>)
   809a4:	f000 f8fc 	bl	80ba0 <_init>
   809a8:	1b76      	subs	r6, r6, r5
   809aa:	10b6      	asrs	r6, r6, #2
   809ac:	bf18      	it	ne
   809ae:	2400      	movne	r4, #0
   809b0:	d006      	beq.n	809c0 <__libc_init_array+0x3c>
   809b2:	3401      	adds	r4, #1
   809b4:	f855 3b04 	ldr.w	r3, [r5], #4
   809b8:	4798      	blx	r3
   809ba:	42a6      	cmp	r6, r4
   809bc:	d1f9      	bne.n	809b2 <__libc_init_array+0x2e>
   809be:	bd70      	pop	{r4, r5, r6, pc}
   809c0:	bd70      	pop	{r4, r5, r6, pc}
   809c2:	bf00      	nop
   809c4:	00080bac 	.word	0x00080bac
   809c8:	00080bac 	.word	0x00080bac
   809cc:	00080bb4 	.word	0x00080bb4
   809d0:	00080bac 	.word	0x00080bac

000809d4 <register_fini>:
   809d4:	4b02      	ldr	r3, [pc, #8]	; (809e0 <register_fini+0xc>)
   809d6:	b113      	cbz	r3, 809de <register_fini+0xa>
   809d8:	4802      	ldr	r0, [pc, #8]	; (809e4 <register_fini+0x10>)
   809da:	f000 b805 	b.w	809e8 <atexit>
   809de:	4770      	bx	lr
   809e0:	00000000 	.word	0x00000000
   809e4:	000809f5 	.word	0x000809f5

000809e8 <atexit>:
   809e8:	2300      	movs	r3, #0
   809ea:	4601      	mov	r1, r0
   809ec:	461a      	mov	r2, r3
   809ee:	4618      	mov	r0, r3
   809f0:	f000 b81e 	b.w	80a30 <__register_exitproc>

000809f4 <__libc_fini_array>:
   809f4:	b538      	push	{r3, r4, r5, lr}
   809f6:	4c0a      	ldr	r4, [pc, #40]	; (80a20 <__libc_fini_array+0x2c>)
   809f8:	4d0a      	ldr	r5, [pc, #40]	; (80a24 <__libc_fini_array+0x30>)
   809fa:	1b64      	subs	r4, r4, r5
   809fc:	10a4      	asrs	r4, r4, #2
   809fe:	d00a      	beq.n	80a16 <__libc_fini_array+0x22>
   80a00:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80a04:	3b01      	subs	r3, #1
   80a06:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a0a:	3c01      	subs	r4, #1
   80a0c:	f855 3904 	ldr.w	r3, [r5], #-4
   80a10:	4798      	blx	r3
   80a12:	2c00      	cmp	r4, #0
   80a14:	d1f9      	bne.n	80a0a <__libc_fini_array+0x16>
   80a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80a1a:	f000 b8cb 	b.w	80bb4 <_fini>
   80a1e:	bf00      	nop
   80a20:	00080bc4 	.word	0x00080bc4
   80a24:	00080bc0 	.word	0x00080bc0

00080a28 <__retarget_lock_acquire_recursive>:
   80a28:	4770      	bx	lr
   80a2a:	bf00      	nop

00080a2c <__retarget_lock_release_recursive>:
   80a2c:	4770      	bx	lr
   80a2e:	bf00      	nop

00080a30 <__register_exitproc>:
   80a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a34:	4d2c      	ldr	r5, [pc, #176]	; (80ae8 <__register_exitproc+0xb8>)
   80a36:	4606      	mov	r6, r0
   80a38:	6828      	ldr	r0, [r5, #0]
   80a3a:	4698      	mov	r8, r3
   80a3c:	460f      	mov	r7, r1
   80a3e:	4691      	mov	r9, r2
   80a40:	f7ff fff2 	bl	80a28 <__retarget_lock_acquire_recursive>
   80a44:	4b29      	ldr	r3, [pc, #164]	; (80aec <__register_exitproc+0xbc>)
   80a46:	681c      	ldr	r4, [r3, #0]
   80a48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80a4c:	2b00      	cmp	r3, #0
   80a4e:	d03e      	beq.n	80ace <__register_exitproc+0x9e>
   80a50:	685a      	ldr	r2, [r3, #4]
   80a52:	2a1f      	cmp	r2, #31
   80a54:	dc1c      	bgt.n	80a90 <__register_exitproc+0x60>
   80a56:	f102 0e01 	add.w	lr, r2, #1
   80a5a:	b176      	cbz	r6, 80a7a <__register_exitproc+0x4a>
   80a5c:	2101      	movs	r1, #1
   80a5e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80a62:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80a66:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80a6a:	4091      	lsls	r1, r2
   80a6c:	4308      	orrs	r0, r1
   80a6e:	2e02      	cmp	r6, #2
   80a70:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80a74:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80a78:	d023      	beq.n	80ac2 <__register_exitproc+0x92>
   80a7a:	3202      	adds	r2, #2
   80a7c:	f8c3 e004 	str.w	lr, [r3, #4]
   80a80:	6828      	ldr	r0, [r5, #0]
   80a82:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80a86:	f7ff ffd1 	bl	80a2c <__retarget_lock_release_recursive>
   80a8a:	2000      	movs	r0, #0
   80a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80a90:	4b17      	ldr	r3, [pc, #92]	; (80af0 <__register_exitproc+0xc0>)
   80a92:	b30b      	cbz	r3, 80ad8 <__register_exitproc+0xa8>
   80a94:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80a98:	f3af 8000 	nop.w
   80a9c:	4603      	mov	r3, r0
   80a9e:	b1d8      	cbz	r0, 80ad8 <__register_exitproc+0xa8>
   80aa0:	2000      	movs	r0, #0
   80aa2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80aa6:	f04f 0e01 	mov.w	lr, #1
   80aaa:	6058      	str	r0, [r3, #4]
   80aac:	6019      	str	r1, [r3, #0]
   80aae:	4602      	mov	r2, r0
   80ab0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ab4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ab8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80abc:	2e00      	cmp	r6, #0
   80abe:	d0dc      	beq.n	80a7a <__register_exitproc+0x4a>
   80ac0:	e7cc      	b.n	80a5c <__register_exitproc+0x2c>
   80ac2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80ac6:	4301      	orrs	r1, r0
   80ac8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80acc:	e7d5      	b.n	80a7a <__register_exitproc+0x4a>
   80ace:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80ad2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ad6:	e7bb      	b.n	80a50 <__register_exitproc+0x20>
   80ad8:	6828      	ldr	r0, [r5, #0]
   80ada:	f7ff ffa7 	bl	80a2c <__retarget_lock_release_recursive>
   80ade:	f04f 30ff 	mov.w	r0, #4294967295
   80ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ae6:	bf00      	nop
   80ae8:	20000430 	.word	0x20000430
   80aec:	00080b9c 	.word	0x00080b9c
   80af0:	00000000 	.word	0x00000000
   80af4:	304e4143 	.word	0x304e4143
   80af8:	73656d20 	.word	0x73656d20
   80afc:	65676173 	.word	0x65676173
   80b00:	72726120 	.word	0x72726120
   80b04:	64657669 	.word	0x64657669
   80b08:	206e6920 	.word	0x206e6920
   80b0c:	2d6e6f6e 	.word	0x2d6e6f6e
   80b10:	64657375 	.word	0x64657375
   80b14:	69616d20 	.word	0x69616d20
   80b18:	786f626c 	.word	0x786f626c
   80b1c:	00000d0a 	.word	0x00000d0a
   80b20:	2077656e 	.word	0x2077656e
   80b24:	7373656d 	.word	0x7373656d
   80b28:	3a656761 	.word	0x3a656761
   80b2c:	000d0a20 	.word	0x000d0a20
   80b30:	7373656d 	.word	0x7373656d
   80b34:	20656761 	.word	0x20656761
   80b38:	203a6469 	.word	0x203a6469
   80b3c:	0d0a6425 	.word	0x0d0a6425
   80b40:	00000000 	.word	0x00000000
   80b44:	7373656d 	.word	0x7373656d
   80b48:	20656761 	.word	0x20656761
   80b4c:	61746164 	.word	0x61746164
   80b50:	6e656c20 	.word	0x6e656c20
   80b54:	3a687467 	.word	0x3a687467
   80b58:	0a642520 	.word	0x0a642520
   80b5c:	73656d0d 	.word	0x73656d0d
   80b60:	65676173 	.word	0x65676173
   80b64:	74616420 	.word	0x74616420
   80b68:	00203a61 	.word	0x00203a61
   80b6c:	00206425 	.word	0x00206425
   80b70:	000d0a0a 	.word	0x000d0a0a
   80b74:	6c756e28 	.word	0x6c756e28
   80b78:	0000296c 	.word	0x0000296c
   80b7c:	3a525245 	.word	0x3a525245
   80b80:	52415520 	.word	0x52415520
   80b84:	58522054 	.word	0x58522054
   80b88:	66756220 	.word	0x66756220
   80b8c:	20726566 	.word	0x20726566
   80b90:	66207369 	.word	0x66207369
   80b94:	0a6c6c75 	.word	0x0a6c6c75
   80b98:	0000000d 	.word	0x0000000d

00080b9c <_global_impure_ptr>:
   80b9c:	20000008                                ... 

00080ba0 <_init>:
   80ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80ba2:	bf00      	nop
   80ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80ba6:	bc08      	pop	{r3}
   80ba8:	469e      	mov	lr, r3
   80baa:	4770      	bx	lr

00080bac <__init_array_start>:
   80bac:	000809d5 	.word	0x000809d5

00080bb0 <__frame_dummy_init_array_entry>:
   80bb0:	00080119                                ....

00080bb4 <_fini>:
   80bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80bb6:	bf00      	nop
   80bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80bba:	bc08      	pop	{r3}
   80bbc:	469e      	mov	lr, r3
   80bbe:	4770      	bx	lr

00080bc0 <__fini_array_start>:
   80bc0:	000800f5 	.word	0x000800f5
