
G3_ES_Project_Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aec  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080aec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  20000434  00080f20  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004cc  00080fb8  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008d0  000813bc  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000465b  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e42  00000000  00000000  00024b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001106  00000000  00000000  00025953  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001a0  00000000  00000000  00026a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00026bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001103b  00000000  00000000  00026d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000037ba  00000000  00000000  00037d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054202  00000000  00000000  0003b53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000530  00000000  00000000  0008f740  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 08 00 20 bd 02 08 00 b9 02 08 00 b9 02 08 00     ... ............
   80010:	b9 02 08 00 b9 02 08 00 b9 02 08 00 00 00 00 00     ................
	...
   8002c:	b9 02 08 00 b9 02 08 00 00 00 00 00 b9 02 08 00     ................
   8003c:	99 02 08 00 b9 02 08 00 b9 02 08 00 b9 02 08 00     ................
   8004c:	b9 02 08 00 b9 02 08 00 b9 02 08 00 b9 02 08 00     ................
   8005c:	b9 02 08 00 31 08 08 00 b9 02 08 00 00 00 00 00     ....1...........
   8006c:	b9 02 08 00 b9 02 08 00 b9 02 08 00 b9 02 08 00     ................
	...
   80084:	b9 02 08 00 b9 02 08 00 b9 02 08 00 b9 02 08 00     ................
   80094:	b9 02 08 00 b9 02 08 00 b9 02 08 00 b9 02 08 00     ................
   800a4:	00 00 00 00 b9 02 08 00 b9 02 08 00 b9 02 08 00     ................
   800b4:	b9 02 08 00 b9 02 08 00 b9 02 08 00 b9 02 08 00     ................
   800c4:	b9 02 08 00 b9 02 08 00 b9 02 08 00 b9 02 08 00     ................
   800d4:	b9 02 08 00 b9 02 08 00 b9 02 08 00 b9 02 08 00     ................
   800e4:	b9 02 08 00 b9 02 08 00 e5 01 08 00 b9 02 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080aec 	.word	0x00080aec

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080aec 	.word	0x00080aec
   80154:	20000438 	.word	0x20000438
   80158:	00080aec 	.word	0x00080aec
   8015c:	00000000 	.word	0x00000000

00080160 <can_receive>:
   80160:	014b      	lsls	r3, r1, #5
   80162:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80166:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8016a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8016e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80172:	d033      	beq.n	801dc <can_receive+0x7c>
   80174:	b430      	push	{r4, r5}
   80176:	014b      	lsls	r3, r1, #5
   80178:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8017c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80180:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   80184:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   80188:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8018c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80190:	8005      	strh	r5, [r0, #0]
   80192:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80196:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8019a:	7083      	strb	r3, [r0, #2]
   8019c:	461d      	mov	r5, r3
   8019e:	b15b      	cbz	r3, 801b8 <can_receive+0x58>
   801a0:	3003      	adds	r0, #3
   801a2:	2300      	movs	r3, #0
   801a4:	2b03      	cmp	r3, #3
   801a6:	bfd9      	ittee	le
   801a8:	7002      	strble	r2, [r0, #0]
   801aa:	0a12      	lsrle	r2, r2, #8
   801ac:	7004      	strbgt	r4, [r0, #0]
   801ae:	0a24      	lsrgt	r4, r4, #8
   801b0:	3301      	adds	r3, #1
   801b2:	3001      	adds	r0, #1
   801b4:	42ab      	cmp	r3, r5
   801b6:	d1f5      	bne.n	801a4 <can_receive+0x44>
   801b8:	4b09      	ldr	r3, [pc, #36]	; (801e0 <can_receive+0x80>)
   801ba:	f101 0210 	add.w	r2, r1, #16
   801be:	0152      	lsls	r2, r2, #5
   801c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   801c4:	5098      	str	r0, [r3, r2]
   801c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   801ca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   801ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801d2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   801d6:	2000      	movs	r0, #0
   801d8:	bc30      	pop	{r4, r5}
   801da:	4770      	bx	lr
   801dc:	2001      	movs	r0, #1
   801de:	4770      	bx	lr
   801e0:	400b4000 	.word	0x400b4000

000801e4 <CAN0_Handler>:
   801e4:	b510      	push	{r4, lr}
   801e6:	4b18      	ldr	r3, [pc, #96]	; (80248 <CAN0_Handler+0x64>)
   801e8:	691c      	ldr	r4, [r3, #16]
   801ea:	f014 0f06 	tst.w	r4, #6
   801ee:	d013      	beq.n	80218 <CAN0_Handler+0x34>
   801f0:	f014 0f02 	tst.w	r4, #2
   801f4:	d11c      	bne.n	80230 <CAN0_Handler+0x4c>
   801f6:	f014 0f04 	tst.w	r4, #4
   801fa:	d021      	beq.n	80240 <CAN0_Handler+0x5c>
   801fc:	2102      	movs	r1, #2
   801fe:	4813      	ldr	r0, [pc, #76]	; (8024c <CAN0_Handler+0x68>)
   80200:	4b13      	ldr	r3, [pc, #76]	; (80250 <CAN0_Handler+0x6c>)
   80202:	4798      	blx	r3
   80204:	2201      	movs	r2, #1
   80206:	4b13      	ldr	r3, [pc, #76]	; (80254 <CAN0_Handler+0x70>)
   80208:	601a      	str	r2, [r3, #0]
   8020a:	4b10      	ldr	r3, [pc, #64]	; (8024c <CAN0_Handler+0x68>)
   8020c:	789a      	ldrb	r2, [r3, #2]
   8020e:	b11a      	cbz	r2, 80218 <CAN0_Handler+0x34>
   80210:	2300      	movs	r3, #0
   80212:	3301      	adds	r3, #1
   80214:	4293      	cmp	r3, r2
   80216:	d1fc      	bne.n	80212 <CAN0_Handler+0x2e>
   80218:	f014 0f01 	tst.w	r4, #1
   8021c:	d002      	beq.n	80224 <CAN0_Handler+0x40>
   8021e:	2201      	movs	r2, #1
   80220:	4b09      	ldr	r3, [pc, #36]	; (80248 <CAN0_Handler+0x64>)
   80222:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80224:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80228:	4b0b      	ldr	r3, [pc, #44]	; (80258 <CAN0_Handler+0x74>)
   8022a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8022e:	bd10      	pop	{r4, pc}
   80230:	2101      	movs	r1, #1
   80232:	4806      	ldr	r0, [pc, #24]	; (8024c <CAN0_Handler+0x68>)
   80234:	4b06      	ldr	r3, [pc, #24]	; (80250 <CAN0_Handler+0x6c>)
   80236:	4798      	blx	r3
   80238:	2201      	movs	r2, #1
   8023a:	4b06      	ldr	r3, [pc, #24]	; (80254 <CAN0_Handler+0x70>)
   8023c:	601a      	str	r2, [r3, #0]
   8023e:	e7e4      	b.n	8020a <CAN0_Handler+0x26>
   80240:	4806      	ldr	r0, [pc, #24]	; (8025c <CAN0_Handler+0x78>)
   80242:	4b07      	ldr	r3, [pc, #28]	; (80260 <CAN0_Handler+0x7c>)
   80244:	4798      	blx	r3
   80246:	e7e0      	b.n	8020a <CAN0_Handler+0x26>
   80248:	400b4000 	.word	0x400b4000
   8024c:	20000458 	.word	0x20000458
   80250:	00080161 	.word	0x00080161
   80254:	20000450 	.word	0x20000450
   80258:	e000e100 	.word	0xe000e100
   8025c:	00080a08 	.word	0x00080a08
   80260:	00080781 	.word	0x00080781

00080264 <delay_us>:
#define US_TO_TICKS_CONVERTER (84 & SysTick_LOAD_RELOAD_Msk)		//https://www.at91.com/viewtopic.php?t=22349

static volatile uint16_t ticks;

void delay_us(uint16_t us) {
	ticks = us;
   80264:	4b09      	ldr	r3, [pc, #36]	; (8028c <delay_us+0x28>)
   80266:	8018      	strh	r0, [r3, #0]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
   80268:	4b09      	ldr	r3, [pc, #36]	; (80290 <delay_us+0x2c>)
   8026a:	2253      	movs	r2, #83	; 0x53
   8026c:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   8026e:	21f0      	movs	r1, #240	; 0xf0
   80270:	4a08      	ldr	r2, [pc, #32]	; (80294 <delay_us+0x30>)
   80272:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
   80276:	2200      	movs	r2, #0
   80278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8027a:	2207      	movs	r2, #7
   8027c:	601a      	str	r2, [r3, #0]
	SysTick_Config(1 * US_TO_TICKS_CONVERTER);
	
	while (ticks > 0);
   8027e:	4a03      	ldr	r2, [pc, #12]	; (8028c <delay_us+0x28>)
   80280:	8813      	ldrh	r3, [r2, #0]
   80282:	b29b      	uxth	r3, r3
   80284:	2b00      	cmp	r3, #0
   80286:	d1fb      	bne.n	80280 <delay_us+0x1c>
}
   80288:	4770      	bx	lr
   8028a:	bf00      	nop
   8028c:	20000454 	.word	0x20000454
   80290:	e000e010 	.word	0xe000e010
   80294:	e000ed00 	.word	0xe000ed00

00080298 <SysTick_Handler>:

void SysTick_Handler() {
	ticks--;
   80298:	4a05      	ldr	r2, [pc, #20]	; (802b0 <SysTick_Handler+0x18>)
   8029a:	8813      	ldrh	r3, [r2, #0]
   8029c:	3b01      	subs	r3, #1
   8029e:	b29b      	uxth	r3, r3
   802a0:	8013      	strh	r3, [r2, #0]
	if (ticks == 0) {
   802a2:	8813      	ldrh	r3, [r2, #0]
   802a4:	b29b      	uxth	r3, r3
   802a6:	b913      	cbnz	r3, 802ae <SysTick_Handler+0x16>
		SysTick->CTRL = 0;
   802a8:	2200      	movs	r2, #0
   802aa:	4b02      	ldr	r3, [pc, #8]	; (802b4 <SysTick_Handler+0x1c>)
   802ac:	601a      	str	r2, [r3, #0]
   802ae:	4770      	bx	lr
   802b0:	20000454 	.word	0x20000454
   802b4:	e000e010 	.word	0xe000e010

000802b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   802b8:	e7fe      	b.n	802b8 <Dummy_Handler>
	...

000802bc <Reset_Handler>:
{
   802bc:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   802be:	4b18      	ldr	r3, [pc, #96]	; (80320 <Reset_Handler+0x64>)
   802c0:	4a18      	ldr	r2, [pc, #96]	; (80324 <Reset_Handler+0x68>)
   802c2:	429a      	cmp	r2, r3
   802c4:	d010      	beq.n	802e8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   802c6:	4b18      	ldr	r3, [pc, #96]	; (80328 <Reset_Handler+0x6c>)
   802c8:	4a15      	ldr	r2, [pc, #84]	; (80320 <Reset_Handler+0x64>)
   802ca:	429a      	cmp	r2, r3
   802cc:	d20c      	bcs.n	802e8 <Reset_Handler+0x2c>
   802ce:	3b01      	subs	r3, #1
   802d0:	1a9b      	subs	r3, r3, r2
   802d2:	f023 0303 	bic.w	r3, r3, #3
   802d6:	3304      	adds	r3, #4
   802d8:	4413      	add	r3, r2
   802da:	4912      	ldr	r1, [pc, #72]	; (80324 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   802dc:	f851 0b04 	ldr.w	r0, [r1], #4
   802e0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   802e4:	429a      	cmp	r2, r3
   802e6:	d1f9      	bne.n	802dc <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   802e8:	4b10      	ldr	r3, [pc, #64]	; (8032c <Reset_Handler+0x70>)
   802ea:	4a11      	ldr	r2, [pc, #68]	; (80330 <Reset_Handler+0x74>)
   802ec:	429a      	cmp	r2, r3
   802ee:	d20a      	bcs.n	80306 <Reset_Handler+0x4a>
   802f0:	3b01      	subs	r3, #1
   802f2:	1a9b      	subs	r3, r3, r2
   802f4:	f023 0303 	bic.w	r3, r3, #3
   802f8:	3304      	adds	r3, #4
   802fa:	4413      	add	r3, r2
                *pDest++ = 0;
   802fc:	2100      	movs	r1, #0
   802fe:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80302:	4293      	cmp	r3, r2
   80304:	d1fb      	bne.n	802fe <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80306:	4b0b      	ldr	r3, [pc, #44]	; (80334 <Reset_Handler+0x78>)
   80308:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8030c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80310:	4a09      	ldr	r2, [pc, #36]	; (80338 <Reset_Handler+0x7c>)
   80312:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80314:	4b09      	ldr	r3, [pc, #36]	; (8033c <Reset_Handler+0x80>)
   80316:	4798      	blx	r3
        main();
   80318:	4b09      	ldr	r3, [pc, #36]	; (80340 <Reset_Handler+0x84>)
   8031a:	4798      	blx	r3
   8031c:	e7fe      	b.n	8031c <Reset_Handler+0x60>
   8031e:	bf00      	nop
   80320:	20000000 	.word	0x20000000
   80324:	00080aec 	.word	0x00080aec
   80328:	20000434 	.word	0x20000434
   8032c:	200004cc 	.word	0x200004cc
   80330:	20000434 	.word	0x20000434
   80334:	00080000 	.word	0x00080000
   80338:	e000ed00 	.word	0xe000ed00
   8033c:	00080899 	.word	0x00080899
   80340:	000803e9 	.word	0x000803e9

00080344 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80344:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80348:	4a20      	ldr	r2, [pc, #128]	; (803cc <SystemInit+0x88>)
   8034a:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   8034c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80350:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80352:	4b1f      	ldr	r3, [pc, #124]	; (803d0 <SystemInit+0x8c>)
   80354:	6a1b      	ldr	r3, [r3, #32]
   80356:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8035a:	d107      	bne.n	8036c <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   8035c:	4a1d      	ldr	r2, [pc, #116]	; (803d4 <SystemInit+0x90>)
   8035e:	4b1c      	ldr	r3, [pc, #112]	; (803d0 <SystemInit+0x8c>)
   80360:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80362:	461a      	mov	r2, r3
   80364:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80366:	f013 0f01 	tst.w	r3, #1
   8036a:	d0fb      	beq.n	80364 <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8036c:	4a1a      	ldr	r2, [pc, #104]	; (803d8 <SystemInit+0x94>)
   8036e:	4b18      	ldr	r3, [pc, #96]	; (803d0 <SystemInit+0x8c>)
   80370:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80372:	461a      	mov	r2, r3
   80374:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80376:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8037a:	d0fb      	beq.n	80374 <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8037c:	4a14      	ldr	r2, [pc, #80]	; (803d0 <SystemInit+0x8c>)
   8037e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80380:	f023 0303 	bic.w	r3, r3, #3
   80384:	f043 0301 	orr.w	r3, r3, #1
   80388:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8038a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8038c:	f013 0f08 	tst.w	r3, #8
   80390:	d0fb      	beq.n	8038a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80392:	4a12      	ldr	r2, [pc, #72]	; (803dc <SystemInit+0x98>)
   80394:	4b0e      	ldr	r3, [pc, #56]	; (803d0 <SystemInit+0x8c>)
   80396:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80398:	461a      	mov	r2, r3
   8039a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8039c:	f013 0f02 	tst.w	r3, #2
   803a0:	d0fb      	beq.n	8039a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   803a2:	2211      	movs	r2, #17
   803a4:	4b0a      	ldr	r3, [pc, #40]	; (803d0 <SystemInit+0x8c>)
   803a6:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   803a8:	461a      	mov	r2, r3
   803aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   803ac:	f013 0f08 	tst.w	r3, #8
   803b0:	d0fb      	beq.n	803aa <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   803b2:	2212      	movs	r2, #18
   803b4:	4b06      	ldr	r3, [pc, #24]	; (803d0 <SystemInit+0x8c>)
   803b6:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   803b8:	461a      	mov	r2, r3
   803ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
   803bc:	f013 0f08 	tst.w	r3, #8
   803c0:	d0fb      	beq.n	803ba <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   803c2:	4a07      	ldr	r2, [pc, #28]	; (803e0 <SystemInit+0x9c>)
   803c4:	4b07      	ldr	r3, [pc, #28]	; (803e4 <SystemInit+0xa0>)
   803c6:	601a      	str	r2, [r3, #0]
   803c8:	4770      	bx	lr
   803ca:	bf00      	nop
   803cc:	400e0a00 	.word	0x400e0a00
   803d0:	400e0600 	.word	0x400e0600
   803d4:	00370809 	.word	0x00370809
   803d8:	01370809 	.word	0x01370809
   803dc:	200d3f01 	.word	0x200d3f01
   803e0:	0501bd00 	.word	0x0501bd00
   803e4:	20000000 	.word	0x20000000

000803e8 <main>:
#define BRP 3
#define TQ (2*(BRP+1))/FOSC		//500ns
#define BITTIME 1/(TQ*CANBAUD)	//13TQ => SyncSeg = 1, PropSeg = 1, PS1 = 6, PS2 = 5, SJW = 1
*/

int main(void) {
   803e8:	b570      	push	{r4, r5, r6, lr}
    /* Initialize the SAM system */
    SystemInit();
   803ea:	4b0a      	ldr	r3, [pc, #40]	; (80414 <main+0x2c>)
   803ec:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;		//disable the watchdog timer
   803ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   803f2:	4b09      	ldr	r3, [pc, #36]	; (80418 <main+0x30>)
   803f4:	605a      	str	r2, [r3, #4]
	configure_uart();
   803f6:	4b09      	ldr	r3, [pc, #36]	; (8041c <main+0x34>)
   803f8:	4798      	blx	r3
	//can_init_def_tx_rx_mb(0x00290561);
	motorbox_init();
   803fa:	4b09      	ldr	r3, [pc, #36]	; (80420 <main+0x38>)
   803fc:	4798      	blx	r3
	printf("here \n\r");
   803fe:	4809      	ldr	r0, [pc, #36]	; (80424 <main+0x3c>)
   80400:	4b09      	ldr	r3, [pc, #36]	; (80428 <main+0x40>)
   80402:	4798      	blx	r3
	while(1) {
		uint16_t data = receive_data();
   80404:	4e09      	ldr	r6, [pc, #36]	; (8042c <main+0x44>)
		printf("data: %d\n\r", data);
   80406:	4d0a      	ldr	r5, [pc, #40]	; (80430 <main+0x48>)
   80408:	4c07      	ldr	r4, [pc, #28]	; (80428 <main+0x40>)
		uint16_t data = receive_data();
   8040a:	47b0      	blx	r6
		printf("data: %d\n\r", data);
   8040c:	4601      	mov	r1, r0
   8040e:	4628      	mov	r0, r5
   80410:	47a0      	blx	r4
   80412:	e7fa      	b.n	8040a <main+0x22>
   80414:	00080345 	.word	0x00080345
   80418:	400e1a50 	.word	0x400e1a50
   8041c:	000807a5 	.word	0x000807a5
   80420:	00080435 	.word	0x00080435
   80424:	00080a88 	.word	0x00080a88
   80428:	00080781 	.word	0x00080781
   8042c:	00080489 	.word	0x00080489
   80430:	00080a90 	.word	0x00080a90

00080434 <motorbox_init>:
	REG_DACC_MR = DACC_MR_REFRESH(10) | DACC_MR_USER_SEL_CHANNEL1;
	REG_DACC_CHER = DACC_CHER_CH1;
	//REG_DACC_CDR //USE THIS TO SEND JOYSTICK POS
}*/

void motorbox_init(void){
   80434:	b538      	push	{r3, r4, r5, lr}
	//need to do clock
	PMC->PMC_PCER0 |= PMC_PCER0_PID13; //enable clock for DACC
   80436:	4b11      	ldr	r3, [pc, #68]	; (8047c <motorbox_init+0x48>)
   80438:	691a      	ldr	r2, [r3, #16]
   8043a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8043e:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= PMC_PCER0_PID14; //enable clock for DACC
   80440:	691a      	ldr	r2, [r3, #16]
   80442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80446:	611a      	str	r2, [r3, #16]
	
	//!OE
	PIOD -> PIO_PER = PIO_PD0;		//enables input/output function
   80448:	4c0d      	ldr	r4, [pc, #52]	; (80480 <motorbox_init+0x4c>)
   8044a:	2301      	movs	r3, #1
   8044c:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD0;		//enables output
   8044e:	6123      	str	r3, [r4, #16]
	//SEL
	PIOD -> PIO_PER = PIO_PD2;		//enables input/output function
   80450:	2204      	movs	r2, #4
   80452:	6022      	str	r2, [r4, #0]
	PIOD -> PIO_OER = PIO_PD2;		//enables output
   80454:	6122      	str	r2, [r4, #16]
	//DIR
	PIOD -> PIO_PER = PIO_PD10;		//enables input/output function
   80456:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8045a:	6022      	str	r2, [r4, #0]
	PIOD -> PIO_OER = PIO_PD10;		//enables output	
   8045c:	6122      	str	r2, [r4, #16]
	//!RES
	PIOD -> PIO_PER = PIO_PD1;		//enables input/output function
   8045e:	2502      	movs	r5, #2
   80460:	6025      	str	r5, [r4, #0]
	PIOD -> PIO_OER = PIO_PD1;		//enables output	
   80462:	6125      	str	r5, [r4, #16]
	//EN
	PIOD -> PIO_PER = PIO_PD9;		//enables input/output function
   80464:	f44f 7200 	mov.w	r2, #512	; 0x200
   80468:	6022      	str	r2, [r4, #0]
	PIOD -> PIO_OER = PIO_PD9;		//enables output
   8046a:	6122      	str	r2, [r4, #16]
	PIOC -> PIO_ODR = PIO_PC2;		//disables output
	PIOC -> PIO_PER = PIO_PC1;		//enables input/output function
	PIOC -> PIO_ODR = PIO_PC1;		//disables output
	*/
	
	PIOD -> PIO_CODR = PIO_PD0;		//set !OE to low
   8046c:	6363      	str	r3, [r4, #52]	; 0x34
	PIOD -> PIO_SODR = PIO_PD0;		//set EN to high
   8046e:	6323      	str	r3, [r4, #48]	; 0x30
	PIOD -> PIO_CODR = PIO_PD1;		//set !RES to low
   80470:	6365      	str	r5, [r4, #52]	; 0x34
	delay_us(30);	
   80472:	201e      	movs	r0, #30
   80474:	4b03      	ldr	r3, [pc, #12]	; (80484 <motorbox_init+0x50>)
   80476:	4798      	blx	r3
	PIOD -> PIO_SODR = PIO_PD1;		//set !RES to high
   80478:	6325      	str	r5, [r4, #48]	; 0x30
   8047a:	bd38      	pop	{r3, r4, r5, pc}
   8047c:	400e0600 	.word	0x400e0600
   80480:	400e1400 	.word	0x400e1400
   80484:	00080265 	.word	0x00080265

00080488 <receive_data>:
}

uint16_t receive_data(void){
   80488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//set SEL to low
	PIOD -> PIO_CODR = PIO_PD2;		//set SEL to low
   8048a:	4c09      	ldr	r4, [pc, #36]	; (804b0 <receive_data+0x28>)
   8048c:	2704      	movs	r7, #4
   8048e:	6367      	str	r7, [r4, #52]	; 0x34
	//wait 20 microseconds
	delay_us(30);
   80490:	201e      	movs	r0, #30
   80492:	4e08      	ldr	r6, [pc, #32]	; (804b4 <receive_data+0x2c>)
   80494:	47b0      	blx	r6
	//read MSB
	uint16_t msb = (PIOD->PIO_PDSR & 0xFF) >> 1;
   80496:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	//set SEL to high
	PIOD -> PIO_SODR = PIO_PD2;
   80498:	6327      	str	r7, [r4, #48]	; 0x30
	//wait 20 microseconds
	delay_us(30);
   8049a:	201e      	movs	r0, #30
   8049c:	47b0      	blx	r6
	//read LSB
	uint16_t lsb = (PIOD->PIO_PDSR & 0xFF) >> 1;
   8049e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	
	return lsb | (msb << 8);
   804a0:	f3c5 0046 	ubfx	r0, r5, #1, #7
	uint16_t lsb = (PIOD->PIO_PDSR & 0xFF) >> 1;
   804a4:	f3c3 0346 	ubfx	r3, r3, #1, #7
}
   804a8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   804ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   804ae:	bf00      	nop
   804b0:	400e1400 	.word	0x400e1400
   804b4:	00080265 	.word	0x00080265

000804b8 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   804b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   804bc:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   804be:	1e16      	subs	r6, r2, #0
   804c0:	dd48      	ble.n	80554 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   804c2:	780a      	ldrb	r2, [r1, #0]
   804c4:	2a00      	cmp	r2, #0
   804c6:	d035      	beq.n	80534 <prints+0x7c>
   804c8:	460a      	mov	r2, r1
   804ca:	2400      	movs	r4, #0
   804cc:	3401      	adds	r4, #1
   804ce:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   804d2:	2900      	cmp	r1, #0
   804d4:	d1fa      	bne.n	804cc <prints+0x14>
		if (len >= width) width = 0;
   804d6:	42a6      	cmp	r6, r4
   804d8:	dc2d      	bgt.n	80536 <prints+0x7e>
   804da:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   804dc:	f003 0202 	and.w	r2, r3, #2
   804e0:	2a00      	cmp	r2, #0
   804e2:	bf0c      	ite	eq
   804e4:	f04f 0820 	moveq.w	r8, #32
   804e8:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   804ec:	f013 0301 	ands.w	r3, r3, #1
   804f0:	d123      	bne.n	8053a <prints+0x82>
		for ( ; width > 0; --width) {
   804f2:	2c00      	cmp	r4, #0
   804f4:	dd28      	ble.n	80548 <prints+0x90>
   804f6:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   804f8:	fa5f f988 	uxtb.w	r9, r8
   804fc:	4f18      	ldr	r7, [pc, #96]	; (80560 <prints+0xa8>)
   804fe:	4648      	mov	r0, r9
   80500:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80502:	3e01      	subs	r6, #1
   80504:	d1fb      	bne.n	804fe <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80506:	7828      	ldrb	r0, [r5, #0]
   80508:	b188      	cbz	r0, 8052e <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   8050a:	4f15      	ldr	r7, [pc, #84]	; (80560 <prints+0xa8>)
   8050c:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   8050e:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80510:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80514:	2800      	cmp	r0, #0
   80516:	d1f9      	bne.n	8050c <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80518:	2e00      	cmp	r6, #0
   8051a:	dd08      	ble.n	8052e <prints+0x76>
   8051c:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   8051e:	fa5f f888 	uxtb.w	r8, r8
   80522:	4f0f      	ldr	r7, [pc, #60]	; (80560 <prints+0xa8>)
   80524:	4640      	mov	r0, r8
   80526:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80528:	3d01      	subs	r5, #1
   8052a:	d1fb      	bne.n	80524 <prints+0x6c>
   8052c:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   8052e:	4620      	mov	r0, r4
   80530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80534:	2400      	movs	r4, #0
		else width -= len;
   80536:	1b34      	subs	r4, r6, r4
   80538:	e7d0      	b.n	804dc <prints+0x24>
   8053a:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   8053c:	7828      	ldrb	r0, [r5, #0]
   8053e:	b108      	cbz	r0, 80544 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80540:	2400      	movs	r4, #0
   80542:	e7e2      	b.n	8050a <prints+0x52>
   80544:	2400      	movs	r4, #0
   80546:	e7e7      	b.n	80518 <prints+0x60>
		for ( ; width > 0; --width) {
   80548:	4626      	mov	r6, r4
   8054a:	461c      	mov	r4, r3
   8054c:	e7db      	b.n	80506 <prints+0x4e>
	register int pc = 0, padchar = ' ';
   8054e:	f04f 0820 	mov.w	r8, #32
   80552:	e7d8      	b.n	80506 <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80554:	f013 0401 	ands.w	r4, r3, #1
   80558:	d0f9      	beq.n	8054e <prints+0x96>
	register int pc = 0, padchar = ' ';
   8055a:	f04f 0820 	mov.w	r8, #32
   8055e:	e7ed      	b.n	8053c <prints+0x84>
   80560:	0008080d 	.word	0x0008080d

00080564 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80564:	b5f0      	push	{r4, r5, r6, r7, lr}
   80566:	b085      	sub	sp, #20
   80568:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   8056a:	b381      	cbz	r1, 805ce <printi+0x6a>
   8056c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   8056e:	b10b      	cbz	r3, 80574 <printi+0x10>
   80570:	2a0a      	cmp	r2, #10
   80572:	d038      	beq.n	805e6 <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80574:	2300      	movs	r3, #0
   80576:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   8057a:	2600      	movs	r6, #0
   8057c:	2900      	cmp	r1, #0
   8057e:	d046      	beq.n	8060e <printi+0xaa>
   80580:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80584:	990c      	ldr	r1, [sp, #48]	; 0x30
   80586:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80588:	fbb4 f3f2 	udiv	r3, r4, r2
   8058c:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80590:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   80592:	bfc8      	it	gt
   80594:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   80596:	3330      	adds	r3, #48	; 0x30
   80598:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   8059c:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   805a0:	2c00      	cmp	r4, #0
   805a2:	d1f1      	bne.n	80588 <printi+0x24>
	}

	if (neg) {
   805a4:	b156      	cbz	r6, 805bc <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   805a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   805a8:	b11b      	cbz	r3, 805b2 <printi+0x4e>
   805aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   805ac:	f013 0f02 	tst.w	r3, #2
   805b0:	d125      	bne.n	805fe <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   805b2:	232d      	movs	r3, #45	; 0x2d
   805b4:	f805 3c01 	strb.w	r3, [r5, #-1]
   805b8:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   805ba:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   805bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   805be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   805c0:	4629      	mov	r1, r5
   805c2:	4638      	mov	r0, r7
   805c4:	4c14      	ldr	r4, [pc, #80]	; (80618 <printi+0xb4>)
   805c6:	47a0      	blx	r4
   805c8:	4430      	add	r0, r6
}
   805ca:	b005      	add	sp, #20
   805cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   805ce:	2330      	movs	r3, #48	; 0x30
   805d0:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   805d4:	2300      	movs	r3, #0
   805d6:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   805da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   805dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   805de:	a901      	add	r1, sp, #4
   805e0:	4c0d      	ldr	r4, [pc, #52]	; (80618 <printi+0xb4>)
   805e2:	47a0      	blx	r4
   805e4:	e7f1      	b.n	805ca <printi+0x66>
	if (sg && b == 10 && i < 0) {
   805e6:	2900      	cmp	r1, #0
   805e8:	dac4      	bge.n	80574 <printi+0x10>
		u = -i;
   805ea:	424c      	negs	r4, r1
	*s = '\0';
   805ec:	2300      	movs	r3, #0
   805ee:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   805f2:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   805f6:	2c00      	cmp	r4, #0
   805f8:	d0d5      	beq.n	805a6 <printi+0x42>
		neg = 1;
   805fa:	2601      	movs	r6, #1
   805fc:	e7c0      	b.n	80580 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   805fe:	202d      	movs	r0, #45	; 0x2d
   80600:	4b06      	ldr	r3, [pc, #24]	; (8061c <printi+0xb8>)
   80602:	4798      	blx	r3
			--width;
   80604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80606:	3b01      	subs	r3, #1
   80608:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   8060a:	2601      	movs	r6, #1
			--width;
   8060c:	e7d6      	b.n	805bc <printi+0x58>
	register int t, neg = 0, pc = 0;
   8060e:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80610:	f10d 050f 	add.w	r5, sp, #15
   80614:	e7d2      	b.n	805bc <printi+0x58>
   80616:	bf00      	nop
   80618:	000804b9 	.word	0x000804b9
   8061c:	0008080d 	.word	0x0008080d

00080620 <print>:

static int print( char **out, const char *format, va_list args )
{
   80620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80624:	b087      	sub	sp, #28
   80626:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80628:	780b      	ldrb	r3, [r1, #0]
   8062a:	2b00      	cmp	r3, #0
   8062c:	f000 8094 	beq.w	80758 <print+0x138>
   80630:	468b      	mov	fp, r1
   80632:	4617      	mov	r7, r2
   80634:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80636:	4e4e      	ldr	r6, [pc, #312]	; (80770 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80638:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80778 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   8063c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8077c <print+0x15c>
   80640:	e046      	b.n	806d0 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80642:	2200      	movs	r2, #0
   80644:	e070      	b.n	80728 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80646:	6839      	ldr	r1, [r7, #0]
   80648:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   8064a:	484a      	ldr	r0, [pc, #296]	; (80774 <print+0x154>)
   8064c:	2900      	cmp	r1, #0
   8064e:	bf08      	it	eq
   80650:	4601      	moveq	r1, r0
   80652:	4640      	mov	r0, r8
   80654:	47d0      	blx	sl
   80656:	4405      	add	r5, r0
				continue;
   80658:	e035      	b.n	806c6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   8065a:	6839      	ldr	r1, [r7, #0]
   8065c:	3704      	adds	r7, #4
   8065e:	2061      	movs	r0, #97	; 0x61
   80660:	9002      	str	r0, [sp, #8]
   80662:	9301      	str	r3, [sp, #4]
   80664:	9200      	str	r2, [sp, #0]
   80666:	2301      	movs	r3, #1
   80668:	220a      	movs	r2, #10
   8066a:	4640      	mov	r0, r8
   8066c:	47c8      	blx	r9
   8066e:	4405      	add	r5, r0
				continue;
   80670:	e029      	b.n	806c6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80672:	6839      	ldr	r1, [r7, #0]
   80674:	3704      	adds	r7, #4
   80676:	2061      	movs	r0, #97	; 0x61
   80678:	9002      	str	r0, [sp, #8]
   8067a:	9301      	str	r3, [sp, #4]
   8067c:	9200      	str	r2, [sp, #0]
   8067e:	2300      	movs	r3, #0
   80680:	2210      	movs	r2, #16
   80682:	4640      	mov	r0, r8
   80684:	47c8      	blx	r9
   80686:	4405      	add	r5, r0
				continue;
   80688:	e01d      	b.n	806c6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   8068a:	6839      	ldr	r1, [r7, #0]
   8068c:	3704      	adds	r7, #4
   8068e:	2041      	movs	r0, #65	; 0x41
   80690:	9002      	str	r0, [sp, #8]
   80692:	9301      	str	r3, [sp, #4]
   80694:	9200      	str	r2, [sp, #0]
   80696:	2300      	movs	r3, #0
   80698:	2210      	movs	r2, #16
   8069a:	4640      	mov	r0, r8
   8069c:	47c8      	blx	r9
   8069e:	4405      	add	r5, r0
				continue;
   806a0:	e011      	b.n	806c6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   806a2:	6839      	ldr	r1, [r7, #0]
   806a4:	3704      	adds	r7, #4
   806a6:	2061      	movs	r0, #97	; 0x61
   806a8:	9002      	str	r0, [sp, #8]
   806aa:	9301      	str	r3, [sp, #4]
   806ac:	9200      	str	r2, [sp, #0]
   806ae:	2300      	movs	r3, #0
   806b0:	220a      	movs	r2, #10
   806b2:	4640      	mov	r0, r8
   806b4:	47c8      	blx	r9
   806b6:	4405      	add	r5, r0
				continue;
   806b8:	e005      	b.n	806c6 <print+0xa6>
			++format;
   806ba:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   806bc:	f89b 0000 	ldrb.w	r0, [fp]
   806c0:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   806c2:	3501      	adds	r5, #1
   806c4:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   806c6:	f104 0b01 	add.w	fp, r4, #1
   806ca:	7863      	ldrb	r3, [r4, #1]
   806cc:	2b00      	cmp	r3, #0
   806ce:	d044      	beq.n	8075a <print+0x13a>
		if (*format == '%') {
   806d0:	2b25      	cmp	r3, #37	; 0x25
   806d2:	d1f3      	bne.n	806bc <print+0x9c>
			++format;
   806d4:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   806d8:	f89b 3001 	ldrb.w	r3, [fp, #1]
   806dc:	2b00      	cmp	r3, #0
   806de:	d03c      	beq.n	8075a <print+0x13a>
			if (*format == '%') goto out;
   806e0:	2b25      	cmp	r3, #37	; 0x25
   806e2:	d0ea      	beq.n	806ba <print+0x9a>
			if (*format == '-') {
   806e4:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   806e6:	bf06      	itte	eq
   806e8:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   806ec:	2301      	moveq	r3, #1
			width = pad = 0;
   806ee:	2300      	movne	r3, #0
			while (*format == '0') {
   806f0:	7822      	ldrb	r2, [r4, #0]
   806f2:	2a30      	cmp	r2, #48	; 0x30
   806f4:	d105      	bne.n	80702 <print+0xe2>
				pad |= PAD_ZERO;
   806f6:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   806fa:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   806fe:	2a30      	cmp	r2, #48	; 0x30
   80700:	d0f9      	beq.n	806f6 <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80702:	7821      	ldrb	r1, [r4, #0]
   80704:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80708:	b2d2      	uxtb	r2, r2
   8070a:	2a09      	cmp	r2, #9
   8070c:	d899      	bhi.n	80642 <print+0x22>
   8070e:	2200      	movs	r2, #0
				width *= 10;
   80710:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80714:	3930      	subs	r1, #48	; 0x30
   80716:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8071a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   8071e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80722:	b2c0      	uxtb	r0, r0
   80724:	2809      	cmp	r0, #9
   80726:	d9f3      	bls.n	80710 <print+0xf0>
			if( *format == 's' ) {
   80728:	2973      	cmp	r1, #115	; 0x73
   8072a:	d08c      	beq.n	80646 <print+0x26>
			if( *format == 'd' ) {
   8072c:	2964      	cmp	r1, #100	; 0x64
   8072e:	d094      	beq.n	8065a <print+0x3a>
			if( *format == 'x' ) {
   80730:	2978      	cmp	r1, #120	; 0x78
   80732:	d09e      	beq.n	80672 <print+0x52>
			if( *format == 'X' ) {
   80734:	2958      	cmp	r1, #88	; 0x58
   80736:	d0a8      	beq.n	8068a <print+0x6a>
			if( *format == 'u' ) {
   80738:	2975      	cmp	r1, #117	; 0x75
   8073a:	d0b2      	beq.n	806a2 <print+0x82>
			if( *format == 'c' ) {
   8073c:	2963      	cmp	r1, #99	; 0x63
   8073e:	d1c2      	bne.n	806c6 <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80740:	6839      	ldr	r1, [r7, #0]
   80742:	3704      	adds	r7, #4
   80744:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80748:	2100      	movs	r1, #0
   8074a:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   8074e:	a905      	add	r1, sp, #20
   80750:	4640      	mov	r0, r8
   80752:	47d0      	blx	sl
   80754:	4405      	add	r5, r0
				continue;
   80756:	e7b6      	b.n	806c6 <print+0xa6>
	register int pc = 0;
   80758:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   8075a:	f1b8 0f00 	cmp.w	r8, #0
   8075e:	d003      	beq.n	80768 <print+0x148>
   80760:	f8d8 3000 	ldr.w	r3, [r8]
   80764:	2200      	movs	r2, #0
   80766:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80768:	4628      	mov	r0, r5
   8076a:	b007      	add	sp, #28
   8076c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80770:	0008080d 	.word	0x0008080d
   80774:	00080a9c 	.word	0x00080a9c
   80778:	000804b9 	.word	0x000804b9
   8077c:	00080565 	.word	0x00080565

00080780 <printf>:

int printf(const char *format, ...)
{
   80780:	b40f      	push	{r0, r1, r2, r3}
   80782:	b500      	push	{lr}
   80784:	b083      	sub	sp, #12
   80786:	aa04      	add	r2, sp, #16
   80788:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   8078c:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   8078e:	2000      	movs	r0, #0
   80790:	4b03      	ldr	r3, [pc, #12]	; (807a0 <printf+0x20>)
   80792:	4798      	blx	r3
}
   80794:	b003      	add	sp, #12
   80796:	f85d eb04 	ldr.w	lr, [sp], #4
   8079a:	b004      	add	sp, #16
   8079c:	4770      	bx	lr
   8079e:	bf00      	nop
   807a0:	00080621 	.word	0x00080621

000807a4 <configure_uart>:
	uint32_t ul_sr;

	/*
	Initialize UART ring buffer as empty
	*/
	rx_buffer.head=0;
   807a4:	4b16      	ldr	r3, [pc, #88]	; (80800 <configure_uart+0x5c>)
   807a6:	2200      	movs	r2, #0
   807a8:	701a      	strb	r2, [r3, #0]
	rx_buffer.tail=0;
   807aa:	705a      	strb	r2, [r3, #1]
	/*
	Initialize UART communication
	*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   807ac:	4b15      	ldr	r3, [pc, #84]	; (80804 <configure_uart+0x60>)
   807ae:	f44f 7140 	mov.w	r1, #768	; 0x300
   807b2:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   807b4:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   807b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   807b8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   807ba:	4002      	ands	r2, r0
   807bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   807c0:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   807c2:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   807c4:	f44f 7280 	mov.w	r2, #256	; 0x100
   807c8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   807cc:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   807ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
   807d2:	21ac      	movs	r1, #172	; 0xac
   807d4:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   807d6:	f240 2123 	movw	r1, #547	; 0x223
   807da:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   807dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
   807e0:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   807e2:	f240 2102 	movw	r1, #514	; 0x202
   807e6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   807ea:	f04f 31ff 	mov.w	r1, #4294967295
   807ee:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   807f0:	21e1      	movs	r1, #225	; 0xe1
   807f2:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   807f4:	4904      	ldr	r1, [pc, #16]	; (80808 <configure_uart+0x64>)
   807f6:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   807f8:	2250      	movs	r2, #80	; 0x50
   807fa:	601a      	str	r2, [r3, #0]
   807fc:	4770      	bx	lr
   807fe:	bf00      	nop
   80800:	20000464 	.word	0x20000464
   80804:	400e0e00 	.word	0x400e0e00
   80808:	e000e100 	.word	0xe000e100

0008080c <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   8080c:	4b07      	ldr	r3, [pc, #28]	; (8082c <uart_putchar+0x20>)
   8080e:	695b      	ldr	r3, [r3, #20]
   80810:	f013 0f02 	tst.w	r3, #2
   80814:	d008      	beq.n	80828 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80816:	4b05      	ldr	r3, [pc, #20]	; (8082c <uart_putchar+0x20>)
   80818:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   8081a:	461a      	mov	r2, r3
   8081c:	6953      	ldr	r3, [r2, #20]
   8081e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80822:	d0fb      	beq.n	8081c <uart_putchar+0x10>
	return 0;
   80824:	2000      	movs	r0, #0
   80826:	4770      	bx	lr
	return 1;
   80828:	2001      	movs	r0, #1
}
   8082a:	4770      	bx	lr
   8082c:	400e0800 	.word	0x400e0800

00080830 <UART_Handler>:

void UART_Handler(void)
{
   80830:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80832:	4b15      	ldr	r3, [pc, #84]	; (80888 <UART_Handler+0x58>)
   80834:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80836:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   8083a:	d003      	beq.n	80844 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   8083c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80840:	4a11      	ldr	r2, [pc, #68]	; (80888 <UART_Handler+0x58>)
   80842:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80844:	f013 0f01 	tst.w	r3, #1
   80848:	d012      	beq.n	80870 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   8084a:	4810      	ldr	r0, [pc, #64]	; (8088c <UART_Handler+0x5c>)
   8084c:	7842      	ldrb	r2, [r0, #1]
   8084e:	1c53      	adds	r3, r2, #1
   80850:	4259      	negs	r1, r3
   80852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80856:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   8085a:	bf58      	it	pl
   8085c:	424b      	negpl	r3, r1
   8085e:	7801      	ldrb	r1, [r0, #0]
   80860:	428b      	cmp	r3, r1
   80862:	d006      	beq.n	80872 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80864:	4908      	ldr	r1, [pc, #32]	; (80888 <UART_Handler+0x58>)
   80866:	6988      	ldr	r0, [r1, #24]
   80868:	4908      	ldr	r1, [pc, #32]	; (8088c <UART_Handler+0x5c>)
   8086a:	440a      	add	r2, r1
   8086c:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   8086e:	704b      	strb	r3, [r1, #1]
   80870:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80872:	4807      	ldr	r0, [pc, #28]	; (80890 <UART_Handler+0x60>)
   80874:	4b07      	ldr	r3, [pc, #28]	; (80894 <UART_Handler+0x64>)
   80876:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80878:	4b03      	ldr	r3, [pc, #12]	; (80888 <UART_Handler+0x58>)
   8087a:	699a      	ldr	r2, [r3, #24]
   8087c:	4b03      	ldr	r3, [pc, #12]	; (8088c <UART_Handler+0x5c>)
   8087e:	7859      	ldrb	r1, [r3, #1]
   80880:	440b      	add	r3, r1
   80882:	709a      	strb	r2, [r3, #2]
			return;
   80884:	bd08      	pop	{r3, pc}
   80886:	bf00      	nop
   80888:	400e0800 	.word	0x400e0800
   8088c:	20000464 	.word	0x20000464
   80890:	00080aa4 	.word	0x00080aa4
   80894:	00080781 	.word	0x00080781

00080898 <__libc_init_array>:
   80898:	b570      	push	{r4, r5, r6, lr}
   8089a:	4e0f      	ldr	r6, [pc, #60]	; (808d8 <__libc_init_array+0x40>)
   8089c:	4d0f      	ldr	r5, [pc, #60]	; (808dc <__libc_init_array+0x44>)
   8089e:	1b76      	subs	r6, r6, r5
   808a0:	10b6      	asrs	r6, r6, #2
   808a2:	bf18      	it	ne
   808a4:	2400      	movne	r4, #0
   808a6:	d005      	beq.n	808b4 <__libc_init_array+0x1c>
   808a8:	3401      	adds	r4, #1
   808aa:	f855 3b04 	ldr.w	r3, [r5], #4
   808ae:	4798      	blx	r3
   808b0:	42a6      	cmp	r6, r4
   808b2:	d1f9      	bne.n	808a8 <__libc_init_array+0x10>
   808b4:	4e0a      	ldr	r6, [pc, #40]	; (808e0 <__libc_init_array+0x48>)
   808b6:	4d0b      	ldr	r5, [pc, #44]	; (808e4 <__libc_init_array+0x4c>)
   808b8:	f000 f906 	bl	80ac8 <_init>
   808bc:	1b76      	subs	r6, r6, r5
   808be:	10b6      	asrs	r6, r6, #2
   808c0:	bf18      	it	ne
   808c2:	2400      	movne	r4, #0
   808c4:	d006      	beq.n	808d4 <__libc_init_array+0x3c>
   808c6:	3401      	adds	r4, #1
   808c8:	f855 3b04 	ldr.w	r3, [r5], #4
   808cc:	4798      	blx	r3
   808ce:	42a6      	cmp	r6, r4
   808d0:	d1f9      	bne.n	808c6 <__libc_init_array+0x2e>
   808d2:	bd70      	pop	{r4, r5, r6, pc}
   808d4:	bd70      	pop	{r4, r5, r6, pc}
   808d6:	bf00      	nop
   808d8:	00080ad4 	.word	0x00080ad4
   808dc:	00080ad4 	.word	0x00080ad4
   808e0:	00080adc 	.word	0x00080adc
   808e4:	00080ad4 	.word	0x00080ad4

000808e8 <register_fini>:
   808e8:	4b02      	ldr	r3, [pc, #8]	; (808f4 <register_fini+0xc>)
   808ea:	b113      	cbz	r3, 808f2 <register_fini+0xa>
   808ec:	4802      	ldr	r0, [pc, #8]	; (808f8 <register_fini+0x10>)
   808ee:	f000 b805 	b.w	808fc <atexit>
   808f2:	4770      	bx	lr
   808f4:	00000000 	.word	0x00000000
   808f8:	00080909 	.word	0x00080909

000808fc <atexit>:
   808fc:	2300      	movs	r3, #0
   808fe:	4601      	mov	r1, r0
   80900:	461a      	mov	r2, r3
   80902:	4618      	mov	r0, r3
   80904:	f000 b81e 	b.w	80944 <__register_exitproc>

00080908 <__libc_fini_array>:
   80908:	b538      	push	{r3, r4, r5, lr}
   8090a:	4c0a      	ldr	r4, [pc, #40]	; (80934 <__libc_fini_array+0x2c>)
   8090c:	4d0a      	ldr	r5, [pc, #40]	; (80938 <__libc_fini_array+0x30>)
   8090e:	1b64      	subs	r4, r4, r5
   80910:	10a4      	asrs	r4, r4, #2
   80912:	d00a      	beq.n	8092a <__libc_fini_array+0x22>
   80914:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80918:	3b01      	subs	r3, #1
   8091a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8091e:	3c01      	subs	r4, #1
   80920:	f855 3904 	ldr.w	r3, [r5], #-4
   80924:	4798      	blx	r3
   80926:	2c00      	cmp	r4, #0
   80928:	d1f9      	bne.n	8091e <__libc_fini_array+0x16>
   8092a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8092e:	f000 b8d5 	b.w	80adc <_fini>
   80932:	bf00      	nop
   80934:	00080aec 	.word	0x00080aec
   80938:	00080ae8 	.word	0x00080ae8

0008093c <__retarget_lock_acquire_recursive>:
   8093c:	4770      	bx	lr
   8093e:	bf00      	nop

00080940 <__retarget_lock_release_recursive>:
   80940:	4770      	bx	lr
   80942:	bf00      	nop

00080944 <__register_exitproc>:
   80944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80948:	4d2c      	ldr	r5, [pc, #176]	; (809fc <__register_exitproc+0xb8>)
   8094a:	4606      	mov	r6, r0
   8094c:	6828      	ldr	r0, [r5, #0]
   8094e:	4698      	mov	r8, r3
   80950:	460f      	mov	r7, r1
   80952:	4691      	mov	r9, r2
   80954:	f7ff fff2 	bl	8093c <__retarget_lock_acquire_recursive>
   80958:	4b29      	ldr	r3, [pc, #164]	; (80a00 <__register_exitproc+0xbc>)
   8095a:	681c      	ldr	r4, [r3, #0]
   8095c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80960:	2b00      	cmp	r3, #0
   80962:	d03e      	beq.n	809e2 <__register_exitproc+0x9e>
   80964:	685a      	ldr	r2, [r3, #4]
   80966:	2a1f      	cmp	r2, #31
   80968:	dc1c      	bgt.n	809a4 <__register_exitproc+0x60>
   8096a:	f102 0e01 	add.w	lr, r2, #1
   8096e:	b176      	cbz	r6, 8098e <__register_exitproc+0x4a>
   80970:	2101      	movs	r1, #1
   80972:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80976:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8097a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8097e:	4091      	lsls	r1, r2
   80980:	4308      	orrs	r0, r1
   80982:	2e02      	cmp	r6, #2
   80984:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80988:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8098c:	d023      	beq.n	809d6 <__register_exitproc+0x92>
   8098e:	3202      	adds	r2, #2
   80990:	f8c3 e004 	str.w	lr, [r3, #4]
   80994:	6828      	ldr	r0, [r5, #0]
   80996:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8099a:	f7ff ffd1 	bl	80940 <__retarget_lock_release_recursive>
   8099e:	2000      	movs	r0, #0
   809a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   809a4:	4b17      	ldr	r3, [pc, #92]	; (80a04 <__register_exitproc+0xc0>)
   809a6:	b30b      	cbz	r3, 809ec <__register_exitproc+0xa8>
   809a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   809ac:	f3af 8000 	nop.w
   809b0:	4603      	mov	r3, r0
   809b2:	b1d8      	cbz	r0, 809ec <__register_exitproc+0xa8>
   809b4:	2000      	movs	r0, #0
   809b6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   809ba:	f04f 0e01 	mov.w	lr, #1
   809be:	6058      	str	r0, [r3, #4]
   809c0:	6019      	str	r1, [r3, #0]
   809c2:	4602      	mov	r2, r0
   809c4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   809c8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   809cc:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   809d0:	2e00      	cmp	r6, #0
   809d2:	d0dc      	beq.n	8098e <__register_exitproc+0x4a>
   809d4:	e7cc      	b.n	80970 <__register_exitproc+0x2c>
   809d6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   809da:	4301      	orrs	r1, r0
   809dc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   809e0:	e7d5      	b.n	8098e <__register_exitproc+0x4a>
   809e2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   809e6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   809ea:	e7bb      	b.n	80964 <__register_exitproc+0x20>
   809ec:	6828      	ldr	r0, [r5, #0]
   809ee:	f7ff ffa7 	bl	80940 <__retarget_lock_release_recursive>
   809f2:	f04f 30ff 	mov.w	r0, #4294967295
   809f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   809fa:	bf00      	nop
   809fc:	20000430 	.word	0x20000430
   80a00:	00080ac4 	.word	0x00080ac4
   80a04:	00000000 	.word	0x00000000
   80a08:	304e4143 	.word	0x304e4143
   80a0c:	73656d20 	.word	0x73656d20
   80a10:	65676173 	.word	0x65676173
   80a14:	72726120 	.word	0x72726120
   80a18:	64657669 	.word	0x64657669
   80a1c:	206e6920 	.word	0x206e6920
   80a20:	2d6e6f6e 	.word	0x2d6e6f6e
   80a24:	64657375 	.word	0x64657375
   80a28:	69616d20 	.word	0x69616d20
   80a2c:	786f626c 	.word	0x786f626c
   80a30:	00000d0a 	.word	0x00000d0a
   80a34:	2077656e 	.word	0x2077656e
   80a38:	7373656d 	.word	0x7373656d
   80a3c:	3a656761 	.word	0x3a656761
   80a40:	000d0a20 	.word	0x000d0a20
   80a44:	7373656d 	.word	0x7373656d
   80a48:	20656761 	.word	0x20656761
   80a4c:	203a6469 	.word	0x203a6469
   80a50:	0d0a6425 	.word	0x0d0a6425
   80a54:	00000000 	.word	0x00000000
   80a58:	7373656d 	.word	0x7373656d
   80a5c:	20656761 	.word	0x20656761
   80a60:	61746164 	.word	0x61746164
   80a64:	6e656c20 	.word	0x6e656c20
   80a68:	3a687467 	.word	0x3a687467
   80a6c:	0a642520 	.word	0x0a642520
   80a70:	73656d0d 	.word	0x73656d0d
   80a74:	65676173 	.word	0x65676173
   80a78:	74616420 	.word	0x74616420
   80a7c:	00203a61 	.word	0x00203a61
   80a80:	00206425 	.word	0x00206425
   80a84:	000d0a0a 	.word	0x000d0a0a
   80a88:	65726568 	.word	0x65726568
   80a8c:	000d0a20 	.word	0x000d0a20
   80a90:	61746164 	.word	0x61746164
   80a94:	6425203a 	.word	0x6425203a
   80a98:	00000d0a 	.word	0x00000d0a
   80a9c:	6c756e28 	.word	0x6c756e28
   80aa0:	0000296c 	.word	0x0000296c
   80aa4:	3a525245 	.word	0x3a525245
   80aa8:	52415520 	.word	0x52415520
   80aac:	58522054 	.word	0x58522054
   80ab0:	66756220 	.word	0x66756220
   80ab4:	20726566 	.word	0x20726566
   80ab8:	66207369 	.word	0x66207369
   80abc:	0a6c6c75 	.word	0x0a6c6c75
   80ac0:	0000000d 	.word	0x0000000d

00080ac4 <_global_impure_ptr>:
   80ac4:	20000008                                ... 

00080ac8 <_init>:
   80ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80aca:	bf00      	nop
   80acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80ace:	bc08      	pop	{r3}
   80ad0:	469e      	mov	lr, r3
   80ad2:	4770      	bx	lr

00080ad4 <__init_array_start>:
   80ad4:	000808e9 	.word	0x000808e9

00080ad8 <__frame_dummy_init_array_entry>:
   80ad8:	00080119                                ....

00080adc <_fini>:
   80adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80ade:	bf00      	nop
   80ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80ae2:	bc08      	pop	{r3}
   80ae4:	469e      	mov	lr, r3
   80ae6:	4770      	bx	lr

00080ae8 <__fini_array_start>:
   80ae8:	000800f5 	.word	0x000800f5
