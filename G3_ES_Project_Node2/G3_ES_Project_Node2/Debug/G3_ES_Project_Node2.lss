
G3_ES_Project_Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000152c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  0008152c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  20000434  00081960  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004e4  00081a10  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008e8  00081e14  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000075bd  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001696  00000000  00000000  00027a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000015b6  00000000  00000000  00029109  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000278  00000000  00000000  0002a6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  0002a937  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011e15  00000000  00000000  0002ab1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000529c  00000000  00000000  0003c934  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054754  00000000  00000000  00041bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000764  00000000  00000000  00096324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 08 00 20 d5 04 08 00 d1 04 08 00 d1 04 08 00     ... ............
   80010:	d1 04 08 00 d1 04 08 00 d1 04 08 00 00 00 00 00     ................
	...
   8002c:	d1 04 08 00 d1 04 08 00 00 00 00 00 d1 04 08 00     ................
   8003c:	b1 04 08 00 d1 04 08 00 d1 04 08 00 d1 04 08 00     ................
   8004c:	d1 04 08 00 d1 04 08 00 d1 04 08 00 d1 04 08 00     ................
   8005c:	d1 04 08 00 11 0d 08 00 d1 04 08 00 00 00 00 00     ................
   8006c:	d1 04 08 00 d1 04 08 00 d1 04 08 00 d1 04 08 00     ................
	...
   80084:	d1 04 08 00 d1 04 08 00 d1 04 08 00 d1 04 08 00     ................
   80094:	d1 04 08 00 d1 04 08 00 d1 04 08 00 d1 04 08 00     ................
   800a4:	00 00 00 00 d1 04 08 00 d1 04 08 00 d1 04 08 00     ................
   800b4:	d1 04 08 00 d1 04 08 00 d1 04 08 00 d1 04 08 00     ................
   800c4:	d1 04 08 00 d1 04 08 00 d1 04 08 00 d1 04 08 00     ................
   800d4:	d1 04 08 00 d1 04 08 00 d1 04 08 00 d1 04 08 00     ................
   800e4:	d1 04 08 00 d1 04 08 00 e5 02 08 00 d1 04 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	0008152c 	.word	0x0008152c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008152c 	.word	0x0008152c
   80154:	20000438 	.word	0x20000438
   80158:	0008152c 	.word	0x0008152c
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \param num_rx_mb Number of receive mailboxes, 	rx mb indexes: [num_tx_mb, num_rx_mb-1]
 *
 * \retval Success(0) or failure(1)
 */
uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8){
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>
	}
	
	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	//bit timing: BRP = 3 & 16TQ => SyncSeg = 1, PropSeg = 2, PS1 = 7, PS2 = 6, SJW = 1
	//can_br = 0b00000000000000110001001001110110;
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_init_def_tx_rx_mb>:
{
   80250:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80252:	2202      	movs	r2, #2
   80254:	2101      	movs	r1, #1
   80256:	4b01      	ldr	r3, [pc, #4]	; (8025c <can_init_def_tx_rx_mb+0xc>)
   80258:	4798      	blx	r3
}
   8025a:	bd08      	pop	{r3, pc}
   8025c:	00080161 	.word	0x00080161

00080260 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80260:	014b      	lsls	r3, r1, #5
   80262:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80266:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8026a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80272:	d033      	beq.n	802dc <can_receive+0x7c>
{
   80274:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80276:	014b      	lsls	r3, r1, #5
   80278:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80280:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80284:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80288:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8028c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80290:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80296:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8029a:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8029c:	461d      	mov	r5, r3
   8029e:	b15b      	cbz	r3, 802b8 <can_receive+0x58>
   802a0:	3003      	adds	r0, #3
   802a2:	2300      	movs	r3, #0
		{
			if(i < 4)
   802a4:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   802a6:	bfd9      	ittee	le
   802a8:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   802aa:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802ac:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   802ae:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802b0:	3301      	adds	r3, #1
   802b2:	3001      	adds	r0, #1
   802b4:	42ab      	cmp	r3, r5
   802b6:	d1f5      	bne.n	802a4 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802b8:	4b09      	ldr	r3, [pc, #36]	; (802e0 <can_receive+0x80>)
   802ba:	f101 0210 	add.w	r2, r1, #16
   802be:	0152      	lsls	r2, r2, #5
   802c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802c4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802d2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802d6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802d8:	bc30      	pop	{r4, r5}
   802da:	4770      	bx	lr
		return 1;
   802dc:	2001      	movs	r0, #1
   802de:	4770      	bx	lr
   802e0:	400b4000 	.word	0x400b4000

000802e4 <CAN0_Handler>:
{
   802e4:	b510      	push	{r4, lr}
	char can_sr = CAN0->CAN_SR;
   802e6:	4b18      	ldr	r3, [pc, #96]	; (80348 <CAN0_Handler+0x64>)
   802e8:	691c      	ldr	r4, [r3, #16]
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802ea:	f014 0f06 	tst.w	r4, #6
   802ee:	d013      	beq.n	80318 <CAN0_Handler+0x34>
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802f0:	f014 0f02 	tst.w	r4, #2
   802f4:	d11c      	bne.n	80330 <CAN0_Handler+0x4c>
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802f6:	f014 0f04 	tst.w	r4, #4
   802fa:	d021      	beq.n	80340 <CAN0_Handler+0x5c>
			can_receive(&message, 2);
   802fc:	2102      	movs	r1, #2
   802fe:	4813      	ldr	r0, [pc, #76]	; (8034c <CAN0_Handler+0x68>)
   80300:	4b13      	ldr	r3, [pc, #76]	; (80350 <CAN0_Handler+0x6c>)
   80302:	4798      	blx	r3
			newMessage = 1;
   80304:	2201      	movs	r2, #1
   80306:	4b13      	ldr	r3, [pc, #76]	; (80354 <CAN0_Handler+0x70>)
   80308:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < message.data_length; i++)
   8030a:	4b10      	ldr	r3, [pc, #64]	; (8034c <CAN0_Handler+0x68>)
   8030c:	789a      	ldrb	r2, [r3, #2]
   8030e:	b11a      	cbz	r2, 80318 <CAN0_Handler+0x34>
   80310:	2300      	movs	r3, #0
   80312:	3301      	adds	r3, #1
   80314:	4293      	cmp	r3, r2
   80316:	d1fc      	bne.n	80312 <CAN0_Handler+0x2e>
	if(can_sr & CAN_SR_MB0)
   80318:	f014 0f01 	tst.w	r4, #1
   8031c:	d002      	beq.n	80324 <CAN0_Handler+0x40>
		CAN0->CAN_IDR = CAN_IER_MB0;
   8031e:	2201      	movs	r2, #1
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <CAN0_Handler+0x64>)
   80322:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80324:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80328:	4b0b      	ldr	r3, [pc, #44]	; (80358 <CAN0_Handler+0x74>)
   8032a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8032e:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   80330:	2101      	movs	r1, #1
   80332:	4806      	ldr	r0, [pc, #24]	; (8034c <CAN0_Handler+0x68>)
   80334:	4b06      	ldr	r3, [pc, #24]	; (80350 <CAN0_Handler+0x6c>)
   80336:	4798      	blx	r3
			 newMessage = 1;
   80338:	2201      	movs	r2, #1
   8033a:	4b06      	ldr	r3, [pc, #24]	; (80354 <CAN0_Handler+0x70>)
   8033c:	601a      	str	r2, [r3, #0]
   8033e:	e7e4      	b.n	8030a <CAN0_Handler+0x26>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80340:	4806      	ldr	r0, [pc, #24]	; (8035c <CAN0_Handler+0x78>)
   80342:	4b07      	ldr	r3, [pc, #28]	; (80360 <CAN0_Handler+0x7c>)
   80344:	4798      	blx	r3
   80346:	e7e0      	b.n	8030a <CAN0_Handler+0x26>
   80348:	400b4000 	.word	0x400b4000
   8034c:	2000045c 	.word	0x2000045c
   80350:	00080261 	.word	0x00080261
   80354:	20000450 	.word	0x20000450
   80358:	e000e100 	.word	0xe000e100
   8035c:	000813f0 	.word	0x000813f0
   80360:	00080b81 	.word	0x00080b81

00080364 <new_message_received>:

// Move the can handler in this file and use these functions to get the message in main
int new_message_received(void){
	return newMessage;
}
   80364:	4b01      	ldr	r3, [pc, #4]	; (8036c <new_message_received+0x8>)
   80366:	6818      	ldr	r0, [r3, #0]
   80368:	4770      	bx	lr
   8036a:	bf00      	nop
   8036c:	20000450 	.word	0x20000450

00080370 <get_message>:

CAN_MESSAGE get_message(void){
   80370:	b410      	push	{r4}
	newMessage = 0;
   80372:	2100      	movs	r1, #0
   80374:	4a05      	ldr	r2, [pc, #20]	; (8038c <get_message+0x1c>)
   80376:	6011      	str	r1, [r2, #0]
	return message;
   80378:	4a05      	ldr	r2, [pc, #20]	; (80390 <get_message+0x20>)
   8037a:	6814      	ldr	r4, [r2, #0]
   8037c:	6851      	ldr	r1, [r2, #4]
   8037e:	6892      	ldr	r2, [r2, #8]
   80380:	6004      	str	r4, [r0, #0]
   80382:	6041      	str	r1, [r0, #4]
   80384:	6082      	str	r2, [r0, #8]
}
   80386:	bc10      	pop	{r4}
   80388:	4770      	bx	lr
   8038a:	bf00      	nop
   8038c:	20000450 	.word	0x20000450
   80390:	2000045c 	.word	0x2000045c

00080394 <start_game>:
#define GAME_OVER 5

int playing = 1, game_end= 0;
CAN_MESSAGE msg;

void start_game(){
   80394:	b5f0      	push	{r4, r5, r6, r7, lr}
   80396:	b085      	sub	sp, #20
	int goal = 0, adc;
   80398:	2700      	movs	r7, #0
	while(1) {
		if(playing && !game_end){
   8039a:	4d1a      	ldr	r5, [pc, #104]	; (80404 <start_game+0x70>)
			int16_t data = receive_data();
			printf("data: %d\n\r", data);
			delay_us(100000);
		}
		else{
			if(new_message_received()){
   8039c:	4e1a      	ldr	r6, [pc, #104]	; (80408 <start_game+0x74>)
				msg = get_message();
   8039e:	4c1b      	ldr	r4, [pc, #108]	; (8040c <start_game+0x78>)
   803a0:	e001      	b.n	803a6 <start_game+0x12>
			if(new_message_received()){
   803a2:	47b0      	blx	r6
   803a4:	b9f8      	cbnz	r0, 803e6 <start_game+0x52>
		if(playing && !game_end){
   803a6:	682b      	ldr	r3, [r5, #0]
   803a8:	2b00      	cmp	r3, #0
   803aa:	d0fa      	beq.n	803a2 <start_game+0xe>
   803ac:	4b18      	ldr	r3, [pc, #96]	; (80410 <start_game+0x7c>)
   803ae:	681b      	ldr	r3, [r3, #0]
   803b0:	2b00      	cmp	r3, #0
   803b2:	d1f6      	bne.n	803a2 <start_game+0xe>
			adc = adc_read();
   803b4:	4b17      	ldr	r3, [pc, #92]	; (80414 <start_game+0x80>)
   803b6:	4798      	blx	r3
			goal = is_goal(adc, goal);
   803b8:	4639      	mov	r1, r7
   803ba:	4b17      	ldr	r3, [pc, #92]	; (80418 <start_game+0x84>)
   803bc:	4798      	blx	r3
   803be:	4607      	mov	r7, r0
			msg = get_positions();
   803c0:	4668      	mov	r0, sp
   803c2:	4b16      	ldr	r3, [pc, #88]	; (8041c <start_game+0x88>)
   803c4:	4798      	blx	r3
   803c6:	9900      	ldr	r1, [sp, #0]
   803c8:	9a01      	ldr	r2, [sp, #4]
   803ca:	9b02      	ldr	r3, [sp, #8]
   803cc:	6021      	str	r1, [r4, #0]
   803ce:	6062      	str	r2, [r4, #4]
   803d0:	60a3      	str	r3, [r4, #8]
			int16_t data = receive_data();
   803d2:	4b13      	ldr	r3, [pc, #76]	; (80420 <start_game+0x8c>)
   803d4:	4798      	blx	r3
			printf("data: %d\n\r", data);
   803d6:	b201      	sxth	r1, r0
   803d8:	4812      	ldr	r0, [pc, #72]	; (80424 <start_game+0x90>)
   803da:	4b13      	ldr	r3, [pc, #76]	; (80428 <start_game+0x94>)
   803dc:	4798      	blx	r3
			delay_us(100000);
   803de:	4813      	ldr	r0, [pc, #76]	; (8042c <start_game+0x98>)
   803e0:	4b13      	ldr	r3, [pc, #76]	; (80430 <start_game+0x9c>)
   803e2:	4798      	blx	r3
		if(playing && !game_end){
   803e4:	e7df      	b.n	803a6 <start_game+0x12>
				msg = get_message();
   803e6:	4668      	mov	r0, sp
   803e8:	4b12      	ldr	r3, [pc, #72]	; (80434 <start_game+0xa0>)
   803ea:	4798      	blx	r3
   803ec:	9900      	ldr	r1, [sp, #0]
   803ee:	9a01      	ldr	r2, [sp, #4]
   803f0:	9b02      	ldr	r3, [sp, #8]
   803f2:	6021      	str	r1, [r4, #0]
   803f4:	6062      	str	r2, [r4, #4]
   803f6:	60a3      	str	r3, [r4, #8]
				if(!msg.data[2]){
   803f8:	7963      	ldrb	r3, [r4, #5]
   803fa:	2b00      	cmp	r3, #0
   803fc:	d1d3      	bne.n	803a6 <start_game+0x12>
					playing = 1;
   803fe:	2301      	movs	r3, #1
   80400:	602b      	str	r3, [r5, #0]
   80402:	e7d0      	b.n	803a6 <start_game+0x12>
   80404:	20000000 	.word	0x20000000
   80408:	00080365 	.word	0x00080365
   8040c:	20000468 	.word	0x20000468
   80410:	20000454 	.word	0x20000454
   80414:	00080635 	.word	0x00080635
   80418:	00080641 	.word	0x00080641
   8041c:	000806fd 	.word	0x000806fd
   80420:	0008086d 	.word	0x0008086d
   80424:	00081470 	.word	0x00081470
   80428:	00080b81 	.word	0x00080b81
   8042c:	000186a0 	.word	0x000186a0
   80430:	0008047d 	.word	0x0008047d
   80434:	00080371 	.word	0x00080371

00080438 <game_over>:
	if(score >= GAME_OVER){
		game_over();
	}
}

void game_over(){
   80438:	b508      	push	{r3, lr}
	playing = 0;
   8043a:	2200      	movs	r2, #0
   8043c:	4b04      	ldr	r3, [pc, #16]	; (80450 <game_over+0x18>)
   8043e:	601a      	str	r2, [r3, #0]
	game_end = 1;
   80440:	2201      	movs	r2, #1
   80442:	4b04      	ldr	r3, [pc, #16]	; (80454 <game_over+0x1c>)
   80444:	601a      	str	r2, [r3, #0]
	printf("game over\n\r");
   80446:	4804      	ldr	r0, [pc, #16]	; (80458 <game_over+0x20>)
   80448:	4b04      	ldr	r3, [pc, #16]	; (8045c <game_over+0x24>)
   8044a:	4798      	blx	r3
   8044c:	bd08      	pop	{r3, pc}
   8044e:	bf00      	nop
   80450:	20000000 	.word	0x20000000
   80454:	20000454 	.word	0x20000454
   80458:	0008147c 	.word	0x0008147c
   8045c:	00080b81 	.word	0x00080b81

00080460 <pause_game>:
void pause_game(int score){
   80460:	b508      	push	{r3, lr}
	playing = 0;
   80462:	2200      	movs	r2, #0
   80464:	4b03      	ldr	r3, [pc, #12]	; (80474 <pause_game+0x14>)
   80466:	601a      	str	r2, [r3, #0]
	if(score >= GAME_OVER){
   80468:	2804      	cmp	r0, #4
   8046a:	dc00      	bgt.n	8046e <pause_game+0xe>
   8046c:	bd08      	pop	{r3, pc}
		game_over();
   8046e:	4b02      	ldr	r3, [pc, #8]	; (80478 <pause_game+0x18>)
   80470:	4798      	blx	r3
}
   80472:	e7fb      	b.n	8046c <pause_game+0xc>
   80474:	20000000 	.word	0x20000000
   80478:	00080439 	.word	0x00080439

0008047c <delay_us>:
   8047c:	4b09      	ldr	r3, [pc, #36]	; (804a4 <delay_us+0x28>)
   8047e:	8018      	strh	r0, [r3, #0]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
   80480:	4b09      	ldr	r3, [pc, #36]	; (804a8 <delay_us+0x2c>)
   80482:	2253      	movs	r2, #83	; 0x53
   80484:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80486:	21f0      	movs	r1, #240	; 0xf0
   80488:	4a08      	ldr	r2, [pc, #32]	; (804ac <delay_us+0x30>)
   8048a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
   8048e:	2200      	movs	r2, #0
   80490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   80492:	2207      	movs	r2, #7
   80494:	601a      	str	r2, [r3, #0]
   80496:	4a03      	ldr	r2, [pc, #12]	; (804a4 <delay_us+0x28>)
   80498:	8813      	ldrh	r3, [r2, #0]
   8049a:	b29b      	uxth	r3, r3
   8049c:	2b00      	cmp	r3, #0
   8049e:	d1fb      	bne.n	80498 <delay_us+0x1c>
   804a0:	4770      	bx	lr
   804a2:	bf00      	nop
   804a4:	20000458 	.word	0x20000458
   804a8:	e000e010 	.word	0xe000e010
   804ac:	e000ed00 	.word	0xe000ed00

000804b0 <SysTick_Handler>:
   804b0:	4a05      	ldr	r2, [pc, #20]	; (804c8 <SysTick_Handler+0x18>)
   804b2:	8813      	ldrh	r3, [r2, #0]
   804b4:	3b01      	subs	r3, #1
   804b6:	b29b      	uxth	r3, r3
   804b8:	8013      	strh	r3, [r2, #0]
   804ba:	8813      	ldrh	r3, [r2, #0]
   804bc:	b29b      	uxth	r3, r3
   804be:	b913      	cbnz	r3, 804c6 <SysTick_Handler+0x16>
   804c0:	2200      	movs	r2, #0
   804c2:	4b02      	ldr	r3, [pc, #8]	; (804cc <SysTick_Handler+0x1c>)
   804c4:	601a      	str	r2, [r3, #0]
   804c6:	4770      	bx	lr
   804c8:	20000458 	.word	0x20000458
   804cc:	e000e010 	.word	0xe000e010

000804d0 <Dummy_Handler>:
   804d0:	e7fe      	b.n	804d0 <Dummy_Handler>
	...

000804d4 <Reset_Handler>:
   804d4:	b508      	push	{r3, lr}
   804d6:	4b18      	ldr	r3, [pc, #96]	; (80538 <Reset_Handler+0x64>)
   804d8:	4a18      	ldr	r2, [pc, #96]	; (8053c <Reset_Handler+0x68>)
   804da:	429a      	cmp	r2, r3
   804dc:	d010      	beq.n	80500 <Reset_Handler+0x2c>
   804de:	4b18      	ldr	r3, [pc, #96]	; (80540 <Reset_Handler+0x6c>)
   804e0:	4a15      	ldr	r2, [pc, #84]	; (80538 <Reset_Handler+0x64>)
   804e2:	429a      	cmp	r2, r3
   804e4:	d20c      	bcs.n	80500 <Reset_Handler+0x2c>
   804e6:	3b01      	subs	r3, #1
   804e8:	1a9b      	subs	r3, r3, r2
   804ea:	f023 0303 	bic.w	r3, r3, #3
   804ee:	3304      	adds	r3, #4
   804f0:	4413      	add	r3, r2
   804f2:	4912      	ldr	r1, [pc, #72]	; (8053c <Reset_Handler+0x68>)
   804f4:	f851 0b04 	ldr.w	r0, [r1], #4
   804f8:	f842 0b04 	str.w	r0, [r2], #4
   804fc:	429a      	cmp	r2, r3
   804fe:	d1f9      	bne.n	804f4 <Reset_Handler+0x20>
   80500:	4b10      	ldr	r3, [pc, #64]	; (80544 <Reset_Handler+0x70>)
   80502:	4a11      	ldr	r2, [pc, #68]	; (80548 <Reset_Handler+0x74>)
   80504:	429a      	cmp	r2, r3
   80506:	d20a      	bcs.n	8051e <Reset_Handler+0x4a>
   80508:	3b01      	subs	r3, #1
   8050a:	1a9b      	subs	r3, r3, r2
   8050c:	f023 0303 	bic.w	r3, r3, #3
   80510:	3304      	adds	r3, #4
   80512:	4413      	add	r3, r2
   80514:	2100      	movs	r1, #0
   80516:	f842 1b04 	str.w	r1, [r2], #4
   8051a:	4293      	cmp	r3, r2
   8051c:	d1fb      	bne.n	80516 <Reset_Handler+0x42>
   8051e:	4b0b      	ldr	r3, [pc, #44]	; (8054c <Reset_Handler+0x78>)
   80520:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80524:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80528:	4a09      	ldr	r2, [pc, #36]	; (80550 <Reset_Handler+0x7c>)
   8052a:	6093      	str	r3, [r2, #8]
   8052c:	4b09      	ldr	r3, [pc, #36]	; (80554 <Reset_Handler+0x80>)
   8052e:	4798      	blx	r3
   80530:	4b09      	ldr	r3, [pc, #36]	; (80558 <Reset_Handler+0x84>)
   80532:	4798      	blx	r3
   80534:	e7fe      	b.n	80534 <Reset_Handler+0x60>
   80536:	bf00      	nop
   80538:	20000000 	.word	0x20000000
   8053c:	0008152c 	.word	0x0008152c
   80540:	20000434 	.word	0x20000434
   80544:	200004e4 	.word	0x200004e4
   80548:	20000434 	.word	0x20000434
   8054c:	00080000 	.word	0x00080000
   80550:	e000ed00 	.word	0xe000ed00
   80554:	00081281 	.word	0x00081281
   80558:	00080771 	.word	0x00080771

0008055c <SystemInit>:
   8055c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80560:	4a20      	ldr	r2, [pc, #128]	; (805e4 <SystemInit+0x88>)
   80562:	6013      	str	r3, [r2, #0]
   80564:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80568:	6013      	str	r3, [r2, #0]
   8056a:	4b1f      	ldr	r3, [pc, #124]	; (805e8 <SystemInit+0x8c>)
   8056c:	6a1b      	ldr	r3, [r3, #32]
   8056e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80572:	d107      	bne.n	80584 <SystemInit+0x28>
   80574:	4a1d      	ldr	r2, [pc, #116]	; (805ec <SystemInit+0x90>)
   80576:	4b1c      	ldr	r3, [pc, #112]	; (805e8 <SystemInit+0x8c>)
   80578:	621a      	str	r2, [r3, #32]
   8057a:	461a      	mov	r2, r3
   8057c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8057e:	f013 0f01 	tst.w	r3, #1
   80582:	d0fb      	beq.n	8057c <SystemInit+0x20>
   80584:	4a1a      	ldr	r2, [pc, #104]	; (805f0 <SystemInit+0x94>)
   80586:	4b18      	ldr	r3, [pc, #96]	; (805e8 <SystemInit+0x8c>)
   80588:	621a      	str	r2, [r3, #32]
   8058a:	461a      	mov	r2, r3
   8058c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8058e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80592:	d0fb      	beq.n	8058c <SystemInit+0x30>
   80594:	4a14      	ldr	r2, [pc, #80]	; (805e8 <SystemInit+0x8c>)
   80596:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80598:	f023 0303 	bic.w	r3, r3, #3
   8059c:	f043 0301 	orr.w	r3, r3, #1
   805a0:	6313      	str	r3, [r2, #48]	; 0x30
   805a2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805a4:	f013 0f08 	tst.w	r3, #8
   805a8:	d0fb      	beq.n	805a2 <SystemInit+0x46>
   805aa:	4a12      	ldr	r2, [pc, #72]	; (805f4 <SystemInit+0x98>)
   805ac:	4b0e      	ldr	r3, [pc, #56]	; (805e8 <SystemInit+0x8c>)
   805ae:	629a      	str	r2, [r3, #40]	; 0x28
   805b0:	461a      	mov	r2, r3
   805b2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805b4:	f013 0f02 	tst.w	r3, #2
   805b8:	d0fb      	beq.n	805b2 <SystemInit+0x56>
   805ba:	2211      	movs	r2, #17
   805bc:	4b0a      	ldr	r3, [pc, #40]	; (805e8 <SystemInit+0x8c>)
   805be:	631a      	str	r2, [r3, #48]	; 0x30
   805c0:	461a      	mov	r2, r3
   805c2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805c4:	f013 0f08 	tst.w	r3, #8
   805c8:	d0fb      	beq.n	805c2 <SystemInit+0x66>
   805ca:	2212      	movs	r2, #18
   805cc:	4b06      	ldr	r3, [pc, #24]	; (805e8 <SystemInit+0x8c>)
   805ce:	631a      	str	r2, [r3, #48]	; 0x30
   805d0:	461a      	mov	r2, r3
   805d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805d4:	f013 0f08 	tst.w	r3, #8
   805d8:	d0fb      	beq.n	805d2 <SystemInit+0x76>
   805da:	4a07      	ldr	r2, [pc, #28]	; (805f8 <SystemInit+0x9c>)
   805dc:	4b07      	ldr	r3, [pc, #28]	; (805fc <SystemInit+0xa0>)
   805de:	601a      	str	r2, [r3, #0]
   805e0:	4770      	bx	lr
   805e2:	bf00      	nop
   805e4:	400e0a00 	.word	0x400e0a00
   805e8:	400e0600 	.word	0x400e0600
   805ec:	00370809 	.word	0x00370809
   805f0:	01370809 	.word	0x01370809
   805f4:	200d3f01 	.word	0x200d3f01
   805f8:	0501bd00 	.word	0x0501bd00
   805fc:	20000004 	.word	0x20000004

00080600 <adc_init>:

#define PASSWD_PIO_ADC 0x41444300
#define IR_THRESHOLD 300

void adc_init(void){
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;//(1 << 6);		//enable ADC clock
   80600:	4a0a      	ldr	r2, [pc, #40]	; (8062c <adc_init+0x2c>)
   80602:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80606:	f043 0320 	orr.w	r3, r3, #32
   8060a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	SLEEP = 0 => Normal Mode (because we don't know otherwise)
	LOWRES = 0 => 12-bit resolution (because it makes more sense)
	TRGSEL = 000 => don't care about the value since TRGEN is 0
	TRGEN = 0 => Hardware triggers are disabled (because we don't know otherwise)
	*/
	ADC->ADC_MR |= ADC_MR_FREERUN_ON;//0b00010000000000001000000010000000;
   8060e:	4b08      	ldr	r3, [pc, #32]	; (80630 <adc_init+0x30>)
   80610:	685a      	ldr	r2, [r3, #4]
   80612:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80616:	605a      	str	r2, [r3, #4]
	ADC->ADC_CHER |= ADC_CHER_CH0;//0x00000001;		//enables channel 0
   80618:	691a      	ldr	r2, [r3, #16]
   8061a:	f042 0201 	orr.w	r2, r2, #1
   8061e:	611a      	str	r2, [r3, #16]
	ADC->ADC_CR |= ADC_CR_START;//0x00000002;		//starts analog-to-digital conversion
   80620:	681a      	ldr	r2, [r3, #0]
   80622:	f042 0202 	orr.w	r2, r2, #2
   80626:	601a      	str	r2, [r3, #0]
   80628:	4770      	bx	lr
   8062a:	bf00      	nop
   8062c:	400e0600 	.word	0x400e0600
   80630:	400c0000 	.word	0x400c0000

00080634 <adc_read>:
	//channel and pin numbre are inverted, that is pin A0 is channel 7 and channel 0 is pin A7
}

int adc_read(void){
	//printf("adc value: %d\n\r", (int)ADC->ADC_CDR[0]);
	return ADC->ADC_CDR[0];
   80634:	4b01      	ldr	r3, [pc, #4]	; (8063c <adc_read+0x8>)
   80636:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
   80638:	4770      	bx	lr
   8063a:	bf00      	nop
   8063c:	400c0000 	.word	0x400c0000

00080640 <is_goal>:

int is_goal(int value, int score){
   80640:	b510      	push	{r4, lr}
   80642:	460c      	mov	r4, r1
	//printf("value: %d\n\r", value);
	if(value < IR_THRESHOLD){
   80644:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   80648:	db01      	blt.n	8064e <is_goal+0xe>
		score++;
		pause_game(score);
	}
	//printf("score: %d\n\r", score);
	return score;
}
   8064a:	4620      	mov	r0, r4
   8064c:	bd10      	pop	{r4, pc}
		score++;
   8064e:	3401      	adds	r4, #1
		pause_game(score);
   80650:	4620      	mov	r0, r4
   80652:	4b01      	ldr	r3, [pc, #4]	; (80658 <is_goal+0x18>)
   80654:	4798      	blx	r3
   80656:	e7f8      	b.n	8064a <is_goal+0xa>
   80658:	00080461 	.word	0x00080461

0008065c <button_pressed>:
	return msg;
}

void button_pressed(char d){
	//printf("button\n\r");
	PIOC -> PIO_PER = PIO_PC16;		//enables input/output function
   8065c:	4b06      	ldr	r3, [pc, #24]	; (80678 <button_pressed+0x1c>)
   8065e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80662:	601a      	str	r2, [r3, #0]
	PIOC -> PIO_OER = PIO_PC16;		//sets pin PC16 (pin 47) as output
   80664:	611a      	str	r2, [r3, #16]
	PIOC -> PIO_PUDR = PIO_PC16;	//disables pull-ups
   80666:	661a      	str	r2, [r3, #96]	; 0x60
	if((int)d == 0){
   80668:	b120      	cbz	r0, 80674 <button_pressed+0x18>
		//printf("button pressed\n\r");
		PIOC -> PIO_SODR = PIO_PC16;	//sets output data register
	}
	else{
		PIOC -> PIO_CODR = PIO_PC16;	//clear output data register
   8066a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   8066e:	4b02      	ldr	r3, [pc, #8]	; (80678 <button_pressed+0x1c>)
   80670:	635a      	str	r2, [r3, #52]	; 0x34
   80672:	4770      	bx	lr
		PIOC -> PIO_SODR = PIO_PC16;	//sets output data register
   80674:	631a      	str	r2, [r3, #48]	; 0x30
   80676:	4770      	bx	lr
   80678:	400e1200 	.word	0x400e1200

0008067c <normalize_position>:
	}
}

int normalize_position(char d, int center){
   8067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8067e:	460c      	mov	r4, r1
		int value = (int)d;
		int position = 0;
		if((int)value <= center){
   80680:	4288      	cmp	r0, r1
   80682:	dd18      	ble.n	806b6 <normalize_position+0x3a>
			position = (((float)value/(float)center)*100);
		}
		else if((int)value > center){
			position = ((((255-(float)value)/(255-(float) center))*(-100)))+200;
   80684:	4e13      	ldr	r6, [pc, #76]	; (806d4 <normalize_position+0x58>)
   80686:	47b0      	blx	r6
   80688:	4d13      	ldr	r5, [pc, #76]	; (806d8 <normalize_position+0x5c>)
   8068a:	4601      	mov	r1, r0
   8068c:	4813      	ldr	r0, [pc, #76]	; (806dc <normalize_position+0x60>)
   8068e:	47a8      	blx	r5
   80690:	4607      	mov	r7, r0
   80692:	4620      	mov	r0, r4
   80694:	47b0      	blx	r6
   80696:	4601      	mov	r1, r0
   80698:	4810      	ldr	r0, [pc, #64]	; (806dc <normalize_position+0x60>)
   8069a:	47a8      	blx	r5
   8069c:	4601      	mov	r1, r0
   8069e:	4638      	mov	r0, r7
   806a0:	4b0f      	ldr	r3, [pc, #60]	; (806e0 <normalize_position+0x64>)
   806a2:	4798      	blx	r3
   806a4:	490f      	ldr	r1, [pc, #60]	; (806e4 <normalize_position+0x68>)
   806a6:	4b10      	ldr	r3, [pc, #64]	; (806e8 <normalize_position+0x6c>)
   806a8:	4798      	blx	r3
   806aa:	4910      	ldr	r1, [pc, #64]	; (806ec <normalize_position+0x70>)
   806ac:	4b10      	ldr	r3, [pc, #64]	; (806f0 <normalize_position+0x74>)
   806ae:	4798      	blx	r3
   806b0:	4b10      	ldr	r3, [pc, #64]	; (806f4 <normalize_position+0x78>)
   806b2:	4798      	blx	r3
		}
		return position;
}
   806b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			position = (((float)value/(float)center)*100);
   806b6:	4d07      	ldr	r5, [pc, #28]	; (806d4 <normalize_position+0x58>)
   806b8:	47a8      	blx	r5
   806ba:	4606      	mov	r6, r0
   806bc:	4620      	mov	r0, r4
   806be:	47a8      	blx	r5
   806c0:	4601      	mov	r1, r0
   806c2:	4630      	mov	r0, r6
   806c4:	4b06      	ldr	r3, [pc, #24]	; (806e0 <normalize_position+0x64>)
   806c6:	4798      	blx	r3
   806c8:	490b      	ldr	r1, [pc, #44]	; (806f8 <normalize_position+0x7c>)
   806ca:	4b07      	ldr	r3, [pc, #28]	; (806e8 <normalize_position+0x6c>)
   806cc:	4798      	blx	r3
   806ce:	4b09      	ldr	r3, [pc, #36]	; (806f4 <normalize_position+0x78>)
   806d0:	4798      	blx	r3
   806d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806d4:	00080eed 	.word	0x00080eed
   806d8:	00080d81 	.word	0x00080d81
   806dc:	437f0000 	.word	0x437f0000
   806e0:	000810fd 	.word	0x000810fd
   806e4:	c2c80000 	.word	0xc2c80000
   806e8:	00080f95 	.word	0x00080f95
   806ec:	43480000 	.word	0x43480000
   806f0:	00080d85 	.word	0x00080d85
   806f4:	00081235 	.word	0x00081235
   806f8:	42c80000 	.word	0x42c80000

000806fc <get_positions>:
CAN_MESSAGE get_positions(void){
   806fc:	b530      	push	{r4, r5, lr}
   806fe:	b085      	sub	sp, #20
   80700:	4604      	mov	r4, r0
	if(new_message_received()){
   80702:	4b13      	ldr	r3, [pc, #76]	; (80750 <get_positions+0x54>)
   80704:	4798      	blx	r3
   80706:	b948      	cbnz	r0, 8071c <get_positions+0x20>
	return msg;
   80708:	4b12      	ldr	r3, [pc, #72]	; (80754 <get_positions+0x58>)
   8070a:	6819      	ldr	r1, [r3, #0]
   8070c:	685a      	ldr	r2, [r3, #4]
   8070e:	689b      	ldr	r3, [r3, #8]
   80710:	6021      	str	r1, [r4, #0]
   80712:	6062      	str	r2, [r4, #4]
   80714:	60a3      	str	r3, [r4, #8]
}
   80716:	4620      	mov	r0, r4
   80718:	b005      	add	sp, #20
   8071a:	bd30      	pop	{r4, r5, pc}
		msg = get_message();
   8071c:	4d0d      	ldr	r5, [pc, #52]	; (80754 <get_positions+0x58>)
   8071e:	4668      	mov	r0, sp
   80720:	4b0d      	ldr	r3, [pc, #52]	; (80758 <get_positions+0x5c>)
   80722:	4798      	blx	r3
   80724:	9900      	ldr	r1, [sp, #0]
   80726:	9a01      	ldr	r2, [sp, #4]
   80728:	9b02      	ldr	r3, [sp, #8]
   8072a:	6029      	str	r1, [r5, #0]
   8072c:	606a      	str	r2, [r5, #4]
   8072e:	60ab      	str	r3, [r5, #8]
		centerH = (int)msg.data[3];
   80730:	79aa      	ldrb	r2, [r5, #6]
   80732:	4b0a      	ldr	r3, [pc, #40]	; (8075c <get_positions+0x60>)
   80734:	601a      	str	r2, [r3, #0]
		centerV = (int)msg.data[4];
   80736:	79e9      	ldrb	r1, [r5, #7]
   80738:	4b09      	ldr	r3, [pc, #36]	; (80760 <get_positions+0x64>)
   8073a:	6019      	str	r1, [r3, #0]
		int new_data_V = normalize_position(msg.data[1], centerV);
   8073c:	7928      	ldrb	r0, [r5, #4]
   8073e:	4b09      	ldr	r3, [pc, #36]	; (80764 <get_positions+0x68>)
   80740:	4798      	blx	r3
		move_servo(new_data_V);
   80742:	4b09      	ldr	r3, [pc, #36]	; (80768 <get_positions+0x6c>)
   80744:	4798      	blx	r3
		button_pressed(msg.data[2]);
   80746:	7968      	ldrb	r0, [r5, #5]
   80748:	4b08      	ldr	r3, [pc, #32]	; (8076c <get_positions+0x70>)
   8074a:	4798      	blx	r3
   8074c:	e7dc      	b.n	80708 <get_positions+0xc>
   8074e:	bf00      	nop
   80750:	00080365 	.word	0x00080365
   80754:	20000468 	.word	0x20000468
   80758:	00080371 	.word	0x00080371
   8075c:	20000474 	.word	0x20000474
   80760:	20000478 	.word	0x20000478
   80764:	0008067d 	.word	0x0008067d
   80768:	00080c29 	.word	0x00080c29
   8076c:	0008065d 	.word	0x0008065d

00080770 <main>:
#define BITTIME 1/(TQ*CANBAUD)	//13TQ => SyncSeg = 1, PropSeg = 1, PS1 = 6, PS2 = 5, SJW = 1
*/

CAN_MESSAGE message;

int main(void) {
   80770:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   80772:	4b0d      	ldr	r3, [pc, #52]	; (807a8 <main+0x38>)
   80774:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;		//disable the watchdog timer
   80776:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8077a:	4b0c      	ldr	r3, [pc, #48]	; (807ac <main+0x3c>)
   8077c:	605a      	str	r2, [r3, #4]
	configure_uart();
   8077e:	4b0c      	ldr	r3, [pc, #48]	; (807b0 <main+0x40>)
   80780:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561);
   80782:	480c      	ldr	r0, [pc, #48]	; (807b4 <main+0x44>)
   80784:	4b0c      	ldr	r3, [pc, #48]	; (807b8 <main+0x48>)
   80786:	4798      	blx	r3
	motorbox_init();
   80788:	4b0c      	ldr	r3, [pc, #48]	; (807bc <main+0x4c>)
   8078a:	4798      	blx	r3
	dac_init();
   8078c:	4b0c      	ldr	r3, [pc, #48]	; (807c0 <main+0x50>)
   8078e:	4798      	blx	r3
	pwm_init();
   80790:	4b0c      	ldr	r3, [pc, #48]	; (807c4 <main+0x54>)
   80792:	4798      	blx	r3
	adc_init();
   80794:	4b0c      	ldr	r3, [pc, #48]	; (807c8 <main+0x58>)
   80796:	4798      	blx	r3
	delay_us(1000000);
   80798:	f244 2040 	movw	r0, #16960	; 0x4240
   8079c:	4b0b      	ldr	r3, [pc, #44]	; (807cc <main+0x5c>)
   8079e:	4798      	blx	r3
	start_game();
   807a0:	4b0b      	ldr	r3, [pc, #44]	; (807d0 <main+0x60>)
   807a2:	4798      	blx	r3
		//uint16_t data = receive_data();
		//printf("data: %d\n\r", data);
		//delay_us(1000000000);
	}
	return 0;*/
}
   807a4:	2000      	movs	r0, #0
   807a6:	bd08      	pop	{r3, pc}
   807a8:	0008055d 	.word	0x0008055d
   807ac:	400e1a50 	.word	0x400e1a50
   807b0:	00080c85 	.word	0x00080c85
   807b4:	00290561 	.word	0x00290561
   807b8:	00080251 	.word	0x00080251
   807bc:	000807fd 	.word	0x000807fd
   807c0:	000807d5 	.word	0x000807d5
   807c4:	00080ba5 	.word	0x00080ba5
   807c8:	00080601 	.word	0x00080601
   807cc:	0008047d 	.word	0x0008047d
   807d0:	00080395 	.word	0x00080395

000807d4 <dac_init>:

#define LEFT_CUTOFF	70
#define RIGHT_CUTOFF 130

void dac_init(void){
	PMC->PMC_PCER1 |= PMC_PCER1_PID38; //enable clock for DACC
   807d4:	4a07      	ldr	r2, [pc, #28]	; (807f4 <dac_init+0x20>)
   807d6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   807da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   807de:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	REG_DACC_MR = DACC_MR_REFRESH(10) | DACC_MR_USER_SEL_CHANNEL1;
   807e2:	f44f 3285 	mov.w	r2, #68096	; 0x10a00
   807e6:	4b04      	ldr	r3, [pc, #16]	; (807f8 <dac_init+0x24>)
   807e8:	601a      	str	r2, [r3, #0]
	REG_DACC_CHER = DACC_CHER_CH1;
   807ea:	2202      	movs	r2, #2
   807ec:	330c      	adds	r3, #12
   807ee:	601a      	str	r2, [r3, #0]
   807f0:	4770      	bx	lr
   807f2:	bf00      	nop
   807f4:	400e0600 	.word	0x400e0600
   807f8:	400c8004 	.word	0x400c8004

000807fc <motorbox_init>:
	//REG_DACC_CDR //USE THIS TO SEND JOYSTICK POS
}

void motorbox_init(void){
   807fc:	b538      	push	{r3, r4, r5, lr}
	PIOC -> PIO_WPMR = (0x50494F << 8);	//disables write protect
   807fe:	4916      	ldr	r1, [pc, #88]	; (80858 <motorbox_init+0x5c>)
   80800:	4b16      	ldr	r3, [pc, #88]	; (8085c <motorbox_init+0x60>)
   80802:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4

	PMC->PMC_PCER0 |= (1 << ID_PIOC);//PMC_PCER0_PID13; //enable clock for 
   80806:	4b16      	ldr	r3, [pc, #88]	; (80860 <motorbox_init+0x64>)
   80808:	691a      	ldr	r2, [r3, #16]
   8080a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8080e:	611a      	str	r2, [r3, #16]
	//PMC->PMC_PCER0 |= PMC_PCER0_PID14; //enable clock for 
	PMC->PMC_PCER0 |= (1 << ID_PIOD);
   80810:	691a      	ldr	r2, [r3, #16]
   80812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80816:	611a      	str	r2, [r3, #16]
	
	//!OE
	PIOD -> PIO_PER = PIO_PD0;		//enables input/output function
   80818:	4c12      	ldr	r4, [pc, #72]	; (80864 <motorbox_init+0x68>)
   8081a:	2201      	movs	r2, #1
   8081c:	6022      	str	r2, [r4, #0]
	PIOD -> PIO_OER = PIO_PD0;		//enables output
   8081e:	6122      	str	r2, [r4, #16]
	//SEL
	PIOD -> PIO_PER = PIO_PD2;		//enables input/output function
   80820:	2304      	movs	r3, #4
   80822:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD2;		//enables output
   80824:	6123      	str	r3, [r4, #16]
	//DIR
	PIOD -> PIO_PER = PIO_PD10;		//enables input/output function
   80826:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8082a:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD10;		//enables output	
   8082c:	6123      	str	r3, [r4, #16]
	//!RES
	PIOD -> PIO_PER = PIO_PD1;		//enables input/output function
   8082e:	2502      	movs	r5, #2
   80830:	6025      	str	r5, [r4, #0]
	PIOD -> PIO_OER = PIO_PD1;		//enables output	
   80832:	6125      	str	r5, [r4, #16]
	//EN
	PIOD -> PIO_PER = PIO_PD9;		//enables input/output function
   80834:	f44f 7300 	mov.w	r3, #512	; 0x200
   80838:	6023      	str	r3, [r4, #0]
	PIOD -> PIO_OER = PIO_PD9;		//enables output
   8083a:	6123      	str	r3, [r4, #16]
	PIOC -> PIO_PER = PIO_PC2;		//enables input/output function
	//PIOC -> PIO_ODR = PIO_PC2;		//disables output
	PIOC -> PIO_PER = PIO_PC1;		//enables input/output function
	//PIOC -> PIO_ODR = PIO_PC1;		//disables output
	*/
	PIOC -> PIO_IFER = (0xFF << 1);
   8083c:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
   80840:	6208      	str	r0, [r1, #32]
	PIOC -> PIO_PUDR = (0xFF << 1);		//disables pull down register
   80842:	6608      	str	r0, [r1, #96]	; 0x60
	
	PIOD -> PIO_CODR = PIO_PD0;		//set !OE to low
   80844:	6362      	str	r2, [r4, #52]	; 0x34
	PIOD -> PIO_SODR = PIO_PD9;		//set EN to high
   80846:	6323      	str	r3, [r4, #48]	; 0x30
	PIOD -> PIO_CODR = PIO_PD1;		//set !RES to low
   80848:	6365      	str	r5, [r4, #52]	; 0x34
	delay_us(1000000);	
   8084a:	f244 2040 	movw	r0, #16960	; 0x4240
   8084e:	4b06      	ldr	r3, [pc, #24]	; (80868 <motorbox_init+0x6c>)
   80850:	4798      	blx	r3
	PIOD -> PIO_SODR = PIO_PD1;		//set !RES to high
   80852:	6325      	str	r5, [r4, #48]	; 0x30
   80854:	bd38      	pop	{r3, r4, r5, pc}
   80856:	bf00      	nop
   80858:	400e1200 	.word	0x400e1200
   8085c:	50494f00 	.word	0x50494f00
   80860:	400e0600 	.word	0x400e0600
   80864:	400e1400 	.word	0x400e1400
   80868:	0008047d 	.word	0x0008047d

0008086c <receive_data>:
}

int16_t receive_data(void){
   8086c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t data;
	PIOD -> PIO_CODR = PIO_PD0;		//set !OE to low
   80870:	4d0e      	ldr	r5, [pc, #56]	; (808ac <receive_data+0x40>)
   80872:	2601      	movs	r6, #1
   80874:	636e      	str	r6, [r5, #52]	; 0x34
	PIOD -> PIO_CODR = PIO_PD2;		//set SEL to low
   80876:	f04f 0904 	mov.w	r9, #4
   8087a:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
	delay_us(1000000);					//wait 20 microseconds
   8087e:	f244 2040 	movw	r0, #16960	; 0x4240
   80882:	f8df 8030 	ldr.w	r8, [pc, #48]	; 808b4 <receive_data+0x48>
   80886:	47c0      	blx	r8
	data |= ((PIOC->PIO_PDSR >> 1) & 0xFF) << 8 ;	//read MSB
   80888:	4f09      	ldr	r7, [pc, #36]	; (808b0 <receive_data+0x44>)
   8088a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   8088c:	01e4      	lsls	r4, r4, #7
   8088e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	PIOD -> PIO_SODR = PIO_PD2;		//set SEL to high
   80892:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
	delay_us(1000000);					//wait 20 microseconds
   80896:	f244 2040 	movw	r0, #16960	; 0x4240
   8089a:	47c0      	blx	r8
	data |= (PIOC->PIO_PDSR >> 1) & 0xFF ;	//read LSB
   8089c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
	PIOD -> PIO_SODR = PIO_PD0;		//set !OE to high
   8089e:	632e      	str	r6, [r5, #48]	; 0x30
	data |= (PIOC->PIO_PDSR >> 1) & 0xFF ;	//read LSB
   808a0:	f3c0 0047 	ubfx	r0, r0, #1, #8
   808a4:	4320      	orrs	r0, r4
	return data; //lsb | (msb << 8);
}
   808a6:	b200      	sxth	r0, r0
   808a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   808ac:	400e1400 	.word	0x400e1400
   808b0:	400e1200 	.word	0x400e1200
   808b4:	0008047d 	.word	0x0008047d

000808b8 <prints>:
   808b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   808bc:	460d      	mov	r5, r1
   808be:	1e16      	subs	r6, r2, #0
   808c0:	dd48      	ble.n	80954 <prints+0x9c>
   808c2:	780a      	ldrb	r2, [r1, #0]
   808c4:	2a00      	cmp	r2, #0
   808c6:	d035      	beq.n	80934 <prints+0x7c>
   808c8:	460a      	mov	r2, r1
   808ca:	2400      	movs	r4, #0
   808cc:	3401      	adds	r4, #1
   808ce:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   808d2:	2900      	cmp	r1, #0
   808d4:	d1fa      	bne.n	808cc <prints+0x14>
   808d6:	42a6      	cmp	r6, r4
   808d8:	dc2d      	bgt.n	80936 <prints+0x7e>
   808da:	2400      	movs	r4, #0
   808dc:	f003 0202 	and.w	r2, r3, #2
   808e0:	2a00      	cmp	r2, #0
   808e2:	bf0c      	ite	eq
   808e4:	f04f 0820 	moveq.w	r8, #32
   808e8:	f04f 0830 	movne.w	r8, #48	; 0x30
   808ec:	f013 0301 	ands.w	r3, r3, #1
   808f0:	d123      	bne.n	8093a <prints+0x82>
   808f2:	2c00      	cmp	r4, #0
   808f4:	dd28      	ble.n	80948 <prints+0x90>
   808f6:	4626      	mov	r6, r4
   808f8:	fa5f f988 	uxtb.w	r9, r8
   808fc:	4f18      	ldr	r7, [pc, #96]	; (80960 <prints+0xa8>)
   808fe:	4648      	mov	r0, r9
   80900:	47b8      	blx	r7
   80902:	3e01      	subs	r6, #1
   80904:	d1fb      	bne.n	808fe <prints+0x46>
   80906:	7828      	ldrb	r0, [r5, #0]
   80908:	b188      	cbz	r0, 8092e <prints+0x76>
   8090a:	4f15      	ldr	r7, [pc, #84]	; (80960 <prints+0xa8>)
   8090c:	47b8      	blx	r7
   8090e:	3401      	adds	r4, #1
   80910:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80914:	2800      	cmp	r0, #0
   80916:	d1f9      	bne.n	8090c <prints+0x54>
   80918:	2e00      	cmp	r6, #0
   8091a:	dd08      	ble.n	8092e <prints+0x76>
   8091c:	4635      	mov	r5, r6
   8091e:	fa5f f888 	uxtb.w	r8, r8
   80922:	4f0f      	ldr	r7, [pc, #60]	; (80960 <prints+0xa8>)
   80924:	4640      	mov	r0, r8
   80926:	47b8      	blx	r7
   80928:	3d01      	subs	r5, #1
   8092a:	d1fb      	bne.n	80924 <prints+0x6c>
   8092c:	4434      	add	r4, r6
   8092e:	4620      	mov	r0, r4
   80930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80934:	2400      	movs	r4, #0
   80936:	1b34      	subs	r4, r6, r4
   80938:	e7d0      	b.n	808dc <prints+0x24>
   8093a:	4626      	mov	r6, r4
   8093c:	7828      	ldrb	r0, [r5, #0]
   8093e:	b108      	cbz	r0, 80944 <prints+0x8c>
   80940:	2400      	movs	r4, #0
   80942:	e7e2      	b.n	8090a <prints+0x52>
   80944:	2400      	movs	r4, #0
   80946:	e7e7      	b.n	80918 <prints+0x60>
   80948:	4626      	mov	r6, r4
   8094a:	461c      	mov	r4, r3
   8094c:	e7db      	b.n	80906 <prints+0x4e>
   8094e:	f04f 0820 	mov.w	r8, #32
   80952:	e7d8      	b.n	80906 <prints+0x4e>
   80954:	f013 0401 	ands.w	r4, r3, #1
   80958:	d0f9      	beq.n	8094e <prints+0x96>
   8095a:	f04f 0820 	mov.w	r8, #32
   8095e:	e7ed      	b.n	8093c <prints+0x84>
   80960:	00080ced 	.word	0x00080ced

00080964 <printi>:
   80964:	b5f0      	push	{r4, r5, r6, r7, lr}
   80966:	b085      	sub	sp, #20
   80968:	4607      	mov	r7, r0
   8096a:	b381      	cbz	r1, 809ce <printi+0x6a>
   8096c:	460c      	mov	r4, r1
   8096e:	b10b      	cbz	r3, 80974 <printi+0x10>
   80970:	2a0a      	cmp	r2, #10
   80972:	d038      	beq.n	809e6 <printi+0x82>
   80974:	2300      	movs	r3, #0
   80976:	f88d 300f 	strb.w	r3, [sp, #15]
   8097a:	2600      	movs	r6, #0
   8097c:	2900      	cmp	r1, #0
   8097e:	d046      	beq.n	80a0e <printi+0xaa>
   80980:	f10d 050f 	add.w	r5, sp, #15
   80984:	990c      	ldr	r1, [sp, #48]	; 0x30
   80986:	393a      	subs	r1, #58	; 0x3a
   80988:	fbb4 f3f2 	udiv	r3, r4, r2
   8098c:	fb02 4313 	mls	r3, r2, r3, r4
   80990:	2b09      	cmp	r3, #9
   80992:	bfc8      	it	gt
   80994:	185b      	addgt	r3, r3, r1
   80996:	3330      	adds	r3, #48	; 0x30
   80998:	f805 3d01 	strb.w	r3, [r5, #-1]!
   8099c:	fbb4 f4f2 	udiv	r4, r4, r2
   809a0:	2c00      	cmp	r4, #0
   809a2:	d1f1      	bne.n	80988 <printi+0x24>
   809a4:	b156      	cbz	r6, 809bc <printi+0x58>
   809a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   809a8:	b11b      	cbz	r3, 809b2 <printi+0x4e>
   809aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809ac:	f013 0f02 	tst.w	r3, #2
   809b0:	d125      	bne.n	809fe <printi+0x9a>
   809b2:	232d      	movs	r3, #45	; 0x2d
   809b4:	f805 3c01 	strb.w	r3, [r5, #-1]
   809b8:	3d01      	subs	r5, #1
   809ba:	2600      	movs	r6, #0
   809bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   809c0:	4629      	mov	r1, r5
   809c2:	4638      	mov	r0, r7
   809c4:	4c14      	ldr	r4, [pc, #80]	; (80a18 <printi+0xb4>)
   809c6:	47a0      	blx	r4
   809c8:	4430      	add	r0, r6
   809ca:	b005      	add	sp, #20
   809cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   809ce:	2330      	movs	r3, #48	; 0x30
   809d0:	f88d 3004 	strb.w	r3, [sp, #4]
   809d4:	2300      	movs	r3, #0
   809d6:	f88d 3005 	strb.w	r3, [sp, #5]
   809da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   809de:	a901      	add	r1, sp, #4
   809e0:	4c0d      	ldr	r4, [pc, #52]	; (80a18 <printi+0xb4>)
   809e2:	47a0      	blx	r4
   809e4:	e7f1      	b.n	809ca <printi+0x66>
   809e6:	2900      	cmp	r1, #0
   809e8:	dac4      	bge.n	80974 <printi+0x10>
   809ea:	424c      	negs	r4, r1
   809ec:	2300      	movs	r3, #0
   809ee:	f88d 300f 	strb.w	r3, [sp, #15]
   809f2:	f10d 050f 	add.w	r5, sp, #15
   809f6:	2c00      	cmp	r4, #0
   809f8:	d0d5      	beq.n	809a6 <printi+0x42>
   809fa:	2601      	movs	r6, #1
   809fc:	e7c0      	b.n	80980 <printi+0x1c>
   809fe:	202d      	movs	r0, #45	; 0x2d
   80a00:	4b06      	ldr	r3, [pc, #24]	; (80a1c <printi+0xb8>)
   80a02:	4798      	blx	r3
   80a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a06:	3b01      	subs	r3, #1
   80a08:	930a      	str	r3, [sp, #40]	; 0x28
   80a0a:	2601      	movs	r6, #1
   80a0c:	e7d6      	b.n	809bc <printi+0x58>
   80a0e:	461e      	mov	r6, r3
   80a10:	f10d 050f 	add.w	r5, sp, #15
   80a14:	e7d2      	b.n	809bc <printi+0x58>
   80a16:	bf00      	nop
   80a18:	000808b9 	.word	0x000808b9
   80a1c:	00080ced 	.word	0x00080ced

00080a20 <print>:
   80a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a24:	b087      	sub	sp, #28
   80a26:	4680      	mov	r8, r0
   80a28:	780b      	ldrb	r3, [r1, #0]
   80a2a:	2b00      	cmp	r3, #0
   80a2c:	f000 8094 	beq.w	80b58 <print+0x138>
   80a30:	468b      	mov	fp, r1
   80a32:	4617      	mov	r7, r2
   80a34:	2500      	movs	r5, #0
   80a36:	4e4e      	ldr	r6, [pc, #312]	; (80b70 <print+0x150>)
   80a38:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80b78 <print+0x158>
   80a3c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80b7c <print+0x15c>
   80a40:	e046      	b.n	80ad0 <print+0xb0>
   80a42:	2200      	movs	r2, #0
   80a44:	e070      	b.n	80b28 <print+0x108>
   80a46:	6839      	ldr	r1, [r7, #0]
   80a48:	3704      	adds	r7, #4
   80a4a:	484a      	ldr	r0, [pc, #296]	; (80b74 <print+0x154>)
   80a4c:	2900      	cmp	r1, #0
   80a4e:	bf08      	it	eq
   80a50:	4601      	moveq	r1, r0
   80a52:	4640      	mov	r0, r8
   80a54:	47d0      	blx	sl
   80a56:	4405      	add	r5, r0
   80a58:	e035      	b.n	80ac6 <print+0xa6>
   80a5a:	6839      	ldr	r1, [r7, #0]
   80a5c:	3704      	adds	r7, #4
   80a5e:	2061      	movs	r0, #97	; 0x61
   80a60:	9002      	str	r0, [sp, #8]
   80a62:	9301      	str	r3, [sp, #4]
   80a64:	9200      	str	r2, [sp, #0]
   80a66:	2301      	movs	r3, #1
   80a68:	220a      	movs	r2, #10
   80a6a:	4640      	mov	r0, r8
   80a6c:	47c8      	blx	r9
   80a6e:	4405      	add	r5, r0
   80a70:	e029      	b.n	80ac6 <print+0xa6>
   80a72:	6839      	ldr	r1, [r7, #0]
   80a74:	3704      	adds	r7, #4
   80a76:	2061      	movs	r0, #97	; 0x61
   80a78:	9002      	str	r0, [sp, #8]
   80a7a:	9301      	str	r3, [sp, #4]
   80a7c:	9200      	str	r2, [sp, #0]
   80a7e:	2300      	movs	r3, #0
   80a80:	2210      	movs	r2, #16
   80a82:	4640      	mov	r0, r8
   80a84:	47c8      	blx	r9
   80a86:	4405      	add	r5, r0
   80a88:	e01d      	b.n	80ac6 <print+0xa6>
   80a8a:	6839      	ldr	r1, [r7, #0]
   80a8c:	3704      	adds	r7, #4
   80a8e:	2041      	movs	r0, #65	; 0x41
   80a90:	9002      	str	r0, [sp, #8]
   80a92:	9301      	str	r3, [sp, #4]
   80a94:	9200      	str	r2, [sp, #0]
   80a96:	2300      	movs	r3, #0
   80a98:	2210      	movs	r2, #16
   80a9a:	4640      	mov	r0, r8
   80a9c:	47c8      	blx	r9
   80a9e:	4405      	add	r5, r0
   80aa0:	e011      	b.n	80ac6 <print+0xa6>
   80aa2:	6839      	ldr	r1, [r7, #0]
   80aa4:	3704      	adds	r7, #4
   80aa6:	2061      	movs	r0, #97	; 0x61
   80aa8:	9002      	str	r0, [sp, #8]
   80aaa:	9301      	str	r3, [sp, #4]
   80aac:	9200      	str	r2, [sp, #0]
   80aae:	2300      	movs	r3, #0
   80ab0:	220a      	movs	r2, #10
   80ab2:	4640      	mov	r0, r8
   80ab4:	47c8      	blx	r9
   80ab6:	4405      	add	r5, r0
   80ab8:	e005      	b.n	80ac6 <print+0xa6>
   80aba:	46a3      	mov	fp, r4
   80abc:	f89b 0000 	ldrb.w	r0, [fp]
   80ac0:	47b0      	blx	r6
   80ac2:	3501      	adds	r5, #1
   80ac4:	465c      	mov	r4, fp
   80ac6:	f104 0b01 	add.w	fp, r4, #1
   80aca:	7863      	ldrb	r3, [r4, #1]
   80acc:	2b00      	cmp	r3, #0
   80ace:	d044      	beq.n	80b5a <print+0x13a>
   80ad0:	2b25      	cmp	r3, #37	; 0x25
   80ad2:	d1f3      	bne.n	80abc <print+0x9c>
   80ad4:	f10b 0401 	add.w	r4, fp, #1
   80ad8:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80adc:	2b00      	cmp	r3, #0
   80ade:	d03c      	beq.n	80b5a <print+0x13a>
   80ae0:	2b25      	cmp	r3, #37	; 0x25
   80ae2:	d0ea      	beq.n	80aba <print+0x9a>
   80ae4:	2b2d      	cmp	r3, #45	; 0x2d
   80ae6:	bf06      	itte	eq
   80ae8:	f10b 0402 	addeq.w	r4, fp, #2
   80aec:	2301      	moveq	r3, #1
   80aee:	2300      	movne	r3, #0
   80af0:	7822      	ldrb	r2, [r4, #0]
   80af2:	2a30      	cmp	r2, #48	; 0x30
   80af4:	d105      	bne.n	80b02 <print+0xe2>
   80af6:	f043 0302 	orr.w	r3, r3, #2
   80afa:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80afe:	2a30      	cmp	r2, #48	; 0x30
   80b00:	d0f9      	beq.n	80af6 <print+0xd6>
   80b02:	7821      	ldrb	r1, [r4, #0]
   80b04:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80b08:	b2d2      	uxtb	r2, r2
   80b0a:	2a09      	cmp	r2, #9
   80b0c:	d899      	bhi.n	80a42 <print+0x22>
   80b0e:	2200      	movs	r2, #0
   80b10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80b14:	3930      	subs	r1, #48	; 0x30
   80b16:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80b1a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80b1e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80b22:	b2c0      	uxtb	r0, r0
   80b24:	2809      	cmp	r0, #9
   80b26:	d9f3      	bls.n	80b10 <print+0xf0>
   80b28:	2973      	cmp	r1, #115	; 0x73
   80b2a:	d08c      	beq.n	80a46 <print+0x26>
   80b2c:	2964      	cmp	r1, #100	; 0x64
   80b2e:	d094      	beq.n	80a5a <print+0x3a>
   80b30:	2978      	cmp	r1, #120	; 0x78
   80b32:	d09e      	beq.n	80a72 <print+0x52>
   80b34:	2958      	cmp	r1, #88	; 0x58
   80b36:	d0a8      	beq.n	80a8a <print+0x6a>
   80b38:	2975      	cmp	r1, #117	; 0x75
   80b3a:	d0b2      	beq.n	80aa2 <print+0x82>
   80b3c:	2963      	cmp	r1, #99	; 0x63
   80b3e:	d1c2      	bne.n	80ac6 <print+0xa6>
   80b40:	6839      	ldr	r1, [r7, #0]
   80b42:	3704      	adds	r7, #4
   80b44:	f88d 1014 	strb.w	r1, [sp, #20]
   80b48:	2100      	movs	r1, #0
   80b4a:	f88d 1015 	strb.w	r1, [sp, #21]
   80b4e:	a905      	add	r1, sp, #20
   80b50:	4640      	mov	r0, r8
   80b52:	47d0      	blx	sl
   80b54:	4405      	add	r5, r0
   80b56:	e7b6      	b.n	80ac6 <print+0xa6>
   80b58:	2500      	movs	r5, #0
   80b5a:	f1b8 0f00 	cmp.w	r8, #0
   80b5e:	d003      	beq.n	80b68 <print+0x148>
   80b60:	f8d8 3000 	ldr.w	r3, [r8]
   80b64:	2200      	movs	r2, #0
   80b66:	701a      	strb	r2, [r3, #0]
   80b68:	4628      	mov	r0, r5
   80b6a:	b007      	add	sp, #28
   80b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80b70:	00080ced 	.word	0x00080ced
   80b74:	00081488 	.word	0x00081488
   80b78:	000808b9 	.word	0x000808b9
   80b7c:	00080965 	.word	0x00080965

00080b80 <printf>:
   80b80:	b40f      	push	{r0, r1, r2, r3}
   80b82:	b500      	push	{lr}
   80b84:	b083      	sub	sp, #12
   80b86:	aa04      	add	r2, sp, #16
   80b88:	f852 1b04 	ldr.w	r1, [r2], #4
   80b8c:	9201      	str	r2, [sp, #4]
   80b8e:	2000      	movs	r0, #0
   80b90:	4b03      	ldr	r3, [pc, #12]	; (80ba0 <printf+0x20>)
   80b92:	4798      	blx	r3
   80b94:	b003      	add	sp, #12
   80b96:	f85d eb04 	ldr.w	lr, [sp], #4
   80b9a:	b004      	add	sp, #16
   80b9c:	4770      	bx	lr
   80b9e:	bf00      	nop
   80ba0:	00080a21 	.word	0x00080a21

00080ba4 <pwm_init>:
#define CENTER 1.5
#define RIGHT 1.25
#define COMPLETE_RIGHT 1.0

void pwm_init(void){
	PIOC -> PIO_PDR |= PIO_PDR_P18;		//enable peripheral control of the pin
   80ba4:	4b11      	ldr	r3, [pc, #68]	; (80bec <pwm_init+0x48>)
   80ba6:	685a      	ldr	r2, [r3, #4]
   80ba8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80bac:	605a      	str	r2, [r3, #4]
	PIOC -> PIO_ABSR |= PIO_ABSR_P18;	//set it to peripheral B mode
   80bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80bb0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80bb4:	671a      	str	r2, [r3, #112]	; 0x70
	//need to clear WPEN bit in PMC Write Protect Register (we are assuming it defaults to 0)
	//PIOC -> PMC_PCER0 = PIO_PC18;
	PIOC->PIO_WPMR = PASSWD_PIO_PWM;	//disable write protection
   80bb6:	4a0e      	ldr	r2, [pc, #56]	; (80bf0 <pwm_init+0x4c>)
   80bb8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER1 |= (1 << 4);		//enable PWM clock
   80bbc:	4a0d      	ldr	r2, [pc, #52]	; (80bf4 <pwm_init+0x50>)
   80bbe:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80bc2:	f043 0310 	orr.w	r3, r3, #16
   80bc6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	//REG_PMC_PCER0 = 0x00002000;
	REG_PWM_CMR6 = 0xC;
   80bca:	220c      	movs	r2, #12
   80bcc:	4b0a      	ldr	r3, [pc, #40]	; (80bf8 <pwm_init+0x54>)
   80bce:	601a      	str	r2, [r3, #0]
	PWM->PWM_CLK = 0x00540000;
   80bd0:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
   80bd4:	f44f 02a8 	mov.w	r2, #5505024	; 0x540000
   80bd8:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD6 = 20000;//0x00004E20;
   80bda:	f644 6120 	movw	r1, #20000	; 0x4e20
   80bde:	4a07      	ldr	r2, [pc, #28]	; (80bfc <pwm_init+0x58>)
   80be0:	6011      	str	r1, [r2, #0]
	//REG_PWM_CDTY6 = dty;
	//REG_PWM_CDTY6 = 10000;
	//REG_PWM_CDTY6 = 10000;//0x00002710; //need to vary this with joystick
	//REG_PWM_ENA = 0x00000040;

	PWM->PWM_ENA |= PWM_ENA_CHID6; // enable PWM channel 6
   80be2:	685a      	ldr	r2, [r3, #4]
   80be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80be8:	605a      	str	r2, [r3, #4]
   80bea:	4770      	bx	lr
   80bec:	400e1200 	.word	0x400e1200
   80bf0:	50494f00 	.word	0x50494f00
   80bf4:	400e0600 	.word	0x400e0600
   80bf8:	400942c0 	.word	0x400942c0
   80bfc:	400942cc 	.word	0x400942cc

00080c00 <set_duty_cycle>:
		printf("ERROR! Invalid position");
	}
	set_duty_cycle(dty);
}

void set_duty_cycle(int dty){
   80c00:	b508      	push	{r3, lr}
	//calculates what value to set the REG_PWM_CDTY6 register to and then sets it to that value
	//the range of the CDTY6 must be between 18000 (2 ms duty cycle) and 19000 (1 ms duty cycle)
	//printf("cycle: %d\n\r", dutyCycle);
	//int dty = 20000 - 1000*dutyCycle;
	//printf("duty cycle: %d\n\r", dty);
	if((MAX_DUTY_CYCLE <= dty) && (dty <= MIN_DUTY_CYCLE)){
   80c02:	f5a0 438c 	sub.w	r3, r0, #17920	; 0x4600
   80c06:	3b50      	subs	r3, #80	; 0x50
   80c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   80c0c:	d802      	bhi.n	80c14 <set_duty_cycle+0x14>
		REG_PWM_CDTY6 = dty;
   80c0e:	4b03      	ldr	r3, [pc, #12]	; (80c1c <set_duty_cycle+0x1c>)
   80c10:	6018      	str	r0, [r3, #0]
   80c12:	bd08      	pop	{r3, pc}
	}
	else{
		printf("ERROR! Duty cycle out of range. Must be between 1 and 2\n\r");
   80c14:	4802      	ldr	r0, [pc, #8]	; (80c20 <set_duty_cycle+0x20>)
   80c16:	4b03      	ldr	r3, [pc, #12]	; (80c24 <set_duty_cycle+0x24>)
   80c18:	4798      	blx	r3
   80c1a:	bd08      	pop	{r3, pc}
   80c1c:	400942c4 	.word	0x400942c4
   80c20:	00081490 	.word	0x00081490
   80c24:	00080b81 	.word	0x00080b81

00080c28 <move_servo>:
void move_servo(int pos){
   80c28:	b508      	push	{r3, lr}
	if (pos < MAX_BOTTOM_CUTOFF){
   80c2a:	281d      	cmp	r0, #29
   80c2c:	dd16      	ble.n	80c5c <move_servo+0x34>
	else if ((MAX_BOTTOM_CUTOFF < pos) && (pos < BOTTOM_CUTOFF)){
   80c2e:	f1a0 031f 	sub.w	r3, r0, #31
   80c32:	2b26      	cmp	r3, #38	; 0x26
   80c34:	d917      	bls.n	80c66 <move_servo+0x3e>
	else if ((BOTTOM_CUTOFF < pos) && (pos < TOP_CUTOFF)){
   80c36:	f1a0 0347 	sub.w	r3, r0, #71	; 0x47
   80c3a:	2b3a      	cmp	r3, #58	; 0x3a
   80c3c:	d916      	bls.n	80c6c <move_servo+0x44>
	else if ((TOP_CUTOFF < pos) && (pos < MAX_TOP_CUTOFF)){
   80c3e:	f1a0 0383 	sub.w	r3, r0, #131	; 0x83
   80c42:	2b26      	cmp	r3, #38	; 0x26
   80c44:	d915      	bls.n	80c72 <move_servo+0x4a>
	else if (pos > MAX_TOP_CUTOFF) {
   80c46:	28aa      	cmp	r0, #170	; 0xaa
   80c48:	dd02      	ble.n	80c50 <move_servo+0x28>
		dty = 20000 - 1000*COMPLETE_RIGHT;
   80c4a:	f644 2038 	movw	r0, #19000	; 0x4a38
   80c4e:	e007      	b.n	80c60 <move_servo+0x38>
		printf("ERROR! Invalid position");
   80c50:	4809      	ldr	r0, [pc, #36]	; (80c78 <move_servo+0x50>)
   80c52:	4b0a      	ldr	r3, [pc, #40]	; (80c7c <move_servo+0x54>)
   80c54:	4798      	blx	r3
	int dty = 20000 - 1000*CENTER;
   80c56:	f644 0044 	movw	r0, #18500	; 0x4844
   80c5a:	e001      	b.n	80c60 <move_servo+0x38>
		dty = 20000 - 1000*COMPLETE_LEFT;
   80c5c:	f244 6050 	movw	r0, #18000	; 0x4650
	set_duty_cycle(dty);
   80c60:	4b07      	ldr	r3, [pc, #28]	; (80c80 <move_servo+0x58>)
   80c62:	4798      	blx	r3
   80c64:	bd08      	pop	{r3, pc}
		dty = 20000 - 1000*LEFT;
   80c66:	f244 704a 	movw	r0, #18250	; 0x474a
   80c6a:	e7f9      	b.n	80c60 <move_servo+0x38>
		dty = 20000 - 1000*CENTER;
   80c6c:	f644 0044 	movw	r0, #18500	; 0x4844
   80c70:	e7f6      	b.n	80c60 <move_servo+0x38>
		dty = 20000 - 1000*RIGHT;
   80c72:	f644 103e 	movw	r0, #18750	; 0x493e
   80c76:	e7f3      	b.n	80c60 <move_servo+0x38>
   80c78:	000814cc 	.word	0x000814cc
   80c7c:	00080b81 	.word	0x00080b81
   80c80:	00080c01 	.word	0x00080c01

00080c84 <configure_uart>:
   80c84:	4b16      	ldr	r3, [pc, #88]	; (80ce0 <configure_uart+0x5c>)
   80c86:	2200      	movs	r2, #0
   80c88:	701a      	strb	r2, [r3, #0]
   80c8a:	705a      	strb	r2, [r3, #1]
   80c8c:	4b15      	ldr	r3, [pc, #84]	; (80ce4 <configure_uart+0x60>)
   80c8e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80c92:	6459      	str	r1, [r3, #68]	; 0x44
   80c94:	6059      	str	r1, [r3, #4]
   80c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c98:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80c9a:	4002      	ands	r2, r0
   80c9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80ca0:	671a      	str	r2, [r3, #112]	; 0x70
   80ca2:	6659      	str	r1, [r3, #100]	; 0x64
   80ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
   80ca8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80cac:	611a      	str	r2, [r3, #16]
   80cae:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80cb2:	21ac      	movs	r1, #172	; 0xac
   80cb4:	6019      	str	r1, [r3, #0]
   80cb6:	f240 2123 	movw	r1, #547	; 0x223
   80cba:	6219      	str	r1, [r3, #32]
   80cbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80cc0:	6059      	str	r1, [r3, #4]
   80cc2:	f240 2102 	movw	r1, #514	; 0x202
   80cc6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80cca:	f04f 31ff 	mov.w	r1, #4294967295
   80cce:	60d9      	str	r1, [r3, #12]
   80cd0:	21e1      	movs	r1, #225	; 0xe1
   80cd2:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80cd4:	4904      	ldr	r1, [pc, #16]	; (80ce8 <configure_uart+0x64>)
   80cd6:	600a      	str	r2, [r1, #0]
   80cd8:	2250      	movs	r2, #80	; 0x50
   80cda:	601a      	str	r2, [r3, #0]
   80cdc:	4770      	bx	lr
   80cde:	bf00      	nop
   80ce0:	2000047c 	.word	0x2000047c
   80ce4:	400e0e00 	.word	0x400e0e00
   80ce8:	e000e100 	.word	0xe000e100

00080cec <uart_putchar>:
   80cec:	4b07      	ldr	r3, [pc, #28]	; (80d0c <uart_putchar+0x20>)
   80cee:	695b      	ldr	r3, [r3, #20]
   80cf0:	f013 0f02 	tst.w	r3, #2
   80cf4:	d008      	beq.n	80d08 <uart_putchar+0x1c>
   80cf6:	4b05      	ldr	r3, [pc, #20]	; (80d0c <uart_putchar+0x20>)
   80cf8:	61d8      	str	r0, [r3, #28]
   80cfa:	461a      	mov	r2, r3
   80cfc:	6953      	ldr	r3, [r2, #20]
   80cfe:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d02:	d0fb      	beq.n	80cfc <uart_putchar+0x10>
   80d04:	2000      	movs	r0, #0
   80d06:	4770      	bx	lr
   80d08:	2001      	movs	r0, #1
   80d0a:	4770      	bx	lr
   80d0c:	400e0800 	.word	0x400e0800

00080d10 <UART_Handler>:
   80d10:	b508      	push	{r3, lr}
   80d12:	4b15      	ldr	r3, [pc, #84]	; (80d68 <UART_Handler+0x58>)
   80d14:	695b      	ldr	r3, [r3, #20]
   80d16:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80d1a:	d003      	beq.n	80d24 <UART_Handler+0x14>
   80d1c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80d20:	4a11      	ldr	r2, [pc, #68]	; (80d68 <UART_Handler+0x58>)
   80d22:	6011      	str	r1, [r2, #0]
   80d24:	f013 0f01 	tst.w	r3, #1
   80d28:	d012      	beq.n	80d50 <UART_Handler+0x40>
   80d2a:	4810      	ldr	r0, [pc, #64]	; (80d6c <UART_Handler+0x5c>)
   80d2c:	7842      	ldrb	r2, [r0, #1]
   80d2e:	1c53      	adds	r3, r2, #1
   80d30:	4259      	negs	r1, r3
   80d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80d36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80d3a:	bf58      	it	pl
   80d3c:	424b      	negpl	r3, r1
   80d3e:	7801      	ldrb	r1, [r0, #0]
   80d40:	428b      	cmp	r3, r1
   80d42:	d006      	beq.n	80d52 <UART_Handler+0x42>
   80d44:	4908      	ldr	r1, [pc, #32]	; (80d68 <UART_Handler+0x58>)
   80d46:	6988      	ldr	r0, [r1, #24]
   80d48:	4908      	ldr	r1, [pc, #32]	; (80d6c <UART_Handler+0x5c>)
   80d4a:	440a      	add	r2, r1
   80d4c:	7090      	strb	r0, [r2, #2]
   80d4e:	704b      	strb	r3, [r1, #1]
   80d50:	bd08      	pop	{r3, pc}
   80d52:	4807      	ldr	r0, [pc, #28]	; (80d70 <UART_Handler+0x60>)
   80d54:	4b07      	ldr	r3, [pc, #28]	; (80d74 <UART_Handler+0x64>)
   80d56:	4798      	blx	r3
   80d58:	4b03      	ldr	r3, [pc, #12]	; (80d68 <UART_Handler+0x58>)
   80d5a:	699a      	ldr	r2, [r3, #24]
   80d5c:	4b03      	ldr	r3, [pc, #12]	; (80d6c <UART_Handler+0x5c>)
   80d5e:	7859      	ldrb	r1, [r3, #1]
   80d60:	440b      	add	r3, r1
   80d62:	709a      	strb	r2, [r3, #2]
   80d64:	bd08      	pop	{r3, pc}
   80d66:	bf00      	nop
   80d68:	400e0800 	.word	0x400e0800
   80d6c:	2000047c 	.word	0x2000047c
   80d70:	000814e4 	.word	0x000814e4
   80d74:	00080b81 	.word	0x00080b81

00080d78 <__aeabi_frsub>:
   80d78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   80d7c:	e002      	b.n	80d84 <__addsf3>
   80d7e:	bf00      	nop

00080d80 <__aeabi_fsub>:
   80d80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00080d84 <__addsf3>:
   80d84:	0042      	lsls	r2, r0, #1
   80d86:	bf1f      	itttt	ne
   80d88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   80d8c:	ea92 0f03 	teqne	r2, r3
   80d90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   80d94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80d98:	d06a      	beq.n	80e70 <__addsf3+0xec>
   80d9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   80d9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   80da2:	bfc1      	itttt	gt
   80da4:	18d2      	addgt	r2, r2, r3
   80da6:	4041      	eorgt	r1, r0
   80da8:	4048      	eorgt	r0, r1
   80daa:	4041      	eorgt	r1, r0
   80dac:	bfb8      	it	lt
   80dae:	425b      	neglt	r3, r3
   80db0:	2b19      	cmp	r3, #25
   80db2:	bf88      	it	hi
   80db4:	4770      	bxhi	lr
   80db6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   80dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80dbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80dc2:	bf18      	it	ne
   80dc4:	4240      	negne	r0, r0
   80dc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80dca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   80dce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   80dd2:	bf18      	it	ne
   80dd4:	4249      	negne	r1, r1
   80dd6:	ea92 0f03 	teq	r2, r3
   80dda:	d03f      	beq.n	80e5c <__addsf3+0xd8>
   80ddc:	f1a2 0201 	sub.w	r2, r2, #1
   80de0:	fa41 fc03 	asr.w	ip, r1, r3
   80de4:	eb10 000c 	adds.w	r0, r0, ip
   80de8:	f1c3 0320 	rsb	r3, r3, #32
   80dec:	fa01 f103 	lsl.w	r1, r1, r3
   80df0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80df4:	d502      	bpl.n	80dfc <__addsf3+0x78>
   80df6:	4249      	negs	r1, r1
   80df8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   80dfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   80e00:	d313      	bcc.n	80e2a <__addsf3+0xa6>
   80e02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80e06:	d306      	bcc.n	80e16 <__addsf3+0x92>
   80e08:	0840      	lsrs	r0, r0, #1
   80e0a:	ea4f 0131 	mov.w	r1, r1, rrx
   80e0e:	f102 0201 	add.w	r2, r2, #1
   80e12:	2afe      	cmp	r2, #254	; 0xfe
   80e14:	d251      	bcs.n	80eba <__addsf3+0x136>
   80e16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   80e1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80e1e:	bf08      	it	eq
   80e20:	f020 0001 	biceq.w	r0, r0, #1
   80e24:	ea40 0003 	orr.w	r0, r0, r3
   80e28:	4770      	bx	lr
   80e2a:	0049      	lsls	r1, r1, #1
   80e2c:	eb40 0000 	adc.w	r0, r0, r0
   80e30:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   80e34:	f1a2 0201 	sub.w	r2, r2, #1
   80e38:	d1ed      	bne.n	80e16 <__addsf3+0x92>
   80e3a:	fab0 fc80 	clz	ip, r0
   80e3e:	f1ac 0c08 	sub.w	ip, ip, #8
   80e42:	ebb2 020c 	subs.w	r2, r2, ip
   80e46:	fa00 f00c 	lsl.w	r0, r0, ip
   80e4a:	bfaa      	itet	ge
   80e4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   80e50:	4252      	neglt	r2, r2
   80e52:	4318      	orrge	r0, r3
   80e54:	bfbc      	itt	lt
   80e56:	40d0      	lsrlt	r0, r2
   80e58:	4318      	orrlt	r0, r3
   80e5a:	4770      	bx	lr
   80e5c:	f092 0f00 	teq	r2, #0
   80e60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   80e64:	bf06      	itte	eq
   80e66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   80e6a:	3201      	addeq	r2, #1
   80e6c:	3b01      	subne	r3, #1
   80e6e:	e7b5      	b.n	80ddc <__addsf3+0x58>
   80e70:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   80e78:	bf18      	it	ne
   80e7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80e7e:	d021      	beq.n	80ec4 <__addsf3+0x140>
   80e80:	ea92 0f03 	teq	r2, r3
   80e84:	d004      	beq.n	80e90 <__addsf3+0x10c>
   80e86:	f092 0f00 	teq	r2, #0
   80e8a:	bf08      	it	eq
   80e8c:	4608      	moveq	r0, r1
   80e8e:	4770      	bx	lr
   80e90:	ea90 0f01 	teq	r0, r1
   80e94:	bf1c      	itt	ne
   80e96:	2000      	movne	r0, #0
   80e98:	4770      	bxne	lr
   80e9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   80e9e:	d104      	bne.n	80eaa <__addsf3+0x126>
   80ea0:	0040      	lsls	r0, r0, #1
   80ea2:	bf28      	it	cs
   80ea4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   80ea8:	4770      	bx	lr
   80eaa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   80eae:	bf3c      	itt	cc
   80eb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   80eb4:	4770      	bxcc	lr
   80eb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80eba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   80ebe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80ec2:	4770      	bx	lr
   80ec4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   80ec8:	bf16      	itet	ne
   80eca:	4608      	movne	r0, r1
   80ecc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   80ed0:	4601      	movne	r1, r0
   80ed2:	0242      	lsls	r2, r0, #9
   80ed4:	bf06      	itte	eq
   80ed6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   80eda:	ea90 0f01 	teqeq	r0, r1
   80ede:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   80ee2:	4770      	bx	lr

00080ee4 <__aeabi_ui2f>:
   80ee4:	f04f 0300 	mov.w	r3, #0
   80ee8:	e004      	b.n	80ef4 <__aeabi_i2f+0x8>
   80eea:	bf00      	nop

00080eec <__aeabi_i2f>:
   80eec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   80ef0:	bf48      	it	mi
   80ef2:	4240      	negmi	r0, r0
   80ef4:	ea5f 0c00 	movs.w	ip, r0
   80ef8:	bf08      	it	eq
   80efa:	4770      	bxeq	lr
   80efc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   80f00:	4601      	mov	r1, r0
   80f02:	f04f 0000 	mov.w	r0, #0
   80f06:	e01c      	b.n	80f42 <__aeabi_l2f+0x2a>

00080f08 <__aeabi_ul2f>:
   80f08:	ea50 0201 	orrs.w	r2, r0, r1
   80f0c:	bf08      	it	eq
   80f0e:	4770      	bxeq	lr
   80f10:	f04f 0300 	mov.w	r3, #0
   80f14:	e00a      	b.n	80f2c <__aeabi_l2f+0x14>
   80f16:	bf00      	nop

00080f18 <__aeabi_l2f>:
   80f18:	ea50 0201 	orrs.w	r2, r0, r1
   80f1c:	bf08      	it	eq
   80f1e:	4770      	bxeq	lr
   80f20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   80f24:	d502      	bpl.n	80f2c <__aeabi_l2f+0x14>
   80f26:	4240      	negs	r0, r0
   80f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80f2c:	ea5f 0c01 	movs.w	ip, r1
   80f30:	bf02      	ittt	eq
   80f32:	4684      	moveq	ip, r0
   80f34:	4601      	moveq	r1, r0
   80f36:	2000      	moveq	r0, #0
   80f38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   80f3c:	bf08      	it	eq
   80f3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   80f42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   80f46:	fabc f28c 	clz	r2, ip
   80f4a:	3a08      	subs	r2, #8
   80f4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   80f50:	db10      	blt.n	80f74 <__aeabi_l2f+0x5c>
   80f52:	fa01 fc02 	lsl.w	ip, r1, r2
   80f56:	4463      	add	r3, ip
   80f58:	fa00 fc02 	lsl.w	ip, r0, r2
   80f5c:	f1c2 0220 	rsb	r2, r2, #32
   80f60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f64:	fa20 f202 	lsr.w	r2, r0, r2
   80f68:	eb43 0002 	adc.w	r0, r3, r2
   80f6c:	bf08      	it	eq
   80f6e:	f020 0001 	biceq.w	r0, r0, #1
   80f72:	4770      	bx	lr
   80f74:	f102 0220 	add.w	r2, r2, #32
   80f78:	fa01 fc02 	lsl.w	ip, r1, r2
   80f7c:	f1c2 0220 	rsb	r2, r2, #32
   80f80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   80f84:	fa21 f202 	lsr.w	r2, r1, r2
   80f88:	eb43 0002 	adc.w	r0, r3, r2
   80f8c:	bf08      	it	eq
   80f8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   80f92:	4770      	bx	lr

00080f94 <__aeabi_fmul>:
   80f94:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80f98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   80f9c:	bf1e      	ittt	ne
   80f9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   80fa2:	ea92 0f0c 	teqne	r2, ip
   80fa6:	ea93 0f0c 	teqne	r3, ip
   80faa:	d06f      	beq.n	8108c <__aeabi_fmul+0xf8>
   80fac:	441a      	add	r2, r3
   80fae:	ea80 0c01 	eor.w	ip, r0, r1
   80fb2:	0240      	lsls	r0, r0, #9
   80fb4:	bf18      	it	ne
   80fb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   80fba:	d01e      	beq.n	80ffa <__aeabi_fmul+0x66>
   80fbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80fc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   80fc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   80fc8:	fba0 3101 	umull	r3, r1, r0, r1
   80fcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   80fd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   80fd4:	bf3e      	ittt	cc
   80fd6:	0049      	lslcc	r1, r1, #1
   80fd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   80fdc:	005b      	lslcc	r3, r3, #1
   80fde:	ea40 0001 	orr.w	r0, r0, r1
   80fe2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   80fe6:	2afd      	cmp	r2, #253	; 0xfd
   80fe8:	d81d      	bhi.n	81026 <__aeabi_fmul+0x92>
   80fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   80fee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80ff2:	bf08      	it	eq
   80ff4:	f020 0001 	biceq.w	r0, r0, #1
   80ff8:	4770      	bx	lr
   80ffa:	f090 0f00 	teq	r0, #0
   80ffe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81002:	bf08      	it	eq
   81004:	0249      	lsleq	r1, r1, #9
   81006:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8100a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8100e:	3a7f      	subs	r2, #127	; 0x7f
   81010:	bfc2      	ittt	gt
   81012:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81016:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8101a:	4770      	bxgt	lr
   8101c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81020:	f04f 0300 	mov.w	r3, #0
   81024:	3a01      	subs	r2, #1
   81026:	dc5d      	bgt.n	810e4 <__aeabi_fmul+0x150>
   81028:	f112 0f19 	cmn.w	r2, #25
   8102c:	bfdc      	itt	le
   8102e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81032:	4770      	bxle	lr
   81034:	f1c2 0200 	rsb	r2, r2, #0
   81038:	0041      	lsls	r1, r0, #1
   8103a:	fa21 f102 	lsr.w	r1, r1, r2
   8103e:	f1c2 0220 	rsb	r2, r2, #32
   81042:	fa00 fc02 	lsl.w	ip, r0, r2
   81046:	ea5f 0031 	movs.w	r0, r1, rrx
   8104a:	f140 0000 	adc.w	r0, r0, #0
   8104e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81052:	bf08      	it	eq
   81054:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81058:	4770      	bx	lr
   8105a:	f092 0f00 	teq	r2, #0
   8105e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81062:	bf02      	ittt	eq
   81064:	0040      	lsleq	r0, r0, #1
   81066:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8106a:	3a01      	subeq	r2, #1
   8106c:	d0f9      	beq.n	81062 <__aeabi_fmul+0xce>
   8106e:	ea40 000c 	orr.w	r0, r0, ip
   81072:	f093 0f00 	teq	r3, #0
   81076:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8107a:	bf02      	ittt	eq
   8107c:	0049      	lsleq	r1, r1, #1
   8107e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81082:	3b01      	subeq	r3, #1
   81084:	d0f9      	beq.n	8107a <__aeabi_fmul+0xe6>
   81086:	ea41 010c 	orr.w	r1, r1, ip
   8108a:	e78f      	b.n	80fac <__aeabi_fmul+0x18>
   8108c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81090:	ea92 0f0c 	teq	r2, ip
   81094:	bf18      	it	ne
   81096:	ea93 0f0c 	teqne	r3, ip
   8109a:	d00a      	beq.n	810b2 <__aeabi_fmul+0x11e>
   8109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   810a0:	bf18      	it	ne
   810a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   810a6:	d1d8      	bne.n	8105a <__aeabi_fmul+0xc6>
   810a8:	ea80 0001 	eor.w	r0, r0, r1
   810ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   810b0:	4770      	bx	lr
   810b2:	f090 0f00 	teq	r0, #0
   810b6:	bf17      	itett	ne
   810b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   810bc:	4608      	moveq	r0, r1
   810be:	f091 0f00 	teqne	r1, #0
   810c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   810c6:	d014      	beq.n	810f2 <__aeabi_fmul+0x15e>
   810c8:	ea92 0f0c 	teq	r2, ip
   810cc:	d101      	bne.n	810d2 <__aeabi_fmul+0x13e>
   810ce:	0242      	lsls	r2, r0, #9
   810d0:	d10f      	bne.n	810f2 <__aeabi_fmul+0x15e>
   810d2:	ea93 0f0c 	teq	r3, ip
   810d6:	d103      	bne.n	810e0 <__aeabi_fmul+0x14c>
   810d8:	024b      	lsls	r3, r1, #9
   810da:	bf18      	it	ne
   810dc:	4608      	movne	r0, r1
   810de:	d108      	bne.n	810f2 <__aeabi_fmul+0x15e>
   810e0:	ea80 0001 	eor.w	r0, r0, r1
   810e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   810e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   810ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   810f0:	4770      	bx	lr
   810f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   810f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   810fa:	4770      	bx	lr

000810fc <__aeabi_fdiv>:
   810fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81100:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81104:	bf1e      	ittt	ne
   81106:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8110a:	ea92 0f0c 	teqne	r2, ip
   8110e:	ea93 0f0c 	teqne	r3, ip
   81112:	d069      	beq.n	811e8 <__aeabi_fdiv+0xec>
   81114:	eba2 0203 	sub.w	r2, r2, r3
   81118:	ea80 0c01 	eor.w	ip, r0, r1
   8111c:	0249      	lsls	r1, r1, #9
   8111e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81122:	d037      	beq.n	81194 <__aeabi_fdiv+0x98>
   81124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81128:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   8112c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81130:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81134:	428b      	cmp	r3, r1
   81136:	bf38      	it	cc
   81138:	005b      	lslcc	r3, r3, #1
   8113a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8113e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81142:	428b      	cmp	r3, r1
   81144:	bf24      	itt	cs
   81146:	1a5b      	subcs	r3, r3, r1
   81148:	ea40 000c 	orrcs.w	r0, r0, ip
   8114c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81150:	bf24      	itt	cs
   81152:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81156:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8115a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8115e:	bf24      	itt	cs
   81160:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81164:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81168:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   8116c:	bf24      	itt	cs
   8116e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81172:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81176:	011b      	lsls	r3, r3, #4
   81178:	bf18      	it	ne
   8117a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8117e:	d1e0      	bne.n	81142 <__aeabi_fdiv+0x46>
   81180:	2afd      	cmp	r2, #253	; 0xfd
   81182:	f63f af50 	bhi.w	81026 <__aeabi_fmul+0x92>
   81186:	428b      	cmp	r3, r1
   81188:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8118c:	bf08      	it	eq
   8118e:	f020 0001 	biceq.w	r0, r0, #1
   81192:	4770      	bx	lr
   81194:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81198:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8119c:	327f      	adds	r2, #127	; 0x7f
   8119e:	bfc2      	ittt	gt
   811a0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   811a4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   811a8:	4770      	bxgt	lr
   811aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   811ae:	f04f 0300 	mov.w	r3, #0
   811b2:	3a01      	subs	r2, #1
   811b4:	e737      	b.n	81026 <__aeabi_fmul+0x92>
   811b6:	f092 0f00 	teq	r2, #0
   811ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   811be:	bf02      	ittt	eq
   811c0:	0040      	lsleq	r0, r0, #1
   811c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   811c6:	3a01      	subeq	r2, #1
   811c8:	d0f9      	beq.n	811be <__aeabi_fdiv+0xc2>
   811ca:	ea40 000c 	orr.w	r0, r0, ip
   811ce:	f093 0f00 	teq	r3, #0
   811d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   811d6:	bf02      	ittt	eq
   811d8:	0049      	lsleq	r1, r1, #1
   811da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   811de:	3b01      	subeq	r3, #1
   811e0:	d0f9      	beq.n	811d6 <__aeabi_fdiv+0xda>
   811e2:	ea41 010c 	orr.w	r1, r1, ip
   811e6:	e795      	b.n	81114 <__aeabi_fdiv+0x18>
   811e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   811ec:	ea92 0f0c 	teq	r2, ip
   811f0:	d108      	bne.n	81204 <__aeabi_fdiv+0x108>
   811f2:	0242      	lsls	r2, r0, #9
   811f4:	f47f af7d 	bne.w	810f2 <__aeabi_fmul+0x15e>
   811f8:	ea93 0f0c 	teq	r3, ip
   811fc:	f47f af70 	bne.w	810e0 <__aeabi_fmul+0x14c>
   81200:	4608      	mov	r0, r1
   81202:	e776      	b.n	810f2 <__aeabi_fmul+0x15e>
   81204:	ea93 0f0c 	teq	r3, ip
   81208:	d104      	bne.n	81214 <__aeabi_fdiv+0x118>
   8120a:	024b      	lsls	r3, r1, #9
   8120c:	f43f af4c 	beq.w	810a8 <__aeabi_fmul+0x114>
   81210:	4608      	mov	r0, r1
   81212:	e76e      	b.n	810f2 <__aeabi_fmul+0x15e>
   81214:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81218:	bf18      	it	ne
   8121a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8121e:	d1ca      	bne.n	811b6 <__aeabi_fdiv+0xba>
   81220:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81224:	f47f af5c 	bne.w	810e0 <__aeabi_fmul+0x14c>
   81228:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   8122c:	f47f af3c 	bne.w	810a8 <__aeabi_fmul+0x114>
   81230:	e75f      	b.n	810f2 <__aeabi_fmul+0x15e>
   81232:	bf00      	nop

00081234 <__aeabi_f2iz>:
   81234:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   8123c:	d30f      	bcc.n	8125e <__aeabi_f2iz+0x2a>
   8123e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81246:	d90d      	bls.n	81264 <__aeabi_f2iz+0x30>
   81248:	ea4f 2300 	mov.w	r3, r0, lsl #8
   8124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81250:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81254:	fa23 f002 	lsr.w	r0, r3, r2
   81258:	bf18      	it	ne
   8125a:	4240      	negne	r0, r0
   8125c:	4770      	bx	lr
   8125e:	f04f 0000 	mov.w	r0, #0
   81262:	4770      	bx	lr
   81264:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81268:	d101      	bne.n	8126e <__aeabi_f2iz+0x3a>
   8126a:	0242      	lsls	r2, r0, #9
   8126c:	d105      	bne.n	8127a <__aeabi_f2iz+0x46>
   8126e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81272:	bf08      	it	eq
   81274:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81278:	4770      	bx	lr
   8127a:	f04f 0000 	mov.w	r0, #0
   8127e:	4770      	bx	lr

00081280 <__libc_init_array>:
   81280:	b570      	push	{r4, r5, r6, lr}
   81282:	4e0f      	ldr	r6, [pc, #60]	; (812c0 <__libc_init_array+0x40>)
   81284:	4d0f      	ldr	r5, [pc, #60]	; (812c4 <__libc_init_array+0x44>)
   81286:	1b76      	subs	r6, r6, r5
   81288:	10b6      	asrs	r6, r6, #2
   8128a:	bf18      	it	ne
   8128c:	2400      	movne	r4, #0
   8128e:	d005      	beq.n	8129c <__libc_init_array+0x1c>
   81290:	3401      	adds	r4, #1
   81292:	f855 3b04 	ldr.w	r3, [r5], #4
   81296:	4798      	blx	r3
   81298:	42a6      	cmp	r6, r4
   8129a:	d1f9      	bne.n	81290 <__libc_init_array+0x10>
   8129c:	4e0a      	ldr	r6, [pc, #40]	; (812c8 <__libc_init_array+0x48>)
   8129e:	4d0b      	ldr	r5, [pc, #44]	; (812cc <__libc_init_array+0x4c>)
   812a0:	f000 f932 	bl	81508 <_init>
   812a4:	1b76      	subs	r6, r6, r5
   812a6:	10b6      	asrs	r6, r6, #2
   812a8:	bf18      	it	ne
   812aa:	2400      	movne	r4, #0
   812ac:	d006      	beq.n	812bc <__libc_init_array+0x3c>
   812ae:	3401      	adds	r4, #1
   812b0:	f855 3b04 	ldr.w	r3, [r5], #4
   812b4:	4798      	blx	r3
   812b6:	42a6      	cmp	r6, r4
   812b8:	d1f9      	bne.n	812ae <__libc_init_array+0x2e>
   812ba:	bd70      	pop	{r4, r5, r6, pc}
   812bc:	bd70      	pop	{r4, r5, r6, pc}
   812be:	bf00      	nop
   812c0:	00081514 	.word	0x00081514
   812c4:	00081514 	.word	0x00081514
   812c8:	0008151c 	.word	0x0008151c
   812cc:	00081514 	.word	0x00081514

000812d0 <register_fini>:
   812d0:	4b02      	ldr	r3, [pc, #8]	; (812dc <register_fini+0xc>)
   812d2:	b113      	cbz	r3, 812da <register_fini+0xa>
   812d4:	4802      	ldr	r0, [pc, #8]	; (812e0 <register_fini+0x10>)
   812d6:	f000 b805 	b.w	812e4 <atexit>
   812da:	4770      	bx	lr
   812dc:	00000000 	.word	0x00000000
   812e0:	000812f1 	.word	0x000812f1

000812e4 <atexit>:
   812e4:	2300      	movs	r3, #0
   812e6:	4601      	mov	r1, r0
   812e8:	461a      	mov	r2, r3
   812ea:	4618      	mov	r0, r3
   812ec:	f000 b81e 	b.w	8132c <__register_exitproc>

000812f0 <__libc_fini_array>:
   812f0:	b538      	push	{r3, r4, r5, lr}
   812f2:	4c0a      	ldr	r4, [pc, #40]	; (8131c <__libc_fini_array+0x2c>)
   812f4:	4d0a      	ldr	r5, [pc, #40]	; (81320 <__libc_fini_array+0x30>)
   812f6:	1b64      	subs	r4, r4, r5
   812f8:	10a4      	asrs	r4, r4, #2
   812fa:	d00a      	beq.n	81312 <__libc_fini_array+0x22>
   812fc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81300:	3b01      	subs	r3, #1
   81302:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81306:	3c01      	subs	r4, #1
   81308:	f855 3904 	ldr.w	r3, [r5], #-4
   8130c:	4798      	blx	r3
   8130e:	2c00      	cmp	r4, #0
   81310:	d1f9      	bne.n	81306 <__libc_fini_array+0x16>
   81312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81316:	f000 b901 	b.w	8151c <_fini>
   8131a:	bf00      	nop
   8131c:	0008152c 	.word	0x0008152c
   81320:	00081528 	.word	0x00081528

00081324 <__retarget_lock_acquire_recursive>:
   81324:	4770      	bx	lr
   81326:	bf00      	nop

00081328 <__retarget_lock_release_recursive>:
   81328:	4770      	bx	lr
   8132a:	bf00      	nop

0008132c <__register_exitproc>:
   8132c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81330:	4d2c      	ldr	r5, [pc, #176]	; (813e4 <__register_exitproc+0xb8>)
   81332:	4606      	mov	r6, r0
   81334:	6828      	ldr	r0, [r5, #0]
   81336:	4698      	mov	r8, r3
   81338:	460f      	mov	r7, r1
   8133a:	4691      	mov	r9, r2
   8133c:	f7ff fff2 	bl	81324 <__retarget_lock_acquire_recursive>
   81340:	4b29      	ldr	r3, [pc, #164]	; (813e8 <__register_exitproc+0xbc>)
   81342:	681c      	ldr	r4, [r3, #0]
   81344:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81348:	2b00      	cmp	r3, #0
   8134a:	d03e      	beq.n	813ca <__register_exitproc+0x9e>
   8134c:	685a      	ldr	r2, [r3, #4]
   8134e:	2a1f      	cmp	r2, #31
   81350:	dc1c      	bgt.n	8138c <__register_exitproc+0x60>
   81352:	f102 0e01 	add.w	lr, r2, #1
   81356:	b176      	cbz	r6, 81376 <__register_exitproc+0x4a>
   81358:	2101      	movs	r1, #1
   8135a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8135e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81362:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81366:	4091      	lsls	r1, r2
   81368:	4308      	orrs	r0, r1
   8136a:	2e02      	cmp	r6, #2
   8136c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81370:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81374:	d023      	beq.n	813be <__register_exitproc+0x92>
   81376:	3202      	adds	r2, #2
   81378:	f8c3 e004 	str.w	lr, [r3, #4]
   8137c:	6828      	ldr	r0, [r5, #0]
   8137e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81382:	f7ff ffd1 	bl	81328 <__retarget_lock_release_recursive>
   81386:	2000      	movs	r0, #0
   81388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8138c:	4b17      	ldr	r3, [pc, #92]	; (813ec <__register_exitproc+0xc0>)
   8138e:	b30b      	cbz	r3, 813d4 <__register_exitproc+0xa8>
   81390:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81394:	f3af 8000 	nop.w
   81398:	4603      	mov	r3, r0
   8139a:	b1d8      	cbz	r0, 813d4 <__register_exitproc+0xa8>
   8139c:	2000      	movs	r0, #0
   8139e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   813a2:	f04f 0e01 	mov.w	lr, #1
   813a6:	6058      	str	r0, [r3, #4]
   813a8:	6019      	str	r1, [r3, #0]
   813aa:	4602      	mov	r2, r0
   813ac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   813b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   813b4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   813b8:	2e00      	cmp	r6, #0
   813ba:	d0dc      	beq.n	81376 <__register_exitproc+0x4a>
   813bc:	e7cc      	b.n	81358 <__register_exitproc+0x2c>
   813be:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   813c2:	4301      	orrs	r1, r0
   813c4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   813c8:	e7d5      	b.n	81376 <__register_exitproc+0x4a>
   813ca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   813ce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   813d2:	e7bb      	b.n	8134c <__register_exitproc+0x20>
   813d4:	6828      	ldr	r0, [r5, #0]
   813d6:	f7ff ffa7 	bl	81328 <__retarget_lock_release_recursive>
   813da:	f04f 30ff 	mov.w	r0, #4294967295
   813de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   813e2:	bf00      	nop
   813e4:	20000430 	.word	0x20000430
   813e8:	00081504 	.word	0x00081504
   813ec:	00000000 	.word	0x00000000
   813f0:	304e4143 	.word	0x304e4143
   813f4:	73656d20 	.word	0x73656d20
   813f8:	65676173 	.word	0x65676173
   813fc:	72726120 	.word	0x72726120
   81400:	64657669 	.word	0x64657669
   81404:	206e6920 	.word	0x206e6920
   81408:	2d6e6f6e 	.word	0x2d6e6f6e
   8140c:	64657375 	.word	0x64657375
   81410:	69616d20 	.word	0x69616d20
   81414:	786f626c 	.word	0x786f626c
   81418:	00000d0a 	.word	0x00000d0a
   8141c:	2077656e 	.word	0x2077656e
   81420:	7373656d 	.word	0x7373656d
   81424:	3a656761 	.word	0x3a656761
   81428:	000d0a20 	.word	0x000d0a20
   8142c:	7373656d 	.word	0x7373656d
   81430:	20656761 	.word	0x20656761
   81434:	203a6469 	.word	0x203a6469
   81438:	0d0a6425 	.word	0x0d0a6425
   8143c:	00000000 	.word	0x00000000
   81440:	7373656d 	.word	0x7373656d
   81444:	20656761 	.word	0x20656761
   81448:	61746164 	.word	0x61746164
   8144c:	6e656c20 	.word	0x6e656c20
   81450:	3a687467 	.word	0x3a687467
   81454:	0a642520 	.word	0x0a642520
   81458:	73656d0d 	.word	0x73656d0d
   8145c:	65676173 	.word	0x65676173
   81460:	74616420 	.word	0x74616420
   81464:	00203a61 	.word	0x00203a61
   81468:	00206425 	.word	0x00206425
   8146c:	000d0a0a 	.word	0x000d0a0a
   81470:	61746164 	.word	0x61746164
   81474:	6425203a 	.word	0x6425203a
   81478:	00000d0a 	.word	0x00000d0a
   8147c:	656d6167 	.word	0x656d6167
   81480:	65766f20 	.word	0x65766f20
   81484:	000d0a72 	.word	0x000d0a72
   81488:	6c756e28 	.word	0x6c756e28
   8148c:	0000296c 	.word	0x0000296c
   81490:	4f525245 	.word	0x4f525245
   81494:	44202152 	.word	0x44202152
   81498:	20797475 	.word	0x20797475
   8149c:	6c637963 	.word	0x6c637963
   814a0:	756f2065 	.word	0x756f2065
   814a4:	666f2074 	.word	0x666f2074
   814a8:	6e617220 	.word	0x6e617220
   814ac:	202e6567 	.word	0x202e6567
   814b0:	7473754d 	.word	0x7473754d
   814b4:	20656220 	.word	0x20656220
   814b8:	77746562 	.word	0x77746562
   814bc:	206e6565 	.word	0x206e6565
   814c0:	6e612031 	.word	0x6e612031
   814c4:	0a322064 	.word	0x0a322064
   814c8:	0000000d 	.word	0x0000000d
   814cc:	4f525245 	.word	0x4f525245
   814d0:	49202152 	.word	0x49202152
   814d4:	6c61766e 	.word	0x6c61766e
   814d8:	70206469 	.word	0x70206469
   814dc:	7469736f 	.word	0x7469736f
   814e0:	006e6f69 	.word	0x006e6f69
   814e4:	3a525245 	.word	0x3a525245
   814e8:	52415520 	.word	0x52415520
   814ec:	58522054 	.word	0x58522054
   814f0:	66756220 	.word	0x66756220
   814f4:	20726566 	.word	0x20726566
   814f8:	66207369 	.word	0x66207369
   814fc:	0a6c6c75 	.word	0x0a6c6c75
   81500:	0000000d 	.word	0x0000000d

00081504 <_global_impure_ptr>:
   81504:	20000008                                ... 

00081508 <_init>:
   81508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8150a:	bf00      	nop
   8150c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8150e:	bc08      	pop	{r3}
   81510:	469e      	mov	lr, r3
   81512:	4770      	bx	lr

00081514 <__init_array_start>:
   81514:	000812d1 	.word	0x000812d1

00081518 <__frame_dummy_init_array_entry>:
   81518:	00080119                                ....

0008151c <_fini>:
   8151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8151e:	bf00      	nop
   81520:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81522:	bc08      	pop	{r3}
   81524:	469e      	mov	lr, r3
   81526:	4770      	bx	lr

00081528 <__fini_array_start>:
   81528:	000800f5 	.word	0x000800f5
