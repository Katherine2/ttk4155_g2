
G3_ES_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027e  00800100  00002078  0000210c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002078  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080037e  0080037e  0000238a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000238a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00002424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bb2  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ea  00000000  00000000  00005216  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b3  00000000  00000000  00006400  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000600  00000000  00000000  000078b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f2  00000000  00000000  00007eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000179b  00000000  00000000  000086a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00009e41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <start_game+0x50>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 e7       	ldi	r30, 0x78	; 120
     37c:	f0 e2       	ldi	r31, 0x20	; 32
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 37       	cpi	r26, 0x7E	; 126
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	ae e7       	ldi	r26, 0x7E	; 126
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a0 39       	cpi	r26, 0x90	; 144
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 1f 09 	call	0x123e	; 0x123e <main>
     39e:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <clock_timer>:

//set the clock
void clock_timer() 
{
	//set fast PWM mode with non-inverted output
	DDRD |= (1<<PD4);  //set OC0 pin as output
     3a6:	8c 9a       	sbi	0x11, 4	; 17
	TCCR3A |= (1<<WGM32) | (1<<COM3A0);
     3a8:	eb e8       	ldi	r30, 0x8B	; 139
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	88 64       	ori	r24, 0x48	; 72
     3b0:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30) | (1<<WGM32);
     3b2:	ea e8       	ldi	r30, 0x8A	; 138
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	89 60       	ori	r24, 0x09	; 9
     3ba:	80 83       	st	Z, r24
	OCR3AH = 0b00000001;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     3c2:	08 95       	ret

000003c4 <adc_read>:

uint8_t adc_read(uint8_t channel){	
	uint8_t adc_channel;
	
	//select which channel to write to
	if (channel==0){
     3c4:	88 23       	and	r24, r24
     3c6:	41 f0       	breq	.+16     	; 0x3d8 <adc_read+0x14>
		 adc_channel = 0b10000000;
	}
	else if (channel==1){
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	41 f0       	breq	.+16     	; 0x3dc <adc_read+0x18>
		adc_channel = 0b10000001;
	}
	else if (channel==2){
     3cc:	82 30       	cpi	r24, 0x02	; 2
     3ce:	41 f0       	breq	.+16     	; 0x3e0 <adc_read+0x1c>
		adc_channel = 0b10000010;
	}
	else if (channel==3){
     3d0:	83 30       	cpi	r24, 0x03	; 3
     3d2:	39 f4       	brne	.+14     	; 0x3e2 <adc_read+0x1e>
		adc_channel = 0b10000011;
     3d4:	93 e8       	ldi	r25, 0x83	; 131
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <adc_read+0x1e>
uint8_t adc_read(uint8_t channel){	
	uint8_t adc_channel;
	
	//select which channel to write to
	if (channel==0){
		 adc_channel = 0b10000000;
     3d8:	90 e8       	ldi	r25, 0x80	; 128
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <adc_read+0x1e>
	}
	else if (channel==1){
		adc_channel = 0b10000001;
     3dc:	91 e8       	ldi	r25, 0x81	; 129
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <adc_read+0x1e>
	}
	else if (channel==2){
		adc_channel = 0b10000010;
     3e0:	92 e8       	ldi	r25, 0x82	; 130
	}
	else if (channel==3){
		adc_channel = 0b10000011;
	}
	adc_reg[0] = adc_channel;
     3e2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <adc_reg>
     3e6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <adc_reg+0x1>
     3ea:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ec:	81 e4       	ldi	r24, 0x41	; 65
     3ee:	8a 95       	dec	r24
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <adc_read+0x2a>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <adc_read+0x30>
	_delay_us(40);
	uint8_t adc_val = adc_reg[0];
     3f4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <adc_reg>
     3f8:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <adc_reg+0x1>
     3fc:	80 81       	ld	r24, Z
	
	return adc_val;
}
     3fe:	08 95       	ret

00000400 <can_init>:
#include <stdint.h>
#include <avr/interrupt.h>


void can_init(void){
	mcp2515_init();
     400:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <mcp2515_init>
	mcp2515_write(MCP_CANINTE, 0X03);		//enables the reception complete flag (for the interrupt)
     404:	63 e0       	ldi	r22, 0x03	; 3
     406:	8b e2       	ldi	r24, 0x2B	; 43
     408:	0e 94 c4 04 	call	0x988	; 0x988 <mcp2515_write>
		
	mcp2515_write(MCP_CNF3, 0x01);
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	88 e2       	ldi	r24, 0x28	; 40
     410:	0e 94 c4 04 	call	0x988	; 0x988 <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xb5);
     414:	65 eb       	ldi	r22, 0xB5	; 181
     416:	89 e2       	ldi	r24, 0x29	; 41
     418:	0e 94 c4 04 	call	0x988	; 0x988 <mcp2515_write>
	mcp2515_write(MCP_CNF1, 0x43);
     41c:	63 e4       	ldi	r22, 0x43	; 67
     41e:	8a e2       	ldi	r24, 0x2A	; 42
     420:	0e 94 c4 04 	call	0x988	; 0x988 <mcp2515_write>
	
	//Check that the registers have the right values
	uint8_t cnf1 = mcp2515_read(MCP_CNF1);
     424:	8a e2       	ldi	r24, 0x2A	; 42
     426:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
	uint8_t cnf2 = mcp2515_read(MCP_CNF2);
     42a:	89 e2       	ldi	r24, 0x29	; 41
     42c:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
	uint8_t cnf3 = mcp2515_read(MCP_CNF3);
     430:	88 e2       	ldi	r24, 0x28	; 40
     432:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
	
	
	mcp2515_write(MCP_CANCTRL, MODE_NORMAL);
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	8f e0       	ldi	r24, 0x0F	; 15
     43a:	0e 94 c4 04 	call	0x988	; 0x988 <mcp2515_write>
 	uint8_t value;

	value = mcp2515_read(MCP_CANSTAT);
     43e:	8e e0       	ldi	r24, 0x0E	; 14
     440:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>

	if((value & MODE_MASK) != MODE_NORMAL){
     444:	80 7e       	andi	r24, 0xE0	; 224
     446:	21 f0       	breq	.+8      	; 0x450 <can_init+0x50>
		printf("MCP2515 is NOT in normal mode after reset!\n");
     448:	8c e0       	ldi	r24, 0x0C	; 12
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <puts>
	}		
		
	// Disable global interrupts
	cli();
     450:	f8 94       	cli
	// Interrupt on falling edge
	MCUCR |= (1<<ISC01);
     452:	85 b7       	in	r24, 0x35	; 53
     454:	82 60       	ori	r24, 0x02	; 2
     456:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt 
	GICR |= (1<<INT0);
     458:	8b b7       	in	r24, 0x3b	; 59
     45a:	80 64       	ori	r24, 0x40	; 64
     45c:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     45e:	78 94       	sei
     460:	08 95       	ret

00000462 <can_receive>:
	}

void can_receive(void){
     462:	bf 92       	push	r11
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	2c 97       	sbiw	r28, 0x0c	; 12
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
	can_msg msg;
	if(mcp2515_read_status() & 0x01){
     484:	0e 94 0e 05 	call	0xa1c	; 0xa1c <mcp2515_read_status>
     488:	80 ff       	sbrs	r24, 0
     48a:	33 c0       	rjmp	.+102    	; 0x4f2 <can_receive+0x90>
		msg.id = (mcp2515_read(MCP_RXB0SIDH) << 3)|(mcp2515_read(MCP_RXB0SIDL) >> 5);
     48c:	81 e6       	ldi	r24, 0x61	; 97
     48e:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
     492:	c8 2e       	mov	r12, r24
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
     49a:	d1 2c       	mov	r13, r1
     49c:	cc 0c       	add	r12, r12
     49e:	dd 1c       	adc	r13, r13
     4a0:	cc 0c       	add	r12, r12
     4a2:	dd 1c       	adc	r13, r13
     4a4:	cc 0c       	add	r12, r12
     4a6:	dd 1c       	adc	r13, r13
     4a8:	82 95       	swap	r24
     4aa:	86 95       	lsr	r24
     4ac:	87 70       	andi	r24, 0x07	; 7
     4ae:	c8 2a       	or	r12, r24
		msg.length = mcp2515_read(MCP_RXB0DLC);
     4b0:	85 e6       	ldi	r24, 0x65	; 101
     4b2:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
     4b6:	e8 2e       	mov	r14, r24
     4b8:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i < (msg.length); i++){
     4ba:	1e 14       	cp	r1, r14
     4bc:	1f 04       	cpc	r1, r15
     4be:	a4 f4       	brge	.+40     	; 0x4e8 <can_receive+0x86>
     4c0:	00 e0       	ldi	r16, 0x00	; 0
     4c2:	10 e0       	ldi	r17, 0x00	; 0
     4c4:	b1 2c       	mov	r11, r1
			msg.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     4c6:	86 e6       	ldi	r24, 0x66	; 102
     4c8:	8b 0d       	add	r24, r11
     4ca:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
     4ce:	e5 e0       	ldi	r30, 0x05	; 5
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	ec 0f       	add	r30, r28
     4d4:	fd 1f       	adc	r31, r29
     4d6:	e0 0f       	add	r30, r16
     4d8:	f1 1f       	adc	r31, r17
     4da:	80 83       	st	Z, r24
void can_receive(void){
	can_msg msg;
	if(mcp2515_read_status() & 0x01){
		msg.id = (mcp2515_read(MCP_RXB0SIDH) << 3)|(mcp2515_read(MCP_RXB0SIDL) >> 5);
		msg.length = mcp2515_read(MCP_RXB0DLC);
		for(uint8_t i = 0; i < (msg.length); i++){
     4dc:	b3 94       	inc	r11
     4de:	0b 2d       	mov	r16, r11
     4e0:	10 e0       	ldi	r17, 0x00	; 0
     4e2:	0e 15       	cp	r16, r14
     4e4:	1f 05       	cpc	r17, r15
     4e6:	7c f3       	brlt	.-34     	; 0x4c6 <can_receive+0x64>
			msg.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}
		mcp2515_bit_modify(MCP_CANINTF,0x01, 0x00);
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	8c e2       	ldi	r24, 0x2C	; 44
     4ee:	0e 94 16 05 	call	0xa2c	; 0xa2c <mcp2515_bit_modify>
	}
		
	if(mcp2515_read_status() & 0x02){
     4f2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <mcp2515_read_status>
     4f6:	81 ff       	sbrs	r24, 1
     4f8:	33 c0       	rjmp	.+102    	; 0x560 <__stack+0x61>
		msg.id = (mcp2515_read(MCP_RXB1SIDH) << 3)|(mcp2515_read(MCP_RXB1SIDL) >> 5);
     4fa:	81 e7       	ldi	r24, 0x71	; 113
     4fc:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
     500:	c8 2e       	mov	r12, r24
     502:	82 e7       	ldi	r24, 0x72	; 114
     504:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
     508:	d1 2c       	mov	r13, r1
     50a:	cc 0c       	add	r12, r12
     50c:	dd 1c       	adc	r13, r13
     50e:	cc 0c       	add	r12, r12
     510:	dd 1c       	adc	r13, r13
     512:	cc 0c       	add	r12, r12
     514:	dd 1c       	adc	r13, r13
     516:	82 95       	swap	r24
     518:	86 95       	lsr	r24
     51a:	87 70       	andi	r24, 0x07	; 7
     51c:	c8 2a       	or	r12, r24
		msg.length = mcp2515_read(MCP_RXB1DLC);
     51e:	85 e7       	ldi	r24, 0x75	; 117
     520:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
     524:	e8 2e       	mov	r14, r24
     526:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i < (msg.length); i++){
     528:	1e 14       	cp	r1, r14
     52a:	1f 04       	cpc	r1, r15
     52c:	a4 f4       	brge	.+40     	; 0x556 <__stack+0x57>
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	b1 2c       	mov	r11, r1
			msg.data[i] = mcp2515_read(MCP_RXB1D0 + i);
     534:	86 e7       	ldi	r24, 0x76	; 118
     536:	8b 0d       	add	r24, r11
     538:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
     53c:	e5 e0       	ldi	r30, 0x05	; 5
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	ec 0f       	add	r30, r28
     542:	fd 1f       	adc	r31, r29
     544:	e0 0f       	add	r30, r16
     546:	f1 1f       	adc	r31, r17
     548:	80 83       	st	Z, r24
	}
		
	if(mcp2515_read_status() & 0x02){
		msg.id = (mcp2515_read(MCP_RXB1SIDH) << 3)|(mcp2515_read(MCP_RXB1SIDL) >> 5);
		msg.length = mcp2515_read(MCP_RXB1DLC);
		for(uint8_t i = 0; i < (msg.length); i++){
     54a:	b3 94       	inc	r11
     54c:	0b 2d       	mov	r16, r11
     54e:	10 e0       	ldi	r17, 0x00	; 0
     550:	0e 15       	cp	r16, r14
     552:	1f 05       	cpc	r17, r15
     554:	7c f3       	brlt	.-34     	; 0x534 <__stack+0x35>
			msg.data[i] = mcp2515_read(MCP_RXB1D0 + i);
		}
		mcp2515_bit_modify(MCP_CANINTF,0x02, 0x00);
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	62 e0       	ldi	r22, 0x02	; 2
     55a:	8c e2       	ldi	r24, 0x2C	; 44
     55c:	0e 94 16 05 	call	0xa2c	; 0xa2c <mcp2515_bit_modify>
	}
			
	printf("new message: \n\r");
     560:	87 e3       	ldi	r24, 0x37	; 55
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	printf("message id: %d\n\r", msg.id);
     56c:	df 92       	push	r13
     56e:	cf 92       	push	r12
     570:	87 e4       	ldi	r24, 0x47	; 71
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	printf("message data length: %d\n\rmessage data: ", msg.length);
     57c:	ff 92       	push	r15
     57e:	ef 92       	push	r14
     580:	88 e5       	ldi	r24, 0x58	; 88
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	for (int i = 0; i < msg.length; i++)
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	1e 14       	cp	r1, r14
     598:	1f 04       	cpc	r1, r15
     59a:	fc f4       	brge	.+62     	; 0x5da <__stack+0xdb>
     59c:	8e 01       	movw	r16, r28
     59e:	0b 5f       	subi	r16, 0xFB	; 251
     5a0:	1f 4f       	sbci	r17, 0xFF	; 255
     5a2:	ce 01       	movw	r24, r28
     5a4:	8e 0d       	add	r24, r14
     5a6:	9f 1d       	adc	r25, r15
     5a8:	fc 01       	movw	r30, r24
     5aa:	35 96       	adiw	r30, 0x05	; 5
     5ac:	7f 01       	movw	r14, r30
	{
		printf("%d ", msg.data[i]);
     5ae:	0f 2e       	mov	r0, r31
     5b0:	f0 e8       	ldi	r31, 0x80	; 128
     5b2:	cf 2e       	mov	r12, r31
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	df 2e       	mov	r13, r31
     5b8:	f0 2d       	mov	r31, r0
     5ba:	f8 01       	movw	r30, r16
     5bc:	81 91       	ld	r24, Z+
     5be:	8f 01       	movw	r16, r30
     5c0:	1f 92       	push	r1
     5c2:	8f 93       	push	r24
     5c4:	df 92       	push	r13
     5c6:	cf 92       	push	r12
     5c8:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	}
			
	printf("new message: \n\r");
	printf("message id: %d\n\r", msg.id);
	printf("message data length: %d\n\rmessage data: ", msg.length);
	for (int i = 0; i < msg.length; i++)
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	e0 16       	cp	r14, r16
     5d6:	f1 06       	cpc	r15, r17
     5d8:	81 f7       	brne	.-32     	; 0x5ba <__stack+0xbb>
	{
		printf("%d ", msg.data[i]);
	}
	printf("\n\n\r");
     5da:	84 e8       	ldi	r24, 0x84	; 132
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
}
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	2c 96       	adiw	r28, 0x0c	; 12
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	08 95       	ret

0000060a <can_transmit>:

void can_transmit(can_msg msg){
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	2c 97       	sbiw	r28, 0x0c	; 12
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	e9 82       	std	Y+1, r14	; 0x01
     62c:	fa 82       	std	Y+2, r15	; 0x02
     62e:	0b 83       	std	Y+3, r16	; 0x03
     630:	1c 83       	std	Y+4, r17	; 0x04
     632:	2d 83       	std	Y+5, r18	; 0x05
     634:	3e 83       	std	Y+6, r19	; 0x06
     636:	4f 83       	std	Y+7, r20	; 0x07
     638:	58 87       	std	Y+8, r21	; 0x08
     63a:	69 87       	std	Y+9, r22	; 0x09
     63c:	7a 87       	std	Y+10, r23	; 0x0a
     63e:	8b 87       	std	Y+11, r24	; 0x0b
     640:	9c 87       	std	Y+12, r25	; 0x0c
     642:	e9 80       	ldd	r14, Y+1	; 0x01
     644:	fa 80       	ldd	r15, Y+2	; 0x02
     646:	cb 80       	ldd	r12, Y+3	; 0x03
     648:	dc 80       	ldd	r13, Y+4	; 0x04
	mcp2515_write(MCP_TXB0SIDH, msg.id >> 3);
     64a:	b6 01       	movw	r22, r12
     64c:	75 95       	asr	r23
     64e:	67 95       	ror	r22
     650:	75 95       	asr	r23
     652:	67 95       	ror	r22
     654:	75 95       	asr	r23
     656:	67 95       	ror	r22
     658:	81 e3       	ldi	r24, 0x31	; 49
     65a:	0e 94 c4 04 	call	0x988	; 0x988 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
     65e:	6c 2d       	mov	r22, r12
     660:	62 95       	swap	r22
     662:	66 0f       	add	r22, r22
     664:	60 7e       	andi	r22, 0xE0	; 224
     666:	82 e3       	ldi	r24, 0x32	; 50
     668:	0e 94 c4 04 	call	0x988	; 0x988 <mcp2515_write>
	mcp2515_write(MCP_TXB0DLC, msg.length);
     66c:	6e 2d       	mov	r22, r14
     66e:	85 e3       	ldi	r24, 0x35	; 53
     670:	0e 94 c4 04 	call	0x988	; 0x988 <mcp2515_write>
	for(uint8_t i = 0; i < (msg.length); i++){
     674:	1e 14       	cp	r1, r14
     676:	1f 04       	cpc	r1, r15
     678:	0c f0       	brlt	.+2      	; 0x67c <can_transmit+0x72>
     67a:	5a c0       	rjmp	.+180    	; 0x730 <can_transmit+0x126>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
     682:	e5 e0       	ldi	r30, 0x05	; 5
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	ec 0f       	add	r30, r28
     688:	fd 1f       	adc	r31, r29
     68a:	e8 0f       	add	r30, r24
     68c:	f9 1f       	adc	r31, r25
     68e:	60 81       	ld	r22, Z
     690:	86 e3       	ldi	r24, 0x36	; 54
     692:	81 0f       	add	r24, r17
     694:	0e 94 c4 04 	call	0x988	; 0x988 <mcp2515_write>

void can_transmit(can_msg msg){
	mcp2515_write(MCP_TXB0SIDH, msg.id >> 3);
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
	mcp2515_write(MCP_TXB0DLC, msg.length);
	for(uint8_t i = 0; i < (msg.length); i++){
     698:	1f 5f       	subi	r17, 0xFF	; 255
     69a:	81 2f       	mov	r24, r17
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	8e 15       	cp	r24, r14
     6a0:	9f 05       	cpc	r25, r15
     6a2:	7c f3       	brlt	.-34     	; 0x682 <can_transmit+0x78>
     6a4:	19 c0       	rjmp	.+50     	; 0x6d8 <can_transmit+0xce>
	printf("new message: \n\r");
	printf("message id: %d\n\r", msg.id);
	printf("message data length: %d\n\rmessage data: ", msg.length);
	for (int i = 0; i < msg.length; i++)
	{
		printf("%d ", msg.data[i]);
     6a6:	f6 01       	movw	r30, r12
     6a8:	81 91       	ld	r24, Z+
     6aa:	6f 01       	movw	r12, r30
     6ac:	1f 92       	push	r1
     6ae:	8f 93       	push	r24
     6b0:	1f 93       	push	r17
     6b2:	0f 93       	push	r16
     6b4:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	mcp2515_request_to_send(0);
	
	printf("new message: \n\r");
	printf("message id: %d\n\r", msg.id);
	printf("message data length: %d\n\rmessage data: ", msg.length);
	for (int i = 0; i < msg.length; i++)
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	ce 14       	cp	r12, r14
     6c2:	df 04       	cpc	r13, r15
     6c4:	81 f7       	brne	.-32     	; 0x6a6 <can_transmit+0x9c>
	{
		printf("%d ", msg.data[i]);
	}
	printf("\n\n\r");
     6c6:	84 e8       	ldi	r24, 0x84	; 132
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	9f 93       	push	r25
     6cc:	8f 93       	push	r24
     6ce:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
}
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	4b c0       	rjmp	.+150    	; 0x76e <can_transmit+0x164>
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
	mcp2515_write(MCP_TXB0DLC, msg.length);
	for(uint8_t i = 0; i < (msg.length); i++){
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
	}
	mcp2515_request_to_send(0);
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <mcp2515_request_to_send>
	
	printf("new message: \n\r");
     6de:	87 e3       	ldi	r24, 0x37	; 55
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	printf("message id: %d\n\r", msg.id);
     6ea:	df 92       	push	r13
     6ec:	cf 92       	push	r12
     6ee:	87 e4       	ldi	r24, 0x47	; 71
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	printf("message data length: %d\n\rmessage data: ", msg.length);
     6fa:	ff 92       	push	r15
     6fc:	ef 92       	push	r14
     6fe:	88 e5       	ldi	r24, 0x58	; 88
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
     70a:	6e 01       	movw	r12, r28
     70c:	f5 e0       	ldi	r31, 0x05	; 5
     70e:	cf 0e       	add	r12, r31
     710:	d1 1c       	adc	r13, r1
     712:	ce 01       	movw	r24, r28
     714:	8e 0d       	add	r24, r14
     716:	9f 1d       	adc	r25, r15
     718:	9c 01       	movw	r18, r24
     71a:	2b 5f       	subi	r18, 0xFB	; 251
     71c:	3f 4f       	sbci	r19, 0xFF	; 255
     71e:	79 01       	movw	r14, r18
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0; i < msg.length; i++)
	{
		printf("%d ", msg.data[i]);
     72a:	00 e8       	ldi	r16, 0x80	; 128
     72c:	11 e0       	ldi	r17, 0x01	; 1
     72e:	bb cf       	rjmp	.-138    	; 0x6a6 <can_transmit+0x9c>
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
	mcp2515_write(MCP_TXB0DLC, msg.length);
	for(uint8_t i = 0; i < (msg.length); i++){
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
	}
	mcp2515_request_to_send(0);
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <mcp2515_request_to_send>
	
	printf("new message: \n\r");
     736:	87 e3       	ldi	r24, 0x37	; 55
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	9f 93       	push	r25
     73c:	8f 93       	push	r24
     73e:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	printf("message id: %d\n\r", msg.id);
     742:	df 92       	push	r13
     744:	cf 92       	push	r12
     746:	87 e4       	ldi	r24, 0x47	; 71
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	printf("message data length: %d\n\rmessage data: ", msg.length);
     752:	ff 92       	push	r15
     754:	ef 92       	push	r14
     756:	88 e5       	ldi	r24, 0x58	; 88
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	ac cf       	rjmp	.-168    	; 0x6c6 <can_transmit+0xbc>
	for (int i = 0; i < msg.length; i++)
	{
		printf("%d ", msg.data[i]);
	}
	printf("\n\n\r");
}
     76e:	2c 96       	adiw	r28, 0x0c	; 12
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	cf 90       	pop	r12
     78a:	08 95       	ret

0000078c <__vector_1>:

ISR(INT0_vect){
     78c:	1f 92       	push	r1
     78e:	0f 92       	push	r0
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	0f 92       	push	r0
     794:	11 24       	eor	r1, r1
     796:	2f 93       	push	r18
     798:	3f 93       	push	r19
     79a:	4f 93       	push	r20
     79c:	5f 93       	push	r21
     79e:	6f 93       	push	r22
     7a0:	7f 93       	push	r23
     7a2:	8f 93       	push	r24
     7a4:	9f 93       	push	r25
     7a6:	af 93       	push	r26
     7a8:	bf 93       	push	r27
     7aa:	ef 93       	push	r30
     7ac:	ff 93       	push	r31
	can_receive();
     7ae:	0e 94 31 02 	call	0x462	; 0x462 <can_receive>
}
     7b2:	ff 91       	pop	r31
     7b4:	ef 91       	pop	r30
     7b6:	bf 91       	pop	r27
     7b8:	af 91       	pop	r26
     7ba:	9f 91       	pop	r25
     7bc:	8f 91       	pop	r24
     7be:	7f 91       	pop	r23
     7c0:	6f 91       	pop	r22
     7c2:	5f 91       	pop	r21
     7c4:	4f 91       	pop	r20
     7c6:	3f 91       	pop	r19
     7c8:	2f 91       	pop	r18
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <calibrate_joystick_center>:
#include "adc.h"
#include "joystick.h"
#include "can.h"


int calibrate_joystick_center(uint8_t channel, int samples){
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	d8 2e       	mov	r13, r24
     7e4:	7b 01       	movw	r14, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e6:	2f ef       	ldi	r18, 0xFF	; 255
     7e8:	8f e7       	ldi	r24, 0x7F	; 127
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	21 50       	subi	r18, 0x01	; 1
     7ee:	80 40       	sbci	r24, 0x00	; 0
     7f0:	90 40       	sbci	r25, 0x00	; 0
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <calibrate_joystick_center+0x18>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <calibrate_joystick_center+0x22>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <calibrate_joystick_center+0x24>
	uint8_t pos = 0;
	int center = 0;
	_delay_ms(100);
	for(int i=0; i<samples; i++){
     7f8:	16 16       	cp	r1, r22
     7fa:	17 06       	cpc	r1, r23
     7fc:	74 f4       	brge	.+28     	; 0x81a <calibrate_joystick_center+0x46>
     7fe:	c0 e0       	ldi	r28, 0x00	; 0
     800:	d0 e0       	ldi	r29, 0x00	; 0
     802:	00 e0       	ldi	r16, 0x00	; 0
     804:	10 e0       	ldi	r17, 0x00	; 0
		pos = adc_read(channel);
     806:	8d 2d       	mov	r24, r13
     808:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <adc_read>
		center = center + (int)pos;
     80c:	08 0f       	add	r16, r24
     80e:	11 1d       	adc	r17, r1

int calibrate_joystick_center(uint8_t channel, int samples){
	uint8_t pos = 0;
	int center = 0;
	_delay_ms(100);
	for(int i=0; i<samples; i++){
     810:	21 96       	adiw	r28, 0x01	; 1
     812:	ec 16       	cp	r14, r28
     814:	fd 06       	cpc	r15, r29
     816:	b9 f7       	brne	.-18     	; 0x806 <calibrate_joystick_center+0x32>
     818:	02 c0       	rjmp	.+4      	; 0x81e <calibrate_joystick_center+0x4a>
#include "can.h"


int calibrate_joystick_center(uint8_t channel, int samples){
	uint8_t pos = 0;
	int center = 0;
     81a:	00 e0       	ldi	r16, 0x00	; 0
     81c:	10 e0       	ldi	r17, 0x00	; 0
	for(int i=0; i<samples; i++){
		pos = adc_read(channel);
		center = center + (int)pos;
	}
	center = center/samples;
	return center;
     81e:	c8 01       	movw	r24, r16
     820:	b7 01       	movw	r22, r14
     822:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__divmodhi4>
     826:	cb 01       	movw	r24, r22
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	08 95       	ret

00000838 <normalize_output_joystick>:

int normalize_output_joystick(uint8_t value, int center){
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	eb 01       	movw	r28, r22
	int position = 0;
	if((int)value <= center){
     846:	28 2f       	mov	r18, r24
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	62 17       	cp	r22, r18
     84c:	73 07       	cpc	r23, r19
     84e:	24 f1       	brlt	.+72     	; 0x898 <normalize_output_joystick+0x60>
		position = (((float)value/(float)center)*100)-100;
     850:	68 2f       	mov	r22, r24
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__floatunsisf>
     85c:	6b 01       	movw	r12, r22
     85e:	7c 01       	movw	r14, r24
     860:	be 01       	movw	r22, r28
     862:	dd 0f       	add	r29, r29
     864:	88 0b       	sbc	r24, r24
     866:	99 0b       	sbc	r25, r25
     868:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__floatsisf>
     86c:	9b 01       	movw	r18, r22
     86e:	ac 01       	movw	r20, r24
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	0e 94 b0 09 	call	0x1360	; 0x1360 <__divsf3>
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	48 ec       	ldi	r20, 0xC8	; 200
     87e:	52 e4       	ldi	r21, 0x42	; 66
     880:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__mulsf3>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	48 ec       	ldi	r20, 0xC8	; 200
     88a:	52 e4       	ldi	r21, 0x42	; 66
     88c:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     890:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fixsfsi>
     894:	cb 01       	movw	r24, r22
     896:	33 c0       	rjmp	.+102    	; 0x8fe <normalize_output_joystick+0xc6>
	}
	else if((int)value > center){
		position = ((((255-(float)value)/(255-(float) center))*(-100)))+100;
     898:	68 2f       	mov	r22, r24
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__floatunsisf>
     8a4:	9b 01       	movw	r18, r22
     8a6:	ac 01       	movw	r20, r24
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	8f e7       	ldi	r24, 0x7F	; 127
     8ae:	93 e4       	ldi	r25, 0x43	; 67
     8b0:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     8b4:	6b 01       	movw	r12, r22
     8b6:	7c 01       	movw	r14, r24
     8b8:	be 01       	movw	r22, r28
     8ba:	dd 0f       	add	r29, r29
     8bc:	88 0b       	sbc	r24, r24
     8be:	99 0b       	sbc	r25, r25
     8c0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__floatsisf>
     8c4:	9b 01       	movw	r18, r22
     8c6:	ac 01       	movw	r20, r24
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	8f e7       	ldi	r24, 0x7F	; 127
     8ce:	93 e4       	ldi	r25, 0x43	; 67
     8d0:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     8d4:	9b 01       	movw	r18, r22
     8d6:	ac 01       	movw	r20, r24
     8d8:	c7 01       	movw	r24, r14
     8da:	b6 01       	movw	r22, r12
     8dc:	0e 94 b0 09 	call	0x1360	; 0x1360 <__divsf3>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	48 ec       	ldi	r20, 0xC8	; 200
     8e6:	52 ec       	ldi	r21, 0xC2	; 194
     8e8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__mulsf3>
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	48 ec       	ldi	r20, 0xC8	; 200
     8f2:	52 e4       	ldi	r21, 0x42	; 66
     8f4:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     8f8:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fixsfsi>
     8fc:	cb 01       	movw	r24, r22
	}
	return position;
}
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	08 95       	ret

0000090c <get_button_status>:

int get_button_status(void){
	DDRD |= (0 << PD0);
     90c:	81 b3       	in	r24, 0x11	; 17
     90e:	81 bb       	out	0x11, r24	; 17
	int status = PIND & 0x01;
     910:	80 b3       	in	r24, 0x10	; 16
	return status;
}
     912:	81 70       	andi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	08 95       	ret

00000918 <send_joystick_status>:

void send_joystick_status(int h_pos, int v_pos, int b_stat, int h_center, int v_center){
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	2c 97       	sbiw	r28, 0x0c	; 12
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
     934:	36 2f       	mov	r19, r22
     936:	52 2f       	mov	r21, r18
     938:	60 2f       	mov	r22, r16
	can_msg msg;
	msg.id = 1;
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	09 2f       	mov	r16, r25
	msg.length = 5;
     93e:	95 e0       	ldi	r25, 0x05	; 5
     940:	e9 2e       	mov	r14, r25
	msg.data[0] = (char)h_pos;
	msg.data[1] = (char)v_pos;
	msg.data[2] = (char)b_stat;
	msg.data[3] = (char)h_center;
	msg.data[4] = (char)v_center;
	can_transmit(msg);
     942:	f1 2c       	mov	r15, r1
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	28 2f       	mov	r18, r24
     948:	7a 85       	ldd	r23, Y+10	; 0x0a
     94a:	8b 85       	ldd	r24, Y+11	; 0x0b
     94c:	9c 85       	ldd	r25, Y+12	; 0x0c
     94e:	0e 94 05 03 	call	0x60a	; 0x60a <can_transmit>
     952:	2c 96       	adiw	r28, 0x0c	; 12
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	08 95       	ret

0000096c <mcp2515_read>:
	if((value & MODE_MASK) != MODE_CONFIG){
		printf("MCP2515 is NOT in configuration mode after reset!\n");
	}
}

uint8_t mcp2515_read(uint8_t address){
     96c:	cf 93       	push	r28
     96e:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	PORTB &= ~(1<<PB4);
     970:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_READ);
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     978:	8c 2f       	mov	r24, r28
     97a:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	result = SPI_MasterReceive();
     97e:	0e 94 13 09 	call	0x1226	; 0x1226 <SPI_MasterReceive>
	
	PORTB |= (1<<PB4);
     982:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	d8 2f       	mov	r29, r24
     98e:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4);
     990:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_WRITE);
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     998:	8d 2f       	mov	r24, r29
     99a:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     99e:	8c 2f       	mov	r24, r28
     9a0:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     9a4:	c4 9a       	sbi	0x18, 4	; 24
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <mcp2515_reset>:

void mcp2515_reset(void){
	PORTB &= ~(1<<PB4);
     9ac:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_RESET);
     9ae:	80 ec       	ldi	r24, 0xC0	; 192
     9b0:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     9b4:	c4 9a       	sbi	0x18, 4	; 24
     9b6:	08 95       	ret

000009b8 <mcp2515_init>:
int status;

void mcp2515_init(void){
	uint8_t value;

	SPI_MasterInit();
     9b8:	0e 94 04 09 	call	0x1208	; 0x1208 <SPI_MasterInit>
	mcp2515_reset();
     9bc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <mcp2515_reset>
	
	value = mcp2515_read(MCP_CANSTAT);
     9c0:	8e e0       	ldi	r24, 0x0E	; 14
     9c2:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     9c6:	80 7e       	andi	r24, 0xE0	; 224
     9c8:	80 38       	cpi	r24, 0x80	; 128
     9ca:	21 f0       	breq	.+8      	; 0x9d4 <mcp2515_init+0x1c>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     9cc:	88 e8       	ldi	r24, 0x88	; 136
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <puts>
     9d4:	08 95       	ret

000009d6 <mcp2515_request_to_send>:
	PORTB |= (1<<PB4);
}


void mcp2515_request_to_send(uint8_t buffer){
	PORTB &= ~(1<<PB4);
     9d6:	c4 98       	cbi	0x18, 4	; 24
	switch(buffer){
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	51 f0       	breq	.+20     	; 0x9f0 <mcp2515_request_to_send+0x1a>
     9dc:	28 f0       	brcs	.+10     	; 0x9e8 <mcp2515_request_to_send+0x12>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	59 f0       	breq	.+22     	; 0x9f8 <mcp2515_request_to_send+0x22>
     9e2:	89 30       	cpi	r24, 0x09	; 9
     9e4:	69 f0       	breq	.+26     	; 0xa00 <mcp2515_request_to_send+0x2a>
     9e6:	10 c0       	rjmp	.+32     	; 0xa08 <mcp2515_request_to_send+0x32>
	case 0:
		SPI_MasterTransmit(MCP_RTS_TX0);
     9e8:	81 e8       	ldi	r24, 0x81	; 129
     9ea:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	break;
     9ee:	14 c0       	rjmp	.+40     	; 0xa18 <mcp2515_request_to_send+0x42>
	case 1:
		SPI_MasterTransmit(MCP_RTS_TX1);
     9f0:	82 e8       	ldi	r24, 0x82	; 130
     9f2:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	break;
     9f6:	10 c0       	rjmp	.+32     	; 0xa18 <mcp2515_request_to_send+0x42>
	case 2:
		SPI_MasterTransmit(MCP_RTS_TX2);
     9f8:	84 e8       	ldi	r24, 0x84	; 132
     9fa:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	break;
     9fe:	0c c0       	rjmp	.+24     	; 0xa18 <mcp2515_request_to_send+0x42>
	case 9:
		SPI_MasterTransmit(MCP_RTS_ALL);
     a00:	87 e8       	ldi	r24, 0x87	; 135
     a02:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	break;
     a06:	08 c0       	rjmp	.+16     	; 0xa18 <mcp2515_request_to_send+0x42>
	default:
		printf("Not a valid entry\n\r try again");
     a08:	8a eb       	ldi	r24, 0xBA	; 186
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	9f 93       	push	r25
     a0e:	8f 93       	push	r24
     a10:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	break;
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
	}
	PORTB |= (1<<PB4);
     a18:	c4 9a       	sbi	0x18, 4	; 24
     a1a:	08 95       	ret

00000a1c <mcp2515_read_status>:
}

uint8_t mcp2515_read_status(void){
	uint8_t result;
	PORTB &= ~(1<<PB4);
     a1c:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_READ_STATUS);
     a1e:	80 ea       	ldi	r24, 0xA0	; 160
     a20:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	result = SPI_MasterReceive();
     a24:	0e 94 13 09 	call	0x1226	; 0x1226 <SPI_MasterReceive>
	PORTB |= (1<<PB4);
     a28:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     a2a:	08 95       	ret

00000a2c <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t data_mask, uint8_t data){
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	18 2f       	mov	r17, r24
     a34:	d6 2f       	mov	r29, r22
     a36:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);
     a38:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_BITMOD);
     a3a:	85 e0       	ldi	r24, 0x05	; 5
     a3c:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     a40:	81 2f       	mov	r24, r17
     a42:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	SPI_MasterTransmit(data_mask);
     a46:	8d 2f       	mov	r24, r29
     a48:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     a4c:	8c 2f       	mov	r24, r28
     a4e:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     a52:	c4 9a       	sbi	0x18, 4	; 24
}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	08 95       	ret

00000a5c <display_main_menu>:
	display_main_menu();
	navigate_menu();
}

void display_main_menu(void){
	OLED_clear();
     a5c:	0e 94 fb 07 	call	0xff6	; 0xff6 <OLED_clear>
	OLED_pos(0,0);
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
	OLED_print('>');
     a68:	8e e3       	ldi	r24, 0x3E	; 62
     a6a:	0e 94 b5 08 	call	0x116a	; 0x116a <OLED_print>
	OLED_pos(0, 15);
     a6e:	6f e0       	ldi	r22, 0x0F	; 15
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
	OLED_print_string("Start Game");
     a76:	88 ed       	ldi	r24, 0xD8	; 216
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
	OLED_pos(2, 15);
     a7e:	6f e0       	ldi	r22, 0x0F	; 15
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
	OLED_print_string("Brightness");
     a86:	83 ee       	ldi	r24, 0xE3	; 227
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
	OLED_pos(4, 15);
     a8e:	6f e0       	ldi	r22, 0x0F	; 15
     a90:	84 e0       	ldi	r24, 0x04	; 4
     a92:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
	OLED_print_string("Instructions");
     a96:	8e ee       	ldi	r24, 0xEE	; 238
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
	OLED_pos(6, 15);
     a9e:	6f e0       	ldi	r22, 0x0F	; 15
     aa0:	86 e0       	ldi	r24, 0x06	; 6
     aa2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
	OLED_print_string("Display Center");
     aa6:	8b ef       	ldi	r24, 0xFB	; 251
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
	currentRow = 0;
     aae:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <currentRow+0x1>
     ab2:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <currentRow>
     ab6:	08 95       	ret

00000ab8 <select_brightness>:
	
	navigate_menu();
}

void select_brightness(int row){
	if (row == 2){
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	91 05       	cpc	r25, r1
     abc:	39 f4       	brne	.+14     	; 0xacc <select_brightness+0x14>
		OLED_write_command(0x81);
     abe:	81 e8       	ldi	r24, 0x81	; 129
     ac0:	0e 94 af 08 	call	0x115e	; 0x115e <OLED_write_command>
		OLED_write_command(0x10);
     ac4:	80 e1       	ldi	r24, 0x10	; 16
     ac6:	0e 94 af 08 	call	0x115e	; 0x115e <OLED_write_command>
     aca:	08 95       	ret
	}
	else if (row == 4){
     acc:	84 30       	cpi	r24, 0x04	; 4
     ace:	91 05       	cpc	r25, r1
     ad0:	39 f4       	brne	.+14     	; 0xae0 <select_brightness+0x28>
		OLED_write_command(0x81);
     ad2:	81 e8       	ldi	r24, 0x81	; 129
     ad4:	0e 94 af 08 	call	0x115e	; 0x115e <OLED_write_command>
		OLED_write_command(0x50);
     ad8:	80 e5       	ldi	r24, 0x50	; 80
     ada:	0e 94 af 08 	call	0x115e	; 0x115e <OLED_write_command>
     ade:	08 95       	ret
	}
	else if (row == 6){
     ae0:	06 97       	sbiw	r24, 0x06	; 6
     ae2:	31 f4       	brne	.+12     	; 0xaf0 <select_brightness+0x38>
		OLED_write_command(0x81);
     ae4:	81 e8       	ldi	r24, 0x81	; 129
     ae6:	0e 94 af 08 	call	0x115e	; 0x115e <OLED_write_command>
		OLED_write_command(0xa0);
     aea:	80 ea       	ldi	r24, 0xA0	; 160
     aec:	0e 94 af 08 	call	0x115e	; 0x115e <OLED_write_command>
     af0:	08 95       	ret

00000af2 <start_game>:
}

void start_game(void){
	while(1){
		int valueH = adc_read(HORIZONTAL);
		printf("adc horizontal value: %d\n\r", valueH);
     af2:	0f 2e       	mov	r0, r31
     af4:	fa e0       	ldi	r31, 0x0A	; 10
     af6:	ef 2e       	mov	r14, r31
     af8:	f2 e0       	ldi	r31, 0x02	; 2
     afa:	ff 2e       	mov	r15, r31
     afc:	f0 2d       	mov	r31, r0
	}
}

void start_game(void){
	while(1){
		int valueH = adc_read(HORIZONTAL);
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <adc_read>
     b04:	c8 2e       	mov	r12, r24
     b06:	d1 2c       	mov	r13, r1
		printf("adc horizontal value: %d\n\r", valueH);
     b08:	1f 92       	push	r1
     b0a:	8f 93       	push	r24
     b0c:	ff 92       	push	r15
     b0e:	ef 92       	push	r14
     b10:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
		int valueV = adc_read(VERTICAL);
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <adc_read>
     b1a:	c8 2f       	mov	r28, r24
		int button_status = get_button_status();
     b1c:	0e 94 86 04 	call	0x90c	; 0x90c <get_button_status>
		send_joystick_status(valueH, valueV, button_status, centerX, centerY);
     b20:	00 91 80 03 	lds	r16, 0x0380	; 0x800380 <centerY>
     b24:	10 91 81 03 	lds	r17, 0x0381	; 0x800381 <centerY+0x1>
     b28:	20 91 82 03 	lds	r18, 0x0382	; 0x800382 <centerX>
     b2c:	30 91 83 03 	lds	r19, 0x0383	; 0x800383 <centerX+0x1>
     b30:	6c 2f       	mov	r22, r28
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	ac 01       	movw	r20, r24
     b36:	c6 01       	movw	r24, r12
     b38:	0e 94 8c 04 	call	0x918	; 0x918 <send_joystick_status>
     b3c:	83 ed       	ldi	r24, 0xD3	; 211
     b3e:	90 e3       	ldi	r25, 0x30	; 48
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <start_game+0x4e>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <start_game+0x54>
     b46:	00 00       	nop
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	d6 cf       	rjmp	.-84     	; 0xafe <start_game+0xc>

00000b52 <select_item>:
			}
		}
	}
}

void select_item(int row){
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	2a 97       	sbiw	r28, 0x0a	; 10
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	8c 01       	movw	r16, r24
	OLED_clear();
     b70:	0e 94 fb 07 	call	0xff6	; 0xff6 <OLED_clear>
	printf("row %d\r\n", row);	
     b74:	1f 93       	push	r17
     b76:	0f 93       	push	r16
     b78:	8f e2       	ldi	r24, 0x2F	; 47
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
	if(row == 0){
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	01 15       	cp	r16, r1
     b8e:	11 05       	cpc	r17, r1
     b90:	c1 f4       	brne	.+48     	; 0xbc2 <select_item+0x70>
		playing = 1;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <__data_end+0x1>
     b9a:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end>
		//start game
		OLED_pos(0,15);
     b9e:	6f e0       	ldi	r22, 0x0F	; 15
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("READY SET GO!");
     ba6:	85 e2       	ldi	r24, 0x25	; 37
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(2,15);
     bae:	6f e0       	ldi	r22, 0x0F	; 15
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("PING PONG TIME");
     bb6:	83 e3       	ldi	r24, 0x33	; 51
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		start_game();
     bbe:	0e 94 79 05 	call	0xaf2	; 0xaf2 <start_game>
	}
	else if (row == 2){
     bc2:	02 30       	cpi	r16, 0x02	; 2
     bc4:	11 05       	cpc	r17, r1
     bc6:	09 f5       	brne	.+66     	; 0xc0a <select_item+0xb8>
		//change brightness
		OLED_pos(0,15);
     bc8:	6f e0       	ldi	r22, 0x0F	; 15
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("Brightness");
     bd0:	83 ee       	ldi	r24, 0xE3	; 227
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(2,15);
     bd8:	6f e0       	ldi	r22, 0x0F	; 15
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("LOW");
     be0:	82 e4       	ldi	r24, 0x42	; 66
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(4,15);
     be8:	6f e0       	ldi	r22, 0x0F	; 15
     bea:	84 e0       	ldi	r24, 0x04	; 4
     bec:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("MEDIUM");
     bf0:	86 e4       	ldi	r24, 0x46	; 70
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(6,15);
     bf8:	6f e0       	ldi	r22, 0x0F	; 15
     bfa:	86 e0       	ldi	r24, 0x06	; 6
     bfc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("HIGH");
     c00:	8d e4       	ldi	r24, 0x4D	; 77
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
     c08:	a7 c0       	rjmp	.+334    	; 0xd58 <select_item+0x206>
	}
	else if (row == 4){
     c0a:	04 30       	cpi	r16, 0x04	; 4
     c0c:	11 05       	cpc	r17, r1
     c0e:	09 f0       	breq	.+2      	; 0xc12 <select_item+0xc0>
     c10:	41 c0       	rjmp	.+130    	; 0xc94 <select_item+0x142>
		//Instructions
		OLED_pos(0,0);
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("0.Joy right:");
     c1a:	82 e5       	ldi	r24, 0x52	; 82
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(1,15);
     c22:	6f e0       	ldi	r22, 0x0F	; 15
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("select item");
     c2a:	8f e5       	ldi	r24, 0x5F	; 95
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(2,0);
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("1.Start game");
     c3a:	8b e6       	ldi	r24, 0x6B	; 107
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(3,0);
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("2.Play");
     c4a:	88 e7       	ldi	r24, 0x78	; 120
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(4,0);
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	84 e0       	ldi	r24, 0x04	; 4
     c56:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("3.If score:");
     c5a:	8f e7       	ldi	r24, 0x7F	; 127
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(5,15);
     c62:	6f e0       	ldi	r22, 0x0F	; 15
     c64:	85 e0       	ldi	r24, 0x05	; 5
     c66:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("press joy");
     c6a:	8b e8       	ldi	r24, 0x8B	; 139
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(6,0);
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	86 e0       	ldi	r24, 0x06	; 6
     c76:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("4.If game over:");
     c7a:	85 e9       	ldi	r24, 0x95	; 149
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(7,15);
     c82:	6f e0       	ldi	r22, 0x0F	; 15
     c84:	87 e0       	ldi	r24, 0x07	; 7
     c86:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("reset");
     c8a:	85 ea       	ldi	r24, 0xA5	; 165
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
     c92:	62 c0       	rjmp	.+196    	; 0xd58 <select_item+0x206>
	}
	else if (row == 6){
     c94:	06 30       	cpi	r16, 0x06	; 6
     c96:	11 05       	cpc	r17, r1
     c98:	09 f0       	breq	.+2      	; 0xc9c <select_item+0x14a>
     c9a:	5e c0       	rjmp	.+188    	; 0xd58 <select_item+0x206>
		//calibrate joystick
		char buffer[10];
		OLED_pos(0,15);
     c9c:	6f e0       	ldi	r22, 0x0F	; 15
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("Center values");
     ca4:	8b ea       	ldi	r24, 0xAB	; 171
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		//centerX = calibrate_joystick_center(HORIZONTAL, 10);
		//centerY = calibrate_joystick_center(VERTICAL, 10);
		printf("x: %d, y: %d\n\r", centerX, centerY);
     cac:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <centerY+0x1>
     cb0:	8f 93       	push	r24
     cb2:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <centerY>
     cb6:	8f 93       	push	r24
     cb8:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <centerX+0x1>
     cbc:	8f 93       	push	r24
     cbe:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <centerX>
     cc2:	8f 93       	push	r24
     cc4:	89 eb       	ldi	r24, 0xB9	; 185
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
		OLED_pos(2,15);
     cd0:	6f e0       	ldi	r22, 0x0F	; 15
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("X center: ");
     cd8:	88 ec       	ldi	r24, 0xC8	; 200
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(3, 15);
     ce0:	6f e0       	ldi	r22, 0x0F	; 15
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		sprintf(buffer, "%d", centerX);
     ce8:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <centerX+0x1>
     cec:	8f 93       	push	r24
     cee:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <centerX>
     cf2:	8f 93       	push	r24
     cf4:	0f 2e       	mov	r0, r31
     cf6:	f3 ed       	ldi	r31, 0xD3	; 211
     cf8:	ef 2e       	mov	r14, r31
     cfa:	f2 e0       	ldi	r31, 0x02	; 2
     cfc:	ff 2e       	mov	r15, r31
     cfe:	f0 2d       	mov	r31, r0
     d00:	ff 92       	push	r15
     d02:	ef 92       	push	r14
     d04:	8e 01       	movw	r16, r28
     d06:	0f 5f       	subi	r16, 0xFF	; 255
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	1f 93       	push	r17
     d0c:	0f 93       	push	r16
     d0e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <sprintf>
		OLED_print_string(buffer);
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(4,15);
     d18:	6f e0       	ldi	r22, 0x0F	; 15
     d1a:	84 e0       	ldi	r24, 0x04	; 4
     d1c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		OLED_print_string("Y center: ");
     d20:	86 ed       	ldi	r24, 0xD6	; 214
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
		OLED_pos(5,15);
     d28:	6f e0       	ldi	r22, 0x0F	; 15
     d2a:	85 e0       	ldi	r24, 0x05	; 5
     d2c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
		sprintf(buffer, "%d", centerY);
     d30:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <centerY+0x1>
     d34:	8f 93       	push	r24
     d36:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <centerY>
     d3a:	8f 93       	push	r24
     d3c:	ff 92       	push	r15
     d3e:	ef 92       	push	r14
     d40:	1f 93       	push	r17
     d42:	0f 93       	push	r16
     d44:	0e 94 0c 0c 	call	0x1818	; 0x1818 <sprintf>
		OLED_print_string(buffer);
     d48:	c8 01       	movw	r24, r16
     d4a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <OLED_print_string>
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
	}
	
	navigate_menu();
     d58:	0e 94 bb 06 	call	0xd76	; 0xd76 <navigate_menu>
}
     d5c:	2a 96       	adiw	r28, 0x0a	; 10
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	08 95       	ret

00000d76 <navigate_menu>:
	OLED_pos(6, 15);
	OLED_print_string("Display Center");
	currentRow = 0;
}

void navigate_menu(void){
     d76:	6f 92       	push	r6
     d78:	7f 92       	push	r7
     d7a:	8f 92       	push	r8
     d7c:	9f 92       	push	r9
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
	if(!playing){
     d92:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <__data_end>
     d96:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <__data_end+0x1>
     d9a:	89 2b       	or	r24, r25
     d9c:	09 f0       	breq	.+2      	; 0xda0 <navigate_menu+0x2a>
     d9e:	05 c1       	rjmp	.+522    	; 0xfaa <navigate_menu+0x234>
	printf("current row before while: %d\r\n", currentRow);
     da0:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <currentRow+0x1>
     da4:	8f 93       	push	r24
     da6:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <currentRow>
     daa:	8f 93       	push	r24
     dac:	81 ee       	ldi	r24, 0xE1	; 225
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	9f 93       	push	r25
     db2:	8f 93       	push	r24
     db4:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
		while(1){
			uint8_t x = adc_read(0);
			uint8_t y = adc_read(1);
			printf("adc horizontal: %d, adc vertical: %d\n\r", x, y);
     dc0:	c0 e0       	ldi	r28, 0x00	; 0
     dc2:	d3 e0       	ldi	r29, 0x03	; 3
				display_main_menu();
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(x, centerX) > 90){
				printf("current row %d\r\n", currentRow);
     dc4:	0f 2e       	mov	r0, r31
     dc6:	f7 e2       	ldi	r31, 0x27	; 39
     dc8:	af 2e       	mov	r10, r31
     dca:	f3 e0       	ldi	r31, 0x03	; 3
     dcc:	bf 2e       	mov	r11, r31
     dce:	f0 2d       	mov	r31, r0
				//}
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(y, centerY) > 90){
				OLED_clear_position(currentRow, 0);
     dd0:	04 e8       	ldi	r16, 0x84	; 132
     dd2:	13 e0       	ldi	r17, 0x03	; 3
				currentRow = currentRow - 2;
				if(currentRow < 0){
					currentRow = 6;
				}
				printf("current row after moving up: %d\r\n", currentRow);
     dd4:	0f 2e       	mov	r0, r31
     dd6:	f8 e3       	ldi	r31, 0x38	; 56
     dd8:	cf 2e       	mov	r12, r31
     dda:	f3 e0       	ldi	r31, 0x03	; 3
     ddc:	df 2e       	mov	r13, r31
     dde:	f0 2d       	mov	r31, r0
				OLED_clear_position(currentRow, 0);
				currentRow = currentRow + 2;
				if(currentRow > 6){
					currentRow = 0;
				}
				printf("current row after moving down: %d\r\n", currentRow);
     de0:	0f 2e       	mov	r0, r31
     de2:	fa e5       	ldi	r31, 0x5A	; 90
     de4:	ef 2e       	mov	r14, r31
     de6:	f3 e0       	ldi	r31, 0x03	; 3
     de8:	ff 2e       	mov	r15, r31
     dea:	f0 2d       	mov	r31, r0
		
			if(normalize_output_joystick(y, centerY) > 90){
				OLED_clear_position(currentRow, 0);
				currentRow = currentRow - 2;
				if(currentRow < 0){
					currentRow = 6;
     dec:	0f 2e       	mov	r0, r31
     dee:	f6 e0       	ldi	r31, 0x06	; 6
     df0:	8f 2e       	mov	r8, r31
     df2:	91 2c       	mov	r9, r1
     df4:	f0 2d       	mov	r31, r0

void navigate_menu(void){
	if(!playing){
	printf("current row before while: %d\r\n", currentRow);
		while(1){
			uint8_t x = adc_read(0);
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <adc_read>
     dfc:	68 2e       	mov	r6, r24
			uint8_t y = adc_read(1);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <adc_read>
     e04:	78 2e       	mov	r7, r24
			printf("adc horizontal: %d, adc vertical: %d\n\r", x, y);
     e06:	1f 92       	push	r1
     e08:	8f 93       	push	r24
     e0a:	1f 92       	push	r1
     e0c:	6f 92       	push	r6
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
			if(normalize_output_joystick(x, centerX) < -90){
     e16:	60 91 82 03 	lds	r22, 0x0382	; 0x800382 <centerX>
     e1a:	70 91 83 03 	lds	r23, 0x0383	; 0x800383 <centerX+0x1>
     e1e:	86 2d       	mov	r24, r6
     e20:	0e 94 1c 04 	call	0x838	; 0x838 <normalize_output_joystick>
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	86 3a       	cpi	r24, 0xA6	; 166
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	5c f4       	brge	.+22     	; 0xe4c <navigate_menu+0xd6>
				display_main_menu();
     e36:	0e 94 2e 05 	call	0xa5c	; 0xa5c <display_main_menu>
     e3a:	ff e3       	ldi	r31, 0x3F	; 63
     e3c:	2d e0       	ldi	r18, 0x0D	; 13
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	f1 50       	subi	r31, 0x01	; 1
     e42:	20 40       	sbci	r18, 0x00	; 0
     e44:	80 40       	sbci	r24, 0x00	; 0
     e46:	e1 f7       	brne	.-8      	; 0xe40 <navigate_menu+0xca>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <navigate_menu+0xd4>
     e4a:	00 00       	nop
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(x, centerX) > 90){
     e4c:	60 91 82 03 	lds	r22, 0x0382	; 0x800382 <centerX>
     e50:	70 91 83 03 	lds	r23, 0x0383	; 0x800383 <centerX+0x1>
     e54:	86 2d       	mov	r24, r6
     e56:	0e 94 1c 04 	call	0x838	; 0x838 <normalize_output_joystick>
     e5a:	8b 35       	cpi	r24, 0x5B	; 91
     e5c:	91 05       	cpc	r25, r1
     e5e:	ec f0       	brlt	.+58     	; 0xe9a <navigate_menu+0x124>
				printf("current row %d\r\n", currentRow);
     e60:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <currentRow+0x1>
     e64:	8f 93       	push	r24
     e66:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <currentRow>
     e6a:	8f 93       	push	r24
     e6c:	bf 92       	push	r11
     e6e:	af 92       	push	r10
     e70:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
				//if(brightness_subMenu){
				//	select_brightness(currentRow);
				//}
				//else {
					select_item(currentRow);
     e74:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <currentRow>
     e78:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <currentRow+0x1>
     e7c:	0e 94 a9 05 	call	0xb52	; 0xb52 <select_item>
     e80:	9f e3       	ldi	r25, 0x3F	; 63
     e82:	ed e0       	ldi	r30, 0x0D	; 13
     e84:	f3 e0       	ldi	r31, 0x03	; 3
     e86:	91 50       	subi	r25, 0x01	; 1
     e88:	e0 40       	sbci	r30, 0x00	; 0
     e8a:	f0 40       	sbci	r31, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <navigate_menu+0x110>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <navigate_menu+0x11a>
     e90:	00 00       	nop
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
				//}
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(y, centerY) > 90){
     e9a:	60 91 80 03 	lds	r22, 0x0380	; 0x800380 <centerY>
     e9e:	70 91 81 03 	lds	r23, 0x0381	; 0x800381 <centerY+0x1>
     ea2:	87 2d       	mov	r24, r7
     ea4:	0e 94 1c 04 	call	0x838	; 0x838 <normalize_output_joystick>
     ea8:	8b 35       	cpi	r24, 0x5B	; 91
     eaa:	91 05       	cpc	r25, r1
     eac:	9c f1       	brlt	.+102    	; 0xf14 <navigate_menu+0x19e>
				OLED_clear_position(currentRow, 0);
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	f8 01       	movw	r30, r16
     eb2:	80 81       	ld	r24, Z
     eb4:	0e 94 ef 08 	call	0x11de	; 0x11de <OLED_clear_position>
				currentRow = currentRow - 2;
     eb8:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <currentRow>
     ebc:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <currentRow+0x1>
     ec0:	02 97       	sbiw	r24, 0x02	; 2
				if(currentRow < 0){
     ec2:	2a f0       	brmi	.+10     	; 0xece <navigate_menu+0x158>
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(y, centerY) > 90){
				OLED_clear_position(currentRow, 0);
				currentRow = currentRow - 2;
     ec4:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <currentRow+0x1>
     ec8:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <currentRow>
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <navigate_menu+0x160>
				if(currentRow < 0){
					currentRow = 6;
     ece:	90 92 85 03 	sts	0x0385, r9	; 0x800385 <currentRow+0x1>
     ed2:	80 92 84 03 	sts	0x0384, r8	; 0x800384 <currentRow>
				}
				printf("current row after moving up: %d\r\n", currentRow);
     ed6:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <currentRow+0x1>
     eda:	8f 93       	push	r24
     edc:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <currentRow>
     ee0:	8f 93       	push	r24
     ee2:	df 92       	push	r13
     ee4:	cf 92       	push	r12
     ee6:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
				OLED_pos(currentRow, 0);
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	f8 01       	movw	r30, r16
     eee:	80 81       	ld	r24, Z
     ef0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
				OLED_print('>');
     ef4:	8e e3       	ldi	r24, 0x3E	; 62
     ef6:	0e 94 b5 08 	call	0x116a	; 0x116a <OLED_print>
     efa:	ff e3       	ldi	r31, 0x3F	; 63
     efc:	2d e0       	ldi	r18, 0x0D	; 13
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	f1 50       	subi	r31, 0x01	; 1
     f02:	20 40       	sbci	r18, 0x00	; 0
     f04:	80 40       	sbci	r24, 0x00	; 0
     f06:	e1 f7       	brne	.-8      	; 0xf00 <navigate_menu+0x18a>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <navigate_menu+0x194>
     f0a:	00 00       	nop
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(y, centerY) < -90){
     f14:	60 91 80 03 	lds	r22, 0x0380	; 0x800380 <centerY>
     f18:	70 91 81 03 	lds	r23, 0x0381	; 0x800381 <centerY+0x1>
     f1c:	87 2d       	mov	r24, r7
     f1e:	0e 94 1c 04 	call	0x838	; 0x838 <normalize_output_joystick>
     f22:	86 3a       	cpi	r24, 0xA6	; 166
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	ac f5       	brge	.+106    	; 0xf92 <navigate_menu+0x21c>
				OLED_clear_position(currentRow, 0);
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	f8 01       	movw	r30, r16
     f2c:	80 81       	ld	r24, Z
     f2e:	0e 94 ef 08 	call	0x11de	; 0x11de <OLED_clear_position>
				currentRow = currentRow + 2;
     f32:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <currentRow>
     f36:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <currentRow+0x1>
     f3a:	02 96       	adiw	r24, 0x02	; 2
				if(currentRow > 6){
     f3c:	87 30       	cpi	r24, 0x07	; 7
     f3e:	91 05       	cpc	r25, r1
     f40:	2c f4       	brge	.+10     	; 0xf4c <navigate_menu+0x1d6>
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(y, centerY) < -90){
				OLED_clear_position(currentRow, 0);
				currentRow = currentRow + 2;
     f42:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <currentRow+0x1>
     f46:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <currentRow>
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <navigate_menu+0x1de>
				if(currentRow > 6){
					currentRow = 0;
     f4c:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <currentRow+0x1>
     f50:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <currentRow>
				}
				printf("current row after moving down: %d\r\n", currentRow);
     f54:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <currentRow+0x1>
     f58:	8f 93       	push	r24
     f5a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <currentRow>
     f5e:	8f 93       	push	r24
     f60:	ff 92       	push	r15
     f62:	ef 92       	push	r14
     f64:	0e 94 c6 0b 	call	0x178c	; 0x178c <printf>
				OLED_pos(currentRow, 0);
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	f8 01       	movw	r30, r16
     f6c:	80 81       	ld	r24, Z
     f6e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
				OLED_print('>');
     f72:	8e e3       	ldi	r24, 0x3E	; 62
     f74:	0e 94 b5 08 	call	0x116a	; 0x116a <OLED_print>
     f78:	ff e3       	ldi	r31, 0x3F	; 63
     f7a:	2d e0       	ldi	r18, 0x0D	; 13
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	f1 50       	subi	r31, 0x01	; 1
     f80:	20 40       	sbci	r18, 0x00	; 0
     f82:	80 40       	sbci	r24, 0x00	; 0
     f84:	e1 f7       	brne	.-8      	; 0xf7e <navigate_menu+0x208>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <navigate_menu+0x212>
     f88:	00 00       	nop
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
				_delay_ms(1000);
			}
			
			if(!get_button_status()){
     f92:	0e 94 86 04 	call	0x90c	; 0x90c <get_button_status>
     f96:	89 2b       	or	r24, r25
     f98:	09 f0       	breq	.+2      	; 0xf9c <navigate_menu+0x226>
     f9a:	2d cf       	rjmp	.-422    	; 0xdf6 <navigate_menu+0x80>
				select_brightness(currentRow);
     f9c:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <currentRow>
     fa0:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <currentRow+0x1>
     fa4:	0e 94 5c 05 	call	0xab8	; 0xab8 <select_brightness>
     fa8:	26 cf       	rjmp	.-436    	; 0xdf6 <navigate_menu+0x80>
			}
		}
	}
}
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	bf 90       	pop	r11
     fbc:	af 90       	pop	r10
     fbe:	9f 90       	pop	r9
     fc0:	8f 90       	pop	r8
     fc2:	7f 90       	pop	r7
     fc4:	6f 90       	pop	r6
     fc6:	08 95       	ret

00000fc8 <menu_init>:
int currentRow;
int playing = 0;
//static int brightness_subMenu = 0;

void menu_init(void){
	centerX = calibrate_joystick_center(0, 10);
     fc8:	6a e0       	ldi	r22, 0x0A	; 10
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <calibrate_joystick_center>
     fd2:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <centerX+0x1>
     fd6:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <centerX>
	centerY = calibrate_joystick_center(1, 10);
     fda:	6a e0       	ldi	r22, 0x0A	; 10
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <calibrate_joystick_center>
     fe4:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <centerY+0x1>
     fe8:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <centerY>
	display_main_menu();
     fec:	0e 94 2e 05 	call	0xa5c	; 0xa5c <display_main_menu>
	navigate_menu();
     ff0:	0e 94 bb 06 	call	0xd76	; 0xd76 <navigate_menu>
     ff4:	08 95       	ret

00000ff6 <OLED_clear>:
void OLED_write_command(char c){
	oled_command_reg[0] = c;
}

void OLED_write_data(char c){
	oled_data_reg[0] = c;
     ff6:	20 eb       	ldi	r18, 0xB0	; 176
     ff8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
     ffc:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1000:	20 83       	st	Z, r18
    1002:	80 e8       	ldi	r24, 0x80	; 128
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_data_reg>
    100a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_data_reg+0x1>
    100e:	10 82       	st	Z, r1
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	c9 f7       	brne	.-14     	; 0x1006 <OLED_clear+0x10>
    1014:	2f 5f       	subi	r18, 0xFF	; 255
    1016:	28 3b       	cpi	r18, 0xB8	; 184
    1018:	79 f7       	brne	.-34     	; 0xff8 <OLED_clear+0x2>
    101a:	08 95       	ret

0000101c <OLED_init>:
    101c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1020:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1024:	8e ea       	ldi	r24, 0xAE	; 174
    1026:	80 83       	st	Z, r24
    1028:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    102c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1030:	81 ea       	ldi	r24, 0xA1	; 161
    1032:	80 83       	st	Z, r24
    1034:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1038:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    103c:	8a ed       	ldi	r24, 0xDA	; 218
    103e:	80 83       	st	Z, r24
    1040:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1044:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1048:	82 e1       	ldi	r24, 0x12	; 18
    104a:	80 83       	st	Z, r24
    104c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1050:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1054:	88 ec       	ldi	r24, 0xC8	; 200
    1056:	80 83       	st	Z, r24
    1058:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    105c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1060:	88 ea       	ldi	r24, 0xA8	; 168
    1062:	80 83       	st	Z, r24
    1064:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1068:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    106c:	8f e3       	ldi	r24, 0x3F	; 63
    106e:	80 83       	st	Z, r24
    1070:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1074:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1078:	85 ed       	ldi	r24, 0xD5	; 213
    107a:	80 83       	st	Z, r24
    107c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1080:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1084:	80 e8       	ldi	r24, 0x80	; 128
    1086:	80 83       	st	Z, r24
    1088:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    108c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1090:	81 e8       	ldi	r24, 0x81	; 129
    1092:	80 83       	st	Z, r24
    1094:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1098:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    109c:	80 e3       	ldi	r24, 0x30	; 48
    109e:	80 83       	st	Z, r24
    10a0:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    10a4:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    10a8:	99 ed       	ldi	r25, 0xD9	; 217
    10aa:	90 83       	st	Z, r25
    10ac:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    10b0:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    10b4:	91 e2       	ldi	r25, 0x21	; 33
    10b6:	90 83       	st	Z, r25
    10b8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    10bc:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    10c0:	90 e2       	ldi	r25, 0x20	; 32
    10c2:	90 83       	st	Z, r25
    10c4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    10c8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    10cc:	92 e0       	ldi	r25, 0x02	; 2
    10ce:	90 83       	st	Z, r25
    10d0:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    10d4:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    10d8:	9b ed       	ldi	r25, 0xDB	; 219
    10da:	90 83       	st	Z, r25
    10dc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    10e0:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    10e4:	80 83       	st	Z, r24
    10e6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    10ea:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    10ee:	8d ea       	ldi	r24, 0xAD	; 173
    10f0:	80 83       	st	Z, r24
    10f2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    10f6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    10fa:	10 82       	st	Z, r1
    10fc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1100:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1104:	84 ea       	ldi	r24, 0xA4	; 164
    1106:	80 83       	st	Z, r24
    1108:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    110c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1110:	86 ea       	ldi	r24, 0xA6	; 166
    1112:	80 83       	st	Z, r24
    1114:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1118:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    111c:	8f ea       	ldi	r24, 0xAF	; 175
    111e:	80 83       	st	Z, r24
    1120:	30 eb       	ldi	r19, 0xB0	; 176
    1122:	2f ef       	ldi	r18, 0xFF	; 255
    1124:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1128:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    112c:	30 83       	st	Z, r19
    112e:	80 e8       	ldi	r24, 0x80	; 128
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_data_reg>
    1136:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_data_reg+0x1>
    113a:	20 83       	st	Z, r18
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	c9 f7       	brne	.-14     	; 0x1132 <OLED_init+0x116>
    1140:	3f 5f       	subi	r19, 0xFF	; 255
    1142:	38 3b       	cpi	r19, 0xB8	; 184
    1144:	79 f7       	brne	.-34     	; 0x1124 <OLED_init+0x108>
    1146:	2f ef       	ldi	r18, 0xFF	; 255
    1148:	8f e7       	ldi	r24, 0x7F	; 127
    114a:	97 e0       	ldi	r25, 0x07	; 7
    114c:	21 50       	subi	r18, 0x01	; 1
    114e:	80 40       	sbci	r24, 0x00	; 0
    1150:	90 40       	sbci	r25, 0x00	; 0
    1152:	e1 f7       	brne	.-8      	; 0x114c <OLED_init+0x130>
    1154:	00 c0       	rjmp	.+0      	; 0x1156 <OLED_init+0x13a>
    1156:	00 00       	nop
    1158:	0e 94 fb 07 	call	0xff6	; 0xff6 <OLED_clear>
    115c:	08 95       	ret

0000115e <OLED_write_command>:
    115e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1162:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1166:	80 83       	st	Z, r24
    1168:	08 95       	ret

0000116a <OLED_print>:
}

void OLED_print(char c){
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	f9 01       	movw	r30, r18
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	ee 0f       	add	r30, r30
    1176:	ff 1f       	adc	r31, r31
    1178:	ee 0f       	add	r30, r30
    117a:	ff 1f       	adc	r31, r31
    117c:	e0 59       	subi	r30, 0x90	; 144
    117e:	f0 40       	sbci	r31, 0x00	; 0
    1180:	22 0f       	add	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	22 0f       	add	r18, r18
    1186:	33 1f       	adc	r19, r19
    1188:	22 0f       	add	r18, r18
    118a:	33 1f       	adc	r19, r19
    118c:	28 58       	subi	r18, 0x88	; 136
    118e:	30 40       	sbci	r19, 0x00	; 0
	int pos = c - 32;
	for (int i = 0; i < 8; i++){
		OLED_write_data(pgm_read_byte(&(font8[pos][i])));
    1190:	94 91       	lpm	r25, Z
void OLED_write_command(char c){
	oled_command_reg[0] = c;
}

void OLED_write_data(char c){
	oled_data_reg[0] = c;
    1192:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <oled_data_reg>
    1196:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <oled_data_reg+0x1>
    119a:	9c 93       	st	X, r25
    119c:	31 96       	adiw	r30, 0x01	; 1
}

void OLED_print(char c){
	int pos = c - 32;
	for (int i = 0; i < 8; i++){
    119e:	e2 17       	cp	r30, r18
    11a0:	f3 07       	cpc	r31, r19
    11a2:	b1 f7       	brne	.-20     	; 0x1190 <OLED_print+0x26>
		OLED_write_data(pgm_read_byte(&(font8[pos][i])));
	}
}
    11a4:	08 95       	ret

000011a6 <OLED_goto_line>:
	OLED_goto_line(row);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	OLED_write_command(0xb0 + (line));		
    11a6:	80 55       	subi	r24, 0x50	; 80
	OLED_pos(row, column);
	OLED_print(' ');
}

void OLED_write_command(char c){
	oled_command_reg[0] = c;
    11a8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    11ac:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    11b0:	80 83       	st	Z, r24
    11b2:	08 95       	ret

000011b4 <OLED_goto_column>:
    11b4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    11b8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    11bc:	80 83       	st	Z, r24
    11be:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    11c2:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    11c6:	80 e1       	ldi	r24, 0x10	; 16
    11c8:	80 83       	st	Z, r24
    11ca:	08 95       	ret

000011cc <OLED_pos>:
	for (int i = 0; i < 8; i++){
		OLED_write_data(pgm_read_byte(&(font8[pos][i])));
	}
}

void OLED_pos(uint8_t row, uint8_t column){
    11cc:	cf 93       	push	r28
    11ce:	c6 2f       	mov	r28, r22
	OLED_goto_line(row);
    11d0:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <OLED_goto_line>
	OLED_goto_column(column);
    11d4:	8c 2f       	mov	r24, r28
    11d6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <OLED_goto_column>
}
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <OLED_clear_position>:
		}
	}
}

void OLED_clear_position(uint8_t row, uint8_t column){
	OLED_pos(row, column);
    11de:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OLED_pos>
	OLED_print(' ');
    11e2:	80 e2       	ldi	r24, 0x20	; 32
    11e4:	0e 94 b5 08 	call	0x116a	; 0x116a <OLED_print>
    11e8:	08 95       	ret

000011ea <OLED_print_string>:
void OLED_goto_column(uint8_t column){
	OLED_write_command(column);
	OLED_write_command(0x10);
}

void OLED_print_string(char* str){
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
	int i = 0;
	while(str[i] != '\0'){
    11f0:	88 81       	ld	r24, Y
    11f2:	88 23       	and	r24, r24
    11f4:	31 f0       	breq	.+12     	; 0x1202 <OLED_print_string+0x18>
    11f6:	21 96       	adiw	r28, 0x01	; 1
		OLED_print(str[i]);
    11f8:	0e 94 b5 08 	call	0x116a	; 0x116a <OLED_print>
	OLED_write_command(0x10);
}

void OLED_print_string(char* str){
	int i = 0;
	while(str[i] != '\0'){
    11fc:	89 91       	ld	r24, Y+
    11fe:	81 11       	cpse	r24, r1
    1200:	fb cf       	rjmp	.-10     	; 0x11f8 <OLED_print_string+0xe>
		OLED_print(str[i]);
		i++;
	}
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <SPI_MasterInit>:
#define SCK PB7

//Needed for initializing the SPI as a master
void SPI_MasterInit(void){
	// Set MOSI and SCK output, all others input, set CS as output
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);
    1208:	87 b3       	in	r24, 0x17	; 23
    120a:	80 6b       	ori	r24, 0xB0	; 176
    120c:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);
    120e:	be 98       	cbi	0x17, 6	; 23
	
	// Enable SPI, Master, set clock rate fck/16 & select mode 00
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1210:	8d b1       	in	r24, 0x0d	; 13
    1212:	81 65       	ori	r24, 0x51	; 81
    1214:	8d b9       	out	0x0d, r24	; 13

	SPCR &= ~(1<<CPOL);		//Not required
    1216:	6b 98       	cbi	0x0d, 3	; 13
	SPCR &= ~(1<<CPHA);		//Not required
    1218:	6a 98       	cbi	0x0d, 2	; 13

	PORTB |= (1<<SS);
    121a:	c4 9a       	sbi	0x18, 4	; 24
    121c:	08 95       	ret

0000121e <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData){
	// Start transmission 
	SPDR = cData;
    121e:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete 
	while(!(SPSR & (1<<SPIF)));
    1220:	77 9b       	sbis	0x0e, 7	; 14
    1222:	fe cf       	rjmp	.-4      	; 0x1220 <SPI_MasterTransmit+0x2>
}
    1224:	08 95       	ret

00001226 <SPI_MasterReceive>:


char SPI_MasterReceive(void){
	SPI_MasterTransmit('a');
    1226:	81 e6       	ldi	r24, 0x61	; 97
    1228:	0e 94 0f 09 	call	0x121e	; 0x121e <SPI_MasterTransmit>
	return SPDR;
    122c:	8f b1       	in	r24, 0x0f	; 15
}  
    122e:	08 95       	ret

00001230 <SRAM_init>:
}

void SRAM_init(){
	//setting the SRAM CS to low to select it (active low) from the NAND gates
	volatile char *ext_ram = (char *) 0x1800;
	MCUCR |= (1<<SRE);
    1230:	85 b7       	in	r24, 0x35	; 53
    1232:	80 68       	ori	r24, 0x80	; 128
    1234:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<5);
    1236:	80 b7       	in	r24, 0x30	; 48
    1238:	80 62       	ori	r24, 0x20	; 32
    123a:	80 bf       	out	0x30, r24	; 48
    123c:	08 95       	ret

0000123e <main>:

#define HORIZONTAL 0
#define VERTICAL 1

int main(void){	
	USART_Init(MYUBRR);
    123e:	8f e1       	ldi	r24, 0x1F	; 31
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 34 09 	call	0x1268	; 0x1268 <USART_Init>
	
	fdevopen(USART_Transmit, USART_Receive);
    1246:	6f e3       	ldi	r22, 0x3F	; 63
    1248:	79 e0       	ldi	r23, 0x09	; 9
    124a:	8b e3       	ldi	r24, 0x3B	; 59
    124c:	99 e0       	ldi	r25, 0x09	; 9
    124e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <fdevopen>
	
	clock_timer();
    1252:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <clock_timer>
	SRAM_init();
    1256:	0e 94 18 09 	call	0x1230	; 0x1230 <SRAM_init>
	can_init();
    125a:	0e 94 00 02 	call	0x400	; 0x400 <can_init>
	OLED_init();
    125e:	0e 94 0e 08 	call	0x101c	; 0x101c <OLED_init>
	
	while (1){		
		menu_init();
    1262:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <menu_init>
    1266:	fd cf       	rjmp	.-6      	; 0x1262 <main+0x24>

00001268 <USART_Init>:
#include "uart.h"

void USART_Init( unsigned int ubrr )
{
	// Set baud rate
	UBRR1H = (unsigned char)(ubrr>>8);
    1268:	9c bf       	out	0x3c, r25	; 60
	UBRR1L = (unsigned char)ubrr;
    126a:	80 b9       	out	0x00, r24	; 0
	// Enable receiver and transmitter
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    126c:	88 e1       	ldi	r24, 0x18	; 24
    126e:	81 b9       	out	0x01, r24	; 1
	// Set frame format: 8data, 2stop bit
	UCSR1C = (1<<URSEL1)|(1<<USBS1)|(3<<UCSZ10);
    1270:	8e e8       	ldi	r24, 0x8E	; 142
    1272:	8c bf       	out	0x3c, r24	; 60
    1274:	08 95       	ret

00001276 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	// Wait for empty transmit buffer
	while ( !( UCSR1A & (1<<UDRE1)) );
    1276:	15 9b       	sbis	0x02, 5	; 2
    1278:	fe cf       	rjmp	.-4      	; 0x1276 <USART_Transmit>
	// Put data into buffer, sends the data 
	UDR1 = data;
    127a:	83 b9       	out	0x03, r24	; 3
    127c:	08 95       	ret

0000127e <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	// Wait for data to be received 
	while ( !(UCSR1A & (1<<RXC1)) );
    127e:	17 9b       	sbis	0x02, 7	; 2
    1280:	fe cf       	rjmp	.-4      	; 0x127e <USART_Receive>
	// Get and return received data from buffer 
	return UDR1;
    1282:	83 b1       	in	r24, 0x03	; 3
    1284:	08 95       	ret

00001286 <__subsf3>:
    1286:	50 58       	subi	r21, 0x80	; 128

00001288 <__addsf3>:
    1288:	bb 27       	eor	r27, r27
    128a:	aa 27       	eor	r26, r26
    128c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3x>
    1290:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_round>
    1294:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_pscA>
    1298:	38 f0       	brcs	.+14     	; 0x12a8 <__addsf3+0x20>
    129a:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_pscB>
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <__addsf3+0x20>
    12a0:	39 f4       	brne	.+14     	; 0x12b0 <__addsf3+0x28>
    12a2:	9f 3f       	cpi	r25, 0xFF	; 255
    12a4:	19 f4       	brne	.+6      	; 0x12ac <__addsf3+0x24>
    12a6:	26 f4       	brtc	.+8      	; 0x12b0 <__addsf3+0x28>
    12a8:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_nan>
    12ac:	0e f4       	brtc	.+2      	; 0x12b0 <__addsf3+0x28>
    12ae:	e0 95       	com	r30
    12b0:	e7 fb       	bst	r30, 7
    12b2:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_inf>

000012b6 <__addsf3x>:
    12b6:	e9 2f       	mov	r30, r25
    12b8:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_split3>
    12bc:	58 f3       	brcs	.-42     	; 0x1294 <__addsf3+0xc>
    12be:	ba 17       	cp	r27, r26
    12c0:	62 07       	cpc	r22, r18
    12c2:	73 07       	cpc	r23, r19
    12c4:	84 07       	cpc	r24, r20
    12c6:	95 07       	cpc	r25, r21
    12c8:	20 f0       	brcs	.+8      	; 0x12d2 <__addsf3x+0x1c>
    12ca:	79 f4       	brne	.+30     	; 0x12ea <__addsf3x+0x34>
    12cc:	a6 f5       	brtc	.+104    	; 0x1336 <__addsf3x+0x80>
    12ce:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_zero>
    12d2:	0e f4       	brtc	.+2      	; 0x12d6 <__addsf3x+0x20>
    12d4:	e0 95       	com	r30
    12d6:	0b 2e       	mov	r0, r27
    12d8:	ba 2f       	mov	r27, r26
    12da:	a0 2d       	mov	r26, r0
    12dc:	0b 01       	movw	r0, r22
    12de:	b9 01       	movw	r22, r18
    12e0:	90 01       	movw	r18, r0
    12e2:	0c 01       	movw	r0, r24
    12e4:	ca 01       	movw	r24, r20
    12e6:	a0 01       	movw	r20, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	ff 27       	eor	r31, r31
    12ec:	59 1b       	sub	r21, r25
    12ee:	99 f0       	breq	.+38     	; 0x1316 <__addsf3x+0x60>
    12f0:	59 3f       	cpi	r21, 0xF9	; 249
    12f2:	50 f4       	brcc	.+20     	; 0x1308 <__addsf3x+0x52>
    12f4:	50 3e       	cpi	r21, 0xE0	; 224
    12f6:	68 f1       	brcs	.+90     	; 0x1352 <__addsf3x+0x9c>
    12f8:	1a 16       	cp	r1, r26
    12fa:	f0 40       	sbci	r31, 0x00	; 0
    12fc:	a2 2f       	mov	r26, r18
    12fe:	23 2f       	mov	r18, r19
    1300:	34 2f       	mov	r19, r20
    1302:	44 27       	eor	r20, r20
    1304:	58 5f       	subi	r21, 0xF8	; 248
    1306:	f3 cf       	rjmp	.-26     	; 0x12ee <__addsf3x+0x38>
    1308:	46 95       	lsr	r20
    130a:	37 95       	ror	r19
    130c:	27 95       	ror	r18
    130e:	a7 95       	ror	r26
    1310:	f0 40       	sbci	r31, 0x00	; 0
    1312:	53 95       	inc	r21
    1314:	c9 f7       	brne	.-14     	; 0x1308 <__addsf3x+0x52>
    1316:	7e f4       	brtc	.+30     	; 0x1336 <__addsf3x+0x80>
    1318:	1f 16       	cp	r1, r31
    131a:	ba 0b       	sbc	r27, r26
    131c:	62 0b       	sbc	r22, r18
    131e:	73 0b       	sbc	r23, r19
    1320:	84 0b       	sbc	r24, r20
    1322:	ba f0       	brmi	.+46     	; 0x1352 <__addsf3x+0x9c>
    1324:	91 50       	subi	r25, 0x01	; 1
    1326:	a1 f0       	breq	.+40     	; 0x1350 <__addsf3x+0x9a>
    1328:	ff 0f       	add	r31, r31
    132a:	bb 1f       	adc	r27, r27
    132c:	66 1f       	adc	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	88 1f       	adc	r24, r24
    1332:	c2 f7       	brpl	.-16     	; 0x1324 <__addsf3x+0x6e>
    1334:	0e c0       	rjmp	.+28     	; 0x1352 <__addsf3x+0x9c>
    1336:	ba 0f       	add	r27, r26
    1338:	62 1f       	adc	r22, r18
    133a:	73 1f       	adc	r23, r19
    133c:	84 1f       	adc	r24, r20
    133e:	48 f4       	brcc	.+18     	; 0x1352 <__addsf3x+0x9c>
    1340:	87 95       	ror	r24
    1342:	77 95       	ror	r23
    1344:	67 95       	ror	r22
    1346:	b7 95       	ror	r27
    1348:	f7 95       	ror	r31
    134a:	9e 3f       	cpi	r25, 0xFE	; 254
    134c:	08 f0       	brcs	.+2      	; 0x1350 <__addsf3x+0x9a>
    134e:	b0 cf       	rjmp	.-160    	; 0x12b0 <__addsf3+0x28>
    1350:	93 95       	inc	r25
    1352:	88 0f       	add	r24, r24
    1354:	08 f0       	brcs	.+2      	; 0x1358 <__addsf3x+0xa2>
    1356:	99 27       	eor	r25, r25
    1358:	ee 0f       	add	r30, r30
    135a:	97 95       	ror	r25
    135c:	87 95       	ror	r24
    135e:	08 95       	ret

00001360 <__divsf3>:
    1360:	0e 94 c4 09 	call	0x1388	; 0x1388 <__divsf3x>
    1364:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_round>
    1368:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_pscB>
    136c:	58 f0       	brcs	.+22     	; 0x1384 <__divsf3+0x24>
    136e:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_pscA>
    1372:	40 f0       	brcs	.+16     	; 0x1384 <__divsf3+0x24>
    1374:	29 f4       	brne	.+10     	; 0x1380 <__divsf3+0x20>
    1376:	5f 3f       	cpi	r21, 0xFF	; 255
    1378:	29 f0       	breq	.+10     	; 0x1384 <__divsf3+0x24>
    137a:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_inf>
    137e:	51 11       	cpse	r21, r1
    1380:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_szero>
    1384:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_nan>

00001388 <__divsf3x>:
    1388:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_split3>
    138c:	68 f3       	brcs	.-38     	; 0x1368 <__divsf3+0x8>

0000138e <__divsf3_pse>:
    138e:	99 23       	and	r25, r25
    1390:	b1 f3       	breq	.-20     	; 0x137e <__divsf3+0x1e>
    1392:	55 23       	and	r21, r21
    1394:	91 f3       	breq	.-28     	; 0x137a <__divsf3+0x1a>
    1396:	95 1b       	sub	r25, r21
    1398:	55 0b       	sbc	r21, r21
    139a:	bb 27       	eor	r27, r27
    139c:	aa 27       	eor	r26, r26
    139e:	62 17       	cp	r22, r18
    13a0:	73 07       	cpc	r23, r19
    13a2:	84 07       	cpc	r24, r20
    13a4:	38 f0       	brcs	.+14     	; 0x13b4 <__divsf3_pse+0x26>
    13a6:	9f 5f       	subi	r25, 0xFF	; 255
    13a8:	5f 4f       	sbci	r21, 0xFF	; 255
    13aa:	22 0f       	add	r18, r18
    13ac:	33 1f       	adc	r19, r19
    13ae:	44 1f       	adc	r20, r20
    13b0:	aa 1f       	adc	r26, r26
    13b2:	a9 f3       	breq	.-22     	; 0x139e <__divsf3_pse+0x10>
    13b4:	35 d0       	rcall	.+106    	; 0x1420 <__divsf3_pse+0x92>
    13b6:	0e 2e       	mov	r0, r30
    13b8:	3a f0       	brmi	.+14     	; 0x13c8 <__divsf3_pse+0x3a>
    13ba:	e0 e8       	ldi	r30, 0x80	; 128
    13bc:	32 d0       	rcall	.+100    	; 0x1422 <__divsf3_pse+0x94>
    13be:	91 50       	subi	r25, 0x01	; 1
    13c0:	50 40       	sbci	r21, 0x00	; 0
    13c2:	e6 95       	lsr	r30
    13c4:	00 1c       	adc	r0, r0
    13c6:	ca f7       	brpl	.-14     	; 0x13ba <__divsf3_pse+0x2c>
    13c8:	2b d0       	rcall	.+86     	; 0x1420 <__divsf3_pse+0x92>
    13ca:	fe 2f       	mov	r31, r30
    13cc:	29 d0       	rcall	.+82     	; 0x1420 <__divsf3_pse+0x92>
    13ce:	66 0f       	add	r22, r22
    13d0:	77 1f       	adc	r23, r23
    13d2:	88 1f       	adc	r24, r24
    13d4:	bb 1f       	adc	r27, r27
    13d6:	26 17       	cp	r18, r22
    13d8:	37 07       	cpc	r19, r23
    13da:	48 07       	cpc	r20, r24
    13dc:	ab 07       	cpc	r26, r27
    13de:	b0 e8       	ldi	r27, 0x80	; 128
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <__divsf3_pse+0x56>
    13e2:	bb 0b       	sbc	r27, r27
    13e4:	80 2d       	mov	r24, r0
    13e6:	bf 01       	movw	r22, r30
    13e8:	ff 27       	eor	r31, r31
    13ea:	93 58       	subi	r25, 0x83	; 131
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	3a f0       	brmi	.+14     	; 0x13fe <__divsf3_pse+0x70>
    13f0:	9e 3f       	cpi	r25, 0xFE	; 254
    13f2:	51 05       	cpc	r21, r1
    13f4:	78 f0       	brcs	.+30     	; 0x1414 <__divsf3_pse+0x86>
    13f6:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_inf>
    13fa:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_szero>
    13fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1400:	e4 f3       	brlt	.-8      	; 0x13fa <__divsf3_pse+0x6c>
    1402:	98 3e       	cpi	r25, 0xE8	; 232
    1404:	d4 f3       	brlt	.-12     	; 0x13fa <__divsf3_pse+0x6c>
    1406:	86 95       	lsr	r24
    1408:	77 95       	ror	r23
    140a:	67 95       	ror	r22
    140c:	b7 95       	ror	r27
    140e:	f7 95       	ror	r31
    1410:	9f 5f       	subi	r25, 0xFF	; 255
    1412:	c9 f7       	brne	.-14     	; 0x1406 <__divsf3_pse+0x78>
    1414:	88 0f       	add	r24, r24
    1416:	91 1d       	adc	r25, r1
    1418:	96 95       	lsr	r25
    141a:	87 95       	ror	r24
    141c:	97 f9       	bld	r25, 7
    141e:	08 95       	ret
    1420:	e1 e0       	ldi	r30, 0x01	; 1
    1422:	66 0f       	add	r22, r22
    1424:	77 1f       	adc	r23, r23
    1426:	88 1f       	adc	r24, r24
    1428:	bb 1f       	adc	r27, r27
    142a:	62 17       	cp	r22, r18
    142c:	73 07       	cpc	r23, r19
    142e:	84 07       	cpc	r24, r20
    1430:	ba 07       	cpc	r27, r26
    1432:	20 f0       	brcs	.+8      	; 0x143c <__divsf3_pse+0xae>
    1434:	62 1b       	sub	r22, r18
    1436:	73 0b       	sbc	r23, r19
    1438:	84 0b       	sbc	r24, r20
    143a:	ba 0b       	sbc	r27, r26
    143c:	ee 1f       	adc	r30, r30
    143e:	88 f7       	brcc	.-30     	; 0x1422 <__divsf3_pse+0x94>
    1440:	e0 95       	com	r30
    1442:	08 95       	ret

00001444 <__fixsfsi>:
    1444:	0e 94 29 0a 	call	0x1452	; 0x1452 <__fixunssfsi>
    1448:	68 94       	set
    144a:	b1 11       	cpse	r27, r1
    144c:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_szero>
    1450:	08 95       	ret

00001452 <__fixunssfsi>:
    1452:	0e 94 c5 0a 	call	0x158a	; 0x158a <__fp_splitA>
    1456:	88 f0       	brcs	.+34     	; 0x147a <__fixunssfsi+0x28>
    1458:	9f 57       	subi	r25, 0x7F	; 127
    145a:	98 f0       	brcs	.+38     	; 0x1482 <__fixunssfsi+0x30>
    145c:	b9 2f       	mov	r27, r25
    145e:	99 27       	eor	r25, r25
    1460:	b7 51       	subi	r27, 0x17	; 23
    1462:	b0 f0       	brcs	.+44     	; 0x1490 <__fixunssfsi+0x3e>
    1464:	e1 f0       	breq	.+56     	; 0x149e <__fixunssfsi+0x4c>
    1466:	66 0f       	add	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	88 1f       	adc	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	1a f0       	brmi	.+6      	; 0x1476 <__fixunssfsi+0x24>
    1470:	ba 95       	dec	r27
    1472:	c9 f7       	brne	.-14     	; 0x1466 <__fixunssfsi+0x14>
    1474:	14 c0       	rjmp	.+40     	; 0x149e <__fixunssfsi+0x4c>
    1476:	b1 30       	cpi	r27, 0x01	; 1
    1478:	91 f0       	breq	.+36     	; 0x149e <__fixunssfsi+0x4c>
    147a:	0e 94 df 0a 	call	0x15be	; 0x15be <__fp_zero>
    147e:	b1 e0       	ldi	r27, 0x01	; 1
    1480:	08 95       	ret
    1482:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_zero>
    1486:	67 2f       	mov	r22, r23
    1488:	78 2f       	mov	r23, r24
    148a:	88 27       	eor	r24, r24
    148c:	b8 5f       	subi	r27, 0xF8	; 248
    148e:	39 f0       	breq	.+14     	; 0x149e <__fixunssfsi+0x4c>
    1490:	b9 3f       	cpi	r27, 0xF9	; 249
    1492:	cc f3       	brlt	.-14     	; 0x1486 <__fixunssfsi+0x34>
    1494:	86 95       	lsr	r24
    1496:	77 95       	ror	r23
    1498:	67 95       	ror	r22
    149a:	b3 95       	inc	r27
    149c:	d9 f7       	brne	.-10     	; 0x1494 <__fixunssfsi+0x42>
    149e:	3e f4       	brtc	.+14     	; 0x14ae <__fixunssfsi+0x5c>
    14a0:	90 95       	com	r25
    14a2:	80 95       	com	r24
    14a4:	70 95       	com	r23
    14a6:	61 95       	neg	r22
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	8f 4f       	sbci	r24, 0xFF	; 255
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	08 95       	ret

000014b0 <__floatunsisf>:
    14b0:	e8 94       	clt
    14b2:	09 c0       	rjmp	.+18     	; 0x14c6 <__floatsisf+0x12>

000014b4 <__floatsisf>:
    14b4:	97 fb       	bst	r25, 7
    14b6:	3e f4       	brtc	.+14     	; 0x14c6 <__floatsisf+0x12>
    14b8:	90 95       	com	r25
    14ba:	80 95       	com	r24
    14bc:	70 95       	com	r23
    14be:	61 95       	neg	r22
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	8f 4f       	sbci	r24, 0xFF	; 255
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	99 23       	and	r25, r25
    14c8:	a9 f0       	breq	.+42     	; 0x14f4 <__floatsisf+0x40>
    14ca:	f9 2f       	mov	r31, r25
    14cc:	96 e9       	ldi	r25, 0x96	; 150
    14ce:	bb 27       	eor	r27, r27
    14d0:	93 95       	inc	r25
    14d2:	f6 95       	lsr	r31
    14d4:	87 95       	ror	r24
    14d6:	77 95       	ror	r23
    14d8:	67 95       	ror	r22
    14da:	b7 95       	ror	r27
    14dc:	f1 11       	cpse	r31, r1
    14de:	f8 cf       	rjmp	.-16     	; 0x14d0 <__floatsisf+0x1c>
    14e0:	fa f4       	brpl	.+62     	; 0x1520 <__floatsisf+0x6c>
    14e2:	bb 0f       	add	r27, r27
    14e4:	11 f4       	brne	.+4      	; 0x14ea <__floatsisf+0x36>
    14e6:	60 ff       	sbrs	r22, 0
    14e8:	1b c0       	rjmp	.+54     	; 0x1520 <__floatsisf+0x6c>
    14ea:	6f 5f       	subi	r22, 0xFF	; 255
    14ec:	7f 4f       	sbci	r23, 0xFF	; 255
    14ee:	8f 4f       	sbci	r24, 0xFF	; 255
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	16 c0       	rjmp	.+44     	; 0x1520 <__floatsisf+0x6c>
    14f4:	88 23       	and	r24, r24
    14f6:	11 f0       	breq	.+4      	; 0x14fc <__floatsisf+0x48>
    14f8:	96 e9       	ldi	r25, 0x96	; 150
    14fa:	11 c0       	rjmp	.+34     	; 0x151e <__floatsisf+0x6a>
    14fc:	77 23       	and	r23, r23
    14fe:	21 f0       	breq	.+8      	; 0x1508 <__floatsisf+0x54>
    1500:	9e e8       	ldi	r25, 0x8E	; 142
    1502:	87 2f       	mov	r24, r23
    1504:	76 2f       	mov	r23, r22
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <__floatsisf+0x5e>
    1508:	66 23       	and	r22, r22
    150a:	71 f0       	breq	.+28     	; 0x1528 <__floatsisf+0x74>
    150c:	96 e8       	ldi	r25, 0x86	; 134
    150e:	86 2f       	mov	r24, r22
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	2a f0       	brmi	.+10     	; 0x1520 <__floatsisf+0x6c>
    1516:	9a 95       	dec	r25
    1518:	66 0f       	add	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	88 1f       	adc	r24, r24
    151e:	da f7       	brpl	.-10     	; 0x1516 <__floatsisf+0x62>
    1520:	88 0f       	add	r24, r24
    1522:	96 95       	lsr	r25
    1524:	87 95       	ror	r24
    1526:	97 f9       	bld	r25, 7
    1528:	08 95       	ret

0000152a <__fp_inf>:
    152a:	97 f9       	bld	r25, 7
    152c:	9f 67       	ori	r25, 0x7F	; 127
    152e:	80 e8       	ldi	r24, 0x80	; 128
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	08 95       	ret

00001536 <__fp_nan>:
    1536:	9f ef       	ldi	r25, 0xFF	; 255
    1538:	80 ec       	ldi	r24, 0xC0	; 192
    153a:	08 95       	ret

0000153c <__fp_pscA>:
    153c:	00 24       	eor	r0, r0
    153e:	0a 94       	dec	r0
    1540:	16 16       	cp	r1, r22
    1542:	17 06       	cpc	r1, r23
    1544:	18 06       	cpc	r1, r24
    1546:	09 06       	cpc	r0, r25
    1548:	08 95       	ret

0000154a <__fp_pscB>:
    154a:	00 24       	eor	r0, r0
    154c:	0a 94       	dec	r0
    154e:	12 16       	cp	r1, r18
    1550:	13 06       	cpc	r1, r19
    1552:	14 06       	cpc	r1, r20
    1554:	05 06       	cpc	r0, r21
    1556:	08 95       	ret

00001558 <__fp_round>:
    1558:	09 2e       	mov	r0, r25
    155a:	03 94       	inc	r0
    155c:	00 0c       	add	r0, r0
    155e:	11 f4       	brne	.+4      	; 0x1564 <__fp_round+0xc>
    1560:	88 23       	and	r24, r24
    1562:	52 f0       	brmi	.+20     	; 0x1578 <__fp_round+0x20>
    1564:	bb 0f       	add	r27, r27
    1566:	40 f4       	brcc	.+16     	; 0x1578 <__fp_round+0x20>
    1568:	bf 2b       	or	r27, r31
    156a:	11 f4       	brne	.+4      	; 0x1570 <__fp_round+0x18>
    156c:	60 ff       	sbrs	r22, 0
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <__fp_round+0x20>
    1570:	6f 5f       	subi	r22, 0xFF	; 255
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	08 95       	ret

0000157a <__fp_split3>:
    157a:	57 fd       	sbrc	r21, 7
    157c:	90 58       	subi	r25, 0x80	; 128
    157e:	44 0f       	add	r20, r20
    1580:	55 1f       	adc	r21, r21
    1582:	59 f0       	breq	.+22     	; 0x159a <__fp_splitA+0x10>
    1584:	5f 3f       	cpi	r21, 0xFF	; 255
    1586:	71 f0       	breq	.+28     	; 0x15a4 <__fp_splitA+0x1a>
    1588:	47 95       	ror	r20

0000158a <__fp_splitA>:
    158a:	88 0f       	add	r24, r24
    158c:	97 fb       	bst	r25, 7
    158e:	99 1f       	adc	r25, r25
    1590:	61 f0       	breq	.+24     	; 0x15aa <__fp_splitA+0x20>
    1592:	9f 3f       	cpi	r25, 0xFF	; 255
    1594:	79 f0       	breq	.+30     	; 0x15b4 <__fp_splitA+0x2a>
    1596:	87 95       	ror	r24
    1598:	08 95       	ret
    159a:	12 16       	cp	r1, r18
    159c:	13 06       	cpc	r1, r19
    159e:	14 06       	cpc	r1, r20
    15a0:	55 1f       	adc	r21, r21
    15a2:	f2 cf       	rjmp	.-28     	; 0x1588 <__fp_split3+0xe>
    15a4:	46 95       	lsr	r20
    15a6:	f1 df       	rcall	.-30     	; 0x158a <__fp_splitA>
    15a8:	08 c0       	rjmp	.+16     	; 0x15ba <__fp_splitA+0x30>
    15aa:	16 16       	cp	r1, r22
    15ac:	17 06       	cpc	r1, r23
    15ae:	18 06       	cpc	r1, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	f1 cf       	rjmp	.-30     	; 0x1596 <__fp_splitA+0xc>
    15b4:	86 95       	lsr	r24
    15b6:	71 05       	cpc	r23, r1
    15b8:	61 05       	cpc	r22, r1
    15ba:	08 94       	sec
    15bc:	08 95       	ret

000015be <__fp_zero>:
    15be:	e8 94       	clt

000015c0 <__fp_szero>:
    15c0:	bb 27       	eor	r27, r27
    15c2:	66 27       	eor	r22, r22
    15c4:	77 27       	eor	r23, r23
    15c6:	cb 01       	movw	r24, r22
    15c8:	97 f9       	bld	r25, 7
    15ca:	08 95       	ret

000015cc <__mulsf3>:
    15cc:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsf3x>
    15d0:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_round>
    15d4:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_pscA>
    15d8:	38 f0       	brcs	.+14     	; 0x15e8 <__mulsf3+0x1c>
    15da:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_pscB>
    15de:	20 f0       	brcs	.+8      	; 0x15e8 <__mulsf3+0x1c>
    15e0:	95 23       	and	r25, r21
    15e2:	11 f0       	breq	.+4      	; 0x15e8 <__mulsf3+0x1c>
    15e4:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_inf>
    15e8:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_nan>
    15ec:	11 24       	eor	r1, r1
    15ee:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_szero>

000015f2 <__mulsf3x>:
    15f2:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_split3>
    15f6:	70 f3       	brcs	.-36     	; 0x15d4 <__mulsf3+0x8>

000015f8 <__mulsf3_pse>:
    15f8:	95 9f       	mul	r25, r21
    15fa:	c1 f3       	breq	.-16     	; 0x15ec <__mulsf3+0x20>
    15fc:	95 0f       	add	r25, r21
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	55 1f       	adc	r21, r21
    1602:	62 9f       	mul	r22, r18
    1604:	f0 01       	movw	r30, r0
    1606:	72 9f       	mul	r23, r18
    1608:	bb 27       	eor	r27, r27
    160a:	f0 0d       	add	r31, r0
    160c:	b1 1d       	adc	r27, r1
    160e:	63 9f       	mul	r22, r19
    1610:	aa 27       	eor	r26, r26
    1612:	f0 0d       	add	r31, r0
    1614:	b1 1d       	adc	r27, r1
    1616:	aa 1f       	adc	r26, r26
    1618:	64 9f       	mul	r22, r20
    161a:	66 27       	eor	r22, r22
    161c:	b0 0d       	add	r27, r0
    161e:	a1 1d       	adc	r26, r1
    1620:	66 1f       	adc	r22, r22
    1622:	82 9f       	mul	r24, r18
    1624:	22 27       	eor	r18, r18
    1626:	b0 0d       	add	r27, r0
    1628:	a1 1d       	adc	r26, r1
    162a:	62 1f       	adc	r22, r18
    162c:	73 9f       	mul	r23, r19
    162e:	b0 0d       	add	r27, r0
    1630:	a1 1d       	adc	r26, r1
    1632:	62 1f       	adc	r22, r18
    1634:	83 9f       	mul	r24, r19
    1636:	a0 0d       	add	r26, r0
    1638:	61 1d       	adc	r22, r1
    163a:	22 1f       	adc	r18, r18
    163c:	74 9f       	mul	r23, r20
    163e:	33 27       	eor	r19, r19
    1640:	a0 0d       	add	r26, r0
    1642:	61 1d       	adc	r22, r1
    1644:	23 1f       	adc	r18, r19
    1646:	84 9f       	mul	r24, r20
    1648:	60 0d       	add	r22, r0
    164a:	21 1d       	adc	r18, r1
    164c:	82 2f       	mov	r24, r18
    164e:	76 2f       	mov	r23, r22
    1650:	6a 2f       	mov	r22, r26
    1652:	11 24       	eor	r1, r1
    1654:	9f 57       	subi	r25, 0x7F	; 127
    1656:	50 40       	sbci	r21, 0x00	; 0
    1658:	9a f0       	brmi	.+38     	; 0x1680 <__mulsf3_pse+0x88>
    165a:	f1 f0       	breq	.+60     	; 0x1698 <__mulsf3_pse+0xa0>
    165c:	88 23       	and	r24, r24
    165e:	4a f0       	brmi	.+18     	; 0x1672 <__mulsf3_pse+0x7a>
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	bb 1f       	adc	r27, r27
    1666:	66 1f       	adc	r22, r22
    1668:	77 1f       	adc	r23, r23
    166a:	88 1f       	adc	r24, r24
    166c:	91 50       	subi	r25, 0x01	; 1
    166e:	50 40       	sbci	r21, 0x00	; 0
    1670:	a9 f7       	brne	.-22     	; 0x165c <__mulsf3_pse+0x64>
    1672:	9e 3f       	cpi	r25, 0xFE	; 254
    1674:	51 05       	cpc	r21, r1
    1676:	80 f0       	brcs	.+32     	; 0x1698 <__mulsf3_pse+0xa0>
    1678:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_inf>
    167c:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_szero>
    1680:	5f 3f       	cpi	r21, 0xFF	; 255
    1682:	e4 f3       	brlt	.-8      	; 0x167c <__mulsf3_pse+0x84>
    1684:	98 3e       	cpi	r25, 0xE8	; 232
    1686:	d4 f3       	brlt	.-12     	; 0x167c <__mulsf3_pse+0x84>
    1688:	86 95       	lsr	r24
    168a:	77 95       	ror	r23
    168c:	67 95       	ror	r22
    168e:	b7 95       	ror	r27
    1690:	f7 95       	ror	r31
    1692:	e7 95       	ror	r30
    1694:	9f 5f       	subi	r25, 0xFF	; 255
    1696:	c1 f7       	brne	.-16     	; 0x1688 <__mulsf3_pse+0x90>
    1698:	fe 2b       	or	r31, r30
    169a:	88 0f       	add	r24, r24
    169c:	91 1d       	adc	r25, r1
    169e:	96 95       	lsr	r25
    16a0:	87 95       	ror	r24
    16a2:	97 f9       	bld	r25, 7
    16a4:	08 95       	ret

000016a6 <__divmodhi4>:
    16a6:	97 fb       	bst	r25, 7
    16a8:	07 2e       	mov	r0, r23
    16aa:	16 f4       	brtc	.+4      	; 0x16b0 <__divmodhi4+0xa>
    16ac:	00 94       	com	r0
    16ae:	07 d0       	rcall	.+14     	; 0x16be <__divmodhi4_neg1>
    16b0:	77 fd       	sbrc	r23, 7
    16b2:	09 d0       	rcall	.+18     	; 0x16c6 <__divmodhi4_neg2>
    16b4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__udivmodhi4>
    16b8:	07 fc       	sbrc	r0, 7
    16ba:	05 d0       	rcall	.+10     	; 0x16c6 <__divmodhi4_neg2>
    16bc:	3e f4       	brtc	.+14     	; 0x16cc <__divmodhi4_exit>

000016be <__divmodhi4_neg1>:
    16be:	90 95       	com	r25
    16c0:	81 95       	neg	r24
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	08 95       	ret

000016c6 <__divmodhi4_neg2>:
    16c6:	70 95       	com	r23
    16c8:	61 95       	neg	r22
    16ca:	7f 4f       	sbci	r23, 0xFF	; 255

000016cc <__divmodhi4_exit>:
    16cc:	08 95       	ret

000016ce <__udivmodhi4>:
    16ce:	aa 1b       	sub	r26, r26
    16d0:	bb 1b       	sub	r27, r27
    16d2:	51 e1       	ldi	r21, 0x11	; 17
    16d4:	07 c0       	rjmp	.+14     	; 0x16e4 <__udivmodhi4_ep>

000016d6 <__udivmodhi4_loop>:
    16d6:	aa 1f       	adc	r26, r26
    16d8:	bb 1f       	adc	r27, r27
    16da:	a6 17       	cp	r26, r22
    16dc:	b7 07       	cpc	r27, r23
    16de:	10 f0       	brcs	.+4      	; 0x16e4 <__udivmodhi4_ep>
    16e0:	a6 1b       	sub	r26, r22
    16e2:	b7 0b       	sbc	r27, r23

000016e4 <__udivmodhi4_ep>:
    16e4:	88 1f       	adc	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	5a 95       	dec	r21
    16ea:	a9 f7       	brne	.-22     	; 0x16d6 <__udivmodhi4_loop>
    16ec:	80 95       	com	r24
    16ee:	90 95       	com	r25
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	08 95       	ret

000016f6 <fdevopen>:
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	31 f4       	brne	.+12     	; 0x170e <fdevopen+0x18>
    1702:	61 15       	cp	r22, r1
    1704:	71 05       	cpc	r23, r1
    1706:	19 f4       	brne	.+6      	; 0x170e <fdevopen+0x18>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	3a c0       	rjmp	.+116    	; 0x1782 <fdevopen+0x8c>
    170e:	8b 01       	movw	r16, r22
    1710:	ec 01       	movw	r28, r24
    1712:	6e e0       	ldi	r22, 0x0E	; 14
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <calloc>
    171e:	fc 01       	movw	r30, r24
    1720:	89 2b       	or	r24, r25
    1722:	91 f3       	breq	.-28     	; 0x1708 <fdevopen+0x12>
    1724:	80 e8       	ldi	r24, 0x80	; 128
    1726:	83 83       	std	Z+3, r24	; 0x03
    1728:	01 15       	cp	r16, r1
    172a:	11 05       	cpc	r17, r1
    172c:	71 f0       	breq	.+28     	; 0x174a <fdevopen+0x54>
    172e:	13 87       	std	Z+11, r17	; 0x0b
    1730:	02 87       	std	Z+10, r16	; 0x0a
    1732:	81 e8       	ldi	r24, 0x81	; 129
    1734:	83 83       	std	Z+3, r24	; 0x03
    1736:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <__iob>
    173a:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <__iob+0x1>
    173e:	89 2b       	or	r24, r25
    1740:	21 f4       	brne	.+8      	; 0x174a <fdevopen+0x54>
    1742:	f0 93 87 03 	sts	0x0387, r31	; 0x800387 <__iob+0x1>
    1746:	e0 93 86 03 	sts	0x0386, r30	; 0x800386 <__iob>
    174a:	20 97       	sbiw	r28, 0x00	; 0
    174c:	c9 f0       	breq	.+50     	; 0x1780 <fdevopen+0x8a>
    174e:	d1 87       	std	Z+9, r29	; 0x09
    1750:	c0 87       	std	Z+8, r28	; 0x08
    1752:	83 81       	ldd	r24, Z+3	; 0x03
    1754:	82 60       	ori	r24, 0x02	; 2
    1756:	83 83       	std	Z+3, r24	; 0x03
    1758:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <__iob+0x2>
    175c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <__iob+0x3>
    1760:	89 2b       	or	r24, r25
    1762:	71 f4       	brne	.+28     	; 0x1780 <fdevopen+0x8a>
    1764:	f0 93 89 03 	sts	0x0389, r31	; 0x800389 <__iob+0x3>
    1768:	e0 93 88 03 	sts	0x0388, r30	; 0x800388 <__iob+0x2>
    176c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <__iob+0x4>
    1770:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <__iob+0x5>
    1774:	89 2b       	or	r24, r25
    1776:	21 f4       	brne	.+8      	; 0x1780 <fdevopen+0x8a>
    1778:	f0 93 8b 03 	sts	0x038B, r31	; 0x80038b <__iob+0x5>
    177c:	e0 93 8a 03 	sts	0x038A, r30	; 0x80038a <__iob+0x4>
    1780:	cf 01       	movw	r24, r30
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <printf>:
    178c:	a0 e0       	ldi	r26, 0x00	; 0
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ec ec       	ldi	r30, 0xCC	; 204
    1792:	fb e0       	ldi	r31, 0x0B	; 11
    1794:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__prologue_saves__+0x20>
    1798:	ae 01       	movw	r20, r28
    179a:	4b 5f       	subi	r20, 0xFB	; 251
    179c:	5f 4f       	sbci	r21, 0xFF	; 255
    179e:	fa 01       	movw	r30, r20
    17a0:	61 91       	ld	r22, Z+
    17a2:	71 91       	ld	r23, Z+
    17a4:	af 01       	movw	r20, r30
    17a6:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <__iob+0x2>
    17aa:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <__iob+0x3>
    17ae:	0e 94 2e 0c 	call	0x185c	; 0x185c <vfprintf>
    17b2:	e2 e0       	ldi	r30, 0x02	; 2
    17b4:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__epilogue_restores__+0x20>

000017b8 <puts>:
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <__iob+0x2>
    17c4:	f0 91 89 03 	lds	r31, 0x0389	; 0x800389 <__iob+0x3>
    17c8:	23 81       	ldd	r18, Z+3	; 0x03
    17ca:	21 ff       	sbrs	r18, 1
    17cc:	1b c0       	rjmp	.+54     	; 0x1804 <puts+0x4c>
    17ce:	8c 01       	movw	r16, r24
    17d0:	d0 e0       	ldi	r29, 0x00	; 0
    17d2:	c0 e0       	ldi	r28, 0x00	; 0
    17d4:	f8 01       	movw	r30, r16
    17d6:	81 91       	ld	r24, Z+
    17d8:	8f 01       	movw	r16, r30
    17da:	60 91 88 03 	lds	r22, 0x0388	; 0x800388 <__iob+0x2>
    17de:	70 91 89 03 	lds	r23, 0x0389	; 0x800389 <__iob+0x3>
    17e2:	db 01       	movw	r26, r22
    17e4:	18 96       	adiw	r26, 0x08	; 8
    17e6:	ed 91       	ld	r30, X+
    17e8:	fc 91       	ld	r31, X
    17ea:	19 97       	sbiw	r26, 0x09	; 9
    17ec:	88 23       	and	r24, r24
    17ee:	31 f0       	breq	.+12     	; 0x17fc <puts+0x44>
    17f0:	09 95       	icall
    17f2:	89 2b       	or	r24, r25
    17f4:	79 f3       	breq	.-34     	; 0x17d4 <puts+0x1c>
    17f6:	df ef       	ldi	r29, 0xFF	; 255
    17f8:	cf ef       	ldi	r28, 0xFF	; 255
    17fa:	ec cf       	rjmp	.-40     	; 0x17d4 <puts+0x1c>
    17fc:	8a e0       	ldi	r24, 0x0A	; 10
    17fe:	09 95       	icall
    1800:	89 2b       	or	r24, r25
    1802:	19 f0       	breq	.+6      	; 0x180a <puts+0x52>
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	9f ef       	ldi	r25, 0xFF	; 255
    1808:	02 c0       	rjmp	.+4      	; 0x180e <puts+0x56>
    180a:	8d 2f       	mov	r24, r29
    180c:	9c 2f       	mov	r25, r28
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	08 95       	ret

00001818 <sprintf>:
    1818:	ae e0       	ldi	r26, 0x0E	; 14
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e2 e1       	ldi	r30, 0x12	; 18
    181e:	fc e0       	ldi	r31, 0x0C	; 12
    1820:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__prologue_saves__+0x1c>
    1824:	0d 89       	ldd	r16, Y+21	; 0x15
    1826:	1e 89       	ldd	r17, Y+22	; 0x16
    1828:	86 e0       	ldi	r24, 0x06	; 6
    182a:	8c 83       	std	Y+4, r24	; 0x04
    182c:	1a 83       	std	Y+2, r17	; 0x02
    182e:	09 83       	std	Y+1, r16	; 0x01
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	9f e7       	ldi	r25, 0x7F	; 127
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	ae 01       	movw	r20, r28
    183a:	47 5e       	subi	r20, 0xE7	; 231
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	6f 89       	ldd	r22, Y+23	; 0x17
    1840:	78 8d       	ldd	r23, Y+24	; 0x18
    1842:	ce 01       	movw	r24, r28
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	0e 94 2e 0c 	call	0x185c	; 0x185c <vfprintf>
    184a:	ef 81       	ldd	r30, Y+7	; 0x07
    184c:	f8 85       	ldd	r31, Y+8	; 0x08
    184e:	e0 0f       	add	r30, r16
    1850:	f1 1f       	adc	r31, r17
    1852:	10 82       	st	Z, r1
    1854:	2e 96       	adiw	r28, 0x0e	; 14
    1856:	e4 e0       	ldi	r30, 0x04	; 4
    1858:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__epilogue_restores__+0x1c>

0000185c <vfprintf>:
    185c:	ab e0       	ldi	r26, 0x0B	; 11
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e4 e3       	ldi	r30, 0x34	; 52
    1862:	fc e0       	ldi	r31, 0x0C	; 12
    1864:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__prologue_saves__>
    1868:	6c 01       	movw	r12, r24
    186a:	7b 01       	movw	r14, r22
    186c:	8a 01       	movw	r16, r20
    186e:	fc 01       	movw	r30, r24
    1870:	17 82       	std	Z+7, r1	; 0x07
    1872:	16 82       	std	Z+6, r1	; 0x06
    1874:	83 81       	ldd	r24, Z+3	; 0x03
    1876:	81 ff       	sbrs	r24, 1
    1878:	cc c1       	rjmp	.+920    	; 0x1c12 <vfprintf+0x3b6>
    187a:	ce 01       	movw	r24, r28
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	3c 01       	movw	r6, r24
    1880:	f6 01       	movw	r30, r12
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	f7 01       	movw	r30, r14
    1886:	93 fd       	sbrc	r25, 3
    1888:	85 91       	lpm	r24, Z+
    188a:	93 ff       	sbrs	r25, 3
    188c:	81 91       	ld	r24, Z+
    188e:	7f 01       	movw	r14, r30
    1890:	88 23       	and	r24, r24
    1892:	09 f4       	brne	.+2      	; 0x1896 <vfprintf+0x3a>
    1894:	ba c1       	rjmp	.+884    	; 0x1c0a <vfprintf+0x3ae>
    1896:	85 32       	cpi	r24, 0x25	; 37
    1898:	39 f4       	brne	.+14     	; 0x18a8 <vfprintf+0x4c>
    189a:	93 fd       	sbrc	r25, 3
    189c:	85 91       	lpm	r24, Z+
    189e:	93 ff       	sbrs	r25, 3
    18a0:	81 91       	ld	r24, Z+
    18a2:	7f 01       	movw	r14, r30
    18a4:	85 32       	cpi	r24, 0x25	; 37
    18a6:	29 f4       	brne	.+10     	; 0x18b2 <vfprintf+0x56>
    18a8:	b6 01       	movw	r22, r12
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <fputc>
    18b0:	e7 cf       	rjmp	.-50     	; 0x1880 <vfprintf+0x24>
    18b2:	91 2c       	mov	r9, r1
    18b4:	21 2c       	mov	r2, r1
    18b6:	31 2c       	mov	r3, r1
    18b8:	ff e1       	ldi	r31, 0x1F	; 31
    18ba:	f3 15       	cp	r31, r3
    18bc:	d8 f0       	brcs	.+54     	; 0x18f4 <vfprintf+0x98>
    18be:	8b 32       	cpi	r24, 0x2B	; 43
    18c0:	79 f0       	breq	.+30     	; 0x18e0 <vfprintf+0x84>
    18c2:	38 f4       	brcc	.+14     	; 0x18d2 <vfprintf+0x76>
    18c4:	80 32       	cpi	r24, 0x20	; 32
    18c6:	79 f0       	breq	.+30     	; 0x18e6 <vfprintf+0x8a>
    18c8:	83 32       	cpi	r24, 0x23	; 35
    18ca:	a1 f4       	brne	.+40     	; 0x18f4 <vfprintf+0x98>
    18cc:	23 2d       	mov	r18, r3
    18ce:	20 61       	ori	r18, 0x10	; 16
    18d0:	1d c0       	rjmp	.+58     	; 0x190c <vfprintf+0xb0>
    18d2:	8d 32       	cpi	r24, 0x2D	; 45
    18d4:	61 f0       	breq	.+24     	; 0x18ee <vfprintf+0x92>
    18d6:	80 33       	cpi	r24, 0x30	; 48
    18d8:	69 f4       	brne	.+26     	; 0x18f4 <vfprintf+0x98>
    18da:	23 2d       	mov	r18, r3
    18dc:	21 60       	ori	r18, 0x01	; 1
    18de:	16 c0       	rjmp	.+44     	; 0x190c <vfprintf+0xb0>
    18e0:	83 2d       	mov	r24, r3
    18e2:	82 60       	ori	r24, 0x02	; 2
    18e4:	38 2e       	mov	r3, r24
    18e6:	e3 2d       	mov	r30, r3
    18e8:	e4 60       	ori	r30, 0x04	; 4
    18ea:	3e 2e       	mov	r3, r30
    18ec:	2a c0       	rjmp	.+84     	; 0x1942 <vfprintf+0xe6>
    18ee:	f3 2d       	mov	r31, r3
    18f0:	f8 60       	ori	r31, 0x08	; 8
    18f2:	1d c0       	rjmp	.+58     	; 0x192e <vfprintf+0xd2>
    18f4:	37 fc       	sbrc	r3, 7
    18f6:	2d c0       	rjmp	.+90     	; 0x1952 <vfprintf+0xf6>
    18f8:	20 ed       	ldi	r18, 0xD0	; 208
    18fa:	28 0f       	add	r18, r24
    18fc:	2a 30       	cpi	r18, 0x0A	; 10
    18fe:	40 f0       	brcs	.+16     	; 0x1910 <vfprintf+0xb4>
    1900:	8e 32       	cpi	r24, 0x2E	; 46
    1902:	b9 f4       	brne	.+46     	; 0x1932 <vfprintf+0xd6>
    1904:	36 fc       	sbrc	r3, 6
    1906:	81 c1       	rjmp	.+770    	; 0x1c0a <vfprintf+0x3ae>
    1908:	23 2d       	mov	r18, r3
    190a:	20 64       	ori	r18, 0x40	; 64
    190c:	32 2e       	mov	r3, r18
    190e:	19 c0       	rjmp	.+50     	; 0x1942 <vfprintf+0xe6>
    1910:	36 fe       	sbrs	r3, 6
    1912:	06 c0       	rjmp	.+12     	; 0x1920 <vfprintf+0xc4>
    1914:	8a e0       	ldi	r24, 0x0A	; 10
    1916:	98 9e       	mul	r9, r24
    1918:	20 0d       	add	r18, r0
    191a:	11 24       	eor	r1, r1
    191c:	92 2e       	mov	r9, r18
    191e:	11 c0       	rjmp	.+34     	; 0x1942 <vfprintf+0xe6>
    1920:	ea e0       	ldi	r30, 0x0A	; 10
    1922:	2e 9e       	mul	r2, r30
    1924:	20 0d       	add	r18, r0
    1926:	11 24       	eor	r1, r1
    1928:	22 2e       	mov	r2, r18
    192a:	f3 2d       	mov	r31, r3
    192c:	f0 62       	ori	r31, 0x20	; 32
    192e:	3f 2e       	mov	r3, r31
    1930:	08 c0       	rjmp	.+16     	; 0x1942 <vfprintf+0xe6>
    1932:	8c 36       	cpi	r24, 0x6C	; 108
    1934:	21 f4       	brne	.+8      	; 0x193e <vfprintf+0xe2>
    1936:	83 2d       	mov	r24, r3
    1938:	80 68       	ori	r24, 0x80	; 128
    193a:	38 2e       	mov	r3, r24
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <vfprintf+0xe6>
    193e:	88 36       	cpi	r24, 0x68	; 104
    1940:	41 f4       	brne	.+16     	; 0x1952 <vfprintf+0xf6>
    1942:	f7 01       	movw	r30, r14
    1944:	93 fd       	sbrc	r25, 3
    1946:	85 91       	lpm	r24, Z+
    1948:	93 ff       	sbrs	r25, 3
    194a:	81 91       	ld	r24, Z+
    194c:	7f 01       	movw	r14, r30
    194e:	81 11       	cpse	r24, r1
    1950:	b3 cf       	rjmp	.-154    	; 0x18b8 <vfprintf+0x5c>
    1952:	98 2f       	mov	r25, r24
    1954:	9f 7d       	andi	r25, 0xDF	; 223
    1956:	95 54       	subi	r25, 0x45	; 69
    1958:	93 30       	cpi	r25, 0x03	; 3
    195a:	28 f4       	brcc	.+10     	; 0x1966 <vfprintf+0x10a>
    195c:	0c 5f       	subi	r16, 0xFC	; 252
    195e:	1f 4f       	sbci	r17, 0xFF	; 255
    1960:	9f e3       	ldi	r25, 0x3F	; 63
    1962:	99 83       	std	Y+1, r25	; 0x01
    1964:	0d c0       	rjmp	.+26     	; 0x1980 <vfprintf+0x124>
    1966:	83 36       	cpi	r24, 0x63	; 99
    1968:	31 f0       	breq	.+12     	; 0x1976 <vfprintf+0x11a>
    196a:	83 37       	cpi	r24, 0x73	; 115
    196c:	71 f0       	breq	.+28     	; 0x198a <vfprintf+0x12e>
    196e:	83 35       	cpi	r24, 0x53	; 83
    1970:	09 f0       	breq	.+2      	; 0x1974 <vfprintf+0x118>
    1972:	59 c0       	rjmp	.+178    	; 0x1a26 <vfprintf+0x1ca>
    1974:	21 c0       	rjmp	.+66     	; 0x19b8 <vfprintf+0x15c>
    1976:	f8 01       	movw	r30, r16
    1978:	80 81       	ld	r24, Z
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	0e 5f       	subi	r16, 0xFE	; 254
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	88 24       	eor	r8, r8
    1982:	83 94       	inc	r8
    1984:	91 2c       	mov	r9, r1
    1986:	53 01       	movw	r10, r6
    1988:	13 c0       	rjmp	.+38     	; 0x19b0 <vfprintf+0x154>
    198a:	28 01       	movw	r4, r16
    198c:	f2 e0       	ldi	r31, 0x02	; 2
    198e:	4f 0e       	add	r4, r31
    1990:	51 1c       	adc	r5, r1
    1992:	f8 01       	movw	r30, r16
    1994:	a0 80       	ld	r10, Z
    1996:	b1 80       	ldd	r11, Z+1	; 0x01
    1998:	36 fe       	sbrs	r3, 6
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <vfprintf+0x146>
    199c:	69 2d       	mov	r22, r9
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <vfprintf+0x14a>
    19a2:	6f ef       	ldi	r22, 0xFF	; 255
    19a4:	7f ef       	ldi	r23, 0xFF	; 255
    19a6:	c5 01       	movw	r24, r10
    19a8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <strnlen>
    19ac:	4c 01       	movw	r8, r24
    19ae:	82 01       	movw	r16, r4
    19b0:	f3 2d       	mov	r31, r3
    19b2:	ff 77       	andi	r31, 0x7F	; 127
    19b4:	3f 2e       	mov	r3, r31
    19b6:	16 c0       	rjmp	.+44     	; 0x19e4 <vfprintf+0x188>
    19b8:	28 01       	movw	r4, r16
    19ba:	22 e0       	ldi	r18, 0x02	; 2
    19bc:	42 0e       	add	r4, r18
    19be:	51 1c       	adc	r5, r1
    19c0:	f8 01       	movw	r30, r16
    19c2:	a0 80       	ld	r10, Z
    19c4:	b1 80       	ldd	r11, Z+1	; 0x01
    19c6:	36 fe       	sbrs	r3, 6
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <vfprintf+0x174>
    19ca:	69 2d       	mov	r22, r9
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <vfprintf+0x178>
    19d0:	6f ef       	ldi	r22, 0xFF	; 255
    19d2:	7f ef       	ldi	r23, 0xFF	; 255
    19d4:	c5 01       	movw	r24, r10
    19d6:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <strnlen_P>
    19da:	4c 01       	movw	r8, r24
    19dc:	f3 2d       	mov	r31, r3
    19de:	f0 68       	ori	r31, 0x80	; 128
    19e0:	3f 2e       	mov	r3, r31
    19e2:	82 01       	movw	r16, r4
    19e4:	33 fc       	sbrc	r3, 3
    19e6:	1b c0       	rjmp	.+54     	; 0x1a1e <vfprintf+0x1c2>
    19e8:	82 2d       	mov	r24, r2
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	88 16       	cp	r8, r24
    19ee:	99 06       	cpc	r9, r25
    19f0:	b0 f4       	brcc	.+44     	; 0x1a1e <vfprintf+0x1c2>
    19f2:	b6 01       	movw	r22, r12
    19f4:	80 e2       	ldi	r24, 0x20	; 32
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <fputc>
    19fc:	2a 94       	dec	r2
    19fe:	f4 cf       	rjmp	.-24     	; 0x19e8 <vfprintf+0x18c>
    1a00:	f5 01       	movw	r30, r10
    1a02:	37 fc       	sbrc	r3, 7
    1a04:	85 91       	lpm	r24, Z+
    1a06:	37 fe       	sbrs	r3, 7
    1a08:	81 91       	ld	r24, Z+
    1a0a:	5f 01       	movw	r10, r30
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <fputc>
    1a14:	21 10       	cpse	r2, r1
    1a16:	2a 94       	dec	r2
    1a18:	21 e0       	ldi	r18, 0x01	; 1
    1a1a:	82 1a       	sub	r8, r18
    1a1c:	91 08       	sbc	r9, r1
    1a1e:	81 14       	cp	r8, r1
    1a20:	91 04       	cpc	r9, r1
    1a22:	71 f7       	brne	.-36     	; 0x1a00 <vfprintf+0x1a4>
    1a24:	e8 c0       	rjmp	.+464    	; 0x1bf6 <vfprintf+0x39a>
    1a26:	84 36       	cpi	r24, 0x64	; 100
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <vfprintf+0x1d2>
    1a2a:	89 36       	cpi	r24, 0x69	; 105
    1a2c:	41 f5       	brne	.+80     	; 0x1a7e <vfprintf+0x222>
    1a2e:	f8 01       	movw	r30, r16
    1a30:	37 fe       	sbrs	r3, 7
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <vfprintf+0x1e6>
    1a34:	60 81       	ld	r22, Z
    1a36:	71 81       	ldd	r23, Z+1	; 0x01
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	93 81       	ldd	r25, Z+3	; 0x03
    1a3c:	0c 5f       	subi	r16, 0xFC	; 252
    1a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a40:	08 c0       	rjmp	.+16     	; 0x1a52 <vfprintf+0x1f6>
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	07 2e       	mov	r0, r23
    1a48:	00 0c       	add	r0, r0
    1a4a:	88 0b       	sbc	r24, r24
    1a4c:	99 0b       	sbc	r25, r25
    1a4e:	0e 5f       	subi	r16, 0xFE	; 254
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	f3 2d       	mov	r31, r3
    1a54:	ff 76       	andi	r31, 0x6F	; 111
    1a56:	3f 2e       	mov	r3, r31
    1a58:	97 ff       	sbrs	r25, 7
    1a5a:	09 c0       	rjmp	.+18     	; 0x1a6e <vfprintf+0x212>
    1a5c:	90 95       	com	r25
    1a5e:	80 95       	com	r24
    1a60:	70 95       	com	r23
    1a62:	61 95       	neg	r22
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	8f 4f       	sbci	r24, 0xFF	; 255
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	f0 68       	ori	r31, 0x80	; 128
    1a6c:	3f 2e       	mov	r3, r31
    1a6e:	2a e0       	ldi	r18, 0x0A	; 10
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	a3 01       	movw	r20, r6
    1a74:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__ultoa_invert>
    1a78:	88 2e       	mov	r8, r24
    1a7a:	86 18       	sub	r8, r6
    1a7c:	45 c0       	rjmp	.+138    	; 0x1b08 <vfprintf+0x2ac>
    1a7e:	85 37       	cpi	r24, 0x75	; 117
    1a80:	31 f4       	brne	.+12     	; 0x1a8e <vfprintf+0x232>
    1a82:	23 2d       	mov	r18, r3
    1a84:	2f 7e       	andi	r18, 0xEF	; 239
    1a86:	b2 2e       	mov	r11, r18
    1a88:	2a e0       	ldi	r18, 0x0A	; 10
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	25 c0       	rjmp	.+74     	; 0x1ad8 <vfprintf+0x27c>
    1a8e:	93 2d       	mov	r25, r3
    1a90:	99 7f       	andi	r25, 0xF9	; 249
    1a92:	b9 2e       	mov	r11, r25
    1a94:	8f 36       	cpi	r24, 0x6F	; 111
    1a96:	c1 f0       	breq	.+48     	; 0x1ac8 <vfprintf+0x26c>
    1a98:	18 f4       	brcc	.+6      	; 0x1aa0 <vfprintf+0x244>
    1a9a:	88 35       	cpi	r24, 0x58	; 88
    1a9c:	79 f0       	breq	.+30     	; 0x1abc <vfprintf+0x260>
    1a9e:	b5 c0       	rjmp	.+362    	; 0x1c0a <vfprintf+0x3ae>
    1aa0:	80 37       	cpi	r24, 0x70	; 112
    1aa2:	19 f0       	breq	.+6      	; 0x1aaa <vfprintf+0x24e>
    1aa4:	88 37       	cpi	r24, 0x78	; 120
    1aa6:	21 f0       	breq	.+8      	; 0x1ab0 <vfprintf+0x254>
    1aa8:	b0 c0       	rjmp	.+352    	; 0x1c0a <vfprintf+0x3ae>
    1aaa:	e9 2f       	mov	r30, r25
    1aac:	e0 61       	ori	r30, 0x10	; 16
    1aae:	be 2e       	mov	r11, r30
    1ab0:	b4 fe       	sbrs	r11, 4
    1ab2:	0d c0       	rjmp	.+26     	; 0x1ace <vfprintf+0x272>
    1ab4:	fb 2d       	mov	r31, r11
    1ab6:	f4 60       	ori	r31, 0x04	; 4
    1ab8:	bf 2e       	mov	r11, r31
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <vfprintf+0x272>
    1abc:	34 fe       	sbrs	r3, 4
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <vfprintf+0x278>
    1ac0:	29 2f       	mov	r18, r25
    1ac2:	26 60       	ori	r18, 0x06	; 6
    1ac4:	b2 2e       	mov	r11, r18
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <vfprintf+0x278>
    1ac8:	28 e0       	ldi	r18, 0x08	; 8
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <vfprintf+0x27c>
    1ace:	20 e1       	ldi	r18, 0x10	; 16
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <vfprintf+0x27c>
    1ad4:	20 e1       	ldi	r18, 0x10	; 16
    1ad6:	32 e0       	ldi	r19, 0x02	; 2
    1ad8:	f8 01       	movw	r30, r16
    1ada:	b7 fe       	sbrs	r11, 7
    1adc:	07 c0       	rjmp	.+14     	; 0x1aec <vfprintf+0x290>
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	0c 5f       	subi	r16, 0xFC	; 252
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	06 c0       	rjmp	.+12     	; 0x1af8 <vfprintf+0x29c>
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 5f       	subi	r16, 0xFE	; 254
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	a3 01       	movw	r20, r6
    1afa:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__ultoa_invert>
    1afe:	88 2e       	mov	r8, r24
    1b00:	86 18       	sub	r8, r6
    1b02:	fb 2d       	mov	r31, r11
    1b04:	ff 77       	andi	r31, 0x7F	; 127
    1b06:	3f 2e       	mov	r3, r31
    1b08:	36 fe       	sbrs	r3, 6
    1b0a:	0d c0       	rjmp	.+26     	; 0x1b26 <vfprintf+0x2ca>
    1b0c:	23 2d       	mov	r18, r3
    1b0e:	2e 7f       	andi	r18, 0xFE	; 254
    1b10:	a2 2e       	mov	r10, r18
    1b12:	89 14       	cp	r8, r9
    1b14:	58 f4       	brcc	.+22     	; 0x1b2c <vfprintf+0x2d0>
    1b16:	34 fe       	sbrs	r3, 4
    1b18:	0b c0       	rjmp	.+22     	; 0x1b30 <vfprintf+0x2d4>
    1b1a:	32 fc       	sbrc	r3, 2
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <vfprintf+0x2d4>
    1b1e:	83 2d       	mov	r24, r3
    1b20:	8e 7e       	andi	r24, 0xEE	; 238
    1b22:	a8 2e       	mov	r10, r24
    1b24:	05 c0       	rjmp	.+10     	; 0x1b30 <vfprintf+0x2d4>
    1b26:	b8 2c       	mov	r11, r8
    1b28:	a3 2c       	mov	r10, r3
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <vfprintf+0x2d6>
    1b2c:	b8 2c       	mov	r11, r8
    1b2e:	01 c0       	rjmp	.+2      	; 0x1b32 <vfprintf+0x2d6>
    1b30:	b9 2c       	mov	r11, r9
    1b32:	a4 fe       	sbrs	r10, 4
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <vfprintf+0x2f8>
    1b36:	fe 01       	movw	r30, r28
    1b38:	e8 0d       	add	r30, r8
    1b3a:	f1 1d       	adc	r31, r1
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 33       	cpi	r24, 0x30	; 48
    1b40:	21 f4       	brne	.+8      	; 0x1b4a <vfprintf+0x2ee>
    1b42:	9a 2d       	mov	r25, r10
    1b44:	99 7e       	andi	r25, 0xE9	; 233
    1b46:	a9 2e       	mov	r10, r25
    1b48:	09 c0       	rjmp	.+18     	; 0x1b5c <vfprintf+0x300>
    1b4a:	a2 fe       	sbrs	r10, 2
    1b4c:	06 c0       	rjmp	.+12     	; 0x1b5a <vfprintf+0x2fe>
    1b4e:	b3 94       	inc	r11
    1b50:	b3 94       	inc	r11
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <vfprintf+0x300>
    1b54:	8a 2d       	mov	r24, r10
    1b56:	86 78       	andi	r24, 0x86	; 134
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <vfprintf+0x300>
    1b5a:	b3 94       	inc	r11
    1b5c:	a3 fc       	sbrc	r10, 3
    1b5e:	11 c0       	rjmp	.+34     	; 0x1b82 <vfprintf+0x326>
    1b60:	a0 fe       	sbrs	r10, 0
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <vfprintf+0x314>
    1b64:	b2 14       	cp	r11, r2
    1b66:	88 f4       	brcc	.+34     	; 0x1b8a <vfprintf+0x32e>
    1b68:	28 0c       	add	r2, r8
    1b6a:	92 2c       	mov	r9, r2
    1b6c:	9b 18       	sub	r9, r11
    1b6e:	0e c0       	rjmp	.+28     	; 0x1b8c <vfprintf+0x330>
    1b70:	b2 14       	cp	r11, r2
    1b72:	60 f4       	brcc	.+24     	; 0x1b8c <vfprintf+0x330>
    1b74:	b6 01       	movw	r22, r12
    1b76:	80 e2       	ldi	r24, 0x20	; 32
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <fputc>
    1b7e:	b3 94       	inc	r11
    1b80:	f7 cf       	rjmp	.-18     	; 0x1b70 <vfprintf+0x314>
    1b82:	b2 14       	cp	r11, r2
    1b84:	18 f4       	brcc	.+6      	; 0x1b8c <vfprintf+0x330>
    1b86:	2b 18       	sub	r2, r11
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <vfprintf+0x332>
    1b8a:	98 2c       	mov	r9, r8
    1b8c:	21 2c       	mov	r2, r1
    1b8e:	a4 fe       	sbrs	r10, 4
    1b90:	10 c0       	rjmp	.+32     	; 0x1bb2 <vfprintf+0x356>
    1b92:	b6 01       	movw	r22, r12
    1b94:	80 e3       	ldi	r24, 0x30	; 48
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <fputc>
    1b9c:	a2 fe       	sbrs	r10, 2
    1b9e:	17 c0       	rjmp	.+46     	; 0x1bce <vfprintf+0x372>
    1ba0:	a1 fc       	sbrc	r10, 1
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <vfprintf+0x34e>
    1ba4:	88 e7       	ldi	r24, 0x78	; 120
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <vfprintf+0x352>
    1baa:	88 e5       	ldi	r24, 0x58	; 88
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	b6 01       	movw	r22, r12
    1bb0:	0c c0       	rjmp	.+24     	; 0x1bca <vfprintf+0x36e>
    1bb2:	8a 2d       	mov	r24, r10
    1bb4:	86 78       	andi	r24, 0x86	; 134
    1bb6:	59 f0       	breq	.+22     	; 0x1bce <vfprintf+0x372>
    1bb8:	a1 fe       	sbrs	r10, 1
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <vfprintf+0x364>
    1bbc:	8b e2       	ldi	r24, 0x2B	; 43
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <vfprintf+0x366>
    1bc0:	80 e2       	ldi	r24, 0x20	; 32
    1bc2:	a7 fc       	sbrc	r10, 7
    1bc4:	8d e2       	ldi	r24, 0x2D	; 45
    1bc6:	b6 01       	movw	r22, r12
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <fputc>
    1bce:	89 14       	cp	r8, r9
    1bd0:	38 f4       	brcc	.+14     	; 0x1be0 <vfprintf+0x384>
    1bd2:	b6 01       	movw	r22, r12
    1bd4:	80 e3       	ldi	r24, 0x30	; 48
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <fputc>
    1bdc:	9a 94       	dec	r9
    1bde:	f7 cf       	rjmp	.-18     	; 0x1bce <vfprintf+0x372>
    1be0:	8a 94       	dec	r8
    1be2:	f3 01       	movw	r30, r6
    1be4:	e8 0d       	add	r30, r8
    1be6:	f1 1d       	adc	r31, r1
    1be8:	80 81       	ld	r24, Z
    1bea:	b6 01       	movw	r22, r12
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <fputc>
    1bf2:	81 10       	cpse	r8, r1
    1bf4:	f5 cf       	rjmp	.-22     	; 0x1be0 <vfprintf+0x384>
    1bf6:	22 20       	and	r2, r2
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <vfprintf+0x3a0>
    1bfa:	42 ce       	rjmp	.-892    	; 0x1880 <vfprintf+0x24>
    1bfc:	b6 01       	movw	r22, r12
    1bfe:	80 e2       	ldi	r24, 0x20	; 32
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <fputc>
    1c06:	2a 94       	dec	r2
    1c08:	f6 cf       	rjmp	.-20     	; 0x1bf6 <vfprintf+0x39a>
    1c0a:	f6 01       	movw	r30, r12
    1c0c:	86 81       	ldd	r24, Z+6	; 0x06
    1c0e:	97 81       	ldd	r25, Z+7	; 0x07
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <vfprintf+0x3ba>
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	9f ef       	ldi	r25, 0xFF	; 255
    1c16:	2b 96       	adiw	r28, 0x0b	; 11
    1c18:	e2 e1       	ldi	r30, 0x12	; 18
    1c1a:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__epilogue_restores__>

00001c1e <calloc>:
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	86 9f       	mul	r24, r22
    1c28:	80 01       	movw	r16, r0
    1c2a:	87 9f       	mul	r24, r23
    1c2c:	10 0d       	add	r17, r0
    1c2e:	96 9f       	mul	r25, r22
    1c30:	10 0d       	add	r17, r0
    1c32:	11 24       	eor	r1, r1
    1c34:	c8 01       	movw	r24, r16
    1c36:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <malloc>
    1c3a:	ec 01       	movw	r28, r24
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	29 f0       	breq	.+10     	; 0x1c4a <calloc+0x2c>
    1c40:	a8 01       	movw	r20, r16
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	0e 94 57 0f 	call	0x1eae	; 0x1eae <memset>
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	08 95       	ret

00001c56 <malloc>:
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	91 05       	cpc	r25, r1
    1c62:	10 f4       	brcc	.+4      	; 0x1c68 <malloc+0x12>
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <__flp>
    1c6c:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <__flp+0x1>
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	a0 e0       	ldi	r26, 0x00	; 0
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	30 97       	sbiw	r30, 0x00	; 0
    1c7a:	19 f1       	breq	.+70     	; 0x1cc2 <malloc+0x6c>
    1c7c:	40 81       	ld	r20, Z
    1c7e:	51 81       	ldd	r21, Z+1	; 0x01
    1c80:	02 81       	ldd	r16, Z+2	; 0x02
    1c82:	13 81       	ldd	r17, Z+3	; 0x03
    1c84:	48 17       	cp	r20, r24
    1c86:	59 07       	cpc	r21, r25
    1c88:	c8 f0       	brcs	.+50     	; 0x1cbc <malloc+0x66>
    1c8a:	84 17       	cp	r24, r20
    1c8c:	95 07       	cpc	r25, r21
    1c8e:	69 f4       	brne	.+26     	; 0x1caa <malloc+0x54>
    1c90:	10 97       	sbiw	r26, 0x00	; 0
    1c92:	31 f0       	breq	.+12     	; 0x1ca0 <malloc+0x4a>
    1c94:	12 96       	adiw	r26, 0x02	; 2
    1c96:	0c 93       	st	X, r16
    1c98:	12 97       	sbiw	r26, 0x02	; 2
    1c9a:	13 96       	adiw	r26, 0x03	; 3
    1c9c:	1c 93       	st	X, r17
    1c9e:	27 c0       	rjmp	.+78     	; 0x1cee <malloc+0x98>
    1ca0:	00 93 8e 03 	sts	0x038E, r16	; 0x80038e <__flp>
    1ca4:	10 93 8f 03 	sts	0x038F, r17	; 0x80038f <__flp+0x1>
    1ca8:	22 c0       	rjmp	.+68     	; 0x1cee <malloc+0x98>
    1caa:	21 15       	cp	r18, r1
    1cac:	31 05       	cpc	r19, r1
    1cae:	19 f0       	breq	.+6      	; 0x1cb6 <malloc+0x60>
    1cb0:	42 17       	cp	r20, r18
    1cb2:	53 07       	cpc	r21, r19
    1cb4:	18 f4       	brcc	.+6      	; 0x1cbc <malloc+0x66>
    1cb6:	9a 01       	movw	r18, r20
    1cb8:	bd 01       	movw	r22, r26
    1cba:	ef 01       	movw	r28, r30
    1cbc:	df 01       	movw	r26, r30
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	db cf       	rjmp	.-74     	; 0x1c78 <malloc+0x22>
    1cc2:	21 15       	cp	r18, r1
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	f9 f0       	breq	.+62     	; 0x1d06 <malloc+0xb0>
    1cc8:	28 1b       	sub	r18, r24
    1cca:	39 0b       	sbc	r19, r25
    1ccc:	24 30       	cpi	r18, 0x04	; 4
    1cce:	31 05       	cpc	r19, r1
    1cd0:	80 f4       	brcc	.+32     	; 0x1cf2 <malloc+0x9c>
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd6:	61 15       	cp	r22, r1
    1cd8:	71 05       	cpc	r23, r1
    1cda:	21 f0       	breq	.+8      	; 0x1ce4 <malloc+0x8e>
    1cdc:	fb 01       	movw	r30, r22
    1cde:	93 83       	std	Z+3, r25	; 0x03
    1ce0:	82 83       	std	Z+2, r24	; 0x02
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <malloc+0x96>
    1ce4:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <__flp+0x1>
    1ce8:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <__flp>
    1cec:	fe 01       	movw	r30, r28
    1cee:	32 96       	adiw	r30, 0x02	; 2
    1cf0:	44 c0       	rjmp	.+136    	; 0x1d7a <malloc+0x124>
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e2 0f       	add	r30, r18
    1cf6:	f3 1f       	adc	r31, r19
    1cf8:	81 93       	st	Z+, r24
    1cfa:	91 93       	st	Z+, r25
    1cfc:	22 50       	subi	r18, 0x02	; 2
    1cfe:	31 09       	sbc	r19, r1
    1d00:	39 83       	std	Y+1, r19	; 0x01
    1d02:	28 83       	st	Y, r18
    1d04:	3a c0       	rjmp	.+116    	; 0x1d7a <malloc+0x124>
    1d06:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <__brkval>
    1d0a:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <__brkval+0x1>
    1d0e:	23 2b       	or	r18, r19
    1d10:	41 f4       	brne	.+16     	; 0x1d22 <malloc+0xcc>
    1d12:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1d16:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1d1a:	30 93 8d 03 	sts	0x038D, r19	; 0x80038d <__brkval+0x1>
    1d1e:	20 93 8c 03 	sts	0x038C, r18	; 0x80038c <__brkval>
    1d22:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1d26:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1d2a:	21 15       	cp	r18, r1
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	41 f4       	brne	.+16     	; 0x1d40 <malloc+0xea>
    1d30:	2d b7       	in	r18, 0x3d	; 61
    1d32:	3e b7       	in	r19, 0x3e	; 62
    1d34:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1d38:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1d3c:	24 1b       	sub	r18, r20
    1d3e:	35 0b       	sbc	r19, r21
    1d40:	e0 91 8c 03 	lds	r30, 0x038C	; 0x80038c <__brkval>
    1d44:	f0 91 8d 03 	lds	r31, 0x038D	; 0x80038d <__brkval+0x1>
    1d48:	e2 17       	cp	r30, r18
    1d4a:	f3 07       	cpc	r31, r19
    1d4c:	a0 f4       	brcc	.+40     	; 0x1d76 <malloc+0x120>
    1d4e:	2e 1b       	sub	r18, r30
    1d50:	3f 0b       	sbc	r19, r31
    1d52:	28 17       	cp	r18, r24
    1d54:	39 07       	cpc	r19, r25
    1d56:	78 f0       	brcs	.+30     	; 0x1d76 <malloc+0x120>
    1d58:	ac 01       	movw	r20, r24
    1d5a:	4e 5f       	subi	r20, 0xFE	; 254
    1d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5e:	24 17       	cp	r18, r20
    1d60:	35 07       	cpc	r19, r21
    1d62:	48 f0       	brcs	.+18     	; 0x1d76 <malloc+0x120>
    1d64:	4e 0f       	add	r20, r30
    1d66:	5f 1f       	adc	r21, r31
    1d68:	50 93 8d 03 	sts	0x038D, r21	; 0x80038d <__brkval+0x1>
    1d6c:	40 93 8c 03 	sts	0x038C, r20	; 0x80038c <__brkval>
    1d70:	81 93       	st	Z+, r24
    1d72:	91 93       	st	Z+, r25
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <malloc+0x124>
    1d76:	e0 e0       	ldi	r30, 0x00	; 0
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	cf 01       	movw	r24, r30
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	08 95       	ret

00001d86 <free>:
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <free+0xa>
    1d8e:	81 c0       	rjmp	.+258    	; 0x1e92 <free+0x10c>
    1d90:	fc 01       	movw	r30, r24
    1d92:	32 97       	sbiw	r30, 0x02	; 2
    1d94:	13 82       	std	Z+3, r1	; 0x03
    1d96:	12 82       	std	Z+2, r1	; 0x02
    1d98:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <__flp>
    1d9c:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <__flp+0x1>
    1da0:	10 97       	sbiw	r26, 0x00	; 0
    1da2:	81 f4       	brne	.+32     	; 0x1dc4 <free+0x3e>
    1da4:	20 81       	ld	r18, Z
    1da6:	31 81       	ldd	r19, Z+1	; 0x01
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <__brkval>
    1db0:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <__brkval+0x1>
    1db4:	28 17       	cp	r18, r24
    1db6:	39 07       	cpc	r19, r25
    1db8:	51 f5       	brne	.+84     	; 0x1e0e <free+0x88>
    1dba:	f0 93 8d 03 	sts	0x038D, r31	; 0x80038d <__brkval+0x1>
    1dbe:	e0 93 8c 03 	sts	0x038C, r30	; 0x80038c <__brkval>
    1dc2:	67 c0       	rjmp	.+206    	; 0x1e92 <free+0x10c>
    1dc4:	ed 01       	movw	r28, r26
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	ce 17       	cp	r28, r30
    1dcc:	df 07       	cpc	r29, r31
    1dce:	40 f4       	brcc	.+16     	; 0x1de0 <free+0x5a>
    1dd0:	4a 81       	ldd	r20, Y+2	; 0x02
    1dd2:	5b 81       	ldd	r21, Y+3	; 0x03
    1dd4:	9e 01       	movw	r18, r28
    1dd6:	41 15       	cp	r20, r1
    1dd8:	51 05       	cpc	r21, r1
    1dda:	f1 f0       	breq	.+60     	; 0x1e18 <free+0x92>
    1ddc:	ea 01       	movw	r28, r20
    1dde:	f5 cf       	rjmp	.-22     	; 0x1dca <free+0x44>
    1de0:	d3 83       	std	Z+3, r29	; 0x03
    1de2:	c2 83       	std	Z+2, r28	; 0x02
    1de4:	40 81       	ld	r20, Z
    1de6:	51 81       	ldd	r21, Z+1	; 0x01
    1de8:	84 0f       	add	r24, r20
    1dea:	95 1f       	adc	r25, r21
    1dec:	c8 17       	cp	r28, r24
    1dee:	d9 07       	cpc	r29, r25
    1df0:	59 f4       	brne	.+22     	; 0x1e08 <free+0x82>
    1df2:	88 81       	ld	r24, Y
    1df4:	99 81       	ldd	r25, Y+1	; 0x01
    1df6:	84 0f       	add	r24, r20
    1df8:	95 1f       	adc	r25, r21
    1dfa:	02 96       	adiw	r24, 0x02	; 2
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	93 83       	std	Z+3, r25	; 0x03
    1e06:	82 83       	std	Z+2, r24	; 0x02
    1e08:	21 15       	cp	r18, r1
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	29 f4       	brne	.+10     	; 0x1e18 <free+0x92>
    1e0e:	f0 93 8f 03 	sts	0x038F, r31	; 0x80038f <__flp+0x1>
    1e12:	e0 93 8e 03 	sts	0x038E, r30	; 0x80038e <__flp>
    1e16:	3d c0       	rjmp	.+122    	; 0x1e92 <free+0x10c>
    1e18:	e9 01       	movw	r28, r18
    1e1a:	fb 83       	std	Y+3, r31	; 0x03
    1e1c:	ea 83       	std	Y+2, r30	; 0x02
    1e1e:	49 91       	ld	r20, Y+
    1e20:	59 91       	ld	r21, Y+
    1e22:	c4 0f       	add	r28, r20
    1e24:	d5 1f       	adc	r29, r21
    1e26:	ec 17       	cp	r30, r28
    1e28:	fd 07       	cpc	r31, r29
    1e2a:	61 f4       	brne	.+24     	; 0x1e44 <free+0xbe>
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	84 0f       	add	r24, r20
    1e32:	95 1f       	adc	r25, r21
    1e34:	02 96       	adiw	r24, 0x02	; 2
    1e36:	e9 01       	movw	r28, r18
    1e38:	99 83       	std	Y+1, r25	; 0x01
    1e3a:	88 83       	st	Y, r24
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	9b 83       	std	Y+3, r25	; 0x03
    1e42:	8a 83       	std	Y+2, r24	; 0x02
    1e44:	e0 e0       	ldi	r30, 0x00	; 0
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	12 96       	adiw	r26, 0x02	; 2
    1e4a:	8d 91       	ld	r24, X+
    1e4c:	9c 91       	ld	r25, X
    1e4e:	13 97       	sbiw	r26, 0x03	; 3
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	19 f0       	breq	.+6      	; 0x1e5a <free+0xd4>
    1e54:	fd 01       	movw	r30, r26
    1e56:	dc 01       	movw	r26, r24
    1e58:	f7 cf       	rjmp	.-18     	; 0x1e48 <free+0xc2>
    1e5a:	8d 91       	ld	r24, X+
    1e5c:	9c 91       	ld	r25, X
    1e5e:	11 97       	sbiw	r26, 0x01	; 1
    1e60:	9d 01       	movw	r18, r26
    1e62:	2e 5f       	subi	r18, 0xFE	; 254
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	82 0f       	add	r24, r18
    1e68:	93 1f       	adc	r25, r19
    1e6a:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <__brkval>
    1e6e:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <__brkval+0x1>
    1e72:	28 17       	cp	r18, r24
    1e74:	39 07       	cpc	r19, r25
    1e76:	69 f4       	brne	.+26     	; 0x1e92 <free+0x10c>
    1e78:	30 97       	sbiw	r30, 0x00	; 0
    1e7a:	29 f4       	brne	.+10     	; 0x1e86 <free+0x100>
    1e7c:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <__flp+0x1>
    1e80:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <__flp>
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <free+0x104>
    1e86:	13 82       	std	Z+3, r1	; 0x03
    1e88:	12 82       	std	Z+2, r1	; 0x02
    1e8a:	b0 93 8d 03 	sts	0x038D, r27	; 0x80038d <__brkval+0x1>
    1e8e:	a0 93 8c 03 	sts	0x038C, r26	; 0x80038c <__brkval>
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	08 95       	ret

00001e98 <strnlen_P>:
    1e98:	fc 01       	movw	r30, r24
    1e9a:	05 90       	lpm	r0, Z+
    1e9c:	61 50       	subi	r22, 0x01	; 1
    1e9e:	70 40       	sbci	r23, 0x00	; 0
    1ea0:	01 10       	cpse	r0, r1
    1ea2:	d8 f7       	brcc	.-10     	; 0x1e9a <strnlen_P+0x2>
    1ea4:	80 95       	com	r24
    1ea6:	90 95       	com	r25
    1ea8:	8e 0f       	add	r24, r30
    1eaa:	9f 1f       	adc	r25, r31
    1eac:	08 95       	ret

00001eae <memset>:
    1eae:	dc 01       	movw	r26, r24
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <memset+0x6>
    1eb2:	6d 93       	st	X+, r22
    1eb4:	41 50       	subi	r20, 0x01	; 1
    1eb6:	50 40       	sbci	r21, 0x00	; 0
    1eb8:	e0 f7       	brcc	.-8      	; 0x1eb2 <memset+0x4>
    1eba:	08 95       	ret

00001ebc <strnlen>:
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	61 50       	subi	r22, 0x01	; 1
    1ec0:	70 40       	sbci	r23, 0x00	; 0
    1ec2:	01 90       	ld	r0, Z+
    1ec4:	01 10       	cpse	r0, r1
    1ec6:	d8 f7       	brcc	.-10     	; 0x1ebe <strnlen+0x2>
    1ec8:	80 95       	com	r24
    1eca:	90 95       	com	r25
    1ecc:	8e 0f       	add	r24, r30
    1ece:	9f 1f       	adc	r25, r31
    1ed0:	08 95       	ret

00001ed2 <fputc>:
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	fb 01       	movw	r30, r22
    1edc:	23 81       	ldd	r18, Z+3	; 0x03
    1ede:	21 fd       	sbrc	r18, 1
    1ee0:	03 c0       	rjmp	.+6      	; 0x1ee8 <fputc+0x16>
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	9f ef       	ldi	r25, 0xFF	; 255
    1ee6:	2c c0       	rjmp	.+88     	; 0x1f40 <fputc+0x6e>
    1ee8:	22 ff       	sbrs	r18, 2
    1eea:	16 c0       	rjmp	.+44     	; 0x1f18 <fputc+0x46>
    1eec:	46 81       	ldd	r20, Z+6	; 0x06
    1eee:	57 81       	ldd	r21, Z+7	; 0x07
    1ef0:	24 81       	ldd	r18, Z+4	; 0x04
    1ef2:	35 81       	ldd	r19, Z+5	; 0x05
    1ef4:	42 17       	cp	r20, r18
    1ef6:	53 07       	cpc	r21, r19
    1ef8:	44 f4       	brge	.+16     	; 0x1f0a <fputc+0x38>
    1efa:	a0 81       	ld	r26, Z
    1efc:	b1 81       	ldd	r27, Z+1	; 0x01
    1efe:	9d 01       	movw	r18, r26
    1f00:	2f 5f       	subi	r18, 0xFF	; 255
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	31 83       	std	Z+1, r19	; 0x01
    1f06:	20 83       	st	Z, r18
    1f08:	8c 93       	st	X, r24
    1f0a:	26 81       	ldd	r18, Z+6	; 0x06
    1f0c:	37 81       	ldd	r19, Z+7	; 0x07
    1f0e:	2f 5f       	subi	r18, 0xFF	; 255
    1f10:	3f 4f       	sbci	r19, 0xFF	; 255
    1f12:	37 83       	std	Z+7, r19	; 0x07
    1f14:	26 83       	std	Z+6, r18	; 0x06
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <fputc+0x6e>
    1f18:	8b 01       	movw	r16, r22
    1f1a:	ec 01       	movw	r28, r24
    1f1c:	fb 01       	movw	r30, r22
    1f1e:	00 84       	ldd	r0, Z+8	; 0x08
    1f20:	f1 85       	ldd	r31, Z+9	; 0x09
    1f22:	e0 2d       	mov	r30, r0
    1f24:	09 95       	icall
    1f26:	89 2b       	or	r24, r25
    1f28:	e1 f6       	brne	.-72     	; 0x1ee2 <fputc+0x10>
    1f2a:	d8 01       	movw	r26, r16
    1f2c:	16 96       	adiw	r26, 0x06	; 6
    1f2e:	8d 91       	ld	r24, X+
    1f30:	9c 91       	ld	r25, X
    1f32:	17 97       	sbiw	r26, 0x07	; 7
    1f34:	01 96       	adiw	r24, 0x01	; 1
    1f36:	17 96       	adiw	r26, 0x07	; 7
    1f38:	9c 93       	st	X, r25
    1f3a:	8e 93       	st	-X, r24
    1f3c:	16 97       	sbiw	r26, 0x06	; 6
    1f3e:	ce 01       	movw	r24, r28
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	08 95       	ret

00001f4a <__ultoa_invert>:
    1f4a:	fa 01       	movw	r30, r20
    1f4c:	aa 27       	eor	r26, r26
    1f4e:	28 30       	cpi	r18, 0x08	; 8
    1f50:	51 f1       	breq	.+84     	; 0x1fa6 <__ultoa_invert+0x5c>
    1f52:	20 31       	cpi	r18, 0x10	; 16
    1f54:	81 f1       	breq	.+96     	; 0x1fb6 <__ultoa_invert+0x6c>
    1f56:	e8 94       	clt
    1f58:	6f 93       	push	r22
    1f5a:	6e 7f       	andi	r22, 0xFE	; 254
    1f5c:	6e 5f       	subi	r22, 0xFE	; 254
    1f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f60:	8f 4f       	sbci	r24, 0xFF	; 255
    1f62:	9f 4f       	sbci	r25, 0xFF	; 255
    1f64:	af 4f       	sbci	r26, 0xFF	; 255
    1f66:	b1 e0       	ldi	r27, 0x01	; 1
    1f68:	3e d0       	rcall	.+124    	; 0x1fe6 <__ultoa_invert+0x9c>
    1f6a:	b4 e0       	ldi	r27, 0x04	; 4
    1f6c:	3c d0       	rcall	.+120    	; 0x1fe6 <__ultoa_invert+0x9c>
    1f6e:	67 0f       	add	r22, r23
    1f70:	78 1f       	adc	r23, r24
    1f72:	89 1f       	adc	r24, r25
    1f74:	9a 1f       	adc	r25, r26
    1f76:	a1 1d       	adc	r26, r1
    1f78:	68 0f       	add	r22, r24
    1f7a:	79 1f       	adc	r23, r25
    1f7c:	8a 1f       	adc	r24, r26
    1f7e:	91 1d       	adc	r25, r1
    1f80:	a1 1d       	adc	r26, r1
    1f82:	6a 0f       	add	r22, r26
    1f84:	71 1d       	adc	r23, r1
    1f86:	81 1d       	adc	r24, r1
    1f88:	91 1d       	adc	r25, r1
    1f8a:	a1 1d       	adc	r26, r1
    1f8c:	20 d0       	rcall	.+64     	; 0x1fce <__ultoa_invert+0x84>
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <__ultoa_invert+0x48>
    1f90:	68 94       	set
    1f92:	3f 91       	pop	r19
    1f94:	2a e0       	ldi	r18, 0x0A	; 10
    1f96:	26 9f       	mul	r18, r22
    1f98:	11 24       	eor	r1, r1
    1f9a:	30 19       	sub	r19, r0
    1f9c:	30 5d       	subi	r19, 0xD0	; 208
    1f9e:	31 93       	st	Z+, r19
    1fa0:	de f6       	brtc	.-74     	; 0x1f58 <__ultoa_invert+0xe>
    1fa2:	cf 01       	movw	r24, r30
    1fa4:	08 95       	ret
    1fa6:	46 2f       	mov	r20, r22
    1fa8:	47 70       	andi	r20, 0x07	; 7
    1faa:	40 5d       	subi	r20, 0xD0	; 208
    1fac:	41 93       	st	Z+, r20
    1fae:	b3 e0       	ldi	r27, 0x03	; 3
    1fb0:	0f d0       	rcall	.+30     	; 0x1fd0 <__ultoa_invert+0x86>
    1fb2:	c9 f7       	brne	.-14     	; 0x1fa6 <__ultoa_invert+0x5c>
    1fb4:	f6 cf       	rjmp	.-20     	; 0x1fa2 <__ultoa_invert+0x58>
    1fb6:	46 2f       	mov	r20, r22
    1fb8:	4f 70       	andi	r20, 0x0F	; 15
    1fba:	40 5d       	subi	r20, 0xD0	; 208
    1fbc:	4a 33       	cpi	r20, 0x3A	; 58
    1fbe:	18 f0       	brcs	.+6      	; 0x1fc6 <__ultoa_invert+0x7c>
    1fc0:	49 5d       	subi	r20, 0xD9	; 217
    1fc2:	31 fd       	sbrc	r19, 1
    1fc4:	40 52       	subi	r20, 0x20	; 32
    1fc6:	41 93       	st	Z+, r20
    1fc8:	02 d0       	rcall	.+4      	; 0x1fce <__ultoa_invert+0x84>
    1fca:	a9 f7       	brne	.-22     	; 0x1fb6 <__ultoa_invert+0x6c>
    1fcc:	ea cf       	rjmp	.-44     	; 0x1fa2 <__ultoa_invert+0x58>
    1fce:	b4 e0       	ldi	r27, 0x04	; 4
    1fd0:	a6 95       	lsr	r26
    1fd2:	97 95       	ror	r25
    1fd4:	87 95       	ror	r24
    1fd6:	77 95       	ror	r23
    1fd8:	67 95       	ror	r22
    1fda:	ba 95       	dec	r27
    1fdc:	c9 f7       	brne	.-14     	; 0x1fd0 <__ultoa_invert+0x86>
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	61 05       	cpc	r22, r1
    1fe2:	71 05       	cpc	r23, r1
    1fe4:	08 95       	ret
    1fe6:	9b 01       	movw	r18, r22
    1fe8:	ac 01       	movw	r20, r24
    1fea:	0a 2e       	mov	r0, r26
    1fec:	06 94       	lsr	r0
    1fee:	57 95       	ror	r21
    1ff0:	47 95       	ror	r20
    1ff2:	37 95       	ror	r19
    1ff4:	27 95       	ror	r18
    1ff6:	ba 95       	dec	r27
    1ff8:	c9 f7       	brne	.-14     	; 0x1fec <__ultoa_invert+0xa2>
    1ffa:	62 0f       	add	r22, r18
    1ffc:	73 1f       	adc	r23, r19
    1ffe:	84 1f       	adc	r24, r20
    2000:	95 1f       	adc	r25, r21
    2002:	a0 1d       	adc	r26, r0
    2004:	08 95       	ret

00002006 <__prologue_saves__>:
    2006:	2f 92       	push	r2
    2008:	3f 92       	push	r3
    200a:	4f 92       	push	r4
    200c:	5f 92       	push	r5
    200e:	6f 92       	push	r6
    2010:	7f 92       	push	r7
    2012:	8f 92       	push	r8
    2014:	9f 92       	push	r9
    2016:	af 92       	push	r10
    2018:	bf 92       	push	r11
    201a:	cf 92       	push	r12
    201c:	df 92       	push	r13
    201e:	ef 92       	push	r14
    2020:	ff 92       	push	r15
    2022:	0f 93       	push	r16
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	ca 1b       	sub	r28, r26
    2030:	db 0b       	sbc	r29, r27
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	09 94       	ijmp

0000203e <__epilogue_restores__>:
    203e:	2a 88       	ldd	r2, Y+18	; 0x12
    2040:	39 88       	ldd	r3, Y+17	; 0x11
    2042:	48 88       	ldd	r4, Y+16	; 0x10
    2044:	5f 84       	ldd	r5, Y+15	; 0x0f
    2046:	6e 84       	ldd	r6, Y+14	; 0x0e
    2048:	7d 84       	ldd	r7, Y+13	; 0x0d
    204a:	8c 84       	ldd	r8, Y+12	; 0x0c
    204c:	9b 84       	ldd	r9, Y+11	; 0x0b
    204e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2050:	b9 84       	ldd	r11, Y+9	; 0x09
    2052:	c8 84       	ldd	r12, Y+8	; 0x08
    2054:	df 80       	ldd	r13, Y+7	; 0x07
    2056:	ee 80       	ldd	r14, Y+6	; 0x06
    2058:	fd 80       	ldd	r15, Y+5	; 0x05
    205a:	0c 81       	ldd	r16, Y+4	; 0x04
    205c:	1b 81       	ldd	r17, Y+3	; 0x03
    205e:	aa 81       	ldd	r26, Y+2	; 0x02
    2060:	b9 81       	ldd	r27, Y+1	; 0x01
    2062:	ce 0f       	add	r28, r30
    2064:	d1 1d       	adc	r29, r1
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	ed 01       	movw	r28, r26
    2072:	08 95       	ret

00002074 <_exit>:
    2074:	f8 94       	cli

00002076 <__stop_program>:
    2076:	ff cf       	rjmp	.-2      	; 0x2076 <__stop_program>
