
G3_ES_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00001066  000010fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001066  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800226  00800226  00001220  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001890  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4b  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de3  00000000  00000000  00003b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00004908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000678  00000000  00000000  00004d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e0d  00000000  00000000  000053c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000061d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_1>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 e6       	ldi	r30, 0x66	; 102
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a6 32       	cpi	r26, 0x26	; 38
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a6 e2       	ldi	r26, 0x26	; 38
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a0 33       	cpi	r26, 0x30	; 48
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 29 03 	call	0x652	; 0x652 <main>
      a6:	0c 94 31 08 	jmp	0x1062	; 0x1062 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <clock_timer>:

//should be deleted?
void adc_init(){
	//setting the ADC CS to low to select it (active low) from the NAND gates
	DDRC |= (1 << PC2);
	PORTC = 0x04;
      ae:	8c 9a       	sbi	0x11, 4	; 17
      b0:	eb e8       	ldi	r30, 0x8B	; 139
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	88 64       	ori	r24, 0x48	; 72
      b8:	80 83       	st	Z, r24
      ba:	ea e8       	ldi	r30, 0x8A	; 138
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	89 60       	ori	r24, 0x09	; 9
      c2:	80 83       	st	Z, r24
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
      ca:	08 95       	ret

000000cc <adc_read>:
//volatile
uint8_t adc_read(uint8_t channel){	
	uint8_t adc_channel;
	
	//select which channel to write to
	if (channel==0){
      cc:	88 23       	and	r24, r24
      ce:	41 f0       	breq	.+16     	; 0xe0 <adc_read+0x14>
		 adc_channel = 0b10000000;
	}
	else if (channel==1){
      d0:	81 30       	cpi	r24, 0x01	; 1
      d2:	41 f0       	breq	.+16     	; 0xe4 <adc_read+0x18>
		adc_channel = 0b10000001;
	}
	else if (channel==2){
      d4:	82 30       	cpi	r24, 0x02	; 2
      d6:	41 f0       	breq	.+16     	; 0xe8 <adc_read+0x1c>
		adc_channel = 0b10000010;
	}
	else if (channel==3){
      d8:	83 30       	cpi	r24, 0x03	; 3
      da:	39 f4       	brne	.+14     	; 0xea <adc_read+0x1e>
		adc_channel = 0b10000011;
      dc:	93 e8       	ldi	r25, 0x83	; 131
      de:	05 c0       	rjmp	.+10     	; 0xea <adc_read+0x1e>
uint8_t adc_read(uint8_t channel){	
	uint8_t adc_channel;
	
	//select which channel to write to
	if (channel==0){
		 adc_channel = 0b10000000;
      e0:	90 e8       	ldi	r25, 0x80	; 128
      e2:	03 c0       	rjmp	.+6      	; 0xea <adc_read+0x1e>
	}
	else if (channel==1){
		adc_channel = 0b10000001;
      e4:	91 e8       	ldi	r25, 0x81	; 129
      e6:	01 c0       	rjmp	.+2      	; 0xea <adc_read+0x1e>
	}
	else if (channel==2){
		adc_channel = 0b10000010;
      e8:	92 e8       	ldi	r25, 0x82	; 130
	}
	else if (channel==3){
		adc_channel = 0b10000011;
	}
	adc_reg[0] = adc_channel;
      ea:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <adc_reg>
      ee:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <adc_reg+0x1>
      f2:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f4:	81 e4       	ldi	r24, 0x41	; 65
      f6:	8a 95       	dec	r24
      f8:	f1 f7       	brne	.-4      	; 0xf6 <adc_read+0x2a>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <adc_read+0x30>
	_delay_us(40);
	uint8_t adc_val = adc_reg[0];
      fc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <adc_reg>
     100:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <adc_reg+0x1>
     104:	80 81       	ld	r24, Z
	
	return adc_val;
}
     106:	08 95       	ret

00000108 <can_init>:
#include <stdint.h>
#include <avr/interrupt.h>


void can_init(void){
	mcp2515_init();
     108:	0e 94 bc 02 	call	0x578	; 0x578 <mcp2515_init>
	mcp2515_write(MCP_CANINTE, 0X03);		//enables the reception complete flag (for the interrupt)
     10c:	63 e0       	ldi	r22, 0x03	; 3
     10e:	8b e2       	ldi	r24, 0x2B	; 43
     110:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_write>
		
	mcp2515_write(MCP_CNF3, 0x01);
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	88 e2       	ldi	r24, 0x28	; 40
     118:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xb5);
     11c:	65 eb       	ldi	r22, 0xB5	; 181
     11e:	89 e2       	ldi	r24, 0x29	; 41
     120:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_write>
	mcp2515_write(MCP_CNF1, 0x43);
     124:	63 e4       	ldi	r22, 0x43	; 67
     126:	8a e2       	ldi	r24, 0x2A	; 42
     128:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_write>
	
	//Check that the registers have the right values
	uint8_t cnf1 = mcp2515_read(MCP_CNF1);
     12c:	8a e2       	ldi	r24, 0x2A	; 42
     12e:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
	printf("cnf1:%d\r\n", cnf1);		//should be 67
     132:	1f 92       	push	r1
     134:	8f 93       	push	r24
     136:	88 e0       	ldi	r24, 0x08	; 8
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	9f 93       	push	r25
     13c:	8f 93       	push	r24
     13e:	0e 94 df 03 	call	0x7be	; 0x7be <printf>
	uint8_t cnf2 = mcp2515_read(MCP_CNF2);
     142:	89 e2       	ldi	r24, 0x29	; 41
     144:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
	printf("cnf2:%d\r\n", cnf2);		//should be 181
     148:	1f 92       	push	r1
     14a:	8f 93       	push	r24
     14c:	82 e1       	ldi	r24, 0x12	; 18
     14e:	91 e0       	ldi	r25, 0x01	; 1
     150:	9f 93       	push	r25
     152:	8f 93       	push	r24
     154:	0e 94 df 03 	call	0x7be	; 0x7be <printf>
	uint8_t cnf3 = mcp2515_read(MCP_CNF3);
     158:	88 e2       	ldi	r24, 0x28	; 40
     15a:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
	printf("cnf3:%d\r\n\n", cnf3);		//should be 1
     15e:	1f 92       	push	r1
     160:	8f 93       	push	r24
     162:	8c e1       	ldi	r24, 0x1C	; 28
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	9f 93       	push	r25
     168:	8f 93       	push	r24
     16a:	0e 94 df 03 	call	0x7be	; 0x7be <printf>
	
	
	mcp2515_write(MCP_CANCTRL, MODE_NORMAL);
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	8f e0       	ldi	r24, 0x0F	; 15
     172:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_write>
 	uint8_t value;

	value = mcp2515_read(MCP_CANSTAT);
     176:	8e e0       	ldi	r24, 0x0E	; 14
     178:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>

	if((value & MODE_MASK) != MODE_NORMAL){
     17c:	80 7e       	andi	r24, 0xE0	; 224
     17e:	2d b7       	in	r18, 0x3d	; 61
     180:	3e b7       	in	r19, 0x3e	; 62
     182:	24 5f       	subi	r18, 0xF4	; 244
     184:	3f 4f       	sbci	r19, 0xFF	; 255
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	3e bf       	out	0x3e, r19	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	2d bf       	out	0x3d, r18	; 61
     190:	88 23       	and	r24, r24
     192:	21 f0       	breq	.+8      	; 0x19c <can_init+0x94>
		printf("MCP2515 is NOT in normal mode after reset!\n");
     194:	87 e2       	ldi	r24, 0x27	; 39
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	0e 94 f5 03 	call	0x7ea	; 0x7ea <puts>
	}		
		
	// Disable global interrupts
	cli();
     19c:	f8 94       	cli
	// Interrupt on falling edge
	MCUCR |= (1<<ISC01);
     19e:	85 b7       	in	r24, 0x35	; 53
     1a0:	82 60       	ori	r24, 0x02	; 2
     1a2:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt 
	GICR |= (1<<INT0);
     1a4:	8b b7       	in	r24, 0x3b	; 59
     1a6:	80 64       	ori	r24, 0x40	; 64
     1a8:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     1aa:	78 94       	sei
     1ac:	08 95       	ret

000001ae <can_receive>:
	}

void can_receive(void){
     1ae:	af 92       	push	r10
     1b0:	bf 92       	push	r11
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	2c 97       	sbiw	r28, 0x0c	; 12
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
	can_msg msg;
	if(mcp2515_read_status() & 0x01){
     1d0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <mcp2515_read_status>
     1d4:	80 ff       	sbrs	r24, 0
     1d6:	33 c0       	rjmp	.+102    	; 0x23e <can_receive+0x90>
		msg.id = (mcp2515_read(MCP_RXB0SIDH) << 3)|(mcp2515_read(MCP_RXB0SIDL) >> 5);
     1d8:	81 e6       	ldi	r24, 0x61	; 97
     1da:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
     1de:	a8 2e       	mov	r10, r24
     1e0:	82 e6       	ldi	r24, 0x62	; 98
     1e2:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
     1e6:	b1 2c       	mov	r11, r1
     1e8:	aa 0c       	add	r10, r10
     1ea:	bb 1c       	adc	r11, r11
     1ec:	aa 0c       	add	r10, r10
     1ee:	bb 1c       	adc	r11, r11
     1f0:	aa 0c       	add	r10, r10
     1f2:	bb 1c       	adc	r11, r11
     1f4:	82 95       	swap	r24
     1f6:	86 95       	lsr	r24
     1f8:	87 70       	andi	r24, 0x07	; 7
     1fa:	a8 2a       	or	r10, r24
		msg.length = mcp2515_read(MCP_RXB0DLC);
     1fc:	85 e6       	ldi	r24, 0x65	; 101
     1fe:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
     202:	c8 2e       	mov	r12, r24
     204:	d1 2c       	mov	r13, r1
		for(uint8_t i = 0; i < (msg.length); i++){
     206:	1c 14       	cp	r1, r12
     208:	1d 04       	cpc	r1, r13
     20a:	a4 f4       	brge	.+40     	; 0x234 <can_receive+0x86>
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	f1 2c       	mov	r15, r1
			msg.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     212:	86 e6       	ldi	r24, 0x66	; 102
     214:	8f 0d       	add	r24, r15
     216:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
     21a:	e5 e0       	ldi	r30, 0x05	; 5
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	ec 0f       	add	r30, r28
     220:	fd 1f       	adc	r31, r29
     222:	e0 0f       	add	r30, r16
     224:	f1 1f       	adc	r31, r17
     226:	80 83       	st	Z, r24
void can_receive(void){
	can_msg msg;
	if(mcp2515_read_status() & 0x01){
		msg.id = (mcp2515_read(MCP_RXB0SIDH) << 3)|(mcp2515_read(MCP_RXB0SIDL) >> 5);
		msg.length = mcp2515_read(MCP_RXB0DLC);
		for(uint8_t i = 0; i < (msg.length); i++){
     228:	f3 94       	inc	r15
     22a:	0f 2d       	mov	r16, r15
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	0c 15       	cp	r16, r12
     230:	1d 05       	cpc	r17, r13
     232:	7c f3       	brlt	.-34     	; 0x212 <can_receive+0x64>
			msg.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}
		mcp2515_bit_modify(MCP_CANINTF,0x01, 0x00);
     234:	40 e0       	ldi	r20, 0x00	; 0
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	8c e2       	ldi	r24, 0x2C	; 44
     23a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <mcp2515_bit_modify>
	}
		
	if(mcp2515_read_status() & 0x02){
     23e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <mcp2515_read_status>
     242:	81 ff       	sbrs	r24, 1
     244:	33 c0       	rjmp	.+102    	; 0x2ac <can_receive+0xfe>
		msg.id = (mcp2515_read(MCP_RXB1SIDH) << 3)|(mcp2515_read(MCP_RXB1SIDL) >> 5);
     246:	81 e7       	ldi	r24, 0x71	; 113
     248:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
     24c:	a8 2e       	mov	r10, r24
     24e:	82 e7       	ldi	r24, 0x72	; 114
     250:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
     254:	b1 2c       	mov	r11, r1
     256:	aa 0c       	add	r10, r10
     258:	bb 1c       	adc	r11, r11
     25a:	aa 0c       	add	r10, r10
     25c:	bb 1c       	adc	r11, r11
     25e:	aa 0c       	add	r10, r10
     260:	bb 1c       	adc	r11, r11
     262:	82 95       	swap	r24
     264:	86 95       	lsr	r24
     266:	87 70       	andi	r24, 0x07	; 7
     268:	a8 2a       	or	r10, r24
		msg.length = mcp2515_read(MCP_RXB1DLC);
     26a:	85 e7       	ldi	r24, 0x75	; 117
     26c:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
     270:	c8 2e       	mov	r12, r24
     272:	d1 2c       	mov	r13, r1
		for(uint8_t i = 0; i < (msg.length); i++){
     274:	1c 14       	cp	r1, r12
     276:	1d 04       	cpc	r1, r13
     278:	a4 f4       	brge	.+40     	; 0x2a2 <can_receive+0xf4>
     27a:	00 e0       	ldi	r16, 0x00	; 0
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	f1 2c       	mov	r15, r1
			msg.data[i] = mcp2515_read(MCP_RXB1D0 + i);
     280:	86 e7       	ldi	r24, 0x76	; 118
     282:	8f 0d       	add	r24, r15
     284:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
     288:	e5 e0       	ldi	r30, 0x05	; 5
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	ec 0f       	add	r30, r28
     28e:	fd 1f       	adc	r31, r29
     290:	e0 0f       	add	r30, r16
     292:	f1 1f       	adc	r31, r17
     294:	80 83       	st	Z, r24
	}
		
	if(mcp2515_read_status() & 0x02){
		msg.id = (mcp2515_read(MCP_RXB1SIDH) << 3)|(mcp2515_read(MCP_RXB1SIDL) >> 5);
		msg.length = mcp2515_read(MCP_RXB1DLC);
		for(uint8_t i = 0; i < (msg.length); i++){
     296:	f3 94       	inc	r15
     298:	0f 2d       	mov	r16, r15
     29a:	10 e0       	ldi	r17, 0x00	; 0
     29c:	0c 15       	cp	r16, r12
     29e:	1d 05       	cpc	r17, r13
     2a0:	7c f3       	brlt	.-34     	; 0x280 <can_receive+0xd2>
			msg.data[i] = mcp2515_read(MCP_RXB1D0 + i);
		}
		mcp2515_bit_modify(MCP_CANINTF,0x02, 0x00);
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	62 e0       	ldi	r22, 0x02	; 2
     2a6:	8c e2       	ldi	r24, 0x2C	; 44
     2a8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <mcp2515_bit_modify>
	}
			
	printf("data: %c\r\nlength: %d\r\nid: %d\r\n\n", msg.data[0], msg.length, msg.id);
     2ac:	bf 92       	push	r11
     2ae:	af 92       	push	r10
     2b0:	df 92       	push	r13
     2b2:	cf 92       	push	r12
     2b4:	8d 81       	ldd	r24, Y+5	; 0x05
     2b6:	1f 92       	push	r1
     2b8:	8f 93       	push	r24
     2ba:	82 e5       	ldi	r24, 0x52	; 82
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	9f 93       	push	r25
     2c0:	8f 93       	push	r24
     2c2:	0e 94 df 03 	call	0x7be	; 0x7be <printf>
}
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	2c 96       	adiw	r28, 0x0c	; 12
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	ff 90       	pop	r15
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
     2ea:	bf 90       	pop	r11
     2ec:	af 90       	pop	r10
     2ee:	08 95       	ret

000002f0 <can_transmit>:

void can_transmit(can_msg msg){
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	2c 97       	sbiw	r28, 0x0c	; 12
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	e9 82       	std	Y+1, r14	; 0x01
     30e:	fa 82       	std	Y+2, r15	; 0x02
     310:	0b 83       	std	Y+3, r16	; 0x03
     312:	1c 83       	std	Y+4, r17	; 0x04
     314:	2d 83       	std	Y+5, r18	; 0x05
     316:	3e 83       	std	Y+6, r19	; 0x06
     318:	4f 83       	std	Y+7, r20	; 0x07
     31a:	58 87       	std	Y+8, r21	; 0x08
     31c:	69 87       	std	Y+9, r22	; 0x09
     31e:	7a 87       	std	Y+10, r23	; 0x0a
     320:	8b 87       	std	Y+11, r24	; 0x0b
     322:	9c 87       	std	Y+12, r25	; 0x0c
     324:	e9 80       	ldd	r14, Y+1	; 0x01
     326:	fa 80       	ldd	r15, Y+2	; 0x02
     328:	0b 81       	ldd	r16, Y+3	; 0x03
     32a:	1c 81       	ldd	r17, Y+4	; 0x04
	mcp2515_write(MCP_TXB0SIDH, msg.id >> 3);
     32c:	b8 01       	movw	r22, r16
     32e:	75 95       	asr	r23
     330:	67 95       	ror	r22
     332:	75 95       	asr	r23
     334:	67 95       	ror	r22
     336:	75 95       	asr	r23
     338:	67 95       	ror	r22
     33a:	81 e3       	ldi	r24, 0x31	; 49
     33c:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
     340:	60 2f       	mov	r22, r16
     342:	62 95       	swap	r22
     344:	66 0f       	add	r22, r22
     346:	60 7e       	andi	r22, 0xE0	; 224
     348:	82 e3       	ldi	r24, 0x32	; 50
     34a:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_write>
	mcp2515_write(MCP_TXB0DLC, msg.length);
     34e:	6e 2d       	mov	r22, r14
     350:	85 e3       	ldi	r24, 0x35	; 53
     352:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_write>
	for(uint8_t i = 0; i < (msg.length); i++){
     356:	1e 14       	cp	r1, r14
     358:	1f 04       	cpc	r1, r15
     35a:	a4 f4       	brge	.+40     	; 0x384 <can_transmit+0x94>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
     362:	e5 e0       	ldi	r30, 0x05	; 5
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	ec 0f       	add	r30, r28
     368:	fd 1f       	adc	r31, r29
     36a:	e8 0f       	add	r30, r24
     36c:	f9 1f       	adc	r31, r25
     36e:	60 81       	ld	r22, Z
     370:	86 e3       	ldi	r24, 0x36	; 54
     372:	81 0f       	add	r24, r17
     374:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_write>

void can_transmit(can_msg msg){
	mcp2515_write(MCP_TXB0SIDH, msg.id >> 3);
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
	mcp2515_write(MCP_TXB0DLC, msg.length);
	for(uint8_t i = 0; i < (msg.length); i++){
     378:	1f 5f       	subi	r17, 0xFF	; 255
     37a:	81 2f       	mov	r24, r17
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	8e 15       	cp	r24, r14
     380:	9f 05       	cpc	r25, r15
     382:	7c f3       	brlt	.-34     	; 0x362 <can_transmit+0x72>
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
		//printf("data: %d\r\n", msg.data[i]);
	}
	mcp2515_request_to_send(0);
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	0e 94 cb 02 	call	0x596	; 0x596 <mcp2515_request_to_send>
	
	//printf("Sending:\r\ndata: %c\r\nlength: %d\r\nid: %d\r\n\n", msg.data[0], msg.length, msg.id);
}
     38a:	2c 96       	adiw	r28, 0x0c	; 12
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	08 95       	ret

000003a4 <__vector_1>:

ISR(INT0_vect){
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	2f 93       	push	r18
     3b0:	3f 93       	push	r19
     3b2:	4f 93       	push	r20
     3b4:	5f 93       	push	r21
     3b6:	6f 93       	push	r22
     3b8:	7f 93       	push	r23
     3ba:	8f 93       	push	r24
     3bc:	9f 93       	push	r25
     3be:	af 93       	push	r26
     3c0:	bf 93       	push	r27
     3c2:	ef 93       	push	r30
     3c4:	ff 93       	push	r31
	can_receive();
     3c6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <can_receive>
}
     3ca:	ff 91       	pop	r31
     3cc:	ef 91       	pop	r30
     3ce:	bf 91       	pop	r27
     3d0:	af 91       	pop	r26
     3d2:	9f 91       	pop	r25
     3d4:	8f 91       	pop	r24
     3d6:	7f 91       	pop	r23
     3d8:	6f 91       	pop	r22
     3da:	5f 91       	pop	r21
     3dc:	4f 91       	pop	r20
     3de:	3f 91       	pop	r19
     3e0:	2f 91       	pop	r18
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <joystick_init>:
	}
	else if((int)value > center){
		position = ((((255-(float)value)/(255-(float) center))*(-100)))+100;
	}
	return position;
}
     3ec:	9f 92       	push	r9
     3ee:	af 92       	push	r10
     3f0:	bf 92       	push	r11
     3f2:	cf 92       	push	r12
     3f4:	df 92       	push	r13
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	98 2e       	mov	r9, r24
     404:	5b 01       	movw	r10, r22
     406:	2f ef       	ldi	r18, 0xFF	; 255
     408:	8f e7       	ldi	r24, 0x7F	; 127
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	80 40       	sbci	r24, 0x00	; 0
     410:	90 40       	sbci	r25, 0x00	; 0
     412:	e1 f7       	brne	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     418:	16 16       	cp	r1, r22
     41a:	17 06       	cpc	r1, r23
     41c:	04 f5       	brge	.+64     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     41e:	c0 e0       	ldi	r28, 0x00	; 0
     420:	d0 e0       	ldi	r29, 0x00	; 0
     422:	00 e0       	ldi	r16, 0x00	; 0
     424:	10 e0       	ldi	r17, 0x00	; 0
     426:	0f 2e       	mov	r0, r31
     428:	f2 e7       	ldi	r31, 0x72	; 114
     42a:	ef 2e       	mov	r14, r31
     42c:	f1 e0       	ldi	r31, 0x01	; 1
     42e:	ff 2e       	mov	r15, r31
     430:	f0 2d       	mov	r31, r0
     432:	89 2d       	mov	r24, r9
     434:	0e 94 66 00 	call	0xcc	; 0xcc <adc_read>
     438:	c8 2e       	mov	r12, r24
     43a:	d1 2c       	mov	r13, r1
     43c:	1f 92       	push	r1
     43e:	8f 93       	push	r24
     440:	ff 92       	push	r15
     442:	ef 92       	push	r14
     444:	0e 94 df 03 	call	0x7be	; 0x7be <printf>
     448:	0c 0d       	add	r16, r12
     44a:	1d 1d       	adc	r17, r13
     44c:	21 96       	adiw	r28, 0x01	; 1
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	ac 16       	cp	r10, r28
     458:	bd 06       	cpc	r11, r29
     45a:	59 f7       	brne	.-42     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	00 e0       	ldi	r16, 0x00	; 0
     460:	10 e0       	ldi	r17, 0x00	; 0
     462:	c8 01       	movw	r24, r16
     464:	b5 01       	movw	r22, r10
     466:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__divmodhi4>
     46a:	cb 01       	movw	r24, r22
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	bf 90       	pop	r11
     47e:	af 90       	pop	r10
     480:	9f 90       	pop	r9
     482:	08 95       	ret

00000484 <send_position>:

void send_position(int position){
     484:	cf 92       	push	r12
     486:	df 92       	push	r13
     488:	ef 92       	push	r14
     48a:	ff 92       	push	r15
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	2c 97       	sbiw	r28, 0x0c	; 12
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	6c 01       	movw	r12, r24
	//printf("position: %d\r\n", position);
	can_msg msg;
	msg.id = 1;
	msg.length = 1;
	msg.data[0] = (char)position;
	printf("message id in node 1: %d\r\n", msg.id);
     4a6:	1f 92       	push	r1
     4a8:	11 e0       	ldi	r17, 0x01	; 1
     4aa:	1f 93       	push	r17
     4ac:	8e e7       	ldi	r24, 0x7E	; 126
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	0e 94 df 03 	call	0x7be	; 0x7be <printf>
	printf("message length in node 1: %d\r\n", msg.length);
     4b8:	1f 92       	push	r1
     4ba:	1f 93       	push	r17
     4bc:	89 e9       	ldi	r24, 0x99	; 153
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	9f 93       	push	r25
     4c2:	8f 93       	push	r24
     4c4:	0e 94 df 03 	call	0x7be	; 0x7be <printf>
	printf("message data in node 1: %d\r\n\n", msg.data[0]);
     4c8:	c6 01       	movw	r24, r12
     4ca:	99 27       	eor	r25, r25
     4cc:	9f 93       	push	r25
     4ce:	8f 93       	push	r24
     4d0:	88 eb       	ldi	r24, 0xB8	; 184
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	0e 94 df 03 	call	0x7be	; 0x7be <printf>
	can_transmit(msg);
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	e8 2e       	mov	r14, r24
     4e2:	89 83       	std	Y+1, r24	; 0x01
     4e4:	9a 83       	std	Y+2, r25	; 0x02
     4e6:	08 2f       	mov	r16, r24
     4e8:	8b 83       	std	Y+3, r24	; 0x03
     4ea:	9c 83       	std	Y+4, r25	; 0x04
     4ec:	f1 2c       	mov	r15, r1
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	2c 2d       	mov	r18, r12
     4f2:	3e 81       	ldd	r19, Y+6	; 0x06
     4f4:	4f 81       	ldd	r20, Y+7	; 0x07
     4f6:	58 85       	ldd	r21, Y+8	; 0x08
     4f8:	69 85       	ldd	r22, Y+9	; 0x09
     4fa:	7a 85       	ldd	r23, Y+10	; 0x0a
     4fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     4fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     500:	0e 94 78 01 	call	0x2f0	; 0x2f0 <can_transmit>
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	2c 96       	adiw	r28, 0x0c	; 12
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	ff 90       	pop	r15
     524:	ef 90       	pop	r14
     526:	df 90       	pop	r13
     528:	cf 90       	pop	r12
     52a:	08 95       	ret

0000052c <mcp2515_read>:
	SPI_MasterTransmit(MCP_CNF3);
	SPI_MasterTransmit(0b00000110);
	*/
}

uint8_t mcp2515_read(uint8_t address){
     52c:	cf 93       	push	r28
     52e:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	PORTB &= ~(1<<PB4);
     530:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_READ);
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     538:	8c 2f       	mov	r24, r28
     53a:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	result = SPI_MasterReceive();
     53e:	0e 94 1d 03 	call	0x63a	; 0x63a <SPI_MasterReceive>
	
	PORTB |= (1<<PB4);
     542:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	d8 2f       	mov	r29, r24
     54e:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4);
     550:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_WRITE);
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     558:	8d 2f       	mov	r24, r29
     55a:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     55e:	8c 2f       	mov	r24, r28
     560:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     564:	c4 9a       	sbi	0x18, 4	; 24
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <mcp2515_reset>:

void mcp2515_reset(void){
	PORTB &= ~(1<<PB4);
     56c:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_RESET);
     56e:	80 ec       	ldi	r24, 0xC0	; 192
     570:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     574:	c4 9a       	sbi	0x18, 4	; 24
     576:	08 95       	ret

00000578 <mcp2515_init>:
int status;

void mcp2515_init(void){
	uint8_t value;

	SPI_MasterInit();
     578:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_MasterInit>
	mcp2515_reset();
     57c:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_reset>
	
	value = mcp2515_read(MCP_CANSTAT);
     580:	8e e0       	ldi	r24, 0x0E	; 14
     582:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     586:	80 7e       	andi	r24, 0xE0	; 224
     588:	80 38       	cpi	r24, 0x80	; 128
     58a:	21 f0       	breq	.+8      	; 0x594 <mcp2515_init+0x1c>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     58c:	86 ed       	ldi	r24, 0xD6	; 214
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 f5 03 	call	0x7ea	; 0x7ea <puts>
     594:	08 95       	ret

00000596 <mcp2515_request_to_send>:
	PORTB |= (1<<PB4);
}


void mcp2515_request_to_send(uint8_t buffer){
	PORTB &= ~(1<<PB4);
     596:	c4 98       	cbi	0x18, 4	; 24
	switch(buffer){
     598:	81 30       	cpi	r24, 0x01	; 1
     59a:	51 f0       	breq	.+20     	; 0x5b0 <mcp2515_request_to_send+0x1a>
     59c:	28 f0       	brcs	.+10     	; 0x5a8 <mcp2515_request_to_send+0x12>
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	59 f0       	breq	.+22     	; 0x5b8 <mcp2515_request_to_send+0x22>
     5a2:	89 30       	cpi	r24, 0x09	; 9
     5a4:	69 f0       	breq	.+26     	; 0x5c0 <mcp2515_request_to_send+0x2a>
     5a6:	10 c0       	rjmp	.+32     	; 0x5c8 <mcp2515_request_to_send+0x32>
	case 0:
		SPI_MasterTransmit(MCP_RTS_TX0);
     5a8:	81 e8       	ldi	r24, 0x81	; 129
     5aa:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	break;
     5ae:	14 c0       	rjmp	.+40     	; 0x5d8 <mcp2515_request_to_send+0x42>
	case 1:
		SPI_MasterTransmit(MCP_RTS_TX1);
     5b0:	82 e8       	ldi	r24, 0x82	; 130
     5b2:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	break;
     5b6:	10 c0       	rjmp	.+32     	; 0x5d8 <mcp2515_request_to_send+0x42>
	case 2:
		SPI_MasterTransmit(MCP_RTS_TX2);
     5b8:	84 e8       	ldi	r24, 0x84	; 132
     5ba:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	break;
     5be:	0c c0       	rjmp	.+24     	; 0x5d8 <mcp2515_request_to_send+0x42>
	case 9:
		SPI_MasterTransmit(MCP_RTS_ALL);
     5c0:	87 e8       	ldi	r24, 0x87	; 135
     5c2:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	break;
     5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <mcp2515_request_to_send+0x42>
	default:
		printf("Not a valid entry\n\r try again");
     5c8:	88 e0       	ldi	r24, 0x08	; 8
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 df 03 	call	0x7be	; 0x7be <printf>
	break;
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
	}
	PORTB |= (1<<PB4);
     5d8:	c4 9a       	sbi	0x18, 4	; 24
     5da:	08 95       	ret

000005dc <mcp2515_read_status>:
}

uint8_t mcp2515_read_status(void){
	uint8_t result;
	PORTB &= ~(1<<PB4);
     5dc:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_READ_STATUS);
     5de:	80 ea       	ldi	r24, 0xA0	; 160
     5e0:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	result = SPI_MasterReceive();
     5e4:	0e 94 1d 03 	call	0x63a	; 0x63a <SPI_MasterReceive>
	PORTB |= (1<<PB4);
     5e8:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     5ea:	08 95       	ret

000005ec <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t data_mask, uint8_t data){
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	18 2f       	mov	r17, r24
     5f4:	d6 2f       	mov	r29, r22
     5f6:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);
     5f8:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_BITMOD);
     5fa:	85 e0       	ldi	r24, 0x05	; 5
     5fc:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     600:	81 2f       	mov	r24, r17
     602:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	SPI_MasterTransmit(data_mask);
     606:	8d 2f       	mov	r24, r29
     608:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     60c:	8c 2f       	mov	r24, r28
     60e:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     612:	c4 9a       	sbi	0x18, 4	; 24
}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	08 95       	ret

0000061c <SPI_MasterInit>:
#define SCK PB7

//Needed for initializing the SPI as a master
void SPI_MasterInit(void){
	// Set MOSI and SCK output, all others input, set CS as output
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);
     61c:	87 b3       	in	r24, 0x17	; 23
     61e:	80 6b       	ori	r24, 0xB0	; 176
     620:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);
     622:	be 98       	cbi	0x17, 6	; 23
	
	// Enable SPI, Master, set clock rate fck/16 & select mode 00
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     624:	8d b1       	in	r24, 0x0d	; 13
     626:	81 65       	ori	r24, 0x51	; 81
     628:	8d b9       	out	0x0d, r24	; 13

	SPCR &= ~(1<<CPOL);		//Not required
     62a:	6b 98       	cbi	0x0d, 3	; 13
	SPCR &= ~(1<<CPHA);		//Not required
     62c:	6a 98       	cbi	0x0d, 2	; 13

	PORTB |= (1<<SS);
     62e:	c4 9a       	sbi	0x18, 4	; 24
     630:	08 95       	ret

00000632 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData){
	// Start transmission 
	SPDR = cData;
     632:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete 
	while(!(SPSR & (1<<SPIF)));
     634:	77 9b       	sbis	0x0e, 7	; 14
     636:	fe cf       	rjmp	.-4      	; 0x634 <SPI_MasterTransmit+0x2>
}
     638:	08 95       	ret

0000063a <SPI_MasterReceive>:


char SPI_MasterReceive(void){
	SPI_MasterTransmit('a');
     63a:	81 e6       	ldi	r24, 0x61	; 97
     63c:	0e 94 19 03 	call	0x632	; 0x632 <SPI_MasterTransmit>
	return SPDR;
     640:	8f b1       	in	r24, 0x0f	; 15
}  
     642:	08 95       	ret

00000644 <SRAM_init>:
	//DDRC |= (1 << PC3);
	//PORTC = 0x04;
	volatile char *ext_ram = (char *) 0x1800;
	//printf("\r\n\n\nInitiating SRAM...\r\n");
	
	MCUCR |= (1<<SRE);
     644:	85 b7       	in	r24, 0x35	; 53
     646:	80 68       	ori	r24, 0x80	; 128
     648:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<5);
     64a:	80 b7       	in	r24, 0x30	; 48
     64c:	80 62       	ori	r24, 0x20	; 32
     64e:	80 bf       	out	0x30, r24	; 48
     650:	08 95       	ret

00000652 <main>:
#define HORIZONTAL 0
#define VERTICAL 1

int main(void)
{	int rec;
	USART_Init(MYUBRR);
     652:	8f e1       	ldi	r24, 0x1F	; 31
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 5d 03 	call	0x6ba	; 0x6ba <USART_Init>
	
	fdevopen(USART_Transmit, USART_Receive);
     65a:	68 e6       	ldi	r22, 0x68	; 104
     65c:	73 e0       	ldi	r23, 0x03	; 3
     65e:	84 e6       	ldi	r24, 0x64	; 100
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	0e 94 94 03 	call	0x728	; 0x728 <fdevopen>
	
	clock_timer();
     666:	0e 94 57 00 	call	0xae	; 0xae <clock_timer>
	SRAM_init();
     66a:	0e 94 22 03 	call	0x644	; 0x644 <SRAM_init>
	can_init();
     66e:	0e 94 84 00 	call	0x108	; 0x108 <can_init>
	
	int centerH = joystick_init(HORIZONTAL, 10);
     672:	6a e0       	ldi	r22, 0x0A	; 10
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 f6 01 	call	0x3ec	; 0x3ec <joystick_init>
	//printf("CENTER: %d\r\n", centerH);
	
	int centerV = joystick_init(VERTICAL, 10);
     67c:	6a e0       	ldi	r22, 0x0A	; 10
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	0e 94 f6 01 	call	0x3ec	; 0x3ec <joystick_init>
		//printf("Vertical output: %d\r\n", outputV);
	}*/
	//***************** SENDING JOYSTICK POSITIONS OVER CAN TO NODE 2 **************/
	
	while (1){
		int valueH = adc_read(HORIZONTAL);
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0e 94 66 00 	call	0xcc	; 0xcc <adc_read>
     68c:	d8 2f       	mov	r29, r24
		//printf("ADC output X: %d\r\n", valueH);
		int valueV = adc_read(VERTICAL);
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 66 00 	call	0xcc	; 0xcc <adc_read>
     694:	c8 2f       	mov	r28, r24
		//printf("ADC output Y: %d\r\n\n", valueV);
		send_position(valueH/*normalize_output_joystick(valueH, centerH)*/);
     696:	8d 2f       	mov	r24, r29
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 42 02 	call	0x484	; 0x484 <send_position>
		send_position(valueV/*normalize_output_joystick(valueV, centerV)*/);
     69e:	8c 2f       	mov	r24, r28
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 42 02 	call	0x484	; 0x484 <send_position>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a6:	2f ef       	ldi	r18, 0xFF	; 255
     6a8:	8f ef       	ldi	r24, 0xFF	; 255
     6aa:	9c e2       	ldi	r25, 0x2C	; 44
     6ac:	21 50       	subi	r18, 0x01	; 1
     6ae:	80 40       	sbci	r24, 0x00	; 0
     6b0:	90 40       	sbci	r25, 0x00	; 0
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <main+0x5a>
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <main+0x64>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <main+0x66>
     6b8:	e6 cf       	rjmp	.-52     	; 0x686 <main+0x34>

000006ba <USART_Init>:
#include "uart.h"

void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
     6ba:	9c bf       	out	0x3c, r25	; 60
	UBRR1L = (unsigned char)ubrr;
     6bc:	80 b9       	out	0x00, r24	; 0
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     6be:	88 e1       	ldi	r24, 0x18	; 24
     6c0:	81 b9       	out	0x01, r24	; 1
	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (1<<URSEL1)|(1<<USBS1)|(3<<UCSZ10);
     6c2:	8e e8       	ldi	r24, 0x8E	; 142
     6c4:	8c bf       	out	0x3c, r24	; 60
     6c6:	08 95       	ret

000006c8 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) );
     6c8:	15 9b       	sbis	0x02, 5	; 2
     6ca:	fe cf       	rjmp	.-4      	; 0x6c8 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR1 = data;
     6cc:	83 b9       	out	0x03, r24	; 3
     6ce:	08 95       	ret

000006d0 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) );
     6d0:	17 9b       	sbis	0x02, 7	; 2
     6d2:	fe cf       	rjmp	.-4      	; 0x6d0 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR1;
     6d4:	83 b1       	in	r24, 0x03	; 3
     6d6:	08 95       	ret

000006d8 <__divmodhi4>:
     6d8:	97 fb       	bst	r25, 7
     6da:	07 2e       	mov	r0, r23
     6dc:	16 f4       	brtc	.+4      	; 0x6e2 <__divmodhi4+0xa>
     6de:	00 94       	com	r0
     6e0:	07 d0       	rcall	.+14     	; 0x6f0 <__divmodhi4_neg1>
     6e2:	77 fd       	sbrc	r23, 7
     6e4:	09 d0       	rcall	.+18     	; 0x6f8 <__divmodhi4_neg2>
     6e6:	0e 94 80 03 	call	0x700	; 0x700 <__udivmodhi4>
     6ea:	07 fc       	sbrc	r0, 7
     6ec:	05 d0       	rcall	.+10     	; 0x6f8 <__divmodhi4_neg2>
     6ee:	3e f4       	brtc	.+14     	; 0x6fe <__divmodhi4_exit>

000006f0 <__divmodhi4_neg1>:
     6f0:	90 95       	com	r25
     6f2:	81 95       	neg	r24
     6f4:	9f 4f       	sbci	r25, 0xFF	; 255
     6f6:	08 95       	ret

000006f8 <__divmodhi4_neg2>:
     6f8:	70 95       	com	r23
     6fa:	61 95       	neg	r22
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255

000006fe <__divmodhi4_exit>:
     6fe:	08 95       	ret

00000700 <__udivmodhi4>:
     700:	aa 1b       	sub	r26, r26
     702:	bb 1b       	sub	r27, r27
     704:	51 e1       	ldi	r21, 0x11	; 17
     706:	07 c0       	rjmp	.+14     	; 0x716 <__udivmodhi4_ep>

00000708 <__udivmodhi4_loop>:
     708:	aa 1f       	adc	r26, r26
     70a:	bb 1f       	adc	r27, r27
     70c:	a6 17       	cp	r26, r22
     70e:	b7 07       	cpc	r27, r23
     710:	10 f0       	brcs	.+4      	; 0x716 <__udivmodhi4_ep>
     712:	a6 1b       	sub	r26, r22
     714:	b7 0b       	sbc	r27, r23

00000716 <__udivmodhi4_ep>:
     716:	88 1f       	adc	r24, r24
     718:	99 1f       	adc	r25, r25
     71a:	5a 95       	dec	r21
     71c:	a9 f7       	brne	.-22     	; 0x708 <__udivmodhi4_loop>
     71e:	80 95       	com	r24
     720:	90 95       	com	r25
     722:	bc 01       	movw	r22, r24
     724:	cd 01       	movw	r24, r26
     726:	08 95       	ret

00000728 <fdevopen>:
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	00 97       	sbiw	r24, 0x00	; 0
     732:	31 f4       	brne	.+12     	; 0x740 <fdevopen+0x18>
     734:	61 15       	cp	r22, r1
     736:	71 05       	cpc	r23, r1
     738:	19 f4       	brne	.+6      	; 0x740 <fdevopen+0x18>
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	3a c0       	rjmp	.+116    	; 0x7b4 <fdevopen+0x8c>
     740:	8b 01       	movw	r16, r22
     742:	ec 01       	movw	r28, r24
     744:	6e e0       	ldi	r22, 0x0E	; 14
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 06 06 	call	0xc0c	; 0xc0c <calloc>
     750:	fc 01       	movw	r30, r24
     752:	89 2b       	or	r24, r25
     754:	91 f3       	breq	.-28     	; 0x73a <fdevopen+0x12>
     756:	80 e8       	ldi	r24, 0x80	; 128
     758:	83 83       	std	Z+3, r24	; 0x03
     75a:	01 15       	cp	r16, r1
     75c:	11 05       	cpc	r17, r1
     75e:	71 f0       	breq	.+28     	; 0x77c <fdevopen+0x54>
     760:	13 87       	std	Z+11, r17	; 0x0b
     762:	02 87       	std	Z+10, r16	; 0x0a
     764:	81 e8       	ldi	r24, 0x81	; 129
     766:	83 83       	std	Z+3, r24	; 0x03
     768:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
     76c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <__data_end+0x1>
     770:	89 2b       	or	r24, r25
     772:	21 f4       	brne	.+8      	; 0x77c <fdevopen+0x54>
     774:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <__data_end+0x1>
     778:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <__data_end>
     77c:	20 97       	sbiw	r28, 0x00	; 0
     77e:	c9 f0       	breq	.+50     	; 0x7b2 <fdevopen+0x8a>
     780:	d1 87       	std	Z+9, r29	; 0x09
     782:	c0 87       	std	Z+8, r28	; 0x08
     784:	83 81       	ldd	r24, Z+3	; 0x03
     786:	82 60       	ori	r24, 0x02	; 2
     788:	83 83       	std	Z+3, r24	; 0x03
     78a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end+0x2>
     78e:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x3>
     792:	89 2b       	or	r24, r25
     794:	71 f4       	brne	.+28     	; 0x7b2 <fdevopen+0x8a>
     796:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <__data_end+0x3>
     79a:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <__data_end+0x2>
     79e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__data_end+0x4>
     7a2:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <__data_end+0x5>
     7a6:	89 2b       	or	r24, r25
     7a8:	21 f4       	brne	.+8      	; 0x7b2 <fdevopen+0x8a>
     7aa:	f0 93 2b 02 	sts	0x022B, r31	; 0x80022b <__data_end+0x5>
     7ae:	e0 93 2a 02 	sts	0x022A, r30	; 0x80022a <__data_end+0x4>
     7b2:	cf 01       	movw	r24, r30
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <printf>:
     7be:	a0 e0       	ldi	r26, 0x00	; 0
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	e5 ee       	ldi	r30, 0xE5	; 229
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__prologue_saves__+0x20>
     7ca:	ae 01       	movw	r20, r28
     7cc:	4b 5f       	subi	r20, 0xFB	; 251
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	fa 01       	movw	r30, r20
     7d2:	61 91       	ld	r22, Z+
     7d4:	71 91       	ld	r23, Z+
     7d6:	af 01       	movw	r20, r30
     7d8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end+0x2>
     7dc:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x3>
     7e0:	0e 94 25 04 	call	0x84a	; 0x84a <vfprintf>
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 26 08 	jmp	0x104c	; 0x104c <__epilogue_restores__+0x20>

000007ea <puts>:
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <__data_end+0x2>
     7f6:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <__data_end+0x3>
     7fa:	23 81       	ldd	r18, Z+3	; 0x03
     7fc:	21 ff       	sbrs	r18, 1
     7fe:	1b c0       	rjmp	.+54     	; 0x836 <puts+0x4c>
     800:	8c 01       	movw	r16, r24
     802:	d0 e0       	ldi	r29, 0x00	; 0
     804:	c0 e0       	ldi	r28, 0x00	; 0
     806:	f8 01       	movw	r30, r16
     808:	81 91       	ld	r24, Z+
     80a:	8f 01       	movw	r16, r30
     80c:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <__data_end+0x2>
     810:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <__data_end+0x3>
     814:	db 01       	movw	r26, r22
     816:	18 96       	adiw	r26, 0x08	; 8
     818:	ed 91       	ld	r30, X+
     81a:	fc 91       	ld	r31, X
     81c:	19 97       	sbiw	r26, 0x09	; 9
     81e:	88 23       	and	r24, r24
     820:	31 f0       	breq	.+12     	; 0x82e <puts+0x44>
     822:	09 95       	icall
     824:	89 2b       	or	r24, r25
     826:	79 f3       	breq	.-34     	; 0x806 <puts+0x1c>
     828:	df ef       	ldi	r29, 0xFF	; 255
     82a:	cf ef       	ldi	r28, 0xFF	; 255
     82c:	ec cf       	rjmp	.-40     	; 0x806 <puts+0x1c>
     82e:	8a e0       	ldi	r24, 0x0A	; 10
     830:	09 95       	icall
     832:	89 2b       	or	r24, r25
     834:	19 f0       	breq	.+6      	; 0x83c <puts+0x52>
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	9f ef       	ldi	r25, 0xFF	; 255
     83a:	02 c0       	rjmp	.+4      	; 0x840 <puts+0x56>
     83c:	8d 2f       	mov	r24, r29
     83e:	9c 2f       	mov	r25, r28
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <vfprintf>:
     84a:	ab e0       	ldi	r26, 0x0B	; 11
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__prologue_saves__>
     856:	6c 01       	movw	r12, r24
     858:	7b 01       	movw	r14, r22
     85a:	8a 01       	movw	r16, r20
     85c:	fc 01       	movw	r30, r24
     85e:	17 82       	std	Z+7, r1	; 0x07
     860:	16 82       	std	Z+6, r1	; 0x06
     862:	83 81       	ldd	r24, Z+3	; 0x03
     864:	81 ff       	sbrs	r24, 1
     866:	cc c1       	rjmp	.+920    	; 0xc00 <vfprintf+0x3b6>
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	3c 01       	movw	r6, r24
     86e:	f6 01       	movw	r30, r12
     870:	93 81       	ldd	r25, Z+3	; 0x03
     872:	f7 01       	movw	r30, r14
     874:	93 fd       	sbrc	r25, 3
     876:	85 91       	lpm	r24, Z+
     878:	93 ff       	sbrs	r25, 3
     87a:	81 91       	ld	r24, Z+
     87c:	7f 01       	movw	r14, r30
     87e:	88 23       	and	r24, r24
     880:	09 f4       	brne	.+2      	; 0x884 <vfprintf+0x3a>
     882:	ba c1       	rjmp	.+884    	; 0xbf8 <vfprintf+0x3ae>
     884:	85 32       	cpi	r24, 0x25	; 37
     886:	39 f4       	brne	.+14     	; 0x896 <vfprintf+0x4c>
     888:	93 fd       	sbrc	r25, 3
     88a:	85 91       	lpm	r24, Z+
     88c:	93 ff       	sbrs	r25, 3
     88e:	81 91       	ld	r24, Z+
     890:	7f 01       	movw	r14, r30
     892:	85 32       	cpi	r24, 0x25	; 37
     894:	29 f4       	brne	.+10     	; 0x8a0 <vfprintf+0x56>
     896:	b6 01       	movw	r22, r12
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 60 07 	call	0xec0	; 0xec0 <fputc>
     89e:	e7 cf       	rjmp	.-50     	; 0x86e <vfprintf+0x24>
     8a0:	91 2c       	mov	r9, r1
     8a2:	21 2c       	mov	r2, r1
     8a4:	31 2c       	mov	r3, r1
     8a6:	ff e1       	ldi	r31, 0x1F	; 31
     8a8:	f3 15       	cp	r31, r3
     8aa:	d8 f0       	brcs	.+54     	; 0x8e2 <vfprintf+0x98>
     8ac:	8b 32       	cpi	r24, 0x2B	; 43
     8ae:	79 f0       	breq	.+30     	; 0x8ce <vfprintf+0x84>
     8b0:	38 f4       	brcc	.+14     	; 0x8c0 <vfprintf+0x76>
     8b2:	80 32       	cpi	r24, 0x20	; 32
     8b4:	79 f0       	breq	.+30     	; 0x8d4 <vfprintf+0x8a>
     8b6:	83 32       	cpi	r24, 0x23	; 35
     8b8:	a1 f4       	brne	.+40     	; 0x8e2 <vfprintf+0x98>
     8ba:	23 2d       	mov	r18, r3
     8bc:	20 61       	ori	r18, 0x10	; 16
     8be:	1d c0       	rjmp	.+58     	; 0x8fa <vfprintf+0xb0>
     8c0:	8d 32       	cpi	r24, 0x2D	; 45
     8c2:	61 f0       	breq	.+24     	; 0x8dc <vfprintf+0x92>
     8c4:	80 33       	cpi	r24, 0x30	; 48
     8c6:	69 f4       	brne	.+26     	; 0x8e2 <vfprintf+0x98>
     8c8:	23 2d       	mov	r18, r3
     8ca:	21 60       	ori	r18, 0x01	; 1
     8cc:	16 c0       	rjmp	.+44     	; 0x8fa <vfprintf+0xb0>
     8ce:	83 2d       	mov	r24, r3
     8d0:	82 60       	ori	r24, 0x02	; 2
     8d2:	38 2e       	mov	r3, r24
     8d4:	e3 2d       	mov	r30, r3
     8d6:	e4 60       	ori	r30, 0x04	; 4
     8d8:	3e 2e       	mov	r3, r30
     8da:	2a c0       	rjmp	.+84     	; 0x930 <vfprintf+0xe6>
     8dc:	f3 2d       	mov	r31, r3
     8de:	f8 60       	ori	r31, 0x08	; 8
     8e0:	1d c0       	rjmp	.+58     	; 0x91c <vfprintf+0xd2>
     8e2:	37 fc       	sbrc	r3, 7
     8e4:	2d c0       	rjmp	.+90     	; 0x940 <vfprintf+0xf6>
     8e6:	20 ed       	ldi	r18, 0xD0	; 208
     8e8:	28 0f       	add	r18, r24
     8ea:	2a 30       	cpi	r18, 0x0A	; 10
     8ec:	40 f0       	brcs	.+16     	; 0x8fe <vfprintf+0xb4>
     8ee:	8e 32       	cpi	r24, 0x2E	; 46
     8f0:	b9 f4       	brne	.+46     	; 0x920 <vfprintf+0xd6>
     8f2:	36 fc       	sbrc	r3, 6
     8f4:	81 c1       	rjmp	.+770    	; 0xbf8 <vfprintf+0x3ae>
     8f6:	23 2d       	mov	r18, r3
     8f8:	20 64       	ori	r18, 0x40	; 64
     8fa:	32 2e       	mov	r3, r18
     8fc:	19 c0       	rjmp	.+50     	; 0x930 <vfprintf+0xe6>
     8fe:	36 fe       	sbrs	r3, 6
     900:	06 c0       	rjmp	.+12     	; 0x90e <vfprintf+0xc4>
     902:	8a e0       	ldi	r24, 0x0A	; 10
     904:	98 9e       	mul	r9, r24
     906:	20 0d       	add	r18, r0
     908:	11 24       	eor	r1, r1
     90a:	92 2e       	mov	r9, r18
     90c:	11 c0       	rjmp	.+34     	; 0x930 <vfprintf+0xe6>
     90e:	ea e0       	ldi	r30, 0x0A	; 10
     910:	2e 9e       	mul	r2, r30
     912:	20 0d       	add	r18, r0
     914:	11 24       	eor	r1, r1
     916:	22 2e       	mov	r2, r18
     918:	f3 2d       	mov	r31, r3
     91a:	f0 62       	ori	r31, 0x20	; 32
     91c:	3f 2e       	mov	r3, r31
     91e:	08 c0       	rjmp	.+16     	; 0x930 <vfprintf+0xe6>
     920:	8c 36       	cpi	r24, 0x6C	; 108
     922:	21 f4       	brne	.+8      	; 0x92c <vfprintf+0xe2>
     924:	83 2d       	mov	r24, r3
     926:	80 68       	ori	r24, 0x80	; 128
     928:	38 2e       	mov	r3, r24
     92a:	02 c0       	rjmp	.+4      	; 0x930 <vfprintf+0xe6>
     92c:	88 36       	cpi	r24, 0x68	; 104
     92e:	41 f4       	brne	.+16     	; 0x940 <vfprintf+0xf6>
     930:	f7 01       	movw	r30, r14
     932:	93 fd       	sbrc	r25, 3
     934:	85 91       	lpm	r24, Z+
     936:	93 ff       	sbrs	r25, 3
     938:	81 91       	ld	r24, Z+
     93a:	7f 01       	movw	r14, r30
     93c:	81 11       	cpse	r24, r1
     93e:	b3 cf       	rjmp	.-154    	; 0x8a6 <vfprintf+0x5c>
     940:	98 2f       	mov	r25, r24
     942:	9f 7d       	andi	r25, 0xDF	; 223
     944:	95 54       	subi	r25, 0x45	; 69
     946:	93 30       	cpi	r25, 0x03	; 3
     948:	28 f4       	brcc	.+10     	; 0x954 <vfprintf+0x10a>
     94a:	0c 5f       	subi	r16, 0xFC	; 252
     94c:	1f 4f       	sbci	r17, 0xFF	; 255
     94e:	9f e3       	ldi	r25, 0x3F	; 63
     950:	99 83       	std	Y+1, r25	; 0x01
     952:	0d c0       	rjmp	.+26     	; 0x96e <vfprintf+0x124>
     954:	83 36       	cpi	r24, 0x63	; 99
     956:	31 f0       	breq	.+12     	; 0x964 <vfprintf+0x11a>
     958:	83 37       	cpi	r24, 0x73	; 115
     95a:	71 f0       	breq	.+28     	; 0x978 <vfprintf+0x12e>
     95c:	83 35       	cpi	r24, 0x53	; 83
     95e:	09 f0       	breq	.+2      	; 0x962 <vfprintf+0x118>
     960:	59 c0       	rjmp	.+178    	; 0xa14 <vfprintf+0x1ca>
     962:	21 c0       	rjmp	.+66     	; 0x9a6 <vfprintf+0x15c>
     964:	f8 01       	movw	r30, r16
     966:	80 81       	ld	r24, Z
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	0e 5f       	subi	r16, 0xFE	; 254
     96c:	1f 4f       	sbci	r17, 0xFF	; 255
     96e:	88 24       	eor	r8, r8
     970:	83 94       	inc	r8
     972:	91 2c       	mov	r9, r1
     974:	53 01       	movw	r10, r6
     976:	13 c0       	rjmp	.+38     	; 0x99e <vfprintf+0x154>
     978:	28 01       	movw	r4, r16
     97a:	f2 e0       	ldi	r31, 0x02	; 2
     97c:	4f 0e       	add	r4, r31
     97e:	51 1c       	adc	r5, r1
     980:	f8 01       	movw	r30, r16
     982:	a0 80       	ld	r10, Z
     984:	b1 80       	ldd	r11, Z+1	; 0x01
     986:	36 fe       	sbrs	r3, 6
     988:	03 c0       	rjmp	.+6      	; 0x990 <vfprintf+0x146>
     98a:	69 2d       	mov	r22, r9
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	02 c0       	rjmp	.+4      	; 0x994 <vfprintf+0x14a>
     990:	6f ef       	ldi	r22, 0xFF	; 255
     992:	7f ef       	ldi	r23, 0xFF	; 255
     994:	c5 01       	movw	r24, r10
     996:	0e 94 55 07 	call	0xeaa	; 0xeaa <strnlen>
     99a:	4c 01       	movw	r8, r24
     99c:	82 01       	movw	r16, r4
     99e:	f3 2d       	mov	r31, r3
     9a0:	ff 77       	andi	r31, 0x7F	; 127
     9a2:	3f 2e       	mov	r3, r31
     9a4:	16 c0       	rjmp	.+44     	; 0x9d2 <vfprintf+0x188>
     9a6:	28 01       	movw	r4, r16
     9a8:	22 e0       	ldi	r18, 0x02	; 2
     9aa:	42 0e       	add	r4, r18
     9ac:	51 1c       	adc	r5, r1
     9ae:	f8 01       	movw	r30, r16
     9b0:	a0 80       	ld	r10, Z
     9b2:	b1 80       	ldd	r11, Z+1	; 0x01
     9b4:	36 fe       	sbrs	r3, 6
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <vfprintf+0x174>
     9b8:	69 2d       	mov	r22, r9
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <vfprintf+0x178>
     9be:	6f ef       	ldi	r22, 0xFF	; 255
     9c0:	7f ef       	ldi	r23, 0xFF	; 255
     9c2:	c5 01       	movw	r24, r10
     9c4:	0e 94 43 07 	call	0xe86	; 0xe86 <strnlen_P>
     9c8:	4c 01       	movw	r8, r24
     9ca:	f3 2d       	mov	r31, r3
     9cc:	f0 68       	ori	r31, 0x80	; 128
     9ce:	3f 2e       	mov	r3, r31
     9d0:	82 01       	movw	r16, r4
     9d2:	33 fc       	sbrc	r3, 3
     9d4:	1b c0       	rjmp	.+54     	; 0xa0c <vfprintf+0x1c2>
     9d6:	82 2d       	mov	r24, r2
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	88 16       	cp	r8, r24
     9dc:	99 06       	cpc	r9, r25
     9de:	b0 f4       	brcc	.+44     	; 0xa0c <vfprintf+0x1c2>
     9e0:	b6 01       	movw	r22, r12
     9e2:	80 e2       	ldi	r24, 0x20	; 32
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 60 07 	call	0xec0	; 0xec0 <fputc>
     9ea:	2a 94       	dec	r2
     9ec:	f4 cf       	rjmp	.-24     	; 0x9d6 <vfprintf+0x18c>
     9ee:	f5 01       	movw	r30, r10
     9f0:	37 fc       	sbrc	r3, 7
     9f2:	85 91       	lpm	r24, Z+
     9f4:	37 fe       	sbrs	r3, 7
     9f6:	81 91       	ld	r24, Z+
     9f8:	5f 01       	movw	r10, r30
     9fa:	b6 01       	movw	r22, r12
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 60 07 	call	0xec0	; 0xec0 <fputc>
     a02:	21 10       	cpse	r2, r1
     a04:	2a 94       	dec	r2
     a06:	21 e0       	ldi	r18, 0x01	; 1
     a08:	82 1a       	sub	r8, r18
     a0a:	91 08       	sbc	r9, r1
     a0c:	81 14       	cp	r8, r1
     a0e:	91 04       	cpc	r9, r1
     a10:	71 f7       	brne	.-36     	; 0x9ee <vfprintf+0x1a4>
     a12:	e8 c0       	rjmp	.+464    	; 0xbe4 <vfprintf+0x39a>
     a14:	84 36       	cpi	r24, 0x64	; 100
     a16:	11 f0       	breq	.+4      	; 0xa1c <vfprintf+0x1d2>
     a18:	89 36       	cpi	r24, 0x69	; 105
     a1a:	41 f5       	brne	.+80     	; 0xa6c <vfprintf+0x222>
     a1c:	f8 01       	movw	r30, r16
     a1e:	37 fe       	sbrs	r3, 7
     a20:	07 c0       	rjmp	.+14     	; 0xa30 <vfprintf+0x1e6>
     a22:	60 81       	ld	r22, Z
     a24:	71 81       	ldd	r23, Z+1	; 0x01
     a26:	82 81       	ldd	r24, Z+2	; 0x02
     a28:	93 81       	ldd	r25, Z+3	; 0x03
     a2a:	0c 5f       	subi	r16, 0xFC	; 252
     a2c:	1f 4f       	sbci	r17, 0xFF	; 255
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <vfprintf+0x1f6>
     a30:	60 81       	ld	r22, Z
     a32:	71 81       	ldd	r23, Z+1	; 0x01
     a34:	07 2e       	mov	r0, r23
     a36:	00 0c       	add	r0, r0
     a38:	88 0b       	sbc	r24, r24
     a3a:	99 0b       	sbc	r25, r25
     a3c:	0e 5f       	subi	r16, 0xFE	; 254
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
     a40:	f3 2d       	mov	r31, r3
     a42:	ff 76       	andi	r31, 0x6F	; 111
     a44:	3f 2e       	mov	r3, r31
     a46:	97 ff       	sbrs	r25, 7
     a48:	09 c0       	rjmp	.+18     	; 0xa5c <vfprintf+0x212>
     a4a:	90 95       	com	r25
     a4c:	80 95       	com	r24
     a4e:	70 95       	com	r23
     a50:	61 95       	neg	r22
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	8f 4f       	sbci	r24, 0xFF	; 255
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	f0 68       	ori	r31, 0x80	; 128
     a5a:	3f 2e       	mov	r3, r31
     a5c:	2a e0       	ldi	r18, 0x0A	; 10
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	a3 01       	movw	r20, r6
     a62:	0e 94 9c 07 	call	0xf38	; 0xf38 <__ultoa_invert>
     a66:	88 2e       	mov	r8, r24
     a68:	86 18       	sub	r8, r6
     a6a:	45 c0       	rjmp	.+138    	; 0xaf6 <vfprintf+0x2ac>
     a6c:	85 37       	cpi	r24, 0x75	; 117
     a6e:	31 f4       	brne	.+12     	; 0xa7c <vfprintf+0x232>
     a70:	23 2d       	mov	r18, r3
     a72:	2f 7e       	andi	r18, 0xEF	; 239
     a74:	b2 2e       	mov	r11, r18
     a76:	2a e0       	ldi	r18, 0x0A	; 10
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	25 c0       	rjmp	.+74     	; 0xac6 <vfprintf+0x27c>
     a7c:	93 2d       	mov	r25, r3
     a7e:	99 7f       	andi	r25, 0xF9	; 249
     a80:	b9 2e       	mov	r11, r25
     a82:	8f 36       	cpi	r24, 0x6F	; 111
     a84:	c1 f0       	breq	.+48     	; 0xab6 <vfprintf+0x26c>
     a86:	18 f4       	brcc	.+6      	; 0xa8e <vfprintf+0x244>
     a88:	88 35       	cpi	r24, 0x58	; 88
     a8a:	79 f0       	breq	.+30     	; 0xaaa <vfprintf+0x260>
     a8c:	b5 c0       	rjmp	.+362    	; 0xbf8 <vfprintf+0x3ae>
     a8e:	80 37       	cpi	r24, 0x70	; 112
     a90:	19 f0       	breq	.+6      	; 0xa98 <vfprintf+0x24e>
     a92:	88 37       	cpi	r24, 0x78	; 120
     a94:	21 f0       	breq	.+8      	; 0xa9e <vfprintf+0x254>
     a96:	b0 c0       	rjmp	.+352    	; 0xbf8 <vfprintf+0x3ae>
     a98:	e9 2f       	mov	r30, r25
     a9a:	e0 61       	ori	r30, 0x10	; 16
     a9c:	be 2e       	mov	r11, r30
     a9e:	b4 fe       	sbrs	r11, 4
     aa0:	0d c0       	rjmp	.+26     	; 0xabc <vfprintf+0x272>
     aa2:	fb 2d       	mov	r31, r11
     aa4:	f4 60       	ori	r31, 0x04	; 4
     aa6:	bf 2e       	mov	r11, r31
     aa8:	09 c0       	rjmp	.+18     	; 0xabc <vfprintf+0x272>
     aaa:	34 fe       	sbrs	r3, 4
     aac:	0a c0       	rjmp	.+20     	; 0xac2 <vfprintf+0x278>
     aae:	29 2f       	mov	r18, r25
     ab0:	26 60       	ori	r18, 0x06	; 6
     ab2:	b2 2e       	mov	r11, r18
     ab4:	06 c0       	rjmp	.+12     	; 0xac2 <vfprintf+0x278>
     ab6:	28 e0       	ldi	r18, 0x08	; 8
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <vfprintf+0x27c>
     abc:	20 e1       	ldi	r18, 0x10	; 16
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <vfprintf+0x27c>
     ac2:	20 e1       	ldi	r18, 0x10	; 16
     ac4:	32 e0       	ldi	r19, 0x02	; 2
     ac6:	f8 01       	movw	r30, r16
     ac8:	b7 fe       	sbrs	r11, 7
     aca:	07 c0       	rjmp	.+14     	; 0xada <vfprintf+0x290>
     acc:	60 81       	ld	r22, Z
     ace:	71 81       	ldd	r23, Z+1	; 0x01
     ad0:	82 81       	ldd	r24, Z+2	; 0x02
     ad2:	93 81       	ldd	r25, Z+3	; 0x03
     ad4:	0c 5f       	subi	r16, 0xFC	; 252
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
     ad8:	06 c0       	rjmp	.+12     	; 0xae6 <vfprintf+0x29c>
     ada:	60 81       	ld	r22, Z
     adc:	71 81       	ldd	r23, Z+1	; 0x01
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 5f       	subi	r16, 0xFE	; 254
     ae4:	1f 4f       	sbci	r17, 0xFF	; 255
     ae6:	a3 01       	movw	r20, r6
     ae8:	0e 94 9c 07 	call	0xf38	; 0xf38 <__ultoa_invert>
     aec:	88 2e       	mov	r8, r24
     aee:	86 18       	sub	r8, r6
     af0:	fb 2d       	mov	r31, r11
     af2:	ff 77       	andi	r31, 0x7F	; 127
     af4:	3f 2e       	mov	r3, r31
     af6:	36 fe       	sbrs	r3, 6
     af8:	0d c0       	rjmp	.+26     	; 0xb14 <vfprintf+0x2ca>
     afa:	23 2d       	mov	r18, r3
     afc:	2e 7f       	andi	r18, 0xFE	; 254
     afe:	a2 2e       	mov	r10, r18
     b00:	89 14       	cp	r8, r9
     b02:	58 f4       	brcc	.+22     	; 0xb1a <vfprintf+0x2d0>
     b04:	34 fe       	sbrs	r3, 4
     b06:	0b c0       	rjmp	.+22     	; 0xb1e <vfprintf+0x2d4>
     b08:	32 fc       	sbrc	r3, 2
     b0a:	09 c0       	rjmp	.+18     	; 0xb1e <vfprintf+0x2d4>
     b0c:	83 2d       	mov	r24, r3
     b0e:	8e 7e       	andi	r24, 0xEE	; 238
     b10:	a8 2e       	mov	r10, r24
     b12:	05 c0       	rjmp	.+10     	; 0xb1e <vfprintf+0x2d4>
     b14:	b8 2c       	mov	r11, r8
     b16:	a3 2c       	mov	r10, r3
     b18:	03 c0       	rjmp	.+6      	; 0xb20 <vfprintf+0x2d6>
     b1a:	b8 2c       	mov	r11, r8
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <vfprintf+0x2d6>
     b1e:	b9 2c       	mov	r11, r9
     b20:	a4 fe       	sbrs	r10, 4
     b22:	0f c0       	rjmp	.+30     	; 0xb42 <vfprintf+0x2f8>
     b24:	fe 01       	movw	r30, r28
     b26:	e8 0d       	add	r30, r8
     b28:	f1 1d       	adc	r31, r1
     b2a:	80 81       	ld	r24, Z
     b2c:	80 33       	cpi	r24, 0x30	; 48
     b2e:	21 f4       	brne	.+8      	; 0xb38 <vfprintf+0x2ee>
     b30:	9a 2d       	mov	r25, r10
     b32:	99 7e       	andi	r25, 0xE9	; 233
     b34:	a9 2e       	mov	r10, r25
     b36:	09 c0       	rjmp	.+18     	; 0xb4a <vfprintf+0x300>
     b38:	a2 fe       	sbrs	r10, 2
     b3a:	06 c0       	rjmp	.+12     	; 0xb48 <vfprintf+0x2fe>
     b3c:	b3 94       	inc	r11
     b3e:	b3 94       	inc	r11
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <vfprintf+0x300>
     b42:	8a 2d       	mov	r24, r10
     b44:	86 78       	andi	r24, 0x86	; 134
     b46:	09 f0       	breq	.+2      	; 0xb4a <vfprintf+0x300>
     b48:	b3 94       	inc	r11
     b4a:	a3 fc       	sbrc	r10, 3
     b4c:	11 c0       	rjmp	.+34     	; 0xb70 <vfprintf+0x326>
     b4e:	a0 fe       	sbrs	r10, 0
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <vfprintf+0x314>
     b52:	b2 14       	cp	r11, r2
     b54:	88 f4       	brcc	.+34     	; 0xb78 <vfprintf+0x32e>
     b56:	28 0c       	add	r2, r8
     b58:	92 2c       	mov	r9, r2
     b5a:	9b 18       	sub	r9, r11
     b5c:	0e c0       	rjmp	.+28     	; 0xb7a <vfprintf+0x330>
     b5e:	b2 14       	cp	r11, r2
     b60:	60 f4       	brcc	.+24     	; 0xb7a <vfprintf+0x330>
     b62:	b6 01       	movw	r22, r12
     b64:	80 e2       	ldi	r24, 0x20	; 32
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 60 07 	call	0xec0	; 0xec0 <fputc>
     b6c:	b3 94       	inc	r11
     b6e:	f7 cf       	rjmp	.-18     	; 0xb5e <vfprintf+0x314>
     b70:	b2 14       	cp	r11, r2
     b72:	18 f4       	brcc	.+6      	; 0xb7a <vfprintf+0x330>
     b74:	2b 18       	sub	r2, r11
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <vfprintf+0x332>
     b78:	98 2c       	mov	r9, r8
     b7a:	21 2c       	mov	r2, r1
     b7c:	a4 fe       	sbrs	r10, 4
     b7e:	10 c0       	rjmp	.+32     	; 0xba0 <vfprintf+0x356>
     b80:	b6 01       	movw	r22, r12
     b82:	80 e3       	ldi	r24, 0x30	; 48
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 60 07 	call	0xec0	; 0xec0 <fputc>
     b8a:	a2 fe       	sbrs	r10, 2
     b8c:	17 c0       	rjmp	.+46     	; 0xbbc <vfprintf+0x372>
     b8e:	a1 fc       	sbrc	r10, 1
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <vfprintf+0x34e>
     b92:	88 e7       	ldi	r24, 0x78	; 120
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <vfprintf+0x352>
     b98:	88 e5       	ldi	r24, 0x58	; 88
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	b6 01       	movw	r22, r12
     b9e:	0c c0       	rjmp	.+24     	; 0xbb8 <vfprintf+0x36e>
     ba0:	8a 2d       	mov	r24, r10
     ba2:	86 78       	andi	r24, 0x86	; 134
     ba4:	59 f0       	breq	.+22     	; 0xbbc <vfprintf+0x372>
     ba6:	a1 fe       	sbrs	r10, 1
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <vfprintf+0x364>
     baa:	8b e2       	ldi	r24, 0x2B	; 43
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <vfprintf+0x366>
     bae:	80 e2       	ldi	r24, 0x20	; 32
     bb0:	a7 fc       	sbrc	r10, 7
     bb2:	8d e2       	ldi	r24, 0x2D	; 45
     bb4:	b6 01       	movw	r22, r12
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 60 07 	call	0xec0	; 0xec0 <fputc>
     bbc:	89 14       	cp	r8, r9
     bbe:	38 f4       	brcc	.+14     	; 0xbce <vfprintf+0x384>
     bc0:	b6 01       	movw	r22, r12
     bc2:	80 e3       	ldi	r24, 0x30	; 48
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 60 07 	call	0xec0	; 0xec0 <fputc>
     bca:	9a 94       	dec	r9
     bcc:	f7 cf       	rjmp	.-18     	; 0xbbc <vfprintf+0x372>
     bce:	8a 94       	dec	r8
     bd0:	f3 01       	movw	r30, r6
     bd2:	e8 0d       	add	r30, r8
     bd4:	f1 1d       	adc	r31, r1
     bd6:	80 81       	ld	r24, Z
     bd8:	b6 01       	movw	r22, r12
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 60 07 	call	0xec0	; 0xec0 <fputc>
     be0:	81 10       	cpse	r8, r1
     be2:	f5 cf       	rjmp	.-22     	; 0xbce <vfprintf+0x384>
     be4:	22 20       	and	r2, r2
     be6:	09 f4       	brne	.+2      	; 0xbea <vfprintf+0x3a0>
     be8:	42 ce       	rjmp	.-892    	; 0x86e <vfprintf+0x24>
     bea:	b6 01       	movw	r22, r12
     bec:	80 e2       	ldi	r24, 0x20	; 32
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 60 07 	call	0xec0	; 0xec0 <fputc>
     bf4:	2a 94       	dec	r2
     bf6:	f6 cf       	rjmp	.-20     	; 0xbe4 <vfprintf+0x39a>
     bf8:	f6 01       	movw	r30, r12
     bfa:	86 81       	ldd	r24, Z+6	; 0x06
     bfc:	97 81       	ldd	r25, Z+7	; 0x07
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <vfprintf+0x3ba>
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	9f ef       	ldi	r25, 0xFF	; 255
     c04:	2b 96       	adiw	r28, 0x0b	; 11
     c06:	e2 e1       	ldi	r30, 0x12	; 18
     c08:	0c 94 16 08 	jmp	0x102c	; 0x102c <__epilogue_restores__>

00000c0c <calloc>:
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	86 9f       	mul	r24, r22
     c16:	80 01       	movw	r16, r0
     c18:	87 9f       	mul	r24, r23
     c1a:	10 0d       	add	r17, r0
     c1c:	96 9f       	mul	r25, r22
     c1e:	10 0d       	add	r17, r0
     c20:	11 24       	eor	r1, r1
     c22:	c8 01       	movw	r24, r16
     c24:	0e 94 22 06 	call	0xc44	; 0xc44 <malloc>
     c28:	ec 01       	movw	r28, r24
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	29 f0       	breq	.+10     	; 0xc38 <calloc+0x2c>
     c2e:	a8 01       	movw	r20, r16
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	0e 94 4e 07 	call	0xe9c	; 0xe9c <memset>
     c38:	ce 01       	movw	r24, r28
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <malloc>:
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	91 05       	cpc	r25, r1
     c50:	10 f4       	brcc	.+4      	; 0xc56 <malloc+0x12>
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <__flp>
     c5a:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <__flp+0x1>
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	a0 e0       	ldi	r26, 0x00	; 0
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	30 97       	sbiw	r30, 0x00	; 0
     c68:	19 f1       	breq	.+70     	; 0xcb0 <malloc+0x6c>
     c6a:	40 81       	ld	r20, Z
     c6c:	51 81       	ldd	r21, Z+1	; 0x01
     c6e:	02 81       	ldd	r16, Z+2	; 0x02
     c70:	13 81       	ldd	r17, Z+3	; 0x03
     c72:	48 17       	cp	r20, r24
     c74:	59 07       	cpc	r21, r25
     c76:	c8 f0       	brcs	.+50     	; 0xcaa <malloc+0x66>
     c78:	84 17       	cp	r24, r20
     c7a:	95 07       	cpc	r25, r21
     c7c:	69 f4       	brne	.+26     	; 0xc98 <malloc+0x54>
     c7e:	10 97       	sbiw	r26, 0x00	; 0
     c80:	31 f0       	breq	.+12     	; 0xc8e <malloc+0x4a>
     c82:	12 96       	adiw	r26, 0x02	; 2
     c84:	0c 93       	st	X, r16
     c86:	12 97       	sbiw	r26, 0x02	; 2
     c88:	13 96       	adiw	r26, 0x03	; 3
     c8a:	1c 93       	st	X, r17
     c8c:	27 c0       	rjmp	.+78     	; 0xcdc <malloc+0x98>
     c8e:	00 93 2e 02 	sts	0x022E, r16	; 0x80022e <__flp>
     c92:	10 93 2f 02 	sts	0x022F, r17	; 0x80022f <__flp+0x1>
     c96:	22 c0       	rjmp	.+68     	; 0xcdc <malloc+0x98>
     c98:	21 15       	cp	r18, r1
     c9a:	31 05       	cpc	r19, r1
     c9c:	19 f0       	breq	.+6      	; 0xca4 <malloc+0x60>
     c9e:	42 17       	cp	r20, r18
     ca0:	53 07       	cpc	r21, r19
     ca2:	18 f4       	brcc	.+6      	; 0xcaa <malloc+0x66>
     ca4:	9a 01       	movw	r18, r20
     ca6:	bd 01       	movw	r22, r26
     ca8:	ef 01       	movw	r28, r30
     caa:	df 01       	movw	r26, r30
     cac:	f8 01       	movw	r30, r16
     cae:	db cf       	rjmp	.-74     	; 0xc66 <malloc+0x22>
     cb0:	21 15       	cp	r18, r1
     cb2:	31 05       	cpc	r19, r1
     cb4:	f9 f0       	breq	.+62     	; 0xcf4 <malloc+0xb0>
     cb6:	28 1b       	sub	r18, r24
     cb8:	39 0b       	sbc	r19, r25
     cba:	24 30       	cpi	r18, 0x04	; 4
     cbc:	31 05       	cpc	r19, r1
     cbe:	80 f4       	brcc	.+32     	; 0xce0 <malloc+0x9c>
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	9b 81       	ldd	r25, Y+3	; 0x03
     cc4:	61 15       	cp	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	21 f0       	breq	.+8      	; 0xcd2 <malloc+0x8e>
     cca:	fb 01       	movw	r30, r22
     ccc:	93 83       	std	Z+3, r25	; 0x03
     cce:	82 83       	std	Z+2, r24	; 0x02
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <malloc+0x96>
     cd2:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <__flp+0x1>
     cd6:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__flp>
     cda:	fe 01       	movw	r30, r28
     cdc:	32 96       	adiw	r30, 0x02	; 2
     cde:	44 c0       	rjmp	.+136    	; 0xd68 <malloc+0x124>
     ce0:	fe 01       	movw	r30, r28
     ce2:	e2 0f       	add	r30, r18
     ce4:	f3 1f       	adc	r31, r19
     ce6:	81 93       	st	Z+, r24
     ce8:	91 93       	st	Z+, r25
     cea:	22 50       	subi	r18, 0x02	; 2
     cec:	31 09       	sbc	r19, r1
     cee:	39 83       	std	Y+1, r19	; 0x01
     cf0:	28 83       	st	Y, r18
     cf2:	3a c0       	rjmp	.+116    	; 0xd68 <malloc+0x124>
     cf4:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <__brkval>
     cf8:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <__brkval+0x1>
     cfc:	23 2b       	or	r18, r19
     cfe:	41 f4       	brne	.+16     	; 0xd10 <malloc+0xcc>
     d00:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     d04:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     d08:	30 93 2d 02 	sts	0x022D, r19	; 0x80022d <__brkval+0x1>
     d0c:	20 93 2c 02 	sts	0x022C, r18	; 0x80022c <__brkval>
     d10:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     d14:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     d18:	21 15       	cp	r18, r1
     d1a:	31 05       	cpc	r19, r1
     d1c:	41 f4       	brne	.+16     	; 0xd2e <malloc+0xea>
     d1e:	2d b7       	in	r18, 0x3d	; 61
     d20:	3e b7       	in	r19, 0x3e	; 62
     d22:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     d26:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     d2a:	24 1b       	sub	r18, r20
     d2c:	35 0b       	sbc	r19, r21
     d2e:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <__brkval>
     d32:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <__brkval+0x1>
     d36:	e2 17       	cp	r30, r18
     d38:	f3 07       	cpc	r31, r19
     d3a:	a0 f4       	brcc	.+40     	; 0xd64 <malloc+0x120>
     d3c:	2e 1b       	sub	r18, r30
     d3e:	3f 0b       	sbc	r19, r31
     d40:	28 17       	cp	r18, r24
     d42:	39 07       	cpc	r19, r25
     d44:	78 f0       	brcs	.+30     	; 0xd64 <malloc+0x120>
     d46:	ac 01       	movw	r20, r24
     d48:	4e 5f       	subi	r20, 0xFE	; 254
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	24 17       	cp	r18, r20
     d4e:	35 07       	cpc	r19, r21
     d50:	48 f0       	brcs	.+18     	; 0xd64 <malloc+0x120>
     d52:	4e 0f       	add	r20, r30
     d54:	5f 1f       	adc	r21, r31
     d56:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <__brkval+0x1>
     d5a:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <__brkval>
     d5e:	81 93       	st	Z+, r24
     d60:	91 93       	st	Z+, r25
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <malloc+0x124>
     d64:	e0 e0       	ldi	r30, 0x00	; 0
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	cf 01       	movw	r24, r30
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <free>:
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	09 f4       	brne	.+2      	; 0xd7e <free+0xa>
     d7c:	81 c0       	rjmp	.+258    	; 0xe80 <free+0x10c>
     d7e:	fc 01       	movw	r30, r24
     d80:	32 97       	sbiw	r30, 0x02	; 2
     d82:	13 82       	std	Z+3, r1	; 0x03
     d84:	12 82       	std	Z+2, r1	; 0x02
     d86:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <__flp>
     d8a:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <__flp+0x1>
     d8e:	10 97       	sbiw	r26, 0x00	; 0
     d90:	81 f4       	brne	.+32     	; 0xdb2 <free+0x3e>
     d92:	20 81       	ld	r18, Z
     d94:	31 81       	ldd	r19, Z+1	; 0x01
     d96:	82 0f       	add	r24, r18
     d98:	93 1f       	adc	r25, r19
     d9a:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <__brkval>
     d9e:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <__brkval+0x1>
     da2:	28 17       	cp	r18, r24
     da4:	39 07       	cpc	r19, r25
     da6:	51 f5       	brne	.+84     	; 0xdfc <free+0x88>
     da8:	f0 93 2d 02 	sts	0x022D, r31	; 0x80022d <__brkval+0x1>
     dac:	e0 93 2c 02 	sts	0x022C, r30	; 0x80022c <__brkval>
     db0:	67 c0       	rjmp	.+206    	; 0xe80 <free+0x10c>
     db2:	ed 01       	movw	r28, r26
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	ce 17       	cp	r28, r30
     dba:	df 07       	cpc	r29, r31
     dbc:	40 f4       	brcc	.+16     	; 0xdce <free+0x5a>
     dbe:	4a 81       	ldd	r20, Y+2	; 0x02
     dc0:	5b 81       	ldd	r21, Y+3	; 0x03
     dc2:	9e 01       	movw	r18, r28
     dc4:	41 15       	cp	r20, r1
     dc6:	51 05       	cpc	r21, r1
     dc8:	f1 f0       	breq	.+60     	; 0xe06 <free+0x92>
     dca:	ea 01       	movw	r28, r20
     dcc:	f5 cf       	rjmp	.-22     	; 0xdb8 <free+0x44>
     dce:	d3 83       	std	Z+3, r29	; 0x03
     dd0:	c2 83       	std	Z+2, r28	; 0x02
     dd2:	40 81       	ld	r20, Z
     dd4:	51 81       	ldd	r21, Z+1	; 0x01
     dd6:	84 0f       	add	r24, r20
     dd8:	95 1f       	adc	r25, r21
     dda:	c8 17       	cp	r28, r24
     ddc:	d9 07       	cpc	r29, r25
     dde:	59 f4       	brne	.+22     	; 0xdf6 <free+0x82>
     de0:	88 81       	ld	r24, Y
     de2:	99 81       	ldd	r25, Y+1	; 0x01
     de4:	84 0f       	add	r24, r20
     de6:	95 1f       	adc	r25, r21
     de8:	02 96       	adiw	r24, 0x02	; 2
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	80 83       	st	Z, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	9b 81       	ldd	r25, Y+3	; 0x03
     df2:	93 83       	std	Z+3, r25	; 0x03
     df4:	82 83       	std	Z+2, r24	; 0x02
     df6:	21 15       	cp	r18, r1
     df8:	31 05       	cpc	r19, r1
     dfa:	29 f4       	brne	.+10     	; 0xe06 <free+0x92>
     dfc:	f0 93 2f 02 	sts	0x022F, r31	; 0x80022f <__flp+0x1>
     e00:	e0 93 2e 02 	sts	0x022E, r30	; 0x80022e <__flp>
     e04:	3d c0       	rjmp	.+122    	; 0xe80 <free+0x10c>
     e06:	e9 01       	movw	r28, r18
     e08:	fb 83       	std	Y+3, r31	; 0x03
     e0a:	ea 83       	std	Y+2, r30	; 0x02
     e0c:	49 91       	ld	r20, Y+
     e0e:	59 91       	ld	r21, Y+
     e10:	c4 0f       	add	r28, r20
     e12:	d5 1f       	adc	r29, r21
     e14:	ec 17       	cp	r30, r28
     e16:	fd 07       	cpc	r31, r29
     e18:	61 f4       	brne	.+24     	; 0xe32 <free+0xbe>
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	84 0f       	add	r24, r20
     e20:	95 1f       	adc	r25, r21
     e22:	02 96       	adiw	r24, 0x02	; 2
     e24:	e9 01       	movw	r28, r18
     e26:	99 83       	std	Y+1, r25	; 0x01
     e28:	88 83       	st	Y, r24
     e2a:	82 81       	ldd	r24, Z+2	; 0x02
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	9b 83       	std	Y+3, r25	; 0x03
     e30:	8a 83       	std	Y+2, r24	; 0x02
     e32:	e0 e0       	ldi	r30, 0x00	; 0
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	12 96       	adiw	r26, 0x02	; 2
     e38:	8d 91       	ld	r24, X+
     e3a:	9c 91       	ld	r25, X
     e3c:	13 97       	sbiw	r26, 0x03	; 3
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	19 f0       	breq	.+6      	; 0xe48 <free+0xd4>
     e42:	fd 01       	movw	r30, r26
     e44:	dc 01       	movw	r26, r24
     e46:	f7 cf       	rjmp	.-18     	; 0xe36 <free+0xc2>
     e48:	8d 91       	ld	r24, X+
     e4a:	9c 91       	ld	r25, X
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	9d 01       	movw	r18, r26
     e50:	2e 5f       	subi	r18, 0xFE	; 254
     e52:	3f 4f       	sbci	r19, 0xFF	; 255
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <__brkval>
     e5c:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <__brkval+0x1>
     e60:	28 17       	cp	r18, r24
     e62:	39 07       	cpc	r19, r25
     e64:	69 f4       	brne	.+26     	; 0xe80 <free+0x10c>
     e66:	30 97       	sbiw	r30, 0x00	; 0
     e68:	29 f4       	brne	.+10     	; 0xe74 <free+0x100>
     e6a:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <__flp+0x1>
     e6e:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <__flp>
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <free+0x104>
     e74:	13 82       	std	Z+3, r1	; 0x03
     e76:	12 82       	std	Z+2, r1	; 0x02
     e78:	b0 93 2d 02 	sts	0x022D, r27	; 0x80022d <__brkval+0x1>
     e7c:	a0 93 2c 02 	sts	0x022C, r26	; 0x80022c <__brkval>
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <strnlen_P>:
     e86:	fc 01       	movw	r30, r24
     e88:	05 90       	lpm	r0, Z+
     e8a:	61 50       	subi	r22, 0x01	; 1
     e8c:	70 40       	sbci	r23, 0x00	; 0
     e8e:	01 10       	cpse	r0, r1
     e90:	d8 f7       	brcc	.-10     	; 0xe88 <strnlen_P+0x2>
     e92:	80 95       	com	r24
     e94:	90 95       	com	r25
     e96:	8e 0f       	add	r24, r30
     e98:	9f 1f       	adc	r25, r31
     e9a:	08 95       	ret

00000e9c <memset>:
     e9c:	dc 01       	movw	r26, r24
     e9e:	01 c0       	rjmp	.+2      	; 0xea2 <memset+0x6>
     ea0:	6d 93       	st	X+, r22
     ea2:	41 50       	subi	r20, 0x01	; 1
     ea4:	50 40       	sbci	r21, 0x00	; 0
     ea6:	e0 f7       	brcc	.-8      	; 0xea0 <memset+0x4>
     ea8:	08 95       	ret

00000eaa <strnlen>:
     eaa:	fc 01       	movw	r30, r24
     eac:	61 50       	subi	r22, 0x01	; 1
     eae:	70 40       	sbci	r23, 0x00	; 0
     eb0:	01 90       	ld	r0, Z+
     eb2:	01 10       	cpse	r0, r1
     eb4:	d8 f7       	brcc	.-10     	; 0xeac <strnlen+0x2>
     eb6:	80 95       	com	r24
     eb8:	90 95       	com	r25
     eba:	8e 0f       	add	r24, r30
     ebc:	9f 1f       	adc	r25, r31
     ebe:	08 95       	ret

00000ec0 <fputc>:
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	fb 01       	movw	r30, r22
     eca:	23 81       	ldd	r18, Z+3	; 0x03
     ecc:	21 fd       	sbrc	r18, 1
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <fputc+0x16>
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	9f ef       	ldi	r25, 0xFF	; 255
     ed4:	2c c0       	rjmp	.+88     	; 0xf2e <fputc+0x6e>
     ed6:	22 ff       	sbrs	r18, 2
     ed8:	16 c0       	rjmp	.+44     	; 0xf06 <fputc+0x46>
     eda:	46 81       	ldd	r20, Z+6	; 0x06
     edc:	57 81       	ldd	r21, Z+7	; 0x07
     ede:	24 81       	ldd	r18, Z+4	; 0x04
     ee0:	35 81       	ldd	r19, Z+5	; 0x05
     ee2:	42 17       	cp	r20, r18
     ee4:	53 07       	cpc	r21, r19
     ee6:	44 f4       	brge	.+16     	; 0xef8 <fputc+0x38>
     ee8:	a0 81       	ld	r26, Z
     eea:	b1 81       	ldd	r27, Z+1	; 0x01
     eec:	9d 01       	movw	r18, r26
     eee:	2f 5f       	subi	r18, 0xFF	; 255
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	31 83       	std	Z+1, r19	; 0x01
     ef4:	20 83       	st	Z, r18
     ef6:	8c 93       	st	X, r24
     ef8:	26 81       	ldd	r18, Z+6	; 0x06
     efa:	37 81       	ldd	r19, Z+7	; 0x07
     efc:	2f 5f       	subi	r18, 0xFF	; 255
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	37 83       	std	Z+7, r19	; 0x07
     f02:	26 83       	std	Z+6, r18	; 0x06
     f04:	14 c0       	rjmp	.+40     	; 0xf2e <fputc+0x6e>
     f06:	8b 01       	movw	r16, r22
     f08:	ec 01       	movw	r28, r24
     f0a:	fb 01       	movw	r30, r22
     f0c:	00 84       	ldd	r0, Z+8	; 0x08
     f0e:	f1 85       	ldd	r31, Z+9	; 0x09
     f10:	e0 2d       	mov	r30, r0
     f12:	09 95       	icall
     f14:	89 2b       	or	r24, r25
     f16:	e1 f6       	brne	.-72     	; 0xed0 <fputc+0x10>
     f18:	d8 01       	movw	r26, r16
     f1a:	16 96       	adiw	r26, 0x06	; 6
     f1c:	8d 91       	ld	r24, X+
     f1e:	9c 91       	ld	r25, X
     f20:	17 97       	sbiw	r26, 0x07	; 7
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	17 96       	adiw	r26, 0x07	; 7
     f26:	9c 93       	st	X, r25
     f28:	8e 93       	st	-X, r24
     f2a:	16 97       	sbiw	r26, 0x06	; 6
     f2c:	ce 01       	movw	r24, r28
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	08 95       	ret

00000f38 <__ultoa_invert>:
     f38:	fa 01       	movw	r30, r20
     f3a:	aa 27       	eor	r26, r26
     f3c:	28 30       	cpi	r18, 0x08	; 8
     f3e:	51 f1       	breq	.+84     	; 0xf94 <__ultoa_invert+0x5c>
     f40:	20 31       	cpi	r18, 0x10	; 16
     f42:	81 f1       	breq	.+96     	; 0xfa4 <__ultoa_invert+0x6c>
     f44:	e8 94       	clt
     f46:	6f 93       	push	r22
     f48:	6e 7f       	andi	r22, 0xFE	; 254
     f4a:	6e 5f       	subi	r22, 0xFE	; 254
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	8f 4f       	sbci	r24, 0xFF	; 255
     f50:	9f 4f       	sbci	r25, 0xFF	; 255
     f52:	af 4f       	sbci	r26, 0xFF	; 255
     f54:	b1 e0       	ldi	r27, 0x01	; 1
     f56:	3e d0       	rcall	.+124    	; 0xfd4 <__ultoa_invert+0x9c>
     f58:	b4 e0       	ldi	r27, 0x04	; 4
     f5a:	3c d0       	rcall	.+120    	; 0xfd4 <__ultoa_invert+0x9c>
     f5c:	67 0f       	add	r22, r23
     f5e:	78 1f       	adc	r23, r24
     f60:	89 1f       	adc	r24, r25
     f62:	9a 1f       	adc	r25, r26
     f64:	a1 1d       	adc	r26, r1
     f66:	68 0f       	add	r22, r24
     f68:	79 1f       	adc	r23, r25
     f6a:	8a 1f       	adc	r24, r26
     f6c:	91 1d       	adc	r25, r1
     f6e:	a1 1d       	adc	r26, r1
     f70:	6a 0f       	add	r22, r26
     f72:	71 1d       	adc	r23, r1
     f74:	81 1d       	adc	r24, r1
     f76:	91 1d       	adc	r25, r1
     f78:	a1 1d       	adc	r26, r1
     f7a:	20 d0       	rcall	.+64     	; 0xfbc <__ultoa_invert+0x84>
     f7c:	09 f4       	brne	.+2      	; 0xf80 <__ultoa_invert+0x48>
     f7e:	68 94       	set
     f80:	3f 91       	pop	r19
     f82:	2a e0       	ldi	r18, 0x0A	; 10
     f84:	26 9f       	mul	r18, r22
     f86:	11 24       	eor	r1, r1
     f88:	30 19       	sub	r19, r0
     f8a:	30 5d       	subi	r19, 0xD0	; 208
     f8c:	31 93       	st	Z+, r19
     f8e:	de f6       	brtc	.-74     	; 0xf46 <__ultoa_invert+0xe>
     f90:	cf 01       	movw	r24, r30
     f92:	08 95       	ret
     f94:	46 2f       	mov	r20, r22
     f96:	47 70       	andi	r20, 0x07	; 7
     f98:	40 5d       	subi	r20, 0xD0	; 208
     f9a:	41 93       	st	Z+, r20
     f9c:	b3 e0       	ldi	r27, 0x03	; 3
     f9e:	0f d0       	rcall	.+30     	; 0xfbe <__ultoa_invert+0x86>
     fa0:	c9 f7       	brne	.-14     	; 0xf94 <__ultoa_invert+0x5c>
     fa2:	f6 cf       	rjmp	.-20     	; 0xf90 <__ultoa_invert+0x58>
     fa4:	46 2f       	mov	r20, r22
     fa6:	4f 70       	andi	r20, 0x0F	; 15
     fa8:	40 5d       	subi	r20, 0xD0	; 208
     faa:	4a 33       	cpi	r20, 0x3A	; 58
     fac:	18 f0       	brcs	.+6      	; 0xfb4 <__ultoa_invert+0x7c>
     fae:	49 5d       	subi	r20, 0xD9	; 217
     fb0:	31 fd       	sbrc	r19, 1
     fb2:	40 52       	subi	r20, 0x20	; 32
     fb4:	41 93       	st	Z+, r20
     fb6:	02 d0       	rcall	.+4      	; 0xfbc <__ultoa_invert+0x84>
     fb8:	a9 f7       	brne	.-22     	; 0xfa4 <__ultoa_invert+0x6c>
     fba:	ea cf       	rjmp	.-44     	; 0xf90 <__ultoa_invert+0x58>
     fbc:	b4 e0       	ldi	r27, 0x04	; 4
     fbe:	a6 95       	lsr	r26
     fc0:	97 95       	ror	r25
     fc2:	87 95       	ror	r24
     fc4:	77 95       	ror	r23
     fc6:	67 95       	ror	r22
     fc8:	ba 95       	dec	r27
     fca:	c9 f7       	brne	.-14     	; 0xfbe <__ultoa_invert+0x86>
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	61 05       	cpc	r22, r1
     fd0:	71 05       	cpc	r23, r1
     fd2:	08 95       	ret
     fd4:	9b 01       	movw	r18, r22
     fd6:	ac 01       	movw	r20, r24
     fd8:	0a 2e       	mov	r0, r26
     fda:	06 94       	lsr	r0
     fdc:	57 95       	ror	r21
     fde:	47 95       	ror	r20
     fe0:	37 95       	ror	r19
     fe2:	27 95       	ror	r18
     fe4:	ba 95       	dec	r27
     fe6:	c9 f7       	brne	.-14     	; 0xfda <__ultoa_invert+0xa2>
     fe8:	62 0f       	add	r22, r18
     fea:	73 1f       	adc	r23, r19
     fec:	84 1f       	adc	r24, r20
     fee:	95 1f       	adc	r25, r21
     ff0:	a0 1d       	adc	r26, r0
     ff2:	08 95       	ret

00000ff4 <__prologue_saves__>:
     ff4:	2f 92       	push	r2
     ff6:	3f 92       	push	r3
     ff8:	4f 92       	push	r4
     ffa:	5f 92       	push	r5
     ffc:	6f 92       	push	r6
     ffe:	7f 92       	push	r7
    1000:	8f 92       	push	r8
    1002:	9f 92       	push	r9
    1004:	af 92       	push	r10
    1006:	bf 92       	push	r11
    1008:	cf 92       	push	r12
    100a:	df 92       	push	r13
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	ca 1b       	sub	r28, r26
    101e:	db 0b       	sbc	r29, r27
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	09 94       	ijmp

0000102c <__epilogue_restores__>:
    102c:	2a 88       	ldd	r2, Y+18	; 0x12
    102e:	39 88       	ldd	r3, Y+17	; 0x11
    1030:	48 88       	ldd	r4, Y+16	; 0x10
    1032:	5f 84       	ldd	r5, Y+15	; 0x0f
    1034:	6e 84       	ldd	r6, Y+14	; 0x0e
    1036:	7d 84       	ldd	r7, Y+13	; 0x0d
    1038:	8c 84       	ldd	r8, Y+12	; 0x0c
    103a:	9b 84       	ldd	r9, Y+11	; 0x0b
    103c:	aa 84       	ldd	r10, Y+10	; 0x0a
    103e:	b9 84       	ldd	r11, Y+9	; 0x09
    1040:	c8 84       	ldd	r12, Y+8	; 0x08
    1042:	df 80       	ldd	r13, Y+7	; 0x07
    1044:	ee 80       	ldd	r14, Y+6	; 0x06
    1046:	fd 80       	ldd	r15, Y+5	; 0x05
    1048:	0c 81       	ldd	r16, Y+4	; 0x04
    104a:	1b 81       	ldd	r17, Y+3	; 0x03
    104c:	aa 81       	ldd	r26, Y+2	; 0x02
    104e:	b9 81       	ldd	r27, Y+1	; 0x01
    1050:	ce 0f       	add	r28, r30
    1052:	d1 1d       	adc	r29, r1
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	ed 01       	movw	r28, r26
    1060:	08 95       	ret

00001062 <_exit>:
    1062:	f8 94       	cli

00001064 <__stop_program>:
    1064:	ff cf       	rjmp	.-2      	; 0x1064 <__stop_program>
