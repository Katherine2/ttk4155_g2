
G3_ES_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028e  00800100  00001fac  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080038e  0080038e  000022ce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000232c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a39  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001199  00000000  00000000  00004fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000146c  00000000  00000000  0000617a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000634  00000000  00000000  000075e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e8  00000000  00000000  00007c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018b1  00000000  00000000  00008404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00009cb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <start_game+0x46>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec ea       	ldi	r30, 0xAC	; 172
     37c:	ff e1       	ldi	r31, 0x1F	; 31
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 38       	cpi	r26, 0x8E	; 142
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	ae e8       	ldi	r26, 0x8E	; 142
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a0 3a       	cpi	r26, 0xA0	; 160
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <main>
     39e:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <clock_timer>:

//should be deleted?
void adc_init(){
	//setting the ADC CS to low to select it (active low) from the NAND gates
	DDRC |= (1 << PC2);
	PORTC = 0x04;
     3a6:	8c 9a       	sbi	0x11, 4	; 17
     3a8:	eb e8       	ldi	r30, 0x8B	; 139
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	88 64       	ori	r24, 0x48	; 72
     3b0:	80 83       	st	Z, r24
     3b2:	ea e8       	ldi	r30, 0x8A	; 138
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	89 60       	ori	r24, 0x09	; 9
     3ba:	80 83       	st	Z, r24
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     3c2:	08 95       	ret

000003c4 <adc_read>:
//volatile
uint8_t adc_read(uint8_t channel){	
	uint8_t adc_channel;
	
	//select which channel to write to
	if (channel==0){
     3c4:	88 23       	and	r24, r24
     3c6:	41 f0       	breq	.+16     	; 0x3d8 <adc_read+0x14>
		 adc_channel = 0b10000000;
	}
	else if (channel==1){
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	41 f0       	breq	.+16     	; 0x3dc <adc_read+0x18>
		adc_channel = 0b10000001;
	}
	else if (channel==2){
     3cc:	82 30       	cpi	r24, 0x02	; 2
     3ce:	41 f0       	breq	.+16     	; 0x3e0 <adc_read+0x1c>
		adc_channel = 0b10000010;
	}
	else if (channel==3){
     3d0:	83 30       	cpi	r24, 0x03	; 3
     3d2:	39 f4       	brne	.+14     	; 0x3e2 <adc_read+0x1e>
		adc_channel = 0b10000011;
     3d4:	93 e8       	ldi	r25, 0x83	; 131
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <adc_read+0x1e>
uint8_t adc_read(uint8_t channel){	
	uint8_t adc_channel;
	
	//select which channel to write to
	if (channel==0){
		 adc_channel = 0b10000000;
     3d8:	90 e8       	ldi	r25, 0x80	; 128
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <adc_read+0x1e>
	}
	else if (channel==1){
		adc_channel = 0b10000001;
     3dc:	91 e8       	ldi	r25, 0x81	; 129
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <adc_read+0x1e>
	}
	else if (channel==2){
		adc_channel = 0b10000010;
     3e0:	92 e8       	ldi	r25, 0x82	; 130
	}
	else if (channel==3){
		adc_channel = 0b10000011;
	}
	adc_reg[0] = adc_channel;
     3e2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <adc_reg>
     3e6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <adc_reg+0x1>
     3ea:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ec:	81 e4       	ldi	r24, 0x41	; 65
     3ee:	8a 95       	dec	r24
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <adc_read+0x2a>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <adc_read+0x30>
	_delay_us(40);
	uint8_t adc_val = adc_reg[0];
     3f4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <adc_reg>
     3f8:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <adc_reg+0x1>
     3fc:	80 81       	ld	r24, Z
	
	return adc_val;
}
     3fe:	08 95       	ret

00000400 <can_init>:
#include <stdint.h>
#include <avr/interrupt.h>


void can_init(void){
	mcp2515_init();
     400:	0e 94 fe 04 	call	0x9fc	; 0x9fc <mcp2515_init>
	mcp2515_write(MCP_CANINTE, 0X03);		//enables the reception complete flag (for the interrupt)
     404:	63 e0       	ldi	r22, 0x03	; 3
     406:	8b e2       	ldi	r24, 0x2B	; 43
     408:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mcp2515_write>
		
	mcp2515_write(MCP_CNF3, 0x01);
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	88 e2       	ldi	r24, 0x28	; 40
     410:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xb5);
     414:	65 eb       	ldi	r22, 0xB5	; 181
     416:	89 e2       	ldi	r24, 0x29	; 41
     418:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mcp2515_write>
	mcp2515_write(MCP_CNF1, 0x43);
     41c:	63 e4       	ldi	r22, 0x43	; 67
     41e:	8a e2       	ldi	r24, 0x2A	; 42
     420:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mcp2515_write>
	
	//Check that the registers have the right values
	uint8_t cnf1 = mcp2515_read(MCP_CNF1);
     424:	8a e2       	ldi	r24, 0x2A	; 42
     426:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
	printf("cnf1:%d\r\n", cnf1);		//should be 67
     42a:	1f 92       	push	r1
     42c:	8f 93       	push	r24
     42e:	8c e0       	ldi	r24, 0x0C	; 12
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	uint8_t cnf2 = mcp2515_read(MCP_CNF2);
     43a:	89 e2       	ldi	r24, 0x29	; 41
     43c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
	printf("cnf2:%d\r\n", cnf2);		//should be 181
     440:	1f 92       	push	r1
     442:	8f 93       	push	r24
     444:	86 e1       	ldi	r24, 0x16	; 22
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	9f 93       	push	r25
     44a:	8f 93       	push	r24
     44c:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	uint8_t cnf3 = mcp2515_read(MCP_CNF3);
     450:	88 e2       	ldi	r24, 0x28	; 40
     452:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
	printf("cnf3:%d\r\n\n", cnf3);		//should be 1
     456:	1f 92       	push	r1
     458:	8f 93       	push	r24
     45a:	80 e2       	ldi	r24, 0x20	; 32
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	9f 93       	push	r25
     460:	8f 93       	push	r24
     462:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	
	
	mcp2515_write(MCP_CANCTRL, MODE_NORMAL);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	8f e0       	ldi	r24, 0x0F	; 15
     46a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mcp2515_write>
 	uint8_t value;

	value = mcp2515_read(MCP_CANSTAT);
     46e:	8e e0       	ldi	r24, 0x0E	; 14
     470:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>

	if((value & MODE_MASK) != MODE_NORMAL){
     474:	80 7e       	andi	r24, 0xE0	; 224
     476:	2d b7       	in	r18, 0x3d	; 61
     478:	3e b7       	in	r19, 0x3e	; 62
     47a:	24 5f       	subi	r18, 0xF4	; 244
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	3e bf       	out	0x3e, r19	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	2d bf       	out	0x3d, r18	; 61
     488:	88 23       	and	r24, r24
     48a:	21 f0       	breq	.+8      	; 0x494 <can_init+0x94>
		printf("MCP2515 is NOT in normal mode after reset!\n");
     48c:	8b e2       	ldi	r24, 0x2B	; 43
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 98 0b 	call	0x1730	; 0x1730 <puts>
	}		
		
	// Disable global interrupts
	cli();
     494:	f8 94       	cli
	// Interrupt on falling edge
	MCUCR |= (1<<ISC01);
     496:	85 b7       	in	r24, 0x35	; 53
     498:	82 60       	ori	r24, 0x02	; 2
     49a:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt 
	GICR |= (1<<INT0);
     49c:	8b b7       	in	r24, 0x3b	; 59
     49e:	80 64       	ori	r24, 0x40	; 64
     4a0:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     4a2:	78 94       	sei
     4a4:	08 95       	ret

000004a6 <can_receive>:
	}

void can_receive(void){
     4a6:	bf 92       	push	r11
     4a8:	cf 92       	push	r12
     4aa:	df 92       	push	r13
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	2c 97       	sbiw	r28, 0x0c	; 12
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
	can_msg msg;
	if(mcp2515_read_status() & 0x01){
     4c8:	0e 94 30 05 	call	0xa60	; 0xa60 <mcp2515_read_status>
     4cc:	80 ff       	sbrs	r24, 0
     4ce:	33 c0       	rjmp	.+102    	; 0x536 <__stack+0x37>
		msg.id = (mcp2515_read(MCP_RXB0SIDH) << 3)|(mcp2515_read(MCP_RXB0SIDL) >> 5);
     4d0:	81 e6       	ldi	r24, 0x61	; 97
     4d2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
     4d6:	c8 2e       	mov	r12, r24
     4d8:	82 e6       	ldi	r24, 0x62	; 98
     4da:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
     4de:	d1 2c       	mov	r13, r1
     4e0:	cc 0c       	add	r12, r12
     4e2:	dd 1c       	adc	r13, r13
     4e4:	cc 0c       	add	r12, r12
     4e6:	dd 1c       	adc	r13, r13
     4e8:	cc 0c       	add	r12, r12
     4ea:	dd 1c       	adc	r13, r13
     4ec:	82 95       	swap	r24
     4ee:	86 95       	lsr	r24
     4f0:	87 70       	andi	r24, 0x07	; 7
     4f2:	c8 2a       	or	r12, r24
		msg.length = mcp2515_read(MCP_RXB0DLC);
     4f4:	85 e6       	ldi	r24, 0x65	; 101
     4f6:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
     4fa:	e8 2e       	mov	r14, r24
     4fc:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i < (msg.length); i++){
     4fe:	1e 14       	cp	r1, r14
     500:	1f 04       	cpc	r1, r15
     502:	a4 f4       	brge	.+40     	; 0x52c <__stack+0x2d>
     504:	00 e0       	ldi	r16, 0x00	; 0
     506:	10 e0       	ldi	r17, 0x00	; 0
     508:	b1 2c       	mov	r11, r1
			msg.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     50a:	86 e6       	ldi	r24, 0x66	; 102
     50c:	8b 0d       	add	r24, r11
     50e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
     512:	e5 e0       	ldi	r30, 0x05	; 5
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	ec 0f       	add	r30, r28
     518:	fd 1f       	adc	r31, r29
     51a:	e0 0f       	add	r30, r16
     51c:	f1 1f       	adc	r31, r17
     51e:	80 83       	st	Z, r24
void can_receive(void){
	can_msg msg;
	if(mcp2515_read_status() & 0x01){
		msg.id = (mcp2515_read(MCP_RXB0SIDH) << 3)|(mcp2515_read(MCP_RXB0SIDL) >> 5);
		msg.length = mcp2515_read(MCP_RXB0DLC);
		for(uint8_t i = 0; i < (msg.length); i++){
     520:	b3 94       	inc	r11
     522:	0b 2d       	mov	r16, r11
     524:	10 e0       	ldi	r17, 0x00	; 0
     526:	0e 15       	cp	r16, r14
     528:	1f 05       	cpc	r17, r15
     52a:	7c f3       	brlt	.-34     	; 0x50a <__stack+0xb>
			msg.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}
		mcp2515_bit_modify(MCP_CANINTF,0x01, 0x00);
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	8c e2       	ldi	r24, 0x2C	; 44
     532:	0e 94 38 05 	call	0xa70	; 0xa70 <mcp2515_bit_modify>
	}
		
	if(mcp2515_read_status() & 0x02){
     536:	0e 94 30 05 	call	0xa60	; 0xa60 <mcp2515_read_status>
     53a:	81 ff       	sbrs	r24, 1
     53c:	33 c0       	rjmp	.+102    	; 0x5a4 <__stack+0xa5>
		msg.id = (mcp2515_read(MCP_RXB1SIDH) << 3)|(mcp2515_read(MCP_RXB1SIDL) >> 5);
     53e:	81 e7       	ldi	r24, 0x71	; 113
     540:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
     544:	c8 2e       	mov	r12, r24
     546:	82 e7       	ldi	r24, 0x72	; 114
     548:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
     54c:	d1 2c       	mov	r13, r1
     54e:	cc 0c       	add	r12, r12
     550:	dd 1c       	adc	r13, r13
     552:	cc 0c       	add	r12, r12
     554:	dd 1c       	adc	r13, r13
     556:	cc 0c       	add	r12, r12
     558:	dd 1c       	adc	r13, r13
     55a:	82 95       	swap	r24
     55c:	86 95       	lsr	r24
     55e:	87 70       	andi	r24, 0x07	; 7
     560:	c8 2a       	or	r12, r24
		msg.length = mcp2515_read(MCP_RXB1DLC);
     562:	85 e7       	ldi	r24, 0x75	; 117
     564:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
     568:	e8 2e       	mov	r14, r24
     56a:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i < (msg.length); i++){
     56c:	1e 14       	cp	r1, r14
     56e:	1f 04       	cpc	r1, r15
     570:	a4 f4       	brge	.+40     	; 0x59a <__stack+0x9b>
     572:	00 e0       	ldi	r16, 0x00	; 0
     574:	10 e0       	ldi	r17, 0x00	; 0
     576:	b1 2c       	mov	r11, r1
			msg.data[i] = mcp2515_read(MCP_RXB1D0 + i);
     578:	86 e7       	ldi	r24, 0x76	; 118
     57a:	8b 0d       	add	r24, r11
     57c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
     580:	e5 e0       	ldi	r30, 0x05	; 5
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	ec 0f       	add	r30, r28
     586:	fd 1f       	adc	r31, r29
     588:	e0 0f       	add	r30, r16
     58a:	f1 1f       	adc	r31, r17
     58c:	80 83       	st	Z, r24
	}
		
	if(mcp2515_read_status() & 0x02){
		msg.id = (mcp2515_read(MCP_RXB1SIDH) << 3)|(mcp2515_read(MCP_RXB1SIDL) >> 5);
		msg.length = mcp2515_read(MCP_RXB1DLC);
		for(uint8_t i = 0; i < (msg.length); i++){
     58e:	b3 94       	inc	r11
     590:	0b 2d       	mov	r16, r11
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	0e 15       	cp	r16, r14
     596:	1f 05       	cpc	r17, r15
     598:	7c f3       	brlt	.-34     	; 0x578 <__stack+0x79>
			msg.data[i] = mcp2515_read(MCP_RXB1D0 + i);
		}
		mcp2515_bit_modify(MCP_CANINTF,0x02, 0x00);
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	62 e0       	ldi	r22, 0x02	; 2
     59e:	8c e2       	ldi	r24, 0x2C	; 44
     5a0:	0e 94 38 05 	call	0xa70	; 0xa70 <mcp2515_bit_modify>
	}
			
	printf("new message: \n\r");
     5a4:	86 e5       	ldi	r24, 0x56	; 86
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	printf("message id: %d\n\r", msg.id);
     5b0:	df 92       	push	r13
     5b2:	cf 92       	push	r12
     5b4:	86 e6       	ldi	r24, 0x66	; 102
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
     5bc:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	printf("message data length: %d\n\rmessage data: ", msg.length);
     5c0:	ff 92       	push	r15
     5c2:	ef 92       	push	r14
     5c4:	87 e7       	ldi	r24, 0x77	; 119
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	for (int i = 0; i < msg.length; i++)
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	1e 14       	cp	r1, r14
     5dc:	1f 04       	cpc	r1, r15
     5de:	fc f4       	brge	.+62     	; 0x61e <__stack+0x11f>
     5e0:	8e 01       	movw	r16, r28
     5e2:	0b 5f       	subi	r16, 0xFB	; 251
     5e4:	1f 4f       	sbci	r17, 0xFF	; 255
     5e6:	ce 01       	movw	r24, r28
     5e8:	8e 0d       	add	r24, r14
     5ea:	9f 1d       	adc	r25, r15
     5ec:	fc 01       	movw	r30, r24
     5ee:	35 96       	adiw	r30, 0x05	; 5
     5f0:	7f 01       	movw	r14, r30
	{
		printf("%d ", msg.data[i]);
     5f2:	0f 2e       	mov	r0, r31
     5f4:	ff e9       	ldi	r31, 0x9F	; 159
     5f6:	cf 2e       	mov	r12, r31
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	df 2e       	mov	r13, r31
     5fc:	f0 2d       	mov	r31, r0
     5fe:	f8 01       	movw	r30, r16
     600:	81 91       	ld	r24, Z+
     602:	8f 01       	movw	r16, r30
     604:	1f 92       	push	r1
     606:	8f 93       	push	r24
     608:	df 92       	push	r13
     60a:	cf 92       	push	r12
     60c:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	}
			
	printf("new message: \n\r");
	printf("message id: %d\n\r", msg.id);
	printf("message data length: %d\n\rmessage data: ", msg.length);
	for (int i = 0; i < msg.length; i++)
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	e0 16       	cp	r14, r16
     61a:	f1 06       	cpc	r15, r17
     61c:	81 f7       	brne	.-32     	; 0x5fe <__stack+0xff>
	{
		printf("%d ", msg.data[i]);
	}
	printf("\n\n\r");
     61e:	83 ea       	ldi	r24, 0xA3	; 163
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
}
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	2c 96       	adiw	r28, 0x0c	; 12
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	bf 90       	pop	r11
     64c:	08 95       	ret

0000064e <can_transmit>:

void can_transmit(can_msg msg){
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	2c 97       	sbiw	r28, 0x0c	; 12
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	e9 82       	std	Y+1, r14	; 0x01
     670:	fa 82       	std	Y+2, r15	; 0x02
     672:	0b 83       	std	Y+3, r16	; 0x03
     674:	1c 83       	std	Y+4, r17	; 0x04
     676:	2d 83       	std	Y+5, r18	; 0x05
     678:	3e 83       	std	Y+6, r19	; 0x06
     67a:	4f 83       	std	Y+7, r20	; 0x07
     67c:	58 87       	std	Y+8, r21	; 0x08
     67e:	69 87       	std	Y+9, r22	; 0x09
     680:	7a 87       	std	Y+10, r23	; 0x0a
     682:	8b 87       	std	Y+11, r24	; 0x0b
     684:	9c 87       	std	Y+12, r25	; 0x0c
     686:	e9 80       	ldd	r14, Y+1	; 0x01
     688:	fa 80       	ldd	r15, Y+2	; 0x02
     68a:	cb 80       	ldd	r12, Y+3	; 0x03
     68c:	dc 80       	ldd	r13, Y+4	; 0x04
	mcp2515_write(MCP_TXB0SIDH, msg.id >> 3);
     68e:	b6 01       	movw	r22, r12
     690:	75 95       	asr	r23
     692:	67 95       	ror	r22
     694:	75 95       	asr	r23
     696:	67 95       	ror	r22
     698:	75 95       	asr	r23
     69a:	67 95       	ror	r22
     69c:	81 e3       	ldi	r24, 0x31	; 49
     69e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
     6a2:	6c 2d       	mov	r22, r12
     6a4:	62 95       	swap	r22
     6a6:	66 0f       	add	r22, r22
     6a8:	60 7e       	andi	r22, 0xE0	; 224
     6aa:	82 e3       	ldi	r24, 0x32	; 50
     6ac:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mcp2515_write>
	mcp2515_write(MCP_TXB0DLC, msg.length);
     6b0:	6e 2d       	mov	r22, r14
     6b2:	85 e3       	ldi	r24, 0x35	; 53
     6b4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mcp2515_write>
	for(uint8_t i = 0; i < (msg.length); i++){
     6b8:	1e 14       	cp	r1, r14
     6ba:	1f 04       	cpc	r1, r15
     6bc:	0c f0       	brlt	.+2      	; 0x6c0 <can_transmit+0x72>
     6be:	5a c0       	rjmp	.+180    	; 0x774 <can_transmit+0x126>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
     6c6:	e5 e0       	ldi	r30, 0x05	; 5
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	ec 0f       	add	r30, r28
     6cc:	fd 1f       	adc	r31, r29
     6ce:	e8 0f       	add	r30, r24
     6d0:	f9 1f       	adc	r31, r25
     6d2:	60 81       	ld	r22, Z
     6d4:	86 e3       	ldi	r24, 0x36	; 54
     6d6:	81 0f       	add	r24, r17
     6d8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mcp2515_write>

void can_transmit(can_msg msg){
	mcp2515_write(MCP_TXB0SIDH, msg.id >> 3);
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
	mcp2515_write(MCP_TXB0DLC, msg.length);
	for(uint8_t i = 0; i < (msg.length); i++){
     6dc:	1f 5f       	subi	r17, 0xFF	; 255
     6de:	81 2f       	mov	r24, r17
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	8e 15       	cp	r24, r14
     6e4:	9f 05       	cpc	r25, r15
     6e6:	7c f3       	brlt	.-34     	; 0x6c6 <can_transmit+0x78>
     6e8:	19 c0       	rjmp	.+50     	; 0x71c <can_transmit+0xce>
	printf("new message: \n\r");
	printf("message id: %d\n\r", msg.id);
	printf("message data length: %d\n\rmessage data: ", msg.length);
	for (int i = 0; i < msg.length; i++)
	{
		printf("%d ", msg.data[i]);
     6ea:	f6 01       	movw	r30, r12
     6ec:	81 91       	ld	r24, Z+
     6ee:	6f 01       	movw	r12, r30
     6f0:	1f 92       	push	r1
     6f2:	8f 93       	push	r24
     6f4:	1f 93       	push	r17
     6f6:	0f 93       	push	r16
     6f8:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	mcp2515_request_to_send(0);
	
	printf("new message: \n\r");
	printf("message id: %d\n\r", msg.id);
	printf("message data length: %d\n\rmessage data: ", msg.length);
	for (int i = 0; i < msg.length; i++)
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	ce 14       	cp	r12, r14
     706:	df 04       	cpc	r13, r15
     708:	81 f7       	brne	.-32     	; 0x6ea <can_transmit+0x9c>
	{
		printf("%d ", msg.data[i]);
	}
	printf("\n\n\r");
     70a:	83 ea       	ldi	r24, 0xA3	; 163
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
}
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	4b c0       	rjmp	.+150    	; 0x7b2 <can_transmit+0x164>
	mcp2515_write(MCP_TXB0DLC, msg.length);
	for(uint8_t i = 0; i < (msg.length); i++){
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
		//printf("data: %d\r\n", msg.data[i]);
	}
	mcp2515_request_to_send(0);
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <mcp2515_request_to_send>
	
	printf("new message: \n\r");
     722:	86 e5       	ldi	r24, 0x56	; 86
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	printf("message id: %d\n\r", msg.id);
     72e:	df 92       	push	r13
     730:	cf 92       	push	r12
     732:	86 e6       	ldi	r24, 0x66	; 102
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	printf("message data length: %d\n\rmessage data: ", msg.length);
     73e:	ff 92       	push	r15
     740:	ef 92       	push	r14
     742:	87 e7       	ldi	r24, 0x77	; 119
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	9f 93       	push	r25
     748:	8f 93       	push	r24
     74a:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
     74e:	6e 01       	movw	r12, r28
     750:	f5 e0       	ldi	r31, 0x05	; 5
     752:	cf 0e       	add	r12, r31
     754:	d1 1c       	adc	r13, r1
     756:	ce 01       	movw	r24, r28
     758:	8e 0d       	add	r24, r14
     75a:	9f 1d       	adc	r25, r15
     75c:	9c 01       	movw	r18, r24
     75e:	2b 5f       	subi	r18, 0xFB	; 251
     760:	3f 4f       	sbci	r19, 0xFF	; 255
     762:	79 01       	movw	r14, r18
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0; i < msg.length; i++)
	{
		printf("%d ", msg.data[i]);
     76e:	0f e9       	ldi	r16, 0x9F	; 159
     770:	11 e0       	ldi	r17, 0x01	; 1
     772:	bb cf       	rjmp	.-138    	; 0x6ea <can_transmit+0x9c>
	mcp2515_write(MCP_TXB0DLC, msg.length);
	for(uint8_t i = 0; i < (msg.length); i++){
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
		//printf("data: %d\r\n", msg.data[i]);
	}
	mcp2515_request_to_send(0);
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 0d 05 	call	0xa1a	; 0xa1a <mcp2515_request_to_send>
	
	printf("new message: \n\r");
     77a:	86 e5       	ldi	r24, 0x56	; 86
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	printf("message id: %d\n\r", msg.id);
     786:	df 92       	push	r13
     788:	cf 92       	push	r12
     78a:	86 e6       	ldi	r24, 0x66	; 102
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	9f 93       	push	r25
     790:	8f 93       	push	r24
     792:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	printf("message data length: %d\n\rmessage data: ", msg.length);
     796:	ff 92       	push	r15
     798:	ef 92       	push	r14
     79a:	87 e7       	ldi	r24, 0x77	; 119
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	9f 93       	push	r25
     7a0:	8f 93       	push	r24
     7a2:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	ac cf       	rjmp	.-168    	; 0x70a <can_transmit+0xbc>
	for (int i = 0; i < msg.length; i++)
	{
		printf("%d ", msg.data[i]);
	}
	printf("\n\n\r");
}
     7b2:	2c 96       	adiw	r28, 0x0c	; 12
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	df 90       	pop	r13
     7cc:	cf 90       	pop	r12
     7ce:	08 95       	ret

000007d0 <__vector_1>:

ISR(INT0_vect){
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	ef 93       	push	r30
     7f0:	ff 93       	push	r31
	can_receive();
     7f2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <can_receive>
}
     7f6:	ff 91       	pop	r31
     7f8:	ef 91       	pop	r30
     7fa:	bf 91       	pop	r27
     7fc:	af 91       	pop	r26
     7fe:	9f 91       	pop	r25
     800:	8f 91       	pop	r24
     802:	7f 91       	pop	r23
     804:	6f 91       	pop	r22
     806:	5f 91       	pop	r21
     808:	4f 91       	pop	r20
     80a:	3f 91       	pop	r19
     80c:	2f 91       	pop	r18
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <calibrate_joystick_center>:
#include "joystick.h"
#include "can.h"

//enum position{Left, Right, Up, Down, Neutral};

int calibrate_joystick_center(uint8_t channel, int samples){
     818:	df 92       	push	r13
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	d8 2e       	mov	r13, r24
     828:	7b 01       	movw	r14, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     82a:	2f ef       	ldi	r18, 0xFF	; 255
     82c:	8f e7       	ldi	r24, 0x7F	; 127
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	21 50       	subi	r18, 0x01	; 1
     832:	80 40       	sbci	r24, 0x00	; 0
     834:	90 40       	sbci	r25, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <calibrate_joystick_center+0x18>
     838:	00 c0       	rjmp	.+0      	; 0x83a <calibrate_joystick_center+0x22>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <calibrate_joystick_center+0x24>
	uint8_t pos = 0;
	int center = 0;
	_delay_ms(100);
	for(int i=0; i<samples; i++){
     83c:	16 16       	cp	r1, r22
     83e:	17 06       	cpc	r1, r23
     840:	74 f4       	brge	.+28     	; 0x85e <calibrate_joystick_center+0x46>
     842:	c0 e0       	ldi	r28, 0x00	; 0
     844:	d0 e0       	ldi	r29, 0x00	; 0
     846:	00 e0       	ldi	r16, 0x00	; 0
     848:	10 e0       	ldi	r17, 0x00	; 0
		pos = adc_read(channel);
     84a:	8d 2d       	mov	r24, r13
     84c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <adc_read>
		//printf("value: %d\r\n", pos);
		center = center + (int)pos;
     850:	08 0f       	add	r16, r24
     852:	11 1d       	adc	r17, r1

int calibrate_joystick_center(uint8_t channel, int samples){
	uint8_t pos = 0;
	int center = 0;
	_delay_ms(100);
	for(int i=0; i<samples; i++){
     854:	21 96       	adiw	r28, 0x01	; 1
     856:	ec 16       	cp	r14, r28
     858:	fd 06       	cpc	r15, r29
     85a:	b9 f7       	brne	.-18     	; 0x84a <calibrate_joystick_center+0x32>
     85c:	02 c0       	rjmp	.+4      	; 0x862 <calibrate_joystick_center+0x4a>

//enum position{Left, Right, Up, Down, Neutral};

int calibrate_joystick_center(uint8_t channel, int samples){
	uint8_t pos = 0;
	int center = 0;
     85e:	00 e0       	ldi	r16, 0x00	; 0
     860:	10 e0       	ldi	r17, 0x00	; 0
		//printf("value: %d\r\n", pos);
		center = center + (int)pos;
	}
	//printf("sum: %d\r\n", center);
	center = center/samples;
	return center;
     862:	c8 01       	movw	r24, r16
     864:	b7 01       	movw	r22, r14
     866:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     86a:	cb 01       	movw	r24, r22
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	08 95       	ret

0000087c <normalize_output_joystick>:

int normalize_output_joystick(uint8_t value, int center){
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	eb 01       	movw	r28, r22
	int position = 0;
	if((int)value <= center){
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	62 17       	cp	r22, r18
     890:	73 07       	cpc	r23, r19
     892:	24 f1       	brlt	.+72     	; 0x8dc <normalize_output_joystick+0x60>
		position = (((float)value/(float)center)*100)-100;
     894:	68 2f       	mov	r22, r24
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 14 0a 	call	0x1428	; 0x1428 <__floatunsisf>
     8a0:	6b 01       	movw	r12, r22
     8a2:	7c 01       	movw	r14, r24
     8a4:	be 01       	movw	r22, r28
     8a6:	dd 0f       	add	r29, r29
     8a8:	88 0b       	sbc	r24, r24
     8aa:	99 0b       	sbc	r25, r25
     8ac:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatsisf>
     8b0:	9b 01       	movw	r18, r22
     8b2:	ac 01       	movw	r20, r24
     8b4:	c7 01       	movw	r24, r14
     8b6:	b6 01       	movw	r22, r12
     8b8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__divsf3>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	48 ec       	ldi	r20, 0xC8	; 200
     8c2:	52 e4       	ldi	r21, 0x42	; 66
     8c4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	48 ec       	ldi	r20, 0xC8	; 200
     8ce:	52 e4       	ldi	r21, 0x42	; 66
     8d0:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__subsf3>
     8d4:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fixsfsi>
     8d8:	cb 01       	movw	r24, r22
     8da:	33 c0       	rjmp	.+102    	; 0x942 <normalize_output_joystick+0xc6>
	}
	else if((int)value > center){
		position = ((((255-(float)value)/(255-(float) center))*(-100)))+100;
     8dc:	68 2f       	mov	r22, r24
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 14 0a 	call	0x1428	; 0x1428 <__floatunsisf>
     8e8:	9b 01       	movw	r18, r22
     8ea:	ac 01       	movw	r20, r24
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	8f e7       	ldi	r24, 0x7F	; 127
     8f2:	93 e4       	ldi	r25, 0x43	; 67
     8f4:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__subsf3>
     8f8:	6b 01       	movw	r12, r22
     8fa:	7c 01       	movw	r14, r24
     8fc:	be 01       	movw	r22, r28
     8fe:	dd 0f       	add	r29, r29
     900:	88 0b       	sbc	r24, r24
     902:	99 0b       	sbc	r25, r25
     904:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatsisf>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	8f e7       	ldi	r24, 0x7F	; 127
     912:	93 e4       	ldi	r25, 0x43	; 67
     914:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__subsf3>
     918:	9b 01       	movw	r18, r22
     91a:	ac 01       	movw	r20, r24
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__divsf3>
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	48 ec       	ldi	r20, 0xC8	; 200
     92a:	52 ec       	ldi	r21, 0xC2	; 194
     92c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	48 ec       	ldi	r20, 0xC8	; 200
     936:	52 e4       	ldi	r21, 0x42	; 66
     938:	0e 94 00 09 	call	0x1200	; 0x1200 <__addsf3>
     93c:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fixsfsi>
     940:	cb 01       	movw	r24, r22
	}
	return position;
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	08 95       	ret

00000950 <get_button_status>:
	msg.data[data_array_pos] = (char) position;
	can_transmit(msg);
}
*/
int get_button_status(void){
	DDRD |= (0 << PD0);
     950:	81 b3       	in	r24, 0x11	; 17
     952:	81 bb       	out	0x11, r24	; 17
	int status = PIND & 0x01;
     954:	80 b3       	in	r24, 0x10	; 16
	//printf("Button status: %d\n\r", status);
	return status;
}
     956:	81 70       	andi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	08 95       	ret

0000095c <send_joystick_status>:
	//printf("message length in node 1: %d\r\n", msg.length);
	//printf("message data in node 1: %d\r\n\n", msg.data[0]);
	can_transmit(msg);
}
*/
void send_joystick_status(int h_pos, int v_pos, int b_stat, int h_center, int v_center){
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	2c 97       	sbiw	r28, 0x0c	; 12
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	36 2f       	mov	r19, r22
     97a:	52 2f       	mov	r21, r18
     97c:	60 2f       	mov	r22, r16
	//printf("hdata: %d, vdata: %d, bstat: %d, hcenter:%d, vcenter:%d\n\r", h_pos, v_pos, b_stat, h_center, v_center);
	can_msg msg;
	msg.id = 1;
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	09 2f       	mov	r16, r25
	msg.length = 5;		//does length need to be increased to 3?
     982:	95 e0       	ldi	r25, 0x05	; 5
     984:	e9 2e       	mov	r14, r25
	msg.data[0] = (char)h_pos;
	msg.data[1] = (char)v_pos;
	msg.data[2] = (char)b_stat;
	msg.data[3] = (char)h_center;
	msg.data[4] = (char)v_center;
	can_transmit(msg);
     986:	f1 2c       	mov	r15, r1
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	28 2f       	mov	r18, r24
     98c:	7a 85       	ldd	r23, Y+10	; 0x0a
     98e:	8b 85       	ldd	r24, Y+11	; 0x0b
     990:	9c 85       	ldd	r25, Y+12	; 0x0c
     992:	0e 94 27 03 	call	0x64e	; 0x64e <can_transmit>
     996:	2c 96       	adiw	r28, 0x0c	; 12
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	08 95       	ret

000009b0 <mcp2515_read>:
	SPI_MasterTransmit(MCP_CNF3);
	SPI_MasterTransmit(0b00000110);
	*/
}

uint8_t mcp2515_read(uint8_t address){
     9b0:	cf 93       	push	r28
     9b2:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	PORTB &= ~(1<<PB4);
     9b4:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_READ);
     9b6:	83 e0       	ldi	r24, 0x03	; 3
     9b8:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     9bc:	8c 2f       	mov	r24, r28
     9be:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	result = SPI_MasterReceive();
     9c2:	0e 94 cf 08 	call	0x119e	; 0x119e <SPI_MasterReceive>
	
	PORTB |= (1<<PB4);
     9c6:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	d8 2f       	mov	r29, r24
     9d2:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4);
     9d4:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_WRITE);
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     9dc:	8d 2f       	mov	r24, r29
     9de:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     9e2:	8c 2f       	mov	r24, r28
     9e4:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     9e8:	c4 9a       	sbi	0x18, 4	; 24
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <mcp2515_reset>:

void mcp2515_reset(void){
	PORTB &= ~(1<<PB4);
     9f0:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_RESET);
     9f2:	80 ec       	ldi	r24, 0xC0	; 192
     9f4:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     9f8:	c4 9a       	sbi	0x18, 4	; 24
     9fa:	08 95       	ret

000009fc <mcp2515_init>:
int status;

void mcp2515_init(void){
	uint8_t value;

	SPI_MasterInit();
     9fc:	0e 94 c0 08 	call	0x1180	; 0x1180 <SPI_MasterInit>
	mcp2515_reset();
     a00:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <mcp2515_reset>
	
	value = mcp2515_read(MCP_CANSTAT);
     a04:	8e e0       	ldi	r24, 0x0E	; 14
     a06:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     a0a:	80 7e       	andi	r24, 0xE0	; 224
     a0c:	80 38       	cpi	r24, 0x80	; 128
     a0e:	21 f0       	breq	.+8      	; 0xa18 <mcp2515_init+0x1c>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     a10:	87 ea       	ldi	r24, 0xA7	; 167
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 98 0b 	call	0x1730	; 0x1730 <puts>
     a18:	08 95       	ret

00000a1a <mcp2515_request_to_send>:
	PORTB |= (1<<PB4);
}


void mcp2515_request_to_send(uint8_t buffer){
	PORTB &= ~(1<<PB4);
     a1a:	c4 98       	cbi	0x18, 4	; 24
	switch(buffer){
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	51 f0       	breq	.+20     	; 0xa34 <mcp2515_request_to_send+0x1a>
     a20:	28 f0       	brcs	.+10     	; 0xa2c <mcp2515_request_to_send+0x12>
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	59 f0       	breq	.+22     	; 0xa3c <mcp2515_request_to_send+0x22>
     a26:	89 30       	cpi	r24, 0x09	; 9
     a28:	69 f0       	breq	.+26     	; 0xa44 <mcp2515_request_to_send+0x2a>
     a2a:	10 c0       	rjmp	.+32     	; 0xa4c <mcp2515_request_to_send+0x32>
	case 0:
		SPI_MasterTransmit(MCP_RTS_TX0);
     a2c:	81 e8       	ldi	r24, 0x81	; 129
     a2e:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	break;
     a32:	14 c0       	rjmp	.+40     	; 0xa5c <mcp2515_request_to_send+0x42>
	case 1:
		SPI_MasterTransmit(MCP_RTS_TX1);
     a34:	82 e8       	ldi	r24, 0x82	; 130
     a36:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	break;
     a3a:	10 c0       	rjmp	.+32     	; 0xa5c <mcp2515_request_to_send+0x42>
	case 2:
		SPI_MasterTransmit(MCP_RTS_TX2);
     a3c:	84 e8       	ldi	r24, 0x84	; 132
     a3e:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	break;
     a42:	0c c0       	rjmp	.+24     	; 0xa5c <mcp2515_request_to_send+0x42>
	case 9:
		SPI_MasterTransmit(MCP_RTS_ALL);
     a44:	87 e8       	ldi	r24, 0x87	; 135
     a46:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	break;
     a4a:	08 c0       	rjmp	.+16     	; 0xa5c <mcp2515_request_to_send+0x42>
	default:
		printf("Not a valid entry\n\r try again");
     a4c:	89 ed       	ldi	r24, 0xD9	; 217
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	break;
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
	}
	PORTB |= (1<<PB4);
     a5c:	c4 9a       	sbi	0x18, 4	; 24
     a5e:	08 95       	ret

00000a60 <mcp2515_read_status>:
}

uint8_t mcp2515_read_status(void){
	uint8_t result;
	PORTB &= ~(1<<PB4);
     a60:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_READ_STATUS);
     a62:	80 ea       	ldi	r24, 0xA0	; 160
     a64:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	result = SPI_MasterReceive();
     a68:	0e 94 cf 08 	call	0x119e	; 0x119e <SPI_MasterReceive>
	PORTB |= (1<<PB4);
     a6c:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     a6e:	08 95       	ret

00000a70 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t data_mask, uint8_t data){
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	18 2f       	mov	r17, r24
     a78:	d6 2f       	mov	r29, r22
     a7a:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);
     a7c:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_BITMOD);
     a7e:	85 e0       	ldi	r24, 0x05	; 5
     a80:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     a84:	81 2f       	mov	r24, r17
     a86:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	SPI_MasterTransmit(data_mask);
     a8a:	8d 2f       	mov	r24, r29
     a8c:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     a90:	8c 2f       	mov	r24, r28
     a92:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     a96:	c4 9a       	sbi	0x18, 4	; 24
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	08 95       	ret

00000aa0 <display_main_menu>:
	display_main_menu();
	navigate_menu();
}

void display_main_menu(void){
	OLED_clear();
     aa0:	0e 94 bc 07 	call	0xf78	; 0xf78 <OLED_clear>
	OLED_pos(0,0);
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
	OLED_print('>');
     aac:	8e e3       	ldi	r24, 0x3E	; 62
     aae:	0e 94 71 08 	call	0x10e2	; 0x10e2 <OLED_print>
	OLED_pos(0, 15);
     ab2:	6f e0       	ldi	r22, 0x0F	; 15
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
	OLED_print_string("Start Game");
     aba:	87 ef       	ldi	r24, 0xF7	; 247
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
	OLED_pos(2, 15);
     ac2:	6f e0       	ldi	r22, 0x0F	; 15
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
	OLED_print_string("Brightness");
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
	OLED_pos(4, 15);
     ad2:	6f e0       	ldi	r22, 0x0F	; 15
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
	OLED_print_string("Instructions");
     ada:	8d e0       	ldi	r24, 0x0D	; 13
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
	OLED_pos(6, 15);
     ae2:	6f e0       	ldi	r22, 0x0F	; 15
     ae4:	86 e0       	ldi	r24, 0x06	; 6
     ae6:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
	OLED_print_string("Calibrate");
     aea:	8a e1       	ldi	r24, 0x1A	; 26
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
	currentRow = 0;
     af2:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <currentRow+0x1>
     af6:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <currentRow>
     afa:	08 95       	ret

00000afc <start_game>:
	//int centerH = calibrate_joystick_center(HORIZONTAL, 10);
	//int centerV = calibrate_joystick_center(VERTICAL, 10);
	while(1){
		//printf("center h: %d, center v: %d\n\r", centerH, centerV);
		int valueH = adc_read(HORIZONTAL);
		printf("adc horizontal value: %d\n\r", valueH);
     afc:	0f 2e       	mov	r0, r31
     afe:	f4 e2       	ldi	r31, 0x24	; 36
     b00:	ef 2e       	mov	r14, r31
     b02:	f2 e0       	ldi	r31, 0x02	; 2
     b04:	ff 2e       	mov	r15, r31
     b06:	f0 2d       	mov	r31, r0
void start_game(void){
	//int centerH = calibrate_joystick_center(HORIZONTAL, 10);
	//int centerV = calibrate_joystick_center(VERTICAL, 10);
	while(1){
		//printf("center h: %d, center v: %d\n\r", centerH, centerV);
		int valueH = adc_read(HORIZONTAL);
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <adc_read>
     b0e:	c8 2e       	mov	r12, r24
     b10:	d1 2c       	mov	r13, r1
		printf("adc horizontal value: %d\n\r", valueH);
     b12:	1f 92       	push	r1
     b14:	8f 93       	push	r24
     b16:	ff 92       	push	r15
     b18:	ef 92       	push	r14
     b1a:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
		int valueV = adc_read(VERTICAL);
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <adc_read>
     b24:	c8 2f       	mov	r28, r24
		int button_status = get_button_status();
     b26:	0e 94 a8 04 	call	0x950	; 0x950 <get_button_status>
		//printf("main function hdata: %d, vdata: %d, bstat: %d, hcenter:%d, vcenter:%d\n\r", valueH, valueV, button_status, centerX, centerY);
		send_joystick_status(valueH, valueV, button_status, centerX, centerY);
     b2a:	00 91 90 03 	lds	r16, 0x0390	; 0x800390 <centerY>
     b2e:	10 91 91 03 	lds	r17, 0x0391	; 0x800391 <centerY+0x1>
     b32:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <centerX>
     b36:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <centerX+0x1>
     b3a:	6c 2f       	mov	r22, r28
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	ac 01       	movw	r20, r24
     b40:	c6 01       	movw	r24, r12
     b42:	0e 94 ae 04 	call	0x95c	; 0x95c <send_joystick_status>
     b46:	83 ed       	ldi	r24, 0xD3	; 211
     b48:	90 e3       	ldi	r25, 0x30	; 48
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	f1 f7       	brne	.-4      	; 0xb4a <start_game+0x4e>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <start_game+0x54>
     b50:	00 00       	nop
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	d6 cf       	rjmp	.-84     	; 0xb08 <start_game+0xc>

00000b5c <select_item>:
			}
		}
	}
}

void select_item(int row){
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	ec 01       	movw	r28, r24
	OLED_clear();
     b62:	0e 94 bc 07 	call	0xf78	; 0xf78 <OLED_clear>
	printf("row %d\r\n", row);	
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	8f e3       	ldi	r24, 0x3F	; 63
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	9f 93       	push	r25
     b70:	8f 93       	push	r24
     b72:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
	if(row == 0){
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	20 97       	sbiw	r28, 0x00	; 0
     b80:	c1 f4       	brne	.+48     	; 0xbb2 <select_item+0x56>
		playing = 1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <__data_end+0x1>
     b8a:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <__data_end>
		//start game
		OLED_pos(0,15);
     b8e:	6f e0       	ldi	r22, 0x0F	; 15
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("READY SET GO!");
     b96:	8f e3       	ldi	r24, 0x3F	; 63
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(2,15);
     b9e:	6f e0       	ldi	r22, 0x0F	; 15
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("PING PONG TIME");
     ba6:	8d e4       	ldi	r24, 0x4D	; 77
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		start_game();
     bae:	0e 94 7e 05 	call	0xafc	; 0xafc <start_game>
		//break;
	}
	else if (row == 2){
     bb2:	c2 30       	cpi	r28, 0x02	; 2
     bb4:	d1 05       	cpc	r29, r1
     bb6:	49 f4       	brne	.+18     	; 0xbca <select_item+0x6e>
		//change brightness
		OLED_pos(0,15);
     bb8:	6f e0       	ldi	r22, 0x0F	; 15
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("The sun");
     bc0:	8c e5       	ldi	r24, 0x5C	; 92
     bc2:	92 e0       	ldi	r25, 0x02	; 2
     bc4:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
     bc8:	9c c0       	rjmp	.+312    	; 0xd02 <select_item+0x1a6>
	}
	else if (row == 4){
     bca:	c4 30       	cpi	r28, 0x04	; 4
     bcc:	d1 05       	cpc	r29, r1
     bce:	09 f0       	breq	.+2      	; 0xbd2 <select_item+0x76>
     bd0:	41 c0       	rjmp	.+130    	; 0xc54 <select_item+0xf8>
		//Instructions
		OLED_pos(0,0);
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("0.Joy right:");
     bda:	84 e6       	ldi	r24, 0x64	; 100
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(1,15);
     be2:	6f e0       	ldi	r22, 0x0F	; 15
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("select item");
     bea:	81 e7       	ldi	r24, 0x71	; 113
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(2,0);
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("1.Start game");
     bfa:	8d e7       	ldi	r24, 0x7D	; 125
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(3,0);
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("2.Play");
     c0a:	8a e8       	ldi	r24, 0x8A	; 138
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(4,0);
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	84 e0       	ldi	r24, 0x04	; 4
     c16:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("3.If score:");
     c1a:	81 e9       	ldi	r24, 0x91	; 145
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(5,15);
     c22:	6f e0       	ldi	r22, 0x0F	; 15
     c24:	85 e0       	ldi	r24, 0x05	; 5
     c26:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("press joy");
     c2a:	8d e9       	ldi	r24, 0x9D	; 157
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(6,0);
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	86 e0       	ldi	r24, 0x06	; 6
     c36:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("4.If game over:");
     c3a:	87 ea       	ldi	r24, 0xA7	; 167
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(7,15);
     c42:	6f e0       	ldi	r22, 0x0F	; 15
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("reset");
     c4a:	87 eb       	ldi	r24, 0xB7	; 183
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
     c52:	57 c0       	rjmp	.+174    	; 0xd02 <select_item+0x1a6>
	}
	else if (row == 6){
     c54:	26 97       	sbiw	r28, 0x06	; 6
     c56:	09 f0       	breq	.+2      	; 0xc5a <select_item+0xfe>
     c58:	54 c0       	rjmp	.+168    	; 0xd02 <select_item+0x1a6>
		//calibrate joystick
		OLED_pos(0,15);
     c5a:	6f e0       	ldi	r22, 0x0F	; 15
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("Calibrating...");
     c62:	8d eb       	ldi	r24, 0xBD	; 189
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		centerX = calibrate_joystick_center(HORIZONTAL, 10);
     c6a:	6a e0       	ldi	r22, 0x0A	; 10
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 0c 04 	call	0x818	; 0x818 <calibrate_joystick_center>
     c74:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <centerX+0x1>
     c78:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <centerX>
		centerY = calibrate_joystick_center(VERTICAL, 10);
     c7c:	6a e0       	ldi	r22, 0x0A	; 10
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	0e 94 0c 04 	call	0x818	; 0x818 <calibrate_joystick_center>
     c86:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <centerY>
     c8a:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <centerY+0x1>
		printf("x: %d, y: %d\n\r", centerX, centerY);
     c8e:	9f 93       	push	r25
     c90:	8f 93       	push	r24
     c92:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <centerX+0x1>
     c96:	8f 93       	push	r24
     c98:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <centerX>
     c9c:	8f 93       	push	r24
     c9e:	8c ec       	ldi	r24, 0xCC	; 204
     ca0:	92 e0       	ldi	r25, 0x02	; 2
     ca2:	9f 93       	push	r25
     ca4:	8f 93       	push	r24
     ca6:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
		OLED_pos(2,15);
     caa:	6f e0       	ldi	r22, 0x0F	; 15
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("X center: ");
     cb2:	8b ed       	ldi	r24, 0xDB	; 219
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(3, 15);
     cba:	6f e0       	ldi	r22, 0x0F	; 15
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string((char) centerX);
     cc2:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <centerX>
     cc6:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <centerX+0x1>
     cca:	99 27       	eor	r25, r25
     ccc:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(4,15);
     cd0:	6f e0       	ldi	r22, 0x0F	; 15
     cd2:	84 e0       	ldi	r24, 0x04	; 4
     cd4:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string("Y center: ");
     cd8:	86 ee       	ldi	r24, 0xE6	; 230
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
		OLED_pos(5,15);
     ce0:	6f e0       	ldi	r22, 0x0F	; 15
     ce2:	85 e0       	ldi	r24, 0x05	; 5
     ce4:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
		OLED_print_string((char) centerY);
     ce8:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <centerY>
     cec:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <centerY+0x1>
     cf0:	99 27       	eor	r25, r25
     cf2:	0e 94 b1 08 	call	0x1162	; 0x1162 <OLED_print_string>
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
	}
	
	navigate_menu();
     d02:	0e 94 86 06 	call	0xd0c	; 0xd0c <navigate_menu>
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <navigate_menu>:
	OLED_pos(6, 15);
	OLED_print_string("Calibrate");
	currentRow = 0;
}

void navigate_menu(void){
     d0c:	6f 92       	push	r6
     d0e:	7f 92       	push	r7
     d10:	8f 92       	push	r8
     d12:	9f 92       	push	r9
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
	//clock_timer();
	if(!playing){
     d28:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <__data_end>
     d2c:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <__data_end+0x1>
     d30:	89 2b       	or	r24, r25
     d32:	09 f0       	breq	.+2      	; 0xd36 <navigate_menu+0x2a>
     d34:	fb c0       	rjmp	.+502    	; 0xf2c <navigate_menu+0x220>
	printf("current row before while: %d\r\n", currentRow);
     d36:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <currentRow+0x1>
     d3a:	8f 93       	push	r24
     d3c:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <currentRow>
     d40:	8f 93       	push	r24
     d42:	81 ef       	ldi	r24, 0xF1	; 241
     d44:	92 e0       	ldi	r25, 0x02	; 2
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
		while(1){
			uint8_t x = adc_read(0);
			uint8_t y = adc_read(1);
			printf("adc horizontal: %d, adc vertical: %d\n\r", x, y);
     d56:	c0 e1       	ldi	r28, 0x10	; 16
     d58:	d3 e0       	ldi	r29, 0x03	; 3
				display_main_menu();
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(x, centerX) > 90){
				printf("current row %d\r\n", currentRow);
     d5a:	0f 2e       	mov	r0, r31
     d5c:	f7 e3       	ldi	r31, 0x37	; 55
     d5e:	cf 2e       	mov	r12, r31
     d60:	f3 e0       	ldi	r31, 0x03	; 3
     d62:	df 2e       	mov	r13, r31
     d64:	f0 2d       	mov	r31, r0
				select_item(currentRow);
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(y, centerY) > 90){
				OLED_clear_position(currentRow, 0);
     d66:	04 e9       	ldi	r16, 0x94	; 148
     d68:	13 e0       	ldi	r17, 0x03	; 3
				currentRow = currentRow - 2;
				if(currentRow < 0){
					currentRow = 6;
				}
				printf("current row after moving up: %d\r\n", currentRow);
     d6a:	0f 2e       	mov	r0, r31
     d6c:	f8 e4       	ldi	r31, 0x48	; 72
     d6e:	ef 2e       	mov	r14, r31
     d70:	f3 e0       	ldi	r31, 0x03	; 3
     d72:	ff 2e       	mov	r15, r31
     d74:	f0 2d       	mov	r31, r0
		
			if(normalize_output_joystick(y, centerY) > 90){
				OLED_clear_position(currentRow, 0);
				currentRow = currentRow - 2;
				if(currentRow < 0){
					currentRow = 6;
     d76:	0f 2e       	mov	r0, r31
     d78:	f6 e0       	ldi	r31, 0x06	; 6
     d7a:	8f 2e       	mov	r8, r31
     d7c:	91 2c       	mov	r9, r1
     d7e:	f0 2d       	mov	r31, r0
				OLED_clear_position(currentRow, 0);
				currentRow = currentRow + 2;
				if(currentRow > 6){
					currentRow = 0;
				}
				printf("current row after moving down: %d\r\n", currentRow);
     d80:	0f 2e       	mov	r0, r31
     d82:	fa e6       	ldi	r31, 0x6A	; 106
     d84:	af 2e       	mov	r10, r31
     d86:	f3 e0       	ldi	r31, 0x03	; 3
     d88:	bf 2e       	mov	r11, r31
     d8a:	f0 2d       	mov	r31, r0
void navigate_menu(void){
	//clock_timer();
	if(!playing){
	printf("current row before while: %d\r\n", currentRow);
		while(1){
			uint8_t x = adc_read(0);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <adc_read>
     d92:	68 2e       	mov	r6, r24
			uint8_t y = adc_read(1);
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <adc_read>
     d9a:	78 2e       	mov	r7, r24
			printf("adc horizontal: %d, adc vertical: %d\n\r", x, y);
     d9c:	1f 92       	push	r1
     d9e:	8f 93       	push	r24
     da0:	1f 92       	push	r1
     da2:	6f 92       	push	r6
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
			//printf("x position: %d\r\n", normalize_output_joystick(x, centerX));
			if(normalize_output_joystick(x, centerX) < -90){
     dac:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <centerX>
     db0:	70 91 93 03 	lds	r23, 0x0393	; 0x800393 <centerX+0x1>
     db4:	86 2d       	mov	r24, r6
     db6:	0e 94 3e 04 	call	0x87c	; 0x87c <normalize_output_joystick>
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	86 3a       	cpi	r24, 0xA6	; 166
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	5c f4       	brge	.+22     	; 0xde2 <navigate_menu+0xd6>
				//back
				//printf("left\r\n");
				display_main_menu();
     dcc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <display_main_menu>
     dd0:	ff e3       	ldi	r31, 0x3F	; 63
     dd2:	2d e0       	ldi	r18, 0x0D	; 13
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	f1 50       	subi	r31, 0x01	; 1
     dd8:	20 40       	sbci	r18, 0x00	; 0
     dda:	80 40       	sbci	r24, 0x00	; 0
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <navigate_menu+0xca>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <navigate_menu+0xd4>
     de0:	00 00       	nop
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(x, centerX) > 90){
     de2:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <centerX>
     de6:	70 91 93 03 	lds	r23, 0x0393	; 0x800393 <centerX+0x1>
     dea:	86 2d       	mov	r24, r6
     dec:	0e 94 3e 04 	call	0x87c	; 0x87c <normalize_output_joystick>
     df0:	8b 35       	cpi	r24, 0x5B	; 91
     df2:	91 05       	cpc	r25, r1
     df4:	ec f0       	brlt	.+58     	; 0xe30 <navigate_menu+0x124>
				printf("current row %d\r\n", currentRow);
     df6:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <currentRow+0x1>
     dfa:	8f 93       	push	r24
     dfc:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <currentRow>
     e00:	8f 93       	push	r24
     e02:	df 92       	push	r13
     e04:	cf 92       	push	r12
     e06:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
				select_item(currentRow);
     e0a:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <currentRow>
     e0e:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <currentRow+0x1>
     e12:	0e 94 ae 05 	call	0xb5c	; 0xb5c <select_item>
     e16:	9f e3       	ldi	r25, 0x3F	; 63
     e18:	ed e0       	ldi	r30, 0x0D	; 13
     e1a:	f3 e0       	ldi	r31, 0x03	; 3
     e1c:	91 50       	subi	r25, 0x01	; 1
     e1e:	e0 40       	sbci	r30, 0x00	; 0
     e20:	f0 40       	sbci	r31, 0x00	; 0
     e22:	e1 f7       	brne	.-8      	; 0xe1c <navigate_menu+0x110>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <navigate_menu+0x11a>
     e26:	00 00       	nop
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(y, centerY) > 90){
     e30:	60 91 90 03 	lds	r22, 0x0390	; 0x800390 <centerY>
     e34:	70 91 91 03 	lds	r23, 0x0391	; 0x800391 <centerY+0x1>
     e38:	87 2d       	mov	r24, r7
     e3a:	0e 94 3e 04 	call	0x87c	; 0x87c <normalize_output_joystick>
     e3e:	8b 35       	cpi	r24, 0x5B	; 91
     e40:	91 05       	cpc	r25, r1
     e42:	9c f1       	brlt	.+102    	; 0xeaa <navigate_menu+0x19e>
				OLED_clear_position(currentRow, 0);
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	f8 01       	movw	r30, r16
     e48:	80 81       	ld	r24, Z
     e4a:	0e 94 ab 08 	call	0x1156	; 0x1156 <OLED_clear_position>
				currentRow = currentRow - 2;
     e4e:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <currentRow>
     e52:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <currentRow+0x1>
     e56:	02 97       	sbiw	r24, 0x02	; 2
				if(currentRow < 0){
     e58:	2a f0       	brmi	.+10     	; 0xe64 <navigate_menu+0x158>
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(y, centerY) > 90){
				OLED_clear_position(currentRow, 0);
				currentRow = currentRow - 2;
     e5a:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <currentRow+0x1>
     e5e:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <currentRow>
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <navigate_menu+0x160>
				if(currentRow < 0){
					currentRow = 6;
     e64:	90 92 95 03 	sts	0x0395, r9	; 0x800395 <currentRow+0x1>
     e68:	80 92 94 03 	sts	0x0394, r8	; 0x800394 <currentRow>
				}
				printf("current row after moving up: %d\r\n", currentRow);
     e6c:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <currentRow+0x1>
     e70:	8f 93       	push	r24
     e72:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <currentRow>
     e76:	8f 93       	push	r24
     e78:	ff 92       	push	r15
     e7a:	ef 92       	push	r14
     e7c:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
				OLED_pos(currentRow, 0);
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	f8 01       	movw	r30, r16
     e84:	80 81       	ld	r24, Z
     e86:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
				OLED_print('>');
     e8a:	8e e3       	ldi	r24, 0x3E	; 62
     e8c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <OLED_print>
     e90:	ff e3       	ldi	r31, 0x3F	; 63
     e92:	2d e0       	ldi	r18, 0x0D	; 13
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	f1 50       	subi	r31, 0x01	; 1
     e98:	20 40       	sbci	r18, 0x00	; 0
     e9a:	80 40       	sbci	r24, 0x00	; 0
     e9c:	e1 f7       	brne	.-8      	; 0xe96 <navigate_menu+0x18a>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <navigate_menu+0x194>
     ea0:	00 00       	nop
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(y, centerY) < -90){
     eaa:	60 91 90 03 	lds	r22, 0x0390	; 0x800390 <centerY>
     eae:	70 91 91 03 	lds	r23, 0x0391	; 0x800391 <centerY+0x1>
     eb2:	87 2d       	mov	r24, r7
     eb4:	0e 94 3e 04 	call	0x87c	; 0x87c <normalize_output_joystick>
     eb8:	86 3a       	cpi	r24, 0xA6	; 166
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	0c f0       	brlt	.+2      	; 0xec0 <navigate_menu+0x1b4>
     ebe:	66 cf       	rjmp	.-308    	; 0xd8c <navigate_menu+0x80>
				OLED_clear_position(currentRow, 0);
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	f8 01       	movw	r30, r16
     ec4:	80 81       	ld	r24, Z
     ec6:	0e 94 ab 08 	call	0x1156	; 0x1156 <OLED_clear_position>
				currentRow = currentRow + 2;
     eca:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <currentRow>
     ece:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <currentRow+0x1>
     ed2:	02 96       	adiw	r24, 0x02	; 2
				if(currentRow > 6){
     ed4:	87 30       	cpi	r24, 0x07	; 7
     ed6:	91 05       	cpc	r25, r1
     ed8:	2c f4       	brge	.+10     	; 0xee4 <navigate_menu+0x1d8>
				_delay_ms(1000);
			}
		
			if(normalize_output_joystick(y, centerY) < -90){
				OLED_clear_position(currentRow, 0);
				currentRow = currentRow + 2;
     eda:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <currentRow+0x1>
     ede:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <currentRow>
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <navigate_menu+0x1e0>
				if(currentRow > 6){
					currentRow = 0;
     ee4:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <currentRow+0x1>
     ee8:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <currentRow>
				}
				printf("current row after moving down: %d\r\n", currentRow);
     eec:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <currentRow+0x1>
     ef0:	8f 93       	push	r24
     ef2:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <currentRow>
     ef6:	8f 93       	push	r24
     ef8:	bf 92       	push	r11
     efa:	af 92       	push	r10
     efc:	0e 94 82 0b 	call	0x1704	; 0x1704 <printf>
				OLED_pos(currentRow, 0);
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	f8 01       	movw	r30, r16
     f04:	80 81       	ld	r24, Z
     f06:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
				OLED_print('>');
     f0a:	8e e3       	ldi	r24, 0x3E	; 62
     f0c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <OLED_print>
     f10:	ff e3       	ldi	r31, 0x3F	; 63
     f12:	2d e0       	ldi	r18, 0x0D	; 13
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	f1 50       	subi	r31, 0x01	; 1
     f18:	20 40       	sbci	r18, 0x00	; 0
     f1a:	80 40       	sbci	r24, 0x00	; 0
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <navigate_menu+0x20a>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <navigate_menu+0x214>
     f20:	00 00       	nop
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	30 cf       	rjmp	.-416    	; 0xd8c <navigate_menu+0x80>
				_delay_ms(1000);
			}
		}
	}
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
     f44:	7f 90       	pop	r7
     f46:	6f 90       	pop	r6
     f48:	08 95       	ret

00000f4a <menu_init>:
int currentRow;
int playing = 0;
//static int prevPosX = 0;	//neutral

void menu_init(void){
	centerX = calibrate_joystick_center(0, 10);
     f4a:	6a e0       	ldi	r22, 0x0A	; 10
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	0e 94 0c 04 	call	0x818	; 0x818 <calibrate_joystick_center>
     f54:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <centerX+0x1>
     f58:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <centerX>
	centerY = calibrate_joystick_center(1, 10);
     f5c:	6a e0       	ldi	r22, 0x0A	; 10
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	0e 94 0c 04 	call	0x818	; 0x818 <calibrate_joystick_center>
     f66:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <centerY+0x1>
     f6a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <centerY>
	display_main_menu();
     f6e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <display_main_menu>
	navigate_menu();
     f72:	0e 94 86 06 	call	0xd0c	; 0xd0c <navigate_menu>
     f76:	08 95       	ret

00000f78 <OLED_clear>:
void OLED_write_command(char c){
	oled_command_reg[0] = c;
}

void OLED_write_data(char c){
	oled_data_reg[0] = c;
     f78:	20 eb       	ldi	r18, 0xB0	; 176
     f7a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
     f7e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
     f82:	20 83       	st	Z, r18
     f84:	80 e8       	ldi	r24, 0x80	; 128
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_data_reg>
     f8c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_data_reg+0x1>
     f90:	10 82       	st	Z, r1
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	c9 f7       	brne	.-14     	; 0xf88 <OLED_clear+0x10>
     f96:	2f 5f       	subi	r18, 0xFF	; 255
     f98:	28 3b       	cpi	r18, 0xB8	; 184
     f9a:	79 f7       	brne	.-34     	; 0xf7a <OLED_clear+0x2>
     f9c:	08 95       	ret

00000f9e <OLED_init>:
     f9e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
     fa2:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
     fa6:	8e ea       	ldi	r24, 0xAE	; 174
     fa8:	80 83       	st	Z, r24
     faa:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
     fae:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
     fb2:	81 ea       	ldi	r24, 0xA1	; 161
     fb4:	80 83       	st	Z, r24
     fb6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
     fba:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
     fbe:	8a ed       	ldi	r24, 0xDA	; 218
     fc0:	80 83       	st	Z, r24
     fc2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
     fc6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
     fca:	82 e1       	ldi	r24, 0x12	; 18
     fcc:	80 83       	st	Z, r24
     fce:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
     fd2:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
     fd6:	88 ec       	ldi	r24, 0xC8	; 200
     fd8:	80 83       	st	Z, r24
     fda:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
     fde:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
     fe2:	88 ea       	ldi	r24, 0xA8	; 168
     fe4:	80 83       	st	Z, r24
     fe6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
     fea:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
     fee:	8f e3       	ldi	r24, 0x3F	; 63
     ff0:	80 83       	st	Z, r24
     ff2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
     ff6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
     ffa:	85 ed       	ldi	r24, 0xD5	; 213
     ffc:	80 83       	st	Z, r24
     ffe:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1002:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1006:	80 e8       	ldi	r24, 0x80	; 128
    1008:	80 83       	st	Z, r24
    100a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    100e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1012:	81 e8       	ldi	r24, 0x81	; 129
    1014:	80 83       	st	Z, r24
    1016:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    101a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    101e:	80 e5       	ldi	r24, 0x50	; 80
    1020:	80 83       	st	Z, r24
    1022:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1026:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    102a:	89 ed       	ldi	r24, 0xD9	; 217
    102c:	80 83       	st	Z, r24
    102e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1032:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1036:	81 e2       	ldi	r24, 0x21	; 33
    1038:	80 83       	st	Z, r24
    103a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    103e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	80 83       	st	Z, r24
    1046:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    104a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	80 83       	st	Z, r24
    1052:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1056:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    105a:	8b ed       	ldi	r24, 0xDB	; 219
    105c:	80 83       	st	Z, r24
    105e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1062:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1066:	80 e3       	ldi	r24, 0x30	; 48
    1068:	80 83       	st	Z, r24
    106a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    106e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1072:	8d ea       	ldi	r24, 0xAD	; 173
    1074:	80 83       	st	Z, r24
    1076:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    107a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    107e:	10 82       	st	Z, r1
    1080:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1084:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1088:	84 ea       	ldi	r24, 0xA4	; 164
    108a:	80 83       	st	Z, r24
    108c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1090:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1094:	86 ea       	ldi	r24, 0xA6	; 166
    1096:	80 83       	st	Z, r24
    1098:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    109c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    10a0:	8f ea       	ldi	r24, 0xAF	; 175
    10a2:	80 83       	st	Z, r24
    10a4:	30 eb       	ldi	r19, 0xB0	; 176
    10a6:	2f ef       	ldi	r18, 0xFF	; 255
    10a8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    10ac:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    10b0:	30 83       	st	Z, r19
    10b2:	80 e8       	ldi	r24, 0x80	; 128
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_data_reg>
    10ba:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_data_reg+0x1>
    10be:	20 83       	st	Z, r18
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	c9 f7       	brne	.-14     	; 0x10b6 <OLED_init+0x118>
    10c4:	3f 5f       	subi	r19, 0xFF	; 255
    10c6:	38 3b       	cpi	r19, 0xB8	; 184
    10c8:	79 f7       	brne	.-34     	; 0x10a8 <OLED_init+0x10a>
    10ca:	2f ef       	ldi	r18, 0xFF	; 255
    10cc:	8f e7       	ldi	r24, 0x7F	; 127
    10ce:	97 e0       	ldi	r25, 0x07	; 7
    10d0:	21 50       	subi	r18, 0x01	; 1
    10d2:	80 40       	sbci	r24, 0x00	; 0
    10d4:	90 40       	sbci	r25, 0x00	; 0
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <OLED_init+0x132>
    10d8:	00 c0       	rjmp	.+0      	; 0x10da <OLED_init+0x13c>
    10da:	00 00       	nop
    10dc:	0e 94 bc 07 	call	0xf78	; 0xf78 <OLED_clear>
    10e0:	08 95       	ret

000010e2 <OLED_print>:
}

void OLED_print(char c){
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	f9 01       	movw	r30, r18
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	e0 59       	subi	r30, 0x90	; 144
    10f6:	f0 40       	sbci	r31, 0x00	; 0
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	22 0f       	add	r18, r18
    1102:	33 1f       	adc	r19, r19
    1104:	28 58       	subi	r18, 0x88	; 136
    1106:	30 40       	sbci	r19, 0x00	; 0
	int pos = c - 32;
	for (int i = 0; i < 8; i++){
		OLED_write_data(pgm_read_byte(&(font8[pos][i])));
    1108:	94 91       	lpm	r25, Z
void OLED_write_command(char c){
	oled_command_reg[0] = c;
}

void OLED_write_data(char c){
	oled_data_reg[0] = c;
    110a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <oled_data_reg>
    110e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <oled_data_reg+0x1>
    1112:	9c 93       	st	X, r25
    1114:	31 96       	adiw	r30, 0x01	; 1
}

void OLED_print(char c){
	int pos = c - 32;
	for (int i = 0; i < 8; i++){
    1116:	e2 17       	cp	r30, r18
    1118:	f3 07       	cpc	r31, r19
    111a:	b1 f7       	brne	.-20     	; 0x1108 <OLED_print+0x26>
		OLED_write_data(pgm_read_byte(&(font8[pos][i])));
	}
}
    111c:	08 95       	ret

0000111e <OLED_goto_line>:
	OLED_goto_column(column);
	//for now, when we want to write something, we will be writing from the leftmost positions so as to not deal with the columns at the beginning	
}

void OLED_goto_line(uint8_t line){
	OLED_write_command(0xb0 + (line));		
    111e:	80 55       	subi	r24, 0x50	; 80
	OLED_pos(row, column);
	OLED_print(' ');
}

void OLED_write_command(char c){
	oled_command_reg[0] = c;
    1120:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1124:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1128:	80 83       	st	Z, r24
    112a:	08 95       	ret

0000112c <OLED_goto_column>:
    112c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    1130:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    1134:	80 83       	st	Z, r24
    1136:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <oled_command_reg>
    113a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <oled_command_reg+0x1>
    113e:	80 e1       	ldi	r24, 0x10	; 16
    1140:	80 83       	st	Z, r24
    1142:	08 95       	ret

00001144 <OLED_pos>:
	for (int i = 0; i < 8; i++){
		OLED_write_data(pgm_read_byte(&(font8[pos][i])));
	}
}

void OLED_pos(uint8_t row, uint8_t column){
    1144:	cf 93       	push	r28
    1146:	c6 2f       	mov	r28, r22
	OLED_goto_line(row);
    1148:	0e 94 8f 08 	call	0x111e	; 0x111e <OLED_goto_line>
	OLED_goto_column(column);
    114c:	8c 2f       	mov	r24, r28
    114e:	0e 94 96 08 	call	0x112c	; 0x112c <OLED_goto_column>
	//for now, when we want to write something, we will be writing from the leftmost positions so as to not deal with the columns at the beginning	
}
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <OLED_clear_position>:
		}
	}
}

void OLED_clear_position(uint8_t row, uint8_t column){
	OLED_pos(row, column);
    1156:	0e 94 a2 08 	call	0x1144	; 0x1144 <OLED_pos>
	OLED_print(' ');
    115a:	80 e2       	ldi	r24, 0x20	; 32
    115c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <OLED_print>
    1160:	08 95       	ret

00001162 <OLED_print_string>:
	//OLED_write_command(0x10);
	OLED_write_command(column);
	OLED_write_command(0x10);
}

void OLED_print_string(char* str){
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
	int i = 0;
	while(str[i] != '\0'){
    1168:	88 81       	ld	r24, Y
    116a:	88 23       	and	r24, r24
    116c:	31 f0       	breq	.+12     	; 0x117a <OLED_print_string+0x18>
    116e:	21 96       	adiw	r28, 0x01	; 1
		OLED_print(str[i]);
    1170:	0e 94 71 08 	call	0x10e2	; 0x10e2 <OLED_print>
	OLED_write_command(0x10);
}

void OLED_print_string(char* str){
	int i = 0;
	while(str[i] != '\0'){
    1174:	89 91       	ld	r24, Y+
    1176:	81 11       	cpse	r24, r1
    1178:	fb cf       	rjmp	.-10     	; 0x1170 <OLED_print_string+0xe>
		OLED_print(str[i]);
		i++;
	}
}
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <SPI_MasterInit>:
#define SCK PB7

//Needed for initializing the SPI as a master
void SPI_MasterInit(void){
	// Set MOSI and SCK output, all others input, set CS as output
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);
    1180:	87 b3       	in	r24, 0x17	; 23
    1182:	80 6b       	ori	r24, 0xB0	; 176
    1184:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);
    1186:	be 98       	cbi	0x17, 6	; 23
	
	// Enable SPI, Master, set clock rate fck/16 & select mode 00
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1188:	8d b1       	in	r24, 0x0d	; 13
    118a:	81 65       	ori	r24, 0x51	; 81
    118c:	8d b9       	out	0x0d, r24	; 13

	SPCR &= ~(1<<CPOL);		//Not required
    118e:	6b 98       	cbi	0x0d, 3	; 13
	SPCR &= ~(1<<CPHA);		//Not required
    1190:	6a 98       	cbi	0x0d, 2	; 13

	PORTB |= (1<<SS);
    1192:	c4 9a       	sbi	0x18, 4	; 24
    1194:	08 95       	ret

00001196 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData){
	// Start transmission 
	SPDR = cData;
    1196:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete 
	while(!(SPSR & (1<<SPIF)));
    1198:	77 9b       	sbis	0x0e, 7	; 14
    119a:	fe cf       	rjmp	.-4      	; 0x1198 <SPI_MasterTransmit+0x2>
}
    119c:	08 95       	ret

0000119e <SPI_MasterReceive>:


char SPI_MasterReceive(void){
	SPI_MasterTransmit('a');
    119e:	81 e6       	ldi	r24, 0x61	; 97
    11a0:	0e 94 cb 08 	call	0x1196	; 0x1196 <SPI_MasterTransmit>
	return SPDR;
    11a4:	8f b1       	in	r24, 0x0f	; 15
}  
    11a6:	08 95       	ret

000011a8 <SRAM_init>:
	//DDRC |= (1 << PC3);
	//PORTC = 0x04;
	volatile char *ext_ram = (char *) 0x1800;
	//printf("\r\n\n\nInitiating SRAM...\r\n");
	
	MCUCR |= (1<<SRE);
    11a8:	85 b7       	in	r24, 0x35	; 53
    11aa:	80 68       	ori	r24, 0x80	; 128
    11ac:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<5);
    11ae:	80 b7       	in	r24, 0x30	; 48
    11b0:	80 62       	ori	r24, 0x20	; 32
    11b2:	80 bf       	out	0x30, r24	; 48
    11b4:	08 95       	ret

000011b6 <main>:

#define HORIZONTAL 0
#define VERTICAL 1

int main(void){	
	USART_Init(MYUBRR);
    11b6:	8f e1       	ldi	r24, 0x1F	; 31
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <USART_Init>
	
	fdevopen(USART_Transmit, USART_Receive);
    11be:	6b ef       	ldi	r22, 0xFB	; 251
    11c0:	78 e0       	ldi	r23, 0x08	; 8
    11c2:	87 ef       	ldi	r24, 0xF7	; 247
    11c4:	98 e0       	ldi	r25, 0x08	; 8
    11c6:	0e 94 37 0b 	call	0x166e	; 0x166e <fdevopen>
	
	clock_timer();
    11ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <clock_timer>
	SRAM_init();
    11ce:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <SRAM_init>
	can_init();
    11d2:	0e 94 00 02 	call	0x400	; 0x400 <can_init>
	OLED_init();
    11d6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <OLED_init>
	
	//int centerH = calibrate_joystick_center(HORIZONTAL, 10);
	//int centerV = calibrate_joystick_center(VERTICAL, 10);
	
	while (1){		
		menu_init();
    11da:	0e 94 a5 07 	call	0xf4a	; 0xf4a <menu_init>
    11de:	fd cf       	rjmp	.-6      	; 0x11da <main+0x24>

000011e0 <USART_Init>:
#include "uart.h"

void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
    11e0:	9c bf       	out	0x3c, r25	; 60
	UBRR1L = (unsigned char)ubrr;
    11e2:	80 b9       	out	0x00, r24	; 0
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    11e4:	88 e1       	ldi	r24, 0x18	; 24
    11e6:	81 b9       	out	0x01, r24	; 1
	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (1<<URSEL1)|(1<<USBS1)|(3<<UCSZ10);
    11e8:	8e e8       	ldi	r24, 0x8E	; 142
    11ea:	8c bf       	out	0x3c, r24	; 60
    11ec:	08 95       	ret

000011ee <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) );
    11ee:	15 9b       	sbis	0x02, 5	; 2
    11f0:	fe cf       	rjmp	.-4      	; 0x11ee <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR1 = data;
    11f2:	83 b9       	out	0x03, r24	; 3
    11f4:	08 95       	ret

000011f6 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) );
    11f6:	17 9b       	sbis	0x02, 7	; 2
    11f8:	fe cf       	rjmp	.-4      	; 0x11f6 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR1;
    11fa:	83 b1       	in	r24, 0x03	; 3
    11fc:	08 95       	ret

000011fe <__subsf3>:
    11fe:	50 58       	subi	r21, 0x80	; 128

00001200 <__addsf3>:
    1200:	bb 27       	eor	r27, r27
    1202:	aa 27       	eor	r26, r26
    1204:	0e 94 17 09 	call	0x122e	; 0x122e <__addsf3x>
    1208:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_round>
    120c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_pscA>
    1210:	38 f0       	brcs	.+14     	; 0x1220 <__addsf3+0x20>
    1212:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_pscB>
    1216:	20 f0       	brcs	.+8      	; 0x1220 <__addsf3+0x20>
    1218:	39 f4       	brne	.+14     	; 0x1228 <__addsf3+0x28>
    121a:	9f 3f       	cpi	r25, 0xFF	; 255
    121c:	19 f4       	brne	.+6      	; 0x1224 <__addsf3+0x24>
    121e:	26 f4       	brtc	.+8      	; 0x1228 <__addsf3+0x28>
    1220:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__fp_nan>
    1224:	0e f4       	brtc	.+2      	; 0x1228 <__addsf3+0x28>
    1226:	e0 95       	com	r30
    1228:	e7 fb       	bst	r30, 7
    122a:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_inf>

0000122e <__addsf3x>:
    122e:	e9 2f       	mov	r30, r25
    1230:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fp_split3>
    1234:	58 f3       	brcs	.-42     	; 0x120c <__addsf3+0xc>
    1236:	ba 17       	cp	r27, r26
    1238:	62 07       	cpc	r22, r18
    123a:	73 07       	cpc	r23, r19
    123c:	84 07       	cpc	r24, r20
    123e:	95 07       	cpc	r25, r21
    1240:	20 f0       	brcs	.+8      	; 0x124a <__addsf3x+0x1c>
    1242:	79 f4       	brne	.+30     	; 0x1262 <__addsf3x+0x34>
    1244:	a6 f5       	brtc	.+104    	; 0x12ae <__addsf3x+0x80>
    1246:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_zero>
    124a:	0e f4       	brtc	.+2      	; 0x124e <__addsf3x+0x20>
    124c:	e0 95       	com	r30
    124e:	0b 2e       	mov	r0, r27
    1250:	ba 2f       	mov	r27, r26
    1252:	a0 2d       	mov	r26, r0
    1254:	0b 01       	movw	r0, r22
    1256:	b9 01       	movw	r22, r18
    1258:	90 01       	movw	r18, r0
    125a:	0c 01       	movw	r0, r24
    125c:	ca 01       	movw	r24, r20
    125e:	a0 01       	movw	r20, r0
    1260:	11 24       	eor	r1, r1
    1262:	ff 27       	eor	r31, r31
    1264:	59 1b       	sub	r21, r25
    1266:	99 f0       	breq	.+38     	; 0x128e <__addsf3x+0x60>
    1268:	59 3f       	cpi	r21, 0xF9	; 249
    126a:	50 f4       	brcc	.+20     	; 0x1280 <__addsf3x+0x52>
    126c:	50 3e       	cpi	r21, 0xE0	; 224
    126e:	68 f1       	brcs	.+90     	; 0x12ca <__addsf3x+0x9c>
    1270:	1a 16       	cp	r1, r26
    1272:	f0 40       	sbci	r31, 0x00	; 0
    1274:	a2 2f       	mov	r26, r18
    1276:	23 2f       	mov	r18, r19
    1278:	34 2f       	mov	r19, r20
    127a:	44 27       	eor	r20, r20
    127c:	58 5f       	subi	r21, 0xF8	; 248
    127e:	f3 cf       	rjmp	.-26     	; 0x1266 <__addsf3x+0x38>
    1280:	46 95       	lsr	r20
    1282:	37 95       	ror	r19
    1284:	27 95       	ror	r18
    1286:	a7 95       	ror	r26
    1288:	f0 40       	sbci	r31, 0x00	; 0
    128a:	53 95       	inc	r21
    128c:	c9 f7       	brne	.-14     	; 0x1280 <__addsf3x+0x52>
    128e:	7e f4       	brtc	.+30     	; 0x12ae <__addsf3x+0x80>
    1290:	1f 16       	cp	r1, r31
    1292:	ba 0b       	sbc	r27, r26
    1294:	62 0b       	sbc	r22, r18
    1296:	73 0b       	sbc	r23, r19
    1298:	84 0b       	sbc	r24, r20
    129a:	ba f0       	brmi	.+46     	; 0x12ca <__addsf3x+0x9c>
    129c:	91 50       	subi	r25, 0x01	; 1
    129e:	a1 f0       	breq	.+40     	; 0x12c8 <__addsf3x+0x9a>
    12a0:	ff 0f       	add	r31, r31
    12a2:	bb 1f       	adc	r27, r27
    12a4:	66 1f       	adc	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	c2 f7       	brpl	.-16     	; 0x129c <__addsf3x+0x6e>
    12ac:	0e c0       	rjmp	.+28     	; 0x12ca <__addsf3x+0x9c>
    12ae:	ba 0f       	add	r27, r26
    12b0:	62 1f       	adc	r22, r18
    12b2:	73 1f       	adc	r23, r19
    12b4:	84 1f       	adc	r24, r20
    12b6:	48 f4       	brcc	.+18     	; 0x12ca <__addsf3x+0x9c>
    12b8:	87 95       	ror	r24
    12ba:	77 95       	ror	r23
    12bc:	67 95       	ror	r22
    12be:	b7 95       	ror	r27
    12c0:	f7 95       	ror	r31
    12c2:	9e 3f       	cpi	r25, 0xFE	; 254
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <__addsf3x+0x9a>
    12c6:	b0 cf       	rjmp	.-160    	; 0x1228 <__addsf3+0x28>
    12c8:	93 95       	inc	r25
    12ca:	88 0f       	add	r24, r24
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <__addsf3x+0xa2>
    12ce:	99 27       	eor	r25, r25
    12d0:	ee 0f       	add	r30, r30
    12d2:	97 95       	ror	r25
    12d4:	87 95       	ror	r24
    12d6:	08 95       	ret

000012d8 <__divsf3>:
    12d8:	0e 94 80 09 	call	0x1300	; 0x1300 <__divsf3x>
    12dc:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_round>
    12e0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_pscB>
    12e4:	58 f0       	brcs	.+22     	; 0x12fc <__divsf3+0x24>
    12e6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_pscA>
    12ea:	40 f0       	brcs	.+16     	; 0x12fc <__divsf3+0x24>
    12ec:	29 f4       	brne	.+10     	; 0x12f8 <__divsf3+0x20>
    12ee:	5f 3f       	cpi	r21, 0xFF	; 255
    12f0:	29 f0       	breq	.+10     	; 0x12fc <__divsf3+0x24>
    12f2:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_inf>
    12f6:	51 11       	cpse	r21, r1
    12f8:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_szero>
    12fc:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__fp_nan>

00001300 <__divsf3x>:
    1300:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fp_split3>
    1304:	68 f3       	brcs	.-38     	; 0x12e0 <__divsf3+0x8>

00001306 <__divsf3_pse>:
    1306:	99 23       	and	r25, r25
    1308:	b1 f3       	breq	.-20     	; 0x12f6 <__divsf3+0x1e>
    130a:	55 23       	and	r21, r21
    130c:	91 f3       	breq	.-28     	; 0x12f2 <__divsf3+0x1a>
    130e:	95 1b       	sub	r25, r21
    1310:	55 0b       	sbc	r21, r21
    1312:	bb 27       	eor	r27, r27
    1314:	aa 27       	eor	r26, r26
    1316:	62 17       	cp	r22, r18
    1318:	73 07       	cpc	r23, r19
    131a:	84 07       	cpc	r24, r20
    131c:	38 f0       	brcs	.+14     	; 0x132c <__divsf3_pse+0x26>
    131e:	9f 5f       	subi	r25, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	22 0f       	add	r18, r18
    1324:	33 1f       	adc	r19, r19
    1326:	44 1f       	adc	r20, r20
    1328:	aa 1f       	adc	r26, r26
    132a:	a9 f3       	breq	.-22     	; 0x1316 <__divsf3_pse+0x10>
    132c:	35 d0       	rcall	.+106    	; 0x1398 <__divsf3_pse+0x92>
    132e:	0e 2e       	mov	r0, r30
    1330:	3a f0       	brmi	.+14     	; 0x1340 <__divsf3_pse+0x3a>
    1332:	e0 e8       	ldi	r30, 0x80	; 128
    1334:	32 d0       	rcall	.+100    	; 0x139a <__divsf3_pse+0x94>
    1336:	91 50       	subi	r25, 0x01	; 1
    1338:	50 40       	sbci	r21, 0x00	; 0
    133a:	e6 95       	lsr	r30
    133c:	00 1c       	adc	r0, r0
    133e:	ca f7       	brpl	.-14     	; 0x1332 <__divsf3_pse+0x2c>
    1340:	2b d0       	rcall	.+86     	; 0x1398 <__divsf3_pse+0x92>
    1342:	fe 2f       	mov	r31, r30
    1344:	29 d0       	rcall	.+82     	; 0x1398 <__divsf3_pse+0x92>
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	88 1f       	adc	r24, r24
    134c:	bb 1f       	adc	r27, r27
    134e:	26 17       	cp	r18, r22
    1350:	37 07       	cpc	r19, r23
    1352:	48 07       	cpc	r20, r24
    1354:	ab 07       	cpc	r26, r27
    1356:	b0 e8       	ldi	r27, 0x80	; 128
    1358:	09 f0       	breq	.+2      	; 0x135c <__divsf3_pse+0x56>
    135a:	bb 0b       	sbc	r27, r27
    135c:	80 2d       	mov	r24, r0
    135e:	bf 01       	movw	r22, r30
    1360:	ff 27       	eor	r31, r31
    1362:	93 58       	subi	r25, 0x83	; 131
    1364:	5f 4f       	sbci	r21, 0xFF	; 255
    1366:	3a f0       	brmi	.+14     	; 0x1376 <__divsf3_pse+0x70>
    1368:	9e 3f       	cpi	r25, 0xFE	; 254
    136a:	51 05       	cpc	r21, r1
    136c:	78 f0       	brcs	.+30     	; 0x138c <__divsf3_pse+0x86>
    136e:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_inf>
    1372:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_szero>
    1376:	5f 3f       	cpi	r21, 0xFF	; 255
    1378:	e4 f3       	brlt	.-8      	; 0x1372 <__divsf3_pse+0x6c>
    137a:	98 3e       	cpi	r25, 0xE8	; 232
    137c:	d4 f3       	brlt	.-12     	; 0x1372 <__divsf3_pse+0x6c>
    137e:	86 95       	lsr	r24
    1380:	77 95       	ror	r23
    1382:	67 95       	ror	r22
    1384:	b7 95       	ror	r27
    1386:	f7 95       	ror	r31
    1388:	9f 5f       	subi	r25, 0xFF	; 255
    138a:	c9 f7       	brne	.-14     	; 0x137e <__divsf3_pse+0x78>
    138c:	88 0f       	add	r24, r24
    138e:	91 1d       	adc	r25, r1
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	97 f9       	bld	r25, 7
    1396:	08 95       	ret
    1398:	e1 e0       	ldi	r30, 0x01	; 1
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	bb 1f       	adc	r27, r27
    13a2:	62 17       	cp	r22, r18
    13a4:	73 07       	cpc	r23, r19
    13a6:	84 07       	cpc	r24, r20
    13a8:	ba 07       	cpc	r27, r26
    13aa:	20 f0       	brcs	.+8      	; 0x13b4 <__divsf3_pse+0xae>
    13ac:	62 1b       	sub	r22, r18
    13ae:	73 0b       	sbc	r23, r19
    13b0:	84 0b       	sbc	r24, r20
    13b2:	ba 0b       	sbc	r27, r26
    13b4:	ee 1f       	adc	r30, r30
    13b6:	88 f7       	brcc	.-30     	; 0x139a <__divsf3_pse+0x94>
    13b8:	e0 95       	com	r30
    13ba:	08 95       	ret

000013bc <__fixsfsi>:
    13bc:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fixunssfsi>
    13c0:	68 94       	set
    13c2:	b1 11       	cpse	r27, r1
    13c4:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_szero>
    13c8:	08 95       	ret

000013ca <__fixunssfsi>:
    13ca:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fp_splitA>
    13ce:	88 f0       	brcs	.+34     	; 0x13f2 <__fixunssfsi+0x28>
    13d0:	9f 57       	subi	r25, 0x7F	; 127
    13d2:	98 f0       	brcs	.+38     	; 0x13fa <__fixunssfsi+0x30>
    13d4:	b9 2f       	mov	r27, r25
    13d6:	99 27       	eor	r25, r25
    13d8:	b7 51       	subi	r27, 0x17	; 23
    13da:	b0 f0       	brcs	.+44     	; 0x1408 <__fixunssfsi+0x3e>
    13dc:	e1 f0       	breq	.+56     	; 0x1416 <__fixunssfsi+0x4c>
    13de:	66 0f       	add	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	88 1f       	adc	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	1a f0       	brmi	.+6      	; 0x13ee <__fixunssfsi+0x24>
    13e8:	ba 95       	dec	r27
    13ea:	c9 f7       	brne	.-14     	; 0x13de <__fixunssfsi+0x14>
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <__fixunssfsi+0x4c>
    13ee:	b1 30       	cpi	r27, 0x01	; 1
    13f0:	91 f0       	breq	.+36     	; 0x1416 <__fixunssfsi+0x4c>
    13f2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_zero>
    13f6:	b1 e0       	ldi	r27, 0x01	; 1
    13f8:	08 95       	ret
    13fa:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_zero>
    13fe:	67 2f       	mov	r22, r23
    1400:	78 2f       	mov	r23, r24
    1402:	88 27       	eor	r24, r24
    1404:	b8 5f       	subi	r27, 0xF8	; 248
    1406:	39 f0       	breq	.+14     	; 0x1416 <__fixunssfsi+0x4c>
    1408:	b9 3f       	cpi	r27, 0xF9	; 249
    140a:	cc f3       	brlt	.-14     	; 0x13fe <__fixunssfsi+0x34>
    140c:	86 95       	lsr	r24
    140e:	77 95       	ror	r23
    1410:	67 95       	ror	r22
    1412:	b3 95       	inc	r27
    1414:	d9 f7       	brne	.-10     	; 0x140c <__fixunssfsi+0x42>
    1416:	3e f4       	brtc	.+14     	; 0x1426 <__fixunssfsi+0x5c>
    1418:	90 95       	com	r25
    141a:	80 95       	com	r24
    141c:	70 95       	com	r23
    141e:	61 95       	neg	r22
    1420:	7f 4f       	sbci	r23, 0xFF	; 255
    1422:	8f 4f       	sbci	r24, 0xFF	; 255
    1424:	9f 4f       	sbci	r25, 0xFF	; 255
    1426:	08 95       	ret

00001428 <__floatunsisf>:
    1428:	e8 94       	clt
    142a:	09 c0       	rjmp	.+18     	; 0x143e <__floatsisf+0x12>

0000142c <__floatsisf>:
    142c:	97 fb       	bst	r25, 7
    142e:	3e f4       	brtc	.+14     	; 0x143e <__floatsisf+0x12>
    1430:	90 95       	com	r25
    1432:	80 95       	com	r24
    1434:	70 95       	com	r23
    1436:	61 95       	neg	r22
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	8f 4f       	sbci	r24, 0xFF	; 255
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	99 23       	and	r25, r25
    1440:	a9 f0       	breq	.+42     	; 0x146c <__floatsisf+0x40>
    1442:	f9 2f       	mov	r31, r25
    1444:	96 e9       	ldi	r25, 0x96	; 150
    1446:	bb 27       	eor	r27, r27
    1448:	93 95       	inc	r25
    144a:	f6 95       	lsr	r31
    144c:	87 95       	ror	r24
    144e:	77 95       	ror	r23
    1450:	67 95       	ror	r22
    1452:	b7 95       	ror	r27
    1454:	f1 11       	cpse	r31, r1
    1456:	f8 cf       	rjmp	.-16     	; 0x1448 <__floatsisf+0x1c>
    1458:	fa f4       	brpl	.+62     	; 0x1498 <__floatsisf+0x6c>
    145a:	bb 0f       	add	r27, r27
    145c:	11 f4       	brne	.+4      	; 0x1462 <__floatsisf+0x36>
    145e:	60 ff       	sbrs	r22, 0
    1460:	1b c0       	rjmp	.+54     	; 0x1498 <__floatsisf+0x6c>
    1462:	6f 5f       	subi	r22, 0xFF	; 255
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	8f 4f       	sbci	r24, 0xFF	; 255
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	16 c0       	rjmp	.+44     	; 0x1498 <__floatsisf+0x6c>
    146c:	88 23       	and	r24, r24
    146e:	11 f0       	breq	.+4      	; 0x1474 <__floatsisf+0x48>
    1470:	96 e9       	ldi	r25, 0x96	; 150
    1472:	11 c0       	rjmp	.+34     	; 0x1496 <__floatsisf+0x6a>
    1474:	77 23       	and	r23, r23
    1476:	21 f0       	breq	.+8      	; 0x1480 <__floatsisf+0x54>
    1478:	9e e8       	ldi	r25, 0x8E	; 142
    147a:	87 2f       	mov	r24, r23
    147c:	76 2f       	mov	r23, r22
    147e:	05 c0       	rjmp	.+10     	; 0x148a <__floatsisf+0x5e>
    1480:	66 23       	and	r22, r22
    1482:	71 f0       	breq	.+28     	; 0x14a0 <__floatsisf+0x74>
    1484:	96 e8       	ldi	r25, 0x86	; 134
    1486:	86 2f       	mov	r24, r22
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	2a f0       	brmi	.+10     	; 0x1498 <__floatsisf+0x6c>
    148e:	9a 95       	dec	r25
    1490:	66 0f       	add	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	da f7       	brpl	.-10     	; 0x148e <__floatsisf+0x62>
    1498:	88 0f       	add	r24, r24
    149a:	96 95       	lsr	r25
    149c:	87 95       	ror	r24
    149e:	97 f9       	bld	r25, 7
    14a0:	08 95       	ret

000014a2 <__fp_inf>:
    14a2:	97 f9       	bld	r25, 7
    14a4:	9f 67       	ori	r25, 0x7F	; 127
    14a6:	80 e8       	ldi	r24, 0x80	; 128
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	08 95       	ret

000014ae <__fp_nan>:
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	80 ec       	ldi	r24, 0xC0	; 192
    14b2:	08 95       	ret

000014b4 <__fp_pscA>:
    14b4:	00 24       	eor	r0, r0
    14b6:	0a 94       	dec	r0
    14b8:	16 16       	cp	r1, r22
    14ba:	17 06       	cpc	r1, r23
    14bc:	18 06       	cpc	r1, r24
    14be:	09 06       	cpc	r0, r25
    14c0:	08 95       	ret

000014c2 <__fp_pscB>:
    14c2:	00 24       	eor	r0, r0
    14c4:	0a 94       	dec	r0
    14c6:	12 16       	cp	r1, r18
    14c8:	13 06       	cpc	r1, r19
    14ca:	14 06       	cpc	r1, r20
    14cc:	05 06       	cpc	r0, r21
    14ce:	08 95       	ret

000014d0 <__fp_round>:
    14d0:	09 2e       	mov	r0, r25
    14d2:	03 94       	inc	r0
    14d4:	00 0c       	add	r0, r0
    14d6:	11 f4       	brne	.+4      	; 0x14dc <__fp_round+0xc>
    14d8:	88 23       	and	r24, r24
    14da:	52 f0       	brmi	.+20     	; 0x14f0 <__fp_round+0x20>
    14dc:	bb 0f       	add	r27, r27
    14de:	40 f4       	brcc	.+16     	; 0x14f0 <__fp_round+0x20>
    14e0:	bf 2b       	or	r27, r31
    14e2:	11 f4       	brne	.+4      	; 0x14e8 <__fp_round+0x18>
    14e4:	60 ff       	sbrs	r22, 0
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <__fp_round+0x20>
    14e8:	6f 5f       	subi	r22, 0xFF	; 255
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	8f 4f       	sbci	r24, 0xFF	; 255
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	08 95       	ret

000014f2 <__fp_split3>:
    14f2:	57 fd       	sbrc	r21, 7
    14f4:	90 58       	subi	r25, 0x80	; 128
    14f6:	44 0f       	add	r20, r20
    14f8:	55 1f       	adc	r21, r21
    14fa:	59 f0       	breq	.+22     	; 0x1512 <__fp_splitA+0x10>
    14fc:	5f 3f       	cpi	r21, 0xFF	; 255
    14fe:	71 f0       	breq	.+28     	; 0x151c <__fp_splitA+0x1a>
    1500:	47 95       	ror	r20

00001502 <__fp_splitA>:
    1502:	88 0f       	add	r24, r24
    1504:	97 fb       	bst	r25, 7
    1506:	99 1f       	adc	r25, r25
    1508:	61 f0       	breq	.+24     	; 0x1522 <__fp_splitA+0x20>
    150a:	9f 3f       	cpi	r25, 0xFF	; 255
    150c:	79 f0       	breq	.+30     	; 0x152c <__fp_splitA+0x2a>
    150e:	87 95       	ror	r24
    1510:	08 95       	ret
    1512:	12 16       	cp	r1, r18
    1514:	13 06       	cpc	r1, r19
    1516:	14 06       	cpc	r1, r20
    1518:	55 1f       	adc	r21, r21
    151a:	f2 cf       	rjmp	.-28     	; 0x1500 <__fp_split3+0xe>
    151c:	46 95       	lsr	r20
    151e:	f1 df       	rcall	.-30     	; 0x1502 <__fp_splitA>
    1520:	08 c0       	rjmp	.+16     	; 0x1532 <__fp_splitA+0x30>
    1522:	16 16       	cp	r1, r22
    1524:	17 06       	cpc	r1, r23
    1526:	18 06       	cpc	r1, r24
    1528:	99 1f       	adc	r25, r25
    152a:	f1 cf       	rjmp	.-30     	; 0x150e <__fp_splitA+0xc>
    152c:	86 95       	lsr	r24
    152e:	71 05       	cpc	r23, r1
    1530:	61 05       	cpc	r22, r1
    1532:	08 94       	sec
    1534:	08 95       	ret

00001536 <__fp_zero>:
    1536:	e8 94       	clt

00001538 <__fp_szero>:
    1538:	bb 27       	eor	r27, r27
    153a:	66 27       	eor	r22, r22
    153c:	77 27       	eor	r23, r23
    153e:	cb 01       	movw	r24, r22
    1540:	97 f9       	bld	r25, 7
    1542:	08 95       	ret

00001544 <__mulsf3>:
    1544:	0e 94 b5 0a 	call	0x156a	; 0x156a <__mulsf3x>
    1548:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_round>
    154c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_pscA>
    1550:	38 f0       	brcs	.+14     	; 0x1560 <__mulsf3+0x1c>
    1552:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_pscB>
    1556:	20 f0       	brcs	.+8      	; 0x1560 <__mulsf3+0x1c>
    1558:	95 23       	and	r25, r21
    155a:	11 f0       	breq	.+4      	; 0x1560 <__mulsf3+0x1c>
    155c:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_inf>
    1560:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__fp_nan>
    1564:	11 24       	eor	r1, r1
    1566:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_szero>

0000156a <__mulsf3x>:
    156a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fp_split3>
    156e:	70 f3       	brcs	.-36     	; 0x154c <__mulsf3+0x8>

00001570 <__mulsf3_pse>:
    1570:	95 9f       	mul	r25, r21
    1572:	c1 f3       	breq	.-16     	; 0x1564 <__mulsf3+0x20>
    1574:	95 0f       	add	r25, r21
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	55 1f       	adc	r21, r21
    157a:	62 9f       	mul	r22, r18
    157c:	f0 01       	movw	r30, r0
    157e:	72 9f       	mul	r23, r18
    1580:	bb 27       	eor	r27, r27
    1582:	f0 0d       	add	r31, r0
    1584:	b1 1d       	adc	r27, r1
    1586:	63 9f       	mul	r22, r19
    1588:	aa 27       	eor	r26, r26
    158a:	f0 0d       	add	r31, r0
    158c:	b1 1d       	adc	r27, r1
    158e:	aa 1f       	adc	r26, r26
    1590:	64 9f       	mul	r22, r20
    1592:	66 27       	eor	r22, r22
    1594:	b0 0d       	add	r27, r0
    1596:	a1 1d       	adc	r26, r1
    1598:	66 1f       	adc	r22, r22
    159a:	82 9f       	mul	r24, r18
    159c:	22 27       	eor	r18, r18
    159e:	b0 0d       	add	r27, r0
    15a0:	a1 1d       	adc	r26, r1
    15a2:	62 1f       	adc	r22, r18
    15a4:	73 9f       	mul	r23, r19
    15a6:	b0 0d       	add	r27, r0
    15a8:	a1 1d       	adc	r26, r1
    15aa:	62 1f       	adc	r22, r18
    15ac:	83 9f       	mul	r24, r19
    15ae:	a0 0d       	add	r26, r0
    15b0:	61 1d       	adc	r22, r1
    15b2:	22 1f       	adc	r18, r18
    15b4:	74 9f       	mul	r23, r20
    15b6:	33 27       	eor	r19, r19
    15b8:	a0 0d       	add	r26, r0
    15ba:	61 1d       	adc	r22, r1
    15bc:	23 1f       	adc	r18, r19
    15be:	84 9f       	mul	r24, r20
    15c0:	60 0d       	add	r22, r0
    15c2:	21 1d       	adc	r18, r1
    15c4:	82 2f       	mov	r24, r18
    15c6:	76 2f       	mov	r23, r22
    15c8:	6a 2f       	mov	r22, r26
    15ca:	11 24       	eor	r1, r1
    15cc:	9f 57       	subi	r25, 0x7F	; 127
    15ce:	50 40       	sbci	r21, 0x00	; 0
    15d0:	9a f0       	brmi	.+38     	; 0x15f8 <__mulsf3_pse+0x88>
    15d2:	f1 f0       	breq	.+60     	; 0x1610 <__mulsf3_pse+0xa0>
    15d4:	88 23       	and	r24, r24
    15d6:	4a f0       	brmi	.+18     	; 0x15ea <__mulsf3_pse+0x7a>
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	bb 1f       	adc	r27, r27
    15de:	66 1f       	adc	r22, r22
    15e0:	77 1f       	adc	r23, r23
    15e2:	88 1f       	adc	r24, r24
    15e4:	91 50       	subi	r25, 0x01	; 1
    15e6:	50 40       	sbci	r21, 0x00	; 0
    15e8:	a9 f7       	brne	.-22     	; 0x15d4 <__mulsf3_pse+0x64>
    15ea:	9e 3f       	cpi	r25, 0xFE	; 254
    15ec:	51 05       	cpc	r21, r1
    15ee:	80 f0       	brcs	.+32     	; 0x1610 <__mulsf3_pse+0xa0>
    15f0:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_inf>
    15f4:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_szero>
    15f8:	5f 3f       	cpi	r21, 0xFF	; 255
    15fa:	e4 f3       	brlt	.-8      	; 0x15f4 <__mulsf3_pse+0x84>
    15fc:	98 3e       	cpi	r25, 0xE8	; 232
    15fe:	d4 f3       	brlt	.-12     	; 0x15f4 <__mulsf3_pse+0x84>
    1600:	86 95       	lsr	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	b7 95       	ror	r27
    1608:	f7 95       	ror	r31
    160a:	e7 95       	ror	r30
    160c:	9f 5f       	subi	r25, 0xFF	; 255
    160e:	c1 f7       	brne	.-16     	; 0x1600 <__mulsf3_pse+0x90>
    1610:	fe 2b       	or	r31, r30
    1612:	88 0f       	add	r24, r24
    1614:	91 1d       	adc	r25, r1
    1616:	96 95       	lsr	r25
    1618:	87 95       	ror	r24
    161a:	97 f9       	bld	r25, 7
    161c:	08 95       	ret

0000161e <__divmodhi4>:
    161e:	97 fb       	bst	r25, 7
    1620:	07 2e       	mov	r0, r23
    1622:	16 f4       	brtc	.+4      	; 0x1628 <__divmodhi4+0xa>
    1624:	00 94       	com	r0
    1626:	07 d0       	rcall	.+14     	; 0x1636 <__divmodhi4_neg1>
    1628:	77 fd       	sbrc	r23, 7
    162a:	09 d0       	rcall	.+18     	; 0x163e <__divmodhi4_neg2>
    162c:	0e 94 23 0b 	call	0x1646	; 0x1646 <__udivmodhi4>
    1630:	07 fc       	sbrc	r0, 7
    1632:	05 d0       	rcall	.+10     	; 0x163e <__divmodhi4_neg2>
    1634:	3e f4       	brtc	.+14     	; 0x1644 <__divmodhi4_exit>

00001636 <__divmodhi4_neg1>:
    1636:	90 95       	com	r25
    1638:	81 95       	neg	r24
    163a:	9f 4f       	sbci	r25, 0xFF	; 255
    163c:	08 95       	ret

0000163e <__divmodhi4_neg2>:
    163e:	70 95       	com	r23
    1640:	61 95       	neg	r22
    1642:	7f 4f       	sbci	r23, 0xFF	; 255

00001644 <__divmodhi4_exit>:
    1644:	08 95       	ret

00001646 <__udivmodhi4>:
    1646:	aa 1b       	sub	r26, r26
    1648:	bb 1b       	sub	r27, r27
    164a:	51 e1       	ldi	r21, 0x11	; 17
    164c:	07 c0       	rjmp	.+14     	; 0x165c <__udivmodhi4_ep>

0000164e <__udivmodhi4_loop>:
    164e:	aa 1f       	adc	r26, r26
    1650:	bb 1f       	adc	r27, r27
    1652:	a6 17       	cp	r26, r22
    1654:	b7 07       	cpc	r27, r23
    1656:	10 f0       	brcs	.+4      	; 0x165c <__udivmodhi4_ep>
    1658:	a6 1b       	sub	r26, r22
    165a:	b7 0b       	sbc	r27, r23

0000165c <__udivmodhi4_ep>:
    165c:	88 1f       	adc	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	5a 95       	dec	r21
    1662:	a9 f7       	brne	.-22     	; 0x164e <__udivmodhi4_loop>
    1664:	80 95       	com	r24
    1666:	90 95       	com	r25
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	08 95       	ret

0000166e <fdevopen>:
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	31 f4       	brne	.+12     	; 0x1686 <fdevopen+0x18>
    167a:	61 15       	cp	r22, r1
    167c:	71 05       	cpc	r23, r1
    167e:	19 f4       	brne	.+6      	; 0x1686 <fdevopen+0x18>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	3a c0       	rjmp	.+116    	; 0x16fa <fdevopen+0x8c>
    1686:	8b 01       	movw	r16, r22
    1688:	ec 01       	movw	r28, r24
    168a:	6e e0       	ldi	r22, 0x0E	; 14
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <calloc>
    1696:	fc 01       	movw	r30, r24
    1698:	89 2b       	or	r24, r25
    169a:	91 f3       	breq	.-28     	; 0x1680 <fdevopen+0x12>
    169c:	80 e8       	ldi	r24, 0x80	; 128
    169e:	83 83       	std	Z+3, r24	; 0x03
    16a0:	01 15       	cp	r16, r1
    16a2:	11 05       	cpc	r17, r1
    16a4:	71 f0       	breq	.+28     	; 0x16c2 <fdevopen+0x54>
    16a6:	13 87       	std	Z+11, r17	; 0x0b
    16a8:	02 87       	std	Z+10, r16	; 0x0a
    16aa:	81 e8       	ldi	r24, 0x81	; 129
    16ac:	83 83       	std	Z+3, r24	; 0x03
    16ae:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <__iob>
    16b2:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <__iob+0x1>
    16b6:	89 2b       	or	r24, r25
    16b8:	21 f4       	brne	.+8      	; 0x16c2 <fdevopen+0x54>
    16ba:	f0 93 97 03 	sts	0x0397, r31	; 0x800397 <__iob+0x1>
    16be:	e0 93 96 03 	sts	0x0396, r30	; 0x800396 <__iob>
    16c2:	20 97       	sbiw	r28, 0x00	; 0
    16c4:	c9 f0       	breq	.+50     	; 0x16f8 <fdevopen+0x8a>
    16c6:	d1 87       	std	Z+9, r29	; 0x09
    16c8:	c0 87       	std	Z+8, r28	; 0x08
    16ca:	83 81       	ldd	r24, Z+3	; 0x03
    16cc:	82 60       	ori	r24, 0x02	; 2
    16ce:	83 83       	std	Z+3, r24	; 0x03
    16d0:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__iob+0x2>
    16d4:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <__iob+0x3>
    16d8:	89 2b       	or	r24, r25
    16da:	71 f4       	brne	.+28     	; 0x16f8 <fdevopen+0x8a>
    16dc:	f0 93 99 03 	sts	0x0399, r31	; 0x800399 <__iob+0x3>
    16e0:	e0 93 98 03 	sts	0x0398, r30	; 0x800398 <__iob+0x2>
    16e4:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <__iob+0x4>
    16e8:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <__iob+0x5>
    16ec:	89 2b       	or	r24, r25
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <fdevopen+0x8a>
    16f0:	f0 93 9b 03 	sts	0x039B, r31	; 0x80039b <__iob+0x5>
    16f4:	e0 93 9a 03 	sts	0x039A, r30	; 0x80039a <__iob+0x4>
    16f8:	cf 01       	movw	r24, r30
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	08 95       	ret

00001704 <printf>:
    1704:	a0 e0       	ldi	r26, 0x00	; 0
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e8 e8       	ldi	r30, 0x88	; 136
    170a:	fb e0       	ldi	r31, 0x0B	; 11
    170c:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__prologue_saves__+0x20>
    1710:	ae 01       	movw	r20, r28
    1712:	4b 5f       	subi	r20, 0xFB	; 251
    1714:	5f 4f       	sbci	r21, 0xFF	; 255
    1716:	fa 01       	movw	r30, r20
    1718:	61 91       	ld	r22, Z+
    171a:	71 91       	ld	r23, Z+
    171c:	af 01       	movw	r20, r30
    171e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__iob+0x2>
    1722:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <__iob+0x3>
    1726:	0e 94 c8 0b 	call	0x1790	; 0x1790 <vfprintf>
    172a:	e2 e0       	ldi	r30, 0x02	; 2
    172c:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__epilogue_restores__+0x20>

00001730 <puts>:
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <__iob+0x2>
    173c:	f0 91 99 03 	lds	r31, 0x0399	; 0x800399 <__iob+0x3>
    1740:	23 81       	ldd	r18, Z+3	; 0x03
    1742:	21 ff       	sbrs	r18, 1
    1744:	1b c0       	rjmp	.+54     	; 0x177c <puts+0x4c>
    1746:	8c 01       	movw	r16, r24
    1748:	d0 e0       	ldi	r29, 0x00	; 0
    174a:	c0 e0       	ldi	r28, 0x00	; 0
    174c:	f8 01       	movw	r30, r16
    174e:	81 91       	ld	r24, Z+
    1750:	8f 01       	movw	r16, r30
    1752:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <__iob+0x2>
    1756:	70 91 99 03 	lds	r23, 0x0399	; 0x800399 <__iob+0x3>
    175a:	db 01       	movw	r26, r22
    175c:	18 96       	adiw	r26, 0x08	; 8
    175e:	ed 91       	ld	r30, X+
    1760:	fc 91       	ld	r31, X
    1762:	19 97       	sbiw	r26, 0x09	; 9
    1764:	88 23       	and	r24, r24
    1766:	31 f0       	breq	.+12     	; 0x1774 <puts+0x44>
    1768:	09 95       	icall
    176a:	89 2b       	or	r24, r25
    176c:	79 f3       	breq	.-34     	; 0x174c <puts+0x1c>
    176e:	df ef       	ldi	r29, 0xFF	; 255
    1770:	cf ef       	ldi	r28, 0xFF	; 255
    1772:	ec cf       	rjmp	.-40     	; 0x174c <puts+0x1c>
    1774:	8a e0       	ldi	r24, 0x0A	; 10
    1776:	09 95       	icall
    1778:	89 2b       	or	r24, r25
    177a:	19 f0       	breq	.+6      	; 0x1782 <puts+0x52>
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <puts+0x56>
    1782:	8d 2f       	mov	r24, r29
    1784:	9c 2f       	mov	r25, r28
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	08 95       	ret

00001790 <vfprintf>:
    1790:	ab e0       	ldi	r26, 0x0B	; 11
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ee ec       	ldi	r30, 0xCE	; 206
    1796:	fb e0       	ldi	r31, 0x0B	; 11
    1798:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__prologue_saves__>
    179c:	6c 01       	movw	r12, r24
    179e:	7b 01       	movw	r14, r22
    17a0:	8a 01       	movw	r16, r20
    17a2:	fc 01       	movw	r30, r24
    17a4:	17 82       	std	Z+7, r1	; 0x07
    17a6:	16 82       	std	Z+6, r1	; 0x06
    17a8:	83 81       	ldd	r24, Z+3	; 0x03
    17aa:	81 ff       	sbrs	r24, 1
    17ac:	cc c1       	rjmp	.+920    	; 0x1b46 <vfprintf+0x3b6>
    17ae:	ce 01       	movw	r24, r28
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	3c 01       	movw	r6, r24
    17b4:	f6 01       	movw	r30, r12
    17b6:	93 81       	ldd	r25, Z+3	; 0x03
    17b8:	f7 01       	movw	r30, r14
    17ba:	93 fd       	sbrc	r25, 3
    17bc:	85 91       	lpm	r24, Z+
    17be:	93 ff       	sbrs	r25, 3
    17c0:	81 91       	ld	r24, Z+
    17c2:	7f 01       	movw	r14, r30
    17c4:	88 23       	and	r24, r24
    17c6:	09 f4       	brne	.+2      	; 0x17ca <vfprintf+0x3a>
    17c8:	ba c1       	rjmp	.+884    	; 0x1b3e <vfprintf+0x3ae>
    17ca:	85 32       	cpi	r24, 0x25	; 37
    17cc:	39 f4       	brne	.+14     	; 0x17dc <vfprintf+0x4c>
    17ce:	93 fd       	sbrc	r25, 3
    17d0:	85 91       	lpm	r24, Z+
    17d2:	93 ff       	sbrs	r25, 3
    17d4:	81 91       	ld	r24, Z+
    17d6:	7f 01       	movw	r14, r30
    17d8:	85 32       	cpi	r24, 0x25	; 37
    17da:	29 f4       	brne	.+10     	; 0x17e6 <vfprintf+0x56>
    17dc:	b6 01       	movw	r22, r12
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <fputc>
    17e4:	e7 cf       	rjmp	.-50     	; 0x17b4 <vfprintf+0x24>
    17e6:	91 2c       	mov	r9, r1
    17e8:	21 2c       	mov	r2, r1
    17ea:	31 2c       	mov	r3, r1
    17ec:	ff e1       	ldi	r31, 0x1F	; 31
    17ee:	f3 15       	cp	r31, r3
    17f0:	d8 f0       	brcs	.+54     	; 0x1828 <vfprintf+0x98>
    17f2:	8b 32       	cpi	r24, 0x2B	; 43
    17f4:	79 f0       	breq	.+30     	; 0x1814 <vfprintf+0x84>
    17f6:	38 f4       	brcc	.+14     	; 0x1806 <vfprintf+0x76>
    17f8:	80 32       	cpi	r24, 0x20	; 32
    17fa:	79 f0       	breq	.+30     	; 0x181a <vfprintf+0x8a>
    17fc:	83 32       	cpi	r24, 0x23	; 35
    17fe:	a1 f4       	brne	.+40     	; 0x1828 <vfprintf+0x98>
    1800:	23 2d       	mov	r18, r3
    1802:	20 61       	ori	r18, 0x10	; 16
    1804:	1d c0       	rjmp	.+58     	; 0x1840 <vfprintf+0xb0>
    1806:	8d 32       	cpi	r24, 0x2D	; 45
    1808:	61 f0       	breq	.+24     	; 0x1822 <vfprintf+0x92>
    180a:	80 33       	cpi	r24, 0x30	; 48
    180c:	69 f4       	brne	.+26     	; 0x1828 <vfprintf+0x98>
    180e:	23 2d       	mov	r18, r3
    1810:	21 60       	ori	r18, 0x01	; 1
    1812:	16 c0       	rjmp	.+44     	; 0x1840 <vfprintf+0xb0>
    1814:	83 2d       	mov	r24, r3
    1816:	82 60       	ori	r24, 0x02	; 2
    1818:	38 2e       	mov	r3, r24
    181a:	e3 2d       	mov	r30, r3
    181c:	e4 60       	ori	r30, 0x04	; 4
    181e:	3e 2e       	mov	r3, r30
    1820:	2a c0       	rjmp	.+84     	; 0x1876 <vfprintf+0xe6>
    1822:	f3 2d       	mov	r31, r3
    1824:	f8 60       	ori	r31, 0x08	; 8
    1826:	1d c0       	rjmp	.+58     	; 0x1862 <vfprintf+0xd2>
    1828:	37 fc       	sbrc	r3, 7
    182a:	2d c0       	rjmp	.+90     	; 0x1886 <vfprintf+0xf6>
    182c:	20 ed       	ldi	r18, 0xD0	; 208
    182e:	28 0f       	add	r18, r24
    1830:	2a 30       	cpi	r18, 0x0A	; 10
    1832:	40 f0       	brcs	.+16     	; 0x1844 <vfprintf+0xb4>
    1834:	8e 32       	cpi	r24, 0x2E	; 46
    1836:	b9 f4       	brne	.+46     	; 0x1866 <vfprintf+0xd6>
    1838:	36 fc       	sbrc	r3, 6
    183a:	81 c1       	rjmp	.+770    	; 0x1b3e <vfprintf+0x3ae>
    183c:	23 2d       	mov	r18, r3
    183e:	20 64       	ori	r18, 0x40	; 64
    1840:	32 2e       	mov	r3, r18
    1842:	19 c0       	rjmp	.+50     	; 0x1876 <vfprintf+0xe6>
    1844:	36 fe       	sbrs	r3, 6
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <vfprintf+0xc4>
    1848:	8a e0       	ldi	r24, 0x0A	; 10
    184a:	98 9e       	mul	r9, r24
    184c:	20 0d       	add	r18, r0
    184e:	11 24       	eor	r1, r1
    1850:	92 2e       	mov	r9, r18
    1852:	11 c0       	rjmp	.+34     	; 0x1876 <vfprintf+0xe6>
    1854:	ea e0       	ldi	r30, 0x0A	; 10
    1856:	2e 9e       	mul	r2, r30
    1858:	20 0d       	add	r18, r0
    185a:	11 24       	eor	r1, r1
    185c:	22 2e       	mov	r2, r18
    185e:	f3 2d       	mov	r31, r3
    1860:	f0 62       	ori	r31, 0x20	; 32
    1862:	3f 2e       	mov	r3, r31
    1864:	08 c0       	rjmp	.+16     	; 0x1876 <vfprintf+0xe6>
    1866:	8c 36       	cpi	r24, 0x6C	; 108
    1868:	21 f4       	brne	.+8      	; 0x1872 <vfprintf+0xe2>
    186a:	83 2d       	mov	r24, r3
    186c:	80 68       	ori	r24, 0x80	; 128
    186e:	38 2e       	mov	r3, r24
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <vfprintf+0xe6>
    1872:	88 36       	cpi	r24, 0x68	; 104
    1874:	41 f4       	brne	.+16     	; 0x1886 <vfprintf+0xf6>
    1876:	f7 01       	movw	r30, r14
    1878:	93 fd       	sbrc	r25, 3
    187a:	85 91       	lpm	r24, Z+
    187c:	93 ff       	sbrs	r25, 3
    187e:	81 91       	ld	r24, Z+
    1880:	7f 01       	movw	r14, r30
    1882:	81 11       	cpse	r24, r1
    1884:	b3 cf       	rjmp	.-154    	; 0x17ec <vfprintf+0x5c>
    1886:	98 2f       	mov	r25, r24
    1888:	9f 7d       	andi	r25, 0xDF	; 223
    188a:	95 54       	subi	r25, 0x45	; 69
    188c:	93 30       	cpi	r25, 0x03	; 3
    188e:	28 f4       	brcc	.+10     	; 0x189a <vfprintf+0x10a>
    1890:	0c 5f       	subi	r16, 0xFC	; 252
    1892:	1f 4f       	sbci	r17, 0xFF	; 255
    1894:	9f e3       	ldi	r25, 0x3F	; 63
    1896:	99 83       	std	Y+1, r25	; 0x01
    1898:	0d c0       	rjmp	.+26     	; 0x18b4 <vfprintf+0x124>
    189a:	83 36       	cpi	r24, 0x63	; 99
    189c:	31 f0       	breq	.+12     	; 0x18aa <vfprintf+0x11a>
    189e:	83 37       	cpi	r24, 0x73	; 115
    18a0:	71 f0       	breq	.+28     	; 0x18be <vfprintf+0x12e>
    18a2:	83 35       	cpi	r24, 0x53	; 83
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <vfprintf+0x118>
    18a6:	59 c0       	rjmp	.+178    	; 0x195a <vfprintf+0x1ca>
    18a8:	21 c0       	rjmp	.+66     	; 0x18ec <vfprintf+0x15c>
    18aa:	f8 01       	movw	r30, r16
    18ac:	80 81       	ld	r24, Z
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	0e 5f       	subi	r16, 0xFE	; 254
    18b2:	1f 4f       	sbci	r17, 0xFF	; 255
    18b4:	88 24       	eor	r8, r8
    18b6:	83 94       	inc	r8
    18b8:	91 2c       	mov	r9, r1
    18ba:	53 01       	movw	r10, r6
    18bc:	13 c0       	rjmp	.+38     	; 0x18e4 <vfprintf+0x154>
    18be:	28 01       	movw	r4, r16
    18c0:	f2 e0       	ldi	r31, 0x02	; 2
    18c2:	4f 0e       	add	r4, r31
    18c4:	51 1c       	adc	r5, r1
    18c6:	f8 01       	movw	r30, r16
    18c8:	a0 80       	ld	r10, Z
    18ca:	b1 80       	ldd	r11, Z+1	; 0x01
    18cc:	36 fe       	sbrs	r3, 6
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <vfprintf+0x146>
    18d0:	69 2d       	mov	r22, r9
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <vfprintf+0x14a>
    18d6:	6f ef       	ldi	r22, 0xFF	; 255
    18d8:	7f ef       	ldi	r23, 0xFF	; 255
    18da:	c5 01       	movw	r24, r10
    18dc:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <strnlen>
    18e0:	4c 01       	movw	r8, r24
    18e2:	82 01       	movw	r16, r4
    18e4:	f3 2d       	mov	r31, r3
    18e6:	ff 77       	andi	r31, 0x7F	; 127
    18e8:	3f 2e       	mov	r3, r31
    18ea:	16 c0       	rjmp	.+44     	; 0x1918 <vfprintf+0x188>
    18ec:	28 01       	movw	r4, r16
    18ee:	22 e0       	ldi	r18, 0x02	; 2
    18f0:	42 0e       	add	r4, r18
    18f2:	51 1c       	adc	r5, r1
    18f4:	f8 01       	movw	r30, r16
    18f6:	a0 80       	ld	r10, Z
    18f8:	b1 80       	ldd	r11, Z+1	; 0x01
    18fa:	36 fe       	sbrs	r3, 6
    18fc:	03 c0       	rjmp	.+6      	; 0x1904 <vfprintf+0x174>
    18fe:	69 2d       	mov	r22, r9
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <vfprintf+0x178>
    1904:	6f ef       	ldi	r22, 0xFF	; 255
    1906:	7f ef       	ldi	r23, 0xFF	; 255
    1908:	c5 01       	movw	r24, r10
    190a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <strnlen_P>
    190e:	4c 01       	movw	r8, r24
    1910:	f3 2d       	mov	r31, r3
    1912:	f0 68       	ori	r31, 0x80	; 128
    1914:	3f 2e       	mov	r3, r31
    1916:	82 01       	movw	r16, r4
    1918:	33 fc       	sbrc	r3, 3
    191a:	1b c0       	rjmp	.+54     	; 0x1952 <vfprintf+0x1c2>
    191c:	82 2d       	mov	r24, r2
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	88 16       	cp	r8, r24
    1922:	99 06       	cpc	r9, r25
    1924:	b0 f4       	brcc	.+44     	; 0x1952 <vfprintf+0x1c2>
    1926:	b6 01       	movw	r22, r12
    1928:	80 e2       	ldi	r24, 0x20	; 32
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <fputc>
    1930:	2a 94       	dec	r2
    1932:	f4 cf       	rjmp	.-24     	; 0x191c <vfprintf+0x18c>
    1934:	f5 01       	movw	r30, r10
    1936:	37 fc       	sbrc	r3, 7
    1938:	85 91       	lpm	r24, Z+
    193a:	37 fe       	sbrs	r3, 7
    193c:	81 91       	ld	r24, Z+
    193e:	5f 01       	movw	r10, r30
    1940:	b6 01       	movw	r22, r12
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <fputc>
    1948:	21 10       	cpse	r2, r1
    194a:	2a 94       	dec	r2
    194c:	21 e0       	ldi	r18, 0x01	; 1
    194e:	82 1a       	sub	r8, r18
    1950:	91 08       	sbc	r9, r1
    1952:	81 14       	cp	r8, r1
    1954:	91 04       	cpc	r9, r1
    1956:	71 f7       	brne	.-36     	; 0x1934 <vfprintf+0x1a4>
    1958:	e8 c0       	rjmp	.+464    	; 0x1b2a <vfprintf+0x39a>
    195a:	84 36       	cpi	r24, 0x64	; 100
    195c:	11 f0       	breq	.+4      	; 0x1962 <vfprintf+0x1d2>
    195e:	89 36       	cpi	r24, 0x69	; 105
    1960:	41 f5       	brne	.+80     	; 0x19b2 <vfprintf+0x222>
    1962:	f8 01       	movw	r30, r16
    1964:	37 fe       	sbrs	r3, 7
    1966:	07 c0       	rjmp	.+14     	; 0x1976 <vfprintf+0x1e6>
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	0c 5f       	subi	r16, 0xFC	; 252
    1972:	1f 4f       	sbci	r17, 0xFF	; 255
    1974:	08 c0       	rjmp	.+16     	; 0x1986 <vfprintf+0x1f6>
    1976:	60 81       	ld	r22, Z
    1978:	71 81       	ldd	r23, Z+1	; 0x01
    197a:	07 2e       	mov	r0, r23
    197c:	00 0c       	add	r0, r0
    197e:	88 0b       	sbc	r24, r24
    1980:	99 0b       	sbc	r25, r25
    1982:	0e 5f       	subi	r16, 0xFE	; 254
    1984:	1f 4f       	sbci	r17, 0xFF	; 255
    1986:	f3 2d       	mov	r31, r3
    1988:	ff 76       	andi	r31, 0x6F	; 111
    198a:	3f 2e       	mov	r3, r31
    198c:	97 ff       	sbrs	r25, 7
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <vfprintf+0x212>
    1990:	90 95       	com	r25
    1992:	80 95       	com	r24
    1994:	70 95       	com	r23
    1996:	61 95       	neg	r22
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	8f 4f       	sbci	r24, 0xFF	; 255
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	f0 68       	ori	r31, 0x80	; 128
    19a0:	3f 2e       	mov	r3, r31
    19a2:	2a e0       	ldi	r18, 0x0A	; 10
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	a3 01       	movw	r20, r6
    19a8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__ultoa_invert>
    19ac:	88 2e       	mov	r8, r24
    19ae:	86 18       	sub	r8, r6
    19b0:	45 c0       	rjmp	.+138    	; 0x1a3c <vfprintf+0x2ac>
    19b2:	85 37       	cpi	r24, 0x75	; 117
    19b4:	31 f4       	brne	.+12     	; 0x19c2 <vfprintf+0x232>
    19b6:	23 2d       	mov	r18, r3
    19b8:	2f 7e       	andi	r18, 0xEF	; 239
    19ba:	b2 2e       	mov	r11, r18
    19bc:	2a e0       	ldi	r18, 0x0A	; 10
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	25 c0       	rjmp	.+74     	; 0x1a0c <vfprintf+0x27c>
    19c2:	93 2d       	mov	r25, r3
    19c4:	99 7f       	andi	r25, 0xF9	; 249
    19c6:	b9 2e       	mov	r11, r25
    19c8:	8f 36       	cpi	r24, 0x6F	; 111
    19ca:	c1 f0       	breq	.+48     	; 0x19fc <vfprintf+0x26c>
    19cc:	18 f4       	brcc	.+6      	; 0x19d4 <vfprintf+0x244>
    19ce:	88 35       	cpi	r24, 0x58	; 88
    19d0:	79 f0       	breq	.+30     	; 0x19f0 <vfprintf+0x260>
    19d2:	b5 c0       	rjmp	.+362    	; 0x1b3e <vfprintf+0x3ae>
    19d4:	80 37       	cpi	r24, 0x70	; 112
    19d6:	19 f0       	breq	.+6      	; 0x19de <vfprintf+0x24e>
    19d8:	88 37       	cpi	r24, 0x78	; 120
    19da:	21 f0       	breq	.+8      	; 0x19e4 <vfprintf+0x254>
    19dc:	b0 c0       	rjmp	.+352    	; 0x1b3e <vfprintf+0x3ae>
    19de:	e9 2f       	mov	r30, r25
    19e0:	e0 61       	ori	r30, 0x10	; 16
    19e2:	be 2e       	mov	r11, r30
    19e4:	b4 fe       	sbrs	r11, 4
    19e6:	0d c0       	rjmp	.+26     	; 0x1a02 <vfprintf+0x272>
    19e8:	fb 2d       	mov	r31, r11
    19ea:	f4 60       	ori	r31, 0x04	; 4
    19ec:	bf 2e       	mov	r11, r31
    19ee:	09 c0       	rjmp	.+18     	; 0x1a02 <vfprintf+0x272>
    19f0:	34 fe       	sbrs	r3, 4
    19f2:	0a c0       	rjmp	.+20     	; 0x1a08 <vfprintf+0x278>
    19f4:	29 2f       	mov	r18, r25
    19f6:	26 60       	ori	r18, 0x06	; 6
    19f8:	b2 2e       	mov	r11, r18
    19fa:	06 c0       	rjmp	.+12     	; 0x1a08 <vfprintf+0x278>
    19fc:	28 e0       	ldi	r18, 0x08	; 8
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <vfprintf+0x27c>
    1a02:	20 e1       	ldi	r18, 0x10	; 16
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <vfprintf+0x27c>
    1a08:	20 e1       	ldi	r18, 0x10	; 16
    1a0a:	32 e0       	ldi	r19, 0x02	; 2
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	b7 fe       	sbrs	r11, 7
    1a10:	07 c0       	rjmp	.+14     	; 0x1a20 <vfprintf+0x290>
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	0c 5f       	subi	r16, 0xFC	; 252
    1a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1e:	06 c0       	rjmp	.+12     	; 0x1a2c <vfprintf+0x29c>
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 5f       	subi	r16, 0xFE	; 254
    1a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2c:	a3 01       	movw	r20, r6
    1a2e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__ultoa_invert>
    1a32:	88 2e       	mov	r8, r24
    1a34:	86 18       	sub	r8, r6
    1a36:	fb 2d       	mov	r31, r11
    1a38:	ff 77       	andi	r31, 0x7F	; 127
    1a3a:	3f 2e       	mov	r3, r31
    1a3c:	36 fe       	sbrs	r3, 6
    1a3e:	0d c0       	rjmp	.+26     	; 0x1a5a <vfprintf+0x2ca>
    1a40:	23 2d       	mov	r18, r3
    1a42:	2e 7f       	andi	r18, 0xFE	; 254
    1a44:	a2 2e       	mov	r10, r18
    1a46:	89 14       	cp	r8, r9
    1a48:	58 f4       	brcc	.+22     	; 0x1a60 <vfprintf+0x2d0>
    1a4a:	34 fe       	sbrs	r3, 4
    1a4c:	0b c0       	rjmp	.+22     	; 0x1a64 <vfprintf+0x2d4>
    1a4e:	32 fc       	sbrc	r3, 2
    1a50:	09 c0       	rjmp	.+18     	; 0x1a64 <vfprintf+0x2d4>
    1a52:	83 2d       	mov	r24, r3
    1a54:	8e 7e       	andi	r24, 0xEE	; 238
    1a56:	a8 2e       	mov	r10, r24
    1a58:	05 c0       	rjmp	.+10     	; 0x1a64 <vfprintf+0x2d4>
    1a5a:	b8 2c       	mov	r11, r8
    1a5c:	a3 2c       	mov	r10, r3
    1a5e:	03 c0       	rjmp	.+6      	; 0x1a66 <vfprintf+0x2d6>
    1a60:	b8 2c       	mov	r11, r8
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <vfprintf+0x2d6>
    1a64:	b9 2c       	mov	r11, r9
    1a66:	a4 fe       	sbrs	r10, 4
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <vfprintf+0x2f8>
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	e8 0d       	add	r30, r8
    1a6e:	f1 1d       	adc	r31, r1
    1a70:	80 81       	ld	r24, Z
    1a72:	80 33       	cpi	r24, 0x30	; 48
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <vfprintf+0x2ee>
    1a76:	9a 2d       	mov	r25, r10
    1a78:	99 7e       	andi	r25, 0xE9	; 233
    1a7a:	a9 2e       	mov	r10, r25
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <vfprintf+0x300>
    1a7e:	a2 fe       	sbrs	r10, 2
    1a80:	06 c0       	rjmp	.+12     	; 0x1a8e <vfprintf+0x2fe>
    1a82:	b3 94       	inc	r11
    1a84:	b3 94       	inc	r11
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <vfprintf+0x300>
    1a88:	8a 2d       	mov	r24, r10
    1a8a:	86 78       	andi	r24, 0x86	; 134
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <vfprintf+0x300>
    1a8e:	b3 94       	inc	r11
    1a90:	a3 fc       	sbrc	r10, 3
    1a92:	11 c0       	rjmp	.+34     	; 0x1ab6 <vfprintf+0x326>
    1a94:	a0 fe       	sbrs	r10, 0
    1a96:	06 c0       	rjmp	.+12     	; 0x1aa4 <vfprintf+0x314>
    1a98:	b2 14       	cp	r11, r2
    1a9a:	88 f4       	brcc	.+34     	; 0x1abe <vfprintf+0x32e>
    1a9c:	28 0c       	add	r2, r8
    1a9e:	92 2c       	mov	r9, r2
    1aa0:	9b 18       	sub	r9, r11
    1aa2:	0e c0       	rjmp	.+28     	; 0x1ac0 <vfprintf+0x330>
    1aa4:	b2 14       	cp	r11, r2
    1aa6:	60 f4       	brcc	.+24     	; 0x1ac0 <vfprintf+0x330>
    1aa8:	b6 01       	movw	r22, r12
    1aaa:	80 e2       	ldi	r24, 0x20	; 32
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <fputc>
    1ab2:	b3 94       	inc	r11
    1ab4:	f7 cf       	rjmp	.-18     	; 0x1aa4 <vfprintf+0x314>
    1ab6:	b2 14       	cp	r11, r2
    1ab8:	18 f4       	brcc	.+6      	; 0x1ac0 <vfprintf+0x330>
    1aba:	2b 18       	sub	r2, r11
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <vfprintf+0x332>
    1abe:	98 2c       	mov	r9, r8
    1ac0:	21 2c       	mov	r2, r1
    1ac2:	a4 fe       	sbrs	r10, 4
    1ac4:	10 c0       	rjmp	.+32     	; 0x1ae6 <vfprintf+0x356>
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	80 e3       	ldi	r24, 0x30	; 48
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <fputc>
    1ad0:	a2 fe       	sbrs	r10, 2
    1ad2:	17 c0       	rjmp	.+46     	; 0x1b02 <vfprintf+0x372>
    1ad4:	a1 fc       	sbrc	r10, 1
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <vfprintf+0x34e>
    1ad8:	88 e7       	ldi	r24, 0x78	; 120
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <vfprintf+0x352>
    1ade:	88 e5       	ldi	r24, 0x58	; 88
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	b6 01       	movw	r22, r12
    1ae4:	0c c0       	rjmp	.+24     	; 0x1afe <vfprintf+0x36e>
    1ae6:	8a 2d       	mov	r24, r10
    1ae8:	86 78       	andi	r24, 0x86	; 134
    1aea:	59 f0       	breq	.+22     	; 0x1b02 <vfprintf+0x372>
    1aec:	a1 fe       	sbrs	r10, 1
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <vfprintf+0x364>
    1af0:	8b e2       	ldi	r24, 0x2B	; 43
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <vfprintf+0x366>
    1af4:	80 e2       	ldi	r24, 0x20	; 32
    1af6:	a7 fc       	sbrc	r10, 7
    1af8:	8d e2       	ldi	r24, 0x2D	; 45
    1afa:	b6 01       	movw	r22, r12
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <fputc>
    1b02:	89 14       	cp	r8, r9
    1b04:	38 f4       	brcc	.+14     	; 0x1b14 <vfprintf+0x384>
    1b06:	b6 01       	movw	r22, r12
    1b08:	80 e3       	ldi	r24, 0x30	; 48
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <fputc>
    1b10:	9a 94       	dec	r9
    1b12:	f7 cf       	rjmp	.-18     	; 0x1b02 <vfprintf+0x372>
    1b14:	8a 94       	dec	r8
    1b16:	f3 01       	movw	r30, r6
    1b18:	e8 0d       	add	r30, r8
    1b1a:	f1 1d       	adc	r31, r1
    1b1c:	80 81       	ld	r24, Z
    1b1e:	b6 01       	movw	r22, r12
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <fputc>
    1b26:	81 10       	cpse	r8, r1
    1b28:	f5 cf       	rjmp	.-22     	; 0x1b14 <vfprintf+0x384>
    1b2a:	22 20       	and	r2, r2
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <vfprintf+0x3a0>
    1b2e:	42 ce       	rjmp	.-892    	; 0x17b4 <vfprintf+0x24>
    1b30:	b6 01       	movw	r22, r12
    1b32:	80 e2       	ldi	r24, 0x20	; 32
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <fputc>
    1b3a:	2a 94       	dec	r2
    1b3c:	f6 cf       	rjmp	.-20     	; 0x1b2a <vfprintf+0x39a>
    1b3e:	f6 01       	movw	r30, r12
    1b40:	86 81       	ldd	r24, Z+6	; 0x06
    1b42:	97 81       	ldd	r25, Z+7	; 0x07
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <vfprintf+0x3ba>
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	9f ef       	ldi	r25, 0xFF	; 255
    1b4a:	2b 96       	adiw	r28, 0x0b	; 11
    1b4c:	e2 e1       	ldi	r30, 0x12	; 18
    1b4e:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__epilogue_restores__>

00001b52 <calloc>:
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	86 9f       	mul	r24, r22
    1b5c:	80 01       	movw	r16, r0
    1b5e:	87 9f       	mul	r24, r23
    1b60:	10 0d       	add	r17, r0
    1b62:	96 9f       	mul	r25, r22
    1b64:	10 0d       	add	r17, r0
    1b66:	11 24       	eor	r1, r1
    1b68:	c8 01       	movw	r24, r16
    1b6a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <malloc>
    1b6e:	ec 01       	movw	r28, r24
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	29 f0       	breq	.+10     	; 0x1b7e <calloc+0x2c>
    1b74:	a8 01       	movw	r20, r16
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <memset>
    1b7e:	ce 01       	movw	r24, r28
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	08 95       	ret

00001b8a <malloc>:
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	82 30       	cpi	r24, 0x02	; 2
    1b94:	91 05       	cpc	r25, r1
    1b96:	10 f4       	brcc	.+4      	; 0x1b9c <malloc+0x12>
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <__flp>
    1ba0:	f0 91 9f 03 	lds	r31, 0x039F	; 0x80039f <__flp+0x1>
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	a0 e0       	ldi	r26, 0x00	; 0
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	30 97       	sbiw	r30, 0x00	; 0
    1bae:	19 f1       	breq	.+70     	; 0x1bf6 <malloc+0x6c>
    1bb0:	40 81       	ld	r20, Z
    1bb2:	51 81       	ldd	r21, Z+1	; 0x01
    1bb4:	02 81       	ldd	r16, Z+2	; 0x02
    1bb6:	13 81       	ldd	r17, Z+3	; 0x03
    1bb8:	48 17       	cp	r20, r24
    1bba:	59 07       	cpc	r21, r25
    1bbc:	c8 f0       	brcs	.+50     	; 0x1bf0 <malloc+0x66>
    1bbe:	84 17       	cp	r24, r20
    1bc0:	95 07       	cpc	r25, r21
    1bc2:	69 f4       	brne	.+26     	; 0x1bde <malloc+0x54>
    1bc4:	10 97       	sbiw	r26, 0x00	; 0
    1bc6:	31 f0       	breq	.+12     	; 0x1bd4 <malloc+0x4a>
    1bc8:	12 96       	adiw	r26, 0x02	; 2
    1bca:	0c 93       	st	X, r16
    1bcc:	12 97       	sbiw	r26, 0x02	; 2
    1bce:	13 96       	adiw	r26, 0x03	; 3
    1bd0:	1c 93       	st	X, r17
    1bd2:	27 c0       	rjmp	.+78     	; 0x1c22 <malloc+0x98>
    1bd4:	00 93 9e 03 	sts	0x039E, r16	; 0x80039e <__flp>
    1bd8:	10 93 9f 03 	sts	0x039F, r17	; 0x80039f <__flp+0x1>
    1bdc:	22 c0       	rjmp	.+68     	; 0x1c22 <malloc+0x98>
    1bde:	21 15       	cp	r18, r1
    1be0:	31 05       	cpc	r19, r1
    1be2:	19 f0       	breq	.+6      	; 0x1bea <malloc+0x60>
    1be4:	42 17       	cp	r20, r18
    1be6:	53 07       	cpc	r21, r19
    1be8:	18 f4       	brcc	.+6      	; 0x1bf0 <malloc+0x66>
    1bea:	9a 01       	movw	r18, r20
    1bec:	bd 01       	movw	r22, r26
    1bee:	ef 01       	movw	r28, r30
    1bf0:	df 01       	movw	r26, r30
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	db cf       	rjmp	.-74     	; 0x1bac <malloc+0x22>
    1bf6:	21 15       	cp	r18, r1
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	f9 f0       	breq	.+62     	; 0x1c3a <malloc+0xb0>
    1bfc:	28 1b       	sub	r18, r24
    1bfe:	39 0b       	sbc	r19, r25
    1c00:	24 30       	cpi	r18, 0x04	; 4
    1c02:	31 05       	cpc	r19, r1
    1c04:	80 f4       	brcc	.+32     	; 0x1c26 <malloc+0x9c>
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	61 15       	cp	r22, r1
    1c0c:	71 05       	cpc	r23, r1
    1c0e:	21 f0       	breq	.+8      	; 0x1c18 <malloc+0x8e>
    1c10:	fb 01       	movw	r30, r22
    1c12:	93 83       	std	Z+3, r25	; 0x03
    1c14:	82 83       	std	Z+2, r24	; 0x02
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <malloc+0x96>
    1c18:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <__flp+0x1>
    1c1c:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <__flp>
    1c20:	fe 01       	movw	r30, r28
    1c22:	32 96       	adiw	r30, 0x02	; 2
    1c24:	44 c0       	rjmp	.+136    	; 0x1cae <malloc+0x124>
    1c26:	fe 01       	movw	r30, r28
    1c28:	e2 0f       	add	r30, r18
    1c2a:	f3 1f       	adc	r31, r19
    1c2c:	81 93       	st	Z+, r24
    1c2e:	91 93       	st	Z+, r25
    1c30:	22 50       	subi	r18, 0x02	; 2
    1c32:	31 09       	sbc	r19, r1
    1c34:	39 83       	std	Y+1, r19	; 0x01
    1c36:	28 83       	st	Y, r18
    1c38:	3a c0       	rjmp	.+116    	; 0x1cae <malloc+0x124>
    1c3a:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <__brkval>
    1c3e:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <__brkval+0x1>
    1c42:	23 2b       	or	r18, r19
    1c44:	41 f4       	brne	.+16     	; 0x1c56 <malloc+0xcc>
    1c46:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1c4a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1c4e:	30 93 9d 03 	sts	0x039D, r19	; 0x80039d <__brkval+0x1>
    1c52:	20 93 9c 03 	sts	0x039C, r18	; 0x80039c <__brkval>
    1c56:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1c5a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1c5e:	21 15       	cp	r18, r1
    1c60:	31 05       	cpc	r19, r1
    1c62:	41 f4       	brne	.+16     	; 0x1c74 <malloc+0xea>
    1c64:	2d b7       	in	r18, 0x3d	; 61
    1c66:	3e b7       	in	r19, 0x3e	; 62
    1c68:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1c6c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1c70:	24 1b       	sub	r18, r20
    1c72:	35 0b       	sbc	r19, r21
    1c74:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <__brkval>
    1c78:	f0 91 9d 03 	lds	r31, 0x039D	; 0x80039d <__brkval+0x1>
    1c7c:	e2 17       	cp	r30, r18
    1c7e:	f3 07       	cpc	r31, r19
    1c80:	a0 f4       	brcc	.+40     	; 0x1caa <malloc+0x120>
    1c82:	2e 1b       	sub	r18, r30
    1c84:	3f 0b       	sbc	r19, r31
    1c86:	28 17       	cp	r18, r24
    1c88:	39 07       	cpc	r19, r25
    1c8a:	78 f0       	brcs	.+30     	; 0x1caa <malloc+0x120>
    1c8c:	ac 01       	movw	r20, r24
    1c8e:	4e 5f       	subi	r20, 0xFE	; 254
    1c90:	5f 4f       	sbci	r21, 0xFF	; 255
    1c92:	24 17       	cp	r18, r20
    1c94:	35 07       	cpc	r19, r21
    1c96:	48 f0       	brcs	.+18     	; 0x1caa <malloc+0x120>
    1c98:	4e 0f       	add	r20, r30
    1c9a:	5f 1f       	adc	r21, r31
    1c9c:	50 93 9d 03 	sts	0x039D, r21	; 0x80039d <__brkval+0x1>
    1ca0:	40 93 9c 03 	sts	0x039C, r20	; 0x80039c <__brkval>
    1ca4:	81 93       	st	Z+, r24
    1ca6:	91 93       	st	Z+, r25
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <malloc+0x124>
    1caa:	e0 e0       	ldi	r30, 0x00	; 0
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	cf 01       	movw	r24, r30
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	08 95       	ret

00001cba <free>:
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <free+0xa>
    1cc2:	81 c0       	rjmp	.+258    	; 0x1dc6 <free+0x10c>
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	32 97       	sbiw	r30, 0x02	; 2
    1cc8:	13 82       	std	Z+3, r1	; 0x03
    1cca:	12 82       	std	Z+2, r1	; 0x02
    1ccc:	a0 91 9e 03 	lds	r26, 0x039E	; 0x80039e <__flp>
    1cd0:	b0 91 9f 03 	lds	r27, 0x039F	; 0x80039f <__flp+0x1>
    1cd4:	10 97       	sbiw	r26, 0x00	; 0
    1cd6:	81 f4       	brne	.+32     	; 0x1cf8 <free+0x3e>
    1cd8:	20 81       	ld	r18, Z
    1cda:	31 81       	ldd	r19, Z+1	; 0x01
    1cdc:	82 0f       	add	r24, r18
    1cde:	93 1f       	adc	r25, r19
    1ce0:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <__brkval>
    1ce4:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <__brkval+0x1>
    1ce8:	28 17       	cp	r18, r24
    1cea:	39 07       	cpc	r19, r25
    1cec:	51 f5       	brne	.+84     	; 0x1d42 <free+0x88>
    1cee:	f0 93 9d 03 	sts	0x039D, r31	; 0x80039d <__brkval+0x1>
    1cf2:	e0 93 9c 03 	sts	0x039C, r30	; 0x80039c <__brkval>
    1cf6:	67 c0       	rjmp	.+206    	; 0x1dc6 <free+0x10c>
    1cf8:	ed 01       	movw	r28, r26
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	ce 17       	cp	r28, r30
    1d00:	df 07       	cpc	r29, r31
    1d02:	40 f4       	brcc	.+16     	; 0x1d14 <free+0x5a>
    1d04:	4a 81       	ldd	r20, Y+2	; 0x02
    1d06:	5b 81       	ldd	r21, Y+3	; 0x03
    1d08:	9e 01       	movw	r18, r28
    1d0a:	41 15       	cp	r20, r1
    1d0c:	51 05       	cpc	r21, r1
    1d0e:	f1 f0       	breq	.+60     	; 0x1d4c <free+0x92>
    1d10:	ea 01       	movw	r28, r20
    1d12:	f5 cf       	rjmp	.-22     	; 0x1cfe <free+0x44>
    1d14:	d3 83       	std	Z+3, r29	; 0x03
    1d16:	c2 83       	std	Z+2, r28	; 0x02
    1d18:	40 81       	ld	r20, Z
    1d1a:	51 81       	ldd	r21, Z+1	; 0x01
    1d1c:	84 0f       	add	r24, r20
    1d1e:	95 1f       	adc	r25, r21
    1d20:	c8 17       	cp	r28, r24
    1d22:	d9 07       	cpc	r29, r25
    1d24:	59 f4       	brne	.+22     	; 0x1d3c <free+0x82>
    1d26:	88 81       	ld	r24, Y
    1d28:	99 81       	ldd	r25, Y+1	; 0x01
    1d2a:	84 0f       	add	r24, r20
    1d2c:	95 1f       	adc	r25, r21
    1d2e:	02 96       	adiw	r24, 0x02	; 2
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	9b 81       	ldd	r25, Y+3	; 0x03
    1d38:	93 83       	std	Z+3, r25	; 0x03
    1d3a:	82 83       	std	Z+2, r24	; 0x02
    1d3c:	21 15       	cp	r18, r1
    1d3e:	31 05       	cpc	r19, r1
    1d40:	29 f4       	brne	.+10     	; 0x1d4c <free+0x92>
    1d42:	f0 93 9f 03 	sts	0x039F, r31	; 0x80039f <__flp+0x1>
    1d46:	e0 93 9e 03 	sts	0x039E, r30	; 0x80039e <__flp>
    1d4a:	3d c0       	rjmp	.+122    	; 0x1dc6 <free+0x10c>
    1d4c:	e9 01       	movw	r28, r18
    1d4e:	fb 83       	std	Y+3, r31	; 0x03
    1d50:	ea 83       	std	Y+2, r30	; 0x02
    1d52:	49 91       	ld	r20, Y+
    1d54:	59 91       	ld	r21, Y+
    1d56:	c4 0f       	add	r28, r20
    1d58:	d5 1f       	adc	r29, r21
    1d5a:	ec 17       	cp	r30, r28
    1d5c:	fd 07       	cpc	r31, r29
    1d5e:	61 f4       	brne	.+24     	; 0x1d78 <free+0xbe>
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	84 0f       	add	r24, r20
    1d66:	95 1f       	adc	r25, r21
    1d68:	02 96       	adiw	r24, 0x02	; 2
    1d6a:	e9 01       	movw	r28, r18
    1d6c:	99 83       	std	Y+1, r25	; 0x01
    1d6e:	88 83       	st	Y, r24
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	9b 83       	std	Y+3, r25	; 0x03
    1d76:	8a 83       	std	Y+2, r24	; 0x02
    1d78:	e0 e0       	ldi	r30, 0x00	; 0
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	12 96       	adiw	r26, 0x02	; 2
    1d7e:	8d 91       	ld	r24, X+
    1d80:	9c 91       	ld	r25, X
    1d82:	13 97       	sbiw	r26, 0x03	; 3
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	19 f0       	breq	.+6      	; 0x1d8e <free+0xd4>
    1d88:	fd 01       	movw	r30, r26
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	f7 cf       	rjmp	.-18     	; 0x1d7c <free+0xc2>
    1d8e:	8d 91       	ld	r24, X+
    1d90:	9c 91       	ld	r25, X
    1d92:	11 97       	sbiw	r26, 0x01	; 1
    1d94:	9d 01       	movw	r18, r26
    1d96:	2e 5f       	subi	r18, 0xFE	; 254
    1d98:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9a:	82 0f       	add	r24, r18
    1d9c:	93 1f       	adc	r25, r19
    1d9e:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <__brkval>
    1da2:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <__brkval+0x1>
    1da6:	28 17       	cp	r18, r24
    1da8:	39 07       	cpc	r19, r25
    1daa:	69 f4       	brne	.+26     	; 0x1dc6 <free+0x10c>
    1dac:	30 97       	sbiw	r30, 0x00	; 0
    1dae:	29 f4       	brne	.+10     	; 0x1dba <free+0x100>
    1db0:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <__flp+0x1>
    1db4:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <__flp>
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <free+0x104>
    1dba:	13 82       	std	Z+3, r1	; 0x03
    1dbc:	12 82       	std	Z+2, r1	; 0x02
    1dbe:	b0 93 9d 03 	sts	0x039D, r27	; 0x80039d <__brkval+0x1>
    1dc2:	a0 93 9c 03 	sts	0x039C, r26	; 0x80039c <__brkval>
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	08 95       	ret

00001dcc <strnlen_P>:
    1dcc:	fc 01       	movw	r30, r24
    1dce:	05 90       	lpm	r0, Z+
    1dd0:	61 50       	subi	r22, 0x01	; 1
    1dd2:	70 40       	sbci	r23, 0x00	; 0
    1dd4:	01 10       	cpse	r0, r1
    1dd6:	d8 f7       	brcc	.-10     	; 0x1dce <strnlen_P+0x2>
    1dd8:	80 95       	com	r24
    1dda:	90 95       	com	r25
    1ddc:	8e 0f       	add	r24, r30
    1dde:	9f 1f       	adc	r25, r31
    1de0:	08 95       	ret

00001de2 <memset>:
    1de2:	dc 01       	movw	r26, r24
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <memset+0x6>
    1de6:	6d 93       	st	X+, r22
    1de8:	41 50       	subi	r20, 0x01	; 1
    1dea:	50 40       	sbci	r21, 0x00	; 0
    1dec:	e0 f7       	brcc	.-8      	; 0x1de6 <memset+0x4>
    1dee:	08 95       	ret

00001df0 <strnlen>:
    1df0:	fc 01       	movw	r30, r24
    1df2:	61 50       	subi	r22, 0x01	; 1
    1df4:	70 40       	sbci	r23, 0x00	; 0
    1df6:	01 90       	ld	r0, Z+
    1df8:	01 10       	cpse	r0, r1
    1dfa:	d8 f7       	brcc	.-10     	; 0x1df2 <strnlen+0x2>
    1dfc:	80 95       	com	r24
    1dfe:	90 95       	com	r25
    1e00:	8e 0f       	add	r24, r30
    1e02:	9f 1f       	adc	r25, r31
    1e04:	08 95       	ret

00001e06 <fputc>:
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	fb 01       	movw	r30, r22
    1e10:	23 81       	ldd	r18, Z+3	; 0x03
    1e12:	21 fd       	sbrc	r18, 1
    1e14:	03 c0       	rjmp	.+6      	; 0x1e1c <fputc+0x16>
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	9f ef       	ldi	r25, 0xFF	; 255
    1e1a:	2c c0       	rjmp	.+88     	; 0x1e74 <fputc+0x6e>
    1e1c:	22 ff       	sbrs	r18, 2
    1e1e:	16 c0       	rjmp	.+44     	; 0x1e4c <fputc+0x46>
    1e20:	46 81       	ldd	r20, Z+6	; 0x06
    1e22:	57 81       	ldd	r21, Z+7	; 0x07
    1e24:	24 81       	ldd	r18, Z+4	; 0x04
    1e26:	35 81       	ldd	r19, Z+5	; 0x05
    1e28:	42 17       	cp	r20, r18
    1e2a:	53 07       	cpc	r21, r19
    1e2c:	44 f4       	brge	.+16     	; 0x1e3e <fputc+0x38>
    1e2e:	a0 81       	ld	r26, Z
    1e30:	b1 81       	ldd	r27, Z+1	; 0x01
    1e32:	9d 01       	movw	r18, r26
    1e34:	2f 5f       	subi	r18, 0xFF	; 255
    1e36:	3f 4f       	sbci	r19, 0xFF	; 255
    1e38:	31 83       	std	Z+1, r19	; 0x01
    1e3a:	20 83       	st	Z, r18
    1e3c:	8c 93       	st	X, r24
    1e3e:	26 81       	ldd	r18, Z+6	; 0x06
    1e40:	37 81       	ldd	r19, Z+7	; 0x07
    1e42:	2f 5f       	subi	r18, 0xFF	; 255
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	37 83       	std	Z+7, r19	; 0x07
    1e48:	26 83       	std	Z+6, r18	; 0x06
    1e4a:	14 c0       	rjmp	.+40     	; 0x1e74 <fputc+0x6e>
    1e4c:	8b 01       	movw	r16, r22
    1e4e:	ec 01       	movw	r28, r24
    1e50:	fb 01       	movw	r30, r22
    1e52:	00 84       	ldd	r0, Z+8	; 0x08
    1e54:	f1 85       	ldd	r31, Z+9	; 0x09
    1e56:	e0 2d       	mov	r30, r0
    1e58:	09 95       	icall
    1e5a:	89 2b       	or	r24, r25
    1e5c:	e1 f6       	brne	.-72     	; 0x1e16 <fputc+0x10>
    1e5e:	d8 01       	movw	r26, r16
    1e60:	16 96       	adiw	r26, 0x06	; 6
    1e62:	8d 91       	ld	r24, X+
    1e64:	9c 91       	ld	r25, X
    1e66:	17 97       	sbiw	r26, 0x07	; 7
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	17 96       	adiw	r26, 0x07	; 7
    1e6c:	9c 93       	st	X, r25
    1e6e:	8e 93       	st	-X, r24
    1e70:	16 97       	sbiw	r26, 0x06	; 6
    1e72:	ce 01       	movw	r24, r28
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	08 95       	ret

00001e7e <__ultoa_invert>:
    1e7e:	fa 01       	movw	r30, r20
    1e80:	aa 27       	eor	r26, r26
    1e82:	28 30       	cpi	r18, 0x08	; 8
    1e84:	51 f1       	breq	.+84     	; 0x1eda <__ultoa_invert+0x5c>
    1e86:	20 31       	cpi	r18, 0x10	; 16
    1e88:	81 f1       	breq	.+96     	; 0x1eea <__ultoa_invert+0x6c>
    1e8a:	e8 94       	clt
    1e8c:	6f 93       	push	r22
    1e8e:	6e 7f       	andi	r22, 0xFE	; 254
    1e90:	6e 5f       	subi	r22, 0xFE	; 254
    1e92:	7f 4f       	sbci	r23, 0xFF	; 255
    1e94:	8f 4f       	sbci	r24, 0xFF	; 255
    1e96:	9f 4f       	sbci	r25, 0xFF	; 255
    1e98:	af 4f       	sbci	r26, 0xFF	; 255
    1e9a:	b1 e0       	ldi	r27, 0x01	; 1
    1e9c:	3e d0       	rcall	.+124    	; 0x1f1a <__ultoa_invert+0x9c>
    1e9e:	b4 e0       	ldi	r27, 0x04	; 4
    1ea0:	3c d0       	rcall	.+120    	; 0x1f1a <__ultoa_invert+0x9c>
    1ea2:	67 0f       	add	r22, r23
    1ea4:	78 1f       	adc	r23, r24
    1ea6:	89 1f       	adc	r24, r25
    1ea8:	9a 1f       	adc	r25, r26
    1eaa:	a1 1d       	adc	r26, r1
    1eac:	68 0f       	add	r22, r24
    1eae:	79 1f       	adc	r23, r25
    1eb0:	8a 1f       	adc	r24, r26
    1eb2:	91 1d       	adc	r25, r1
    1eb4:	a1 1d       	adc	r26, r1
    1eb6:	6a 0f       	add	r22, r26
    1eb8:	71 1d       	adc	r23, r1
    1eba:	81 1d       	adc	r24, r1
    1ebc:	91 1d       	adc	r25, r1
    1ebe:	a1 1d       	adc	r26, r1
    1ec0:	20 d0       	rcall	.+64     	; 0x1f02 <__ultoa_invert+0x84>
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <__ultoa_invert+0x48>
    1ec4:	68 94       	set
    1ec6:	3f 91       	pop	r19
    1ec8:	2a e0       	ldi	r18, 0x0A	; 10
    1eca:	26 9f       	mul	r18, r22
    1ecc:	11 24       	eor	r1, r1
    1ece:	30 19       	sub	r19, r0
    1ed0:	30 5d       	subi	r19, 0xD0	; 208
    1ed2:	31 93       	st	Z+, r19
    1ed4:	de f6       	brtc	.-74     	; 0x1e8c <__ultoa_invert+0xe>
    1ed6:	cf 01       	movw	r24, r30
    1ed8:	08 95       	ret
    1eda:	46 2f       	mov	r20, r22
    1edc:	47 70       	andi	r20, 0x07	; 7
    1ede:	40 5d       	subi	r20, 0xD0	; 208
    1ee0:	41 93       	st	Z+, r20
    1ee2:	b3 e0       	ldi	r27, 0x03	; 3
    1ee4:	0f d0       	rcall	.+30     	; 0x1f04 <__ultoa_invert+0x86>
    1ee6:	c9 f7       	brne	.-14     	; 0x1eda <__ultoa_invert+0x5c>
    1ee8:	f6 cf       	rjmp	.-20     	; 0x1ed6 <__ultoa_invert+0x58>
    1eea:	46 2f       	mov	r20, r22
    1eec:	4f 70       	andi	r20, 0x0F	; 15
    1eee:	40 5d       	subi	r20, 0xD0	; 208
    1ef0:	4a 33       	cpi	r20, 0x3A	; 58
    1ef2:	18 f0       	brcs	.+6      	; 0x1efa <__ultoa_invert+0x7c>
    1ef4:	49 5d       	subi	r20, 0xD9	; 217
    1ef6:	31 fd       	sbrc	r19, 1
    1ef8:	40 52       	subi	r20, 0x20	; 32
    1efa:	41 93       	st	Z+, r20
    1efc:	02 d0       	rcall	.+4      	; 0x1f02 <__ultoa_invert+0x84>
    1efe:	a9 f7       	brne	.-22     	; 0x1eea <__ultoa_invert+0x6c>
    1f00:	ea cf       	rjmp	.-44     	; 0x1ed6 <__ultoa_invert+0x58>
    1f02:	b4 e0       	ldi	r27, 0x04	; 4
    1f04:	a6 95       	lsr	r26
    1f06:	97 95       	ror	r25
    1f08:	87 95       	ror	r24
    1f0a:	77 95       	ror	r23
    1f0c:	67 95       	ror	r22
    1f0e:	ba 95       	dec	r27
    1f10:	c9 f7       	brne	.-14     	; 0x1f04 <__ultoa_invert+0x86>
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	61 05       	cpc	r22, r1
    1f16:	71 05       	cpc	r23, r1
    1f18:	08 95       	ret
    1f1a:	9b 01       	movw	r18, r22
    1f1c:	ac 01       	movw	r20, r24
    1f1e:	0a 2e       	mov	r0, r26
    1f20:	06 94       	lsr	r0
    1f22:	57 95       	ror	r21
    1f24:	47 95       	ror	r20
    1f26:	37 95       	ror	r19
    1f28:	27 95       	ror	r18
    1f2a:	ba 95       	dec	r27
    1f2c:	c9 f7       	brne	.-14     	; 0x1f20 <__ultoa_invert+0xa2>
    1f2e:	62 0f       	add	r22, r18
    1f30:	73 1f       	adc	r23, r19
    1f32:	84 1f       	adc	r24, r20
    1f34:	95 1f       	adc	r25, r21
    1f36:	a0 1d       	adc	r26, r0
    1f38:	08 95       	ret

00001f3a <__prologue_saves__>:
    1f3a:	2f 92       	push	r2
    1f3c:	3f 92       	push	r3
    1f3e:	4f 92       	push	r4
    1f40:	5f 92       	push	r5
    1f42:	6f 92       	push	r6
    1f44:	7f 92       	push	r7
    1f46:	8f 92       	push	r8
    1f48:	9f 92       	push	r9
    1f4a:	af 92       	push	r10
    1f4c:	bf 92       	push	r11
    1f4e:	cf 92       	push	r12
    1f50:	df 92       	push	r13
    1f52:	ef 92       	push	r14
    1f54:	ff 92       	push	r15
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	ca 1b       	sub	r28, r26
    1f64:	db 0b       	sbc	r29, r27
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	09 94       	ijmp

00001f72 <__epilogue_restores__>:
    1f72:	2a 88       	ldd	r2, Y+18	; 0x12
    1f74:	39 88       	ldd	r3, Y+17	; 0x11
    1f76:	48 88       	ldd	r4, Y+16	; 0x10
    1f78:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f80:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f82:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f84:	b9 84       	ldd	r11, Y+9	; 0x09
    1f86:	c8 84       	ldd	r12, Y+8	; 0x08
    1f88:	df 80       	ldd	r13, Y+7	; 0x07
    1f8a:	ee 80       	ldd	r14, Y+6	; 0x06
    1f8c:	fd 80       	ldd	r15, Y+5	; 0x05
    1f8e:	0c 81       	ldd	r16, Y+4	; 0x04
    1f90:	1b 81       	ldd	r17, Y+3	; 0x03
    1f92:	aa 81       	ldd	r26, Y+2	; 0x02
    1f94:	b9 81       	ldd	r27, Y+1	; 0x01
    1f96:	ce 0f       	add	r28, r30
    1f98:	d1 1d       	adc	r29, r1
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	ed 01       	movw	r28, r26
    1fa6:	08 95       	ret

00001fa8 <_exit>:
    1fa8:	f8 94       	cli

00001faa <__stop_program>:
    1faa:	ff cf       	rjmp	.-2      	; 0x1faa <__stop_program>
