
G3_ES_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  000015d8  0000166c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800222  00800222  0000178e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000178e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017a6  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de5  00000000  00000000  0000315e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dda  00000000  00000000  00003f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  00004d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000667  00000000  00000000  0000519c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e42  00000000  00000000  00005803  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006645  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_1>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 ed       	ldi	r30, 0xD8	; 216
      84:	f5 e1       	ldi	r31, 0x15	; 21
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 32       	cpi	r26, 0x22	; 34
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a2 e2       	ldi	r26, 0x22	; 34
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ac 32       	cpi	r26, 0x2C	; 44
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 b0 03 	call	0x760	; 0x760 <main>
      a6:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <clock_timer>:

//should be deleted?
void adc_init(){
	//setting the ADC CS to low to select it (active low) from the NAND gates
	DDRC |= (1 << PC2);
	PORTC = 0x04;
      ae:	8c 9a       	sbi	0x11, 4	; 17
      b0:	eb e8       	ldi	r30, 0x8B	; 139
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	88 64       	ori	r24, 0x48	; 72
      b8:	80 83       	st	Z, r24
      ba:	ea e8       	ldi	r30, 0x8A	; 138
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	89 60       	ori	r24, 0x09	; 9
      c2:	80 83       	st	Z, r24
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
      ca:	08 95       	ret

000000cc <adc_read>:
//volatile
uint8_t adc_read(uint8_t channel){	
	uint8_t adc_channel;
	
	//select which channel to write to
	if (channel==0){
      cc:	88 23       	and	r24, r24
      ce:	41 f0       	breq	.+16     	; 0xe0 <adc_read+0x14>
		 adc_channel = 0b10000000;
	}
	else if (channel==1){
      d0:	81 30       	cpi	r24, 0x01	; 1
      d2:	41 f0       	breq	.+16     	; 0xe4 <adc_read+0x18>
		adc_channel = 0b10000001;
	}
	else if (channel==2){
      d4:	82 30       	cpi	r24, 0x02	; 2
      d6:	41 f0       	breq	.+16     	; 0xe8 <adc_read+0x1c>
		adc_channel = 0b10000010;
	}
	else if (channel==3){
      d8:	83 30       	cpi	r24, 0x03	; 3
      da:	39 f4       	brne	.+14     	; 0xea <adc_read+0x1e>
		adc_channel = 0b10000011;
      dc:	93 e8       	ldi	r25, 0x83	; 131
      de:	05 c0       	rjmp	.+10     	; 0xea <adc_read+0x1e>
uint8_t adc_read(uint8_t channel){	
	uint8_t adc_channel;
	
	//select which channel to write to
	if (channel==0){
		 adc_channel = 0b10000000;
      e0:	90 e8       	ldi	r25, 0x80	; 128
      e2:	03 c0       	rjmp	.+6      	; 0xea <adc_read+0x1e>
	}
	else if (channel==1){
		adc_channel = 0b10000001;
      e4:	91 e8       	ldi	r25, 0x81	; 129
      e6:	01 c0       	rjmp	.+2      	; 0xea <adc_read+0x1e>
	}
	else if (channel==2){
		adc_channel = 0b10000010;
      e8:	92 e8       	ldi	r25, 0x82	; 130
	}
	else if (channel==3){
		adc_channel = 0b10000011;
	}
	adc_reg[0] = adc_channel;
      ea:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <adc_reg>
      ee:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <adc_reg+0x1>
      f2:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f4:	81 e4       	ldi	r24, 0x41	; 65
      f6:	8a 95       	dec	r24
      f8:	f1 f7       	brne	.-4      	; 0xf6 <adc_read+0x2a>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <adc_read+0x30>
	_delay_us(40);
	uint8_t adc_val = adc_reg[0];
      fc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <adc_reg>
     100:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <adc_reg+0x1>
     104:	80 81       	ld	r24, Z
	
	return adc_val;
}
     106:	08 95       	ret

00000108 <can_init>:
#include <stdint.h>
#include <avr/interrupt.h>


void can_init(void){
	mcp2515_init();
     108:	0e 94 43 03 	call	0x686	; 0x686 <mcp2515_init>
	mcp2515_write(MCP_CANINTE, 0X03);		//enables the reception complete flag (for the interrupt)
     10c:	63 e0       	ldi	r22, 0x03	; 3
     10e:	8b e2       	ldi	r24, 0x2B	; 43
     110:	0e 94 2b 03 	call	0x656	; 0x656 <mcp2515_write>
	
	
	mcp2515_write(MCP_CNF3, 0x01);
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	88 e2       	ldi	r24, 0x28	; 40
     118:	0e 94 2b 03 	call	0x656	; 0x656 <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xb5);
     11c:	65 eb       	ldi	r22, 0xB5	; 181
     11e:	89 e2       	ldi	r24, 0x29	; 41
     120:	0e 94 2b 03 	call	0x656	; 0x656 <mcp2515_write>
	mcp2515_write(MCP_CNF1, 0x43);
     124:	63 e4       	ldi	r22, 0x43	; 67
     126:	8a e2       	ldi	r24, 0x2A	; 42
     128:	0e 94 2b 03 	call	0x656	; 0x656 <mcp2515_write>
	
	//Check that the registers have the right values
	uint8_t cnf1 = mcp2515_read(MCP_CNF1);
     12c:	8a e2       	ldi	r24, 0x2A	; 42
     12e:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
	printf("cnf1:%d\r\n", cnf1);		//should be 67
     132:	1f 92       	push	r1
     134:	8f 93       	push	r24
     136:	88 e0       	ldi	r24, 0x08	; 8
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	9f 93       	push	r25
     13c:	8f 93       	push	r24
     13e:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>
	uint8_t cnf2 = mcp2515_read(MCP_CNF2);
     142:	89 e2       	ldi	r24, 0x29	; 41
     144:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
	printf("cnf2:%d\r\n", cnf2);		//should be 181
     148:	1f 92       	push	r1
     14a:	8f 93       	push	r24
     14c:	82 e1       	ldi	r24, 0x12	; 18
     14e:	91 e0       	ldi	r25, 0x01	; 1
     150:	9f 93       	push	r25
     152:	8f 93       	push	r24
     154:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>
	uint8_t cnf3 = mcp2515_read(MCP_CNF3);
     158:	88 e2       	ldi	r24, 0x28	; 40
     15a:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
	printf("cnf3:%d\r\n\n", cnf3);		//should be 1
     15e:	1f 92       	push	r1
     160:	8f 93       	push	r24
     162:	8c e1       	ldi	r24, 0x1C	; 28
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	9f 93       	push	r25
     168:	8f 93       	push	r24
     16a:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>
	
	
	mcp2515_write(MCP_CANCTRL, MODE_NORMAL);
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	8f e0       	ldi	r24, 0x0F	; 15
     172:	0e 94 2b 03 	call	0x656	; 0x656 <mcp2515_write>
 	uint8_t value;

	value = mcp2515_read(MCP_CANSTAT);
     176:	8e e0       	ldi	r24, 0x0E	; 14
     178:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>

	if((value & MODE_MASK) != MODE_NORMAL){
     17c:	80 7e       	andi	r24, 0xE0	; 224
     17e:	2d b7       	in	r18, 0x3d	; 61
     180:	3e b7       	in	r19, 0x3e	; 62
     182:	24 5f       	subi	r18, 0xF4	; 244
     184:	3f 4f       	sbci	r19, 0xFF	; 255
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	3e bf       	out	0x3e, r19	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	2d bf       	out	0x3d, r18	; 61
     190:	88 23       	and	r24, r24
     192:	21 f0       	breq	.+8      	; 0x19c <can_init+0x94>
		printf("MCP2515 is NOT in normal mode after reset!\n");
     194:	87 e2       	ldi	r24, 0x27	; 39
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	0e 94 ae 06 	call	0xd5c	; 0xd5c <puts>
	}		
		
	// Disable global interrupts
	cli();
     19c:	f8 94       	cli
	// Interrupt on falling edge
	MCUCR |= (1<<ISC01);
     19e:	85 b7       	in	r24, 0x35	; 53
     1a0:	82 60       	ori	r24, 0x02	; 2
     1a2:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt 
	GICR |= (1<<INT0);
     1a4:	8b b7       	in	r24, 0x3b	; 59
     1a6:	80 64       	ori	r24, 0x40	; 64
     1a8:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     1aa:	78 94       	sei
     1ac:	08 95       	ret

000001ae <can_receive>:
	}

void can_receive(void){
     1ae:	af 92       	push	r10
     1b0:	bf 92       	push	r11
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	2c 97       	sbiw	r28, 0x0c	; 12
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
	can_msg msg;
	if(mcp2515_read_status() & 0x01){
     1d0:	0e 94 75 03 	call	0x6ea	; 0x6ea <mcp2515_read_status>
     1d4:	80 ff       	sbrs	r24, 0
     1d6:	33 c0       	rjmp	.+102    	; 0x23e <can_receive+0x90>
		msg.id = (mcp2515_read(MCP_RXB0SIDH) << 3)|(mcp2515_read(MCP_RXB0SIDL) >> 5);
     1d8:	81 e6       	ldi	r24, 0x61	; 97
     1da:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
     1de:	a8 2e       	mov	r10, r24
     1e0:	82 e6       	ldi	r24, 0x62	; 98
     1e2:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
     1e6:	b1 2c       	mov	r11, r1
     1e8:	aa 0c       	add	r10, r10
     1ea:	bb 1c       	adc	r11, r11
     1ec:	aa 0c       	add	r10, r10
     1ee:	bb 1c       	adc	r11, r11
     1f0:	aa 0c       	add	r10, r10
     1f2:	bb 1c       	adc	r11, r11
     1f4:	82 95       	swap	r24
     1f6:	86 95       	lsr	r24
     1f8:	87 70       	andi	r24, 0x07	; 7
     1fa:	a8 2a       	or	r10, r24
		msg.length = mcp2515_read(MCP_RXB0DLC);
     1fc:	85 e6       	ldi	r24, 0x65	; 101
     1fe:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
     202:	c8 2e       	mov	r12, r24
     204:	d1 2c       	mov	r13, r1
		for(uint8_t i = 0; i < (msg.length); i++){
     206:	1c 14       	cp	r1, r12
     208:	1d 04       	cpc	r1, r13
     20a:	a4 f4       	brge	.+40     	; 0x234 <can_receive+0x86>
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	f1 2c       	mov	r15, r1
			msg.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     212:	86 e6       	ldi	r24, 0x66	; 102
     214:	8f 0d       	add	r24, r15
     216:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
     21a:	e5 e0       	ldi	r30, 0x05	; 5
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	ec 0f       	add	r30, r28
     220:	fd 1f       	adc	r31, r29
     222:	e0 0f       	add	r30, r16
     224:	f1 1f       	adc	r31, r17
     226:	80 83       	st	Z, r24
void can_receive(void){
	can_msg msg;
	if(mcp2515_read_status() & 0x01){
		msg.id = (mcp2515_read(MCP_RXB0SIDH) << 3)|(mcp2515_read(MCP_RXB0SIDL) >> 5);
		msg.length = mcp2515_read(MCP_RXB0DLC);
		for(uint8_t i = 0; i < (msg.length); i++){
     228:	f3 94       	inc	r15
     22a:	0f 2d       	mov	r16, r15
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	0c 15       	cp	r16, r12
     230:	1d 05       	cpc	r17, r13
     232:	7c f3       	brlt	.-34     	; 0x212 <can_receive+0x64>
			msg.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}
		mcp2515_bit_modify(MCP_CANINTF,0x01, 0x00);
     234:	40 e0       	ldi	r20, 0x00	; 0
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	8c e2       	ldi	r24, 0x2C	; 44
     23a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mcp2515_bit_modify>
	}
		
	if(mcp2515_read_status() & 0x02){
     23e:	0e 94 75 03 	call	0x6ea	; 0x6ea <mcp2515_read_status>
     242:	81 ff       	sbrs	r24, 1
     244:	33 c0       	rjmp	.+102    	; 0x2ac <can_receive+0xfe>
		msg.id = (mcp2515_read(MCP_RXB1SIDH) << 3)|(mcp2515_read(MCP_RXB1SIDL) >> 5);
     246:	81 e7       	ldi	r24, 0x71	; 113
     248:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
     24c:	a8 2e       	mov	r10, r24
     24e:	82 e7       	ldi	r24, 0x72	; 114
     250:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
     254:	b1 2c       	mov	r11, r1
     256:	aa 0c       	add	r10, r10
     258:	bb 1c       	adc	r11, r11
     25a:	aa 0c       	add	r10, r10
     25c:	bb 1c       	adc	r11, r11
     25e:	aa 0c       	add	r10, r10
     260:	bb 1c       	adc	r11, r11
     262:	82 95       	swap	r24
     264:	86 95       	lsr	r24
     266:	87 70       	andi	r24, 0x07	; 7
     268:	a8 2a       	or	r10, r24
		msg.length = mcp2515_read(MCP_RXB1DLC);
     26a:	85 e7       	ldi	r24, 0x75	; 117
     26c:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
     270:	c8 2e       	mov	r12, r24
     272:	d1 2c       	mov	r13, r1
		for(uint8_t i = 0; i < (msg.length); i++){
     274:	1c 14       	cp	r1, r12
     276:	1d 04       	cpc	r1, r13
     278:	a4 f4       	brge	.+40     	; 0x2a2 <can_receive+0xf4>
     27a:	00 e0       	ldi	r16, 0x00	; 0
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	f1 2c       	mov	r15, r1
			msg.data[i] = mcp2515_read(MCP_RXB1D0 + i);
     280:	86 e7       	ldi	r24, 0x76	; 118
     282:	8f 0d       	add	r24, r15
     284:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
     288:	e5 e0       	ldi	r30, 0x05	; 5
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	ec 0f       	add	r30, r28
     28e:	fd 1f       	adc	r31, r29
     290:	e0 0f       	add	r30, r16
     292:	f1 1f       	adc	r31, r17
     294:	80 83       	st	Z, r24
	}
		
	if(mcp2515_read_status() & 0x02){
		msg.id = (mcp2515_read(MCP_RXB1SIDH) << 3)|(mcp2515_read(MCP_RXB1SIDL) >> 5);
		msg.length = mcp2515_read(MCP_RXB1DLC);
		for(uint8_t i = 0; i < (msg.length); i++){
     296:	f3 94       	inc	r15
     298:	0f 2d       	mov	r16, r15
     29a:	10 e0       	ldi	r17, 0x00	; 0
     29c:	0c 15       	cp	r16, r12
     29e:	1d 05       	cpc	r17, r13
     2a0:	7c f3       	brlt	.-34     	; 0x280 <can_receive+0xd2>
			msg.data[i] = mcp2515_read(MCP_RXB1D0 + i);
		}
		mcp2515_bit_modify(MCP_CANINTF,0x02, 0x00);
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	62 e0       	ldi	r22, 0x02	; 2
     2a6:	8c e2       	ldi	r24, 0x2C	; 44
     2a8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <mcp2515_bit_modify>
	}
			
	printf("data: %c\r\nlength: %d\r\nid: %d\r\n\n", msg.data[0], msg.length, msg.id);
     2ac:	bf 92       	push	r11
     2ae:	af 92       	push	r10
     2b0:	df 92       	push	r13
     2b2:	cf 92       	push	r12
     2b4:	8d 81       	ldd	r24, Y+5	; 0x05
     2b6:	1f 92       	push	r1
     2b8:	8f 93       	push	r24
     2ba:	80 e7       	ldi	r24, 0x70	; 112
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	9f 93       	push	r25
     2c0:	8f 93       	push	r24
     2c2:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>
}
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	2c 96       	adiw	r28, 0x0c	; 12
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	ff 90       	pop	r15
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
     2ea:	bf 90       	pop	r11
     2ec:	af 90       	pop	r10
     2ee:	08 95       	ret

000002f0 <can_transmit>:

void can_transmit(can_msg msg){
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	2c 97       	sbiw	r28, 0x0c	; 12
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	e9 82       	std	Y+1, r14	; 0x01
     31a:	fa 82       	std	Y+2, r15	; 0x02
     31c:	0b 83       	std	Y+3, r16	; 0x03
     31e:	1c 83       	std	Y+4, r17	; 0x04
     320:	2d 83       	std	Y+5, r18	; 0x05
     322:	3e 83       	std	Y+6, r19	; 0x06
     324:	4f 83       	std	Y+7, r20	; 0x07
     326:	58 87       	std	Y+8, r21	; 0x08
     328:	69 87       	std	Y+9, r22	; 0x09
     32a:	7a 87       	std	Y+10, r23	; 0x0a
     32c:	8b 87       	std	Y+11, r24	; 0x0b
     32e:	9c 87       	std	Y+12, r25	; 0x0c
     330:	a9 80       	ldd	r10, Y+1	; 0x01
     332:	ba 80       	ldd	r11, Y+2	; 0x02
     334:	8b 80       	ldd	r8, Y+3	; 0x03
     336:	9c 80       	ldd	r9, Y+4	; 0x04
	mcp2515_write(MCP_TXB0SIDH, msg.id >> 3);
     338:	b4 01       	movw	r22, r8
     33a:	75 95       	asr	r23
     33c:	67 95       	ror	r22
     33e:	75 95       	asr	r23
     340:	67 95       	ror	r22
     342:	75 95       	asr	r23
     344:	67 95       	ror	r22
     346:	81 e3       	ldi	r24, 0x31	; 49
     348:	0e 94 2b 03 	call	0x656	; 0x656 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
     34c:	68 2d       	mov	r22, r8
     34e:	62 95       	swap	r22
     350:	66 0f       	add	r22, r22
     352:	60 7e       	andi	r22, 0xE0	; 224
     354:	82 e3       	ldi	r24, 0x32	; 50
     356:	0e 94 2b 03 	call	0x656	; 0x656 <mcp2515_write>
	mcp2515_write(MCP_TXB0DLC, msg.length);
     35a:	6a 2d       	mov	r22, r10
     35c:	85 e3       	ldi	r24, 0x35	; 53
     35e:	0e 94 2b 03 	call	0x656	; 0x656 <mcp2515_write>
	for(uint8_t i = 0; i < (msg.length); i++){
     362:	1a 14       	cp	r1, r10
     364:	1b 04       	cpc	r1, r11
     366:	4c f5       	brge	.+82     	; 0x3ba <can_transmit+0xca>
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	10 e0       	ldi	r17, 0x00	; 0
     36c:	f1 2c       	mov	r15, r1
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
		printf("data:%d at i = %d\r\n", msg.data[i], i);
     36e:	0f 2e       	mov	r0, r31
     370:	f2 e5       	ldi	r31, 0x52	; 82
     372:	cf 2e       	mov	r12, r31
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	df 2e       	mov	r13, r31
     378:	f0 2d       	mov	r31, r0
void can_transmit(can_msg msg){
	mcp2515_write(MCP_TXB0SIDH, msg.id >> 3);
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
	mcp2515_write(MCP_TXB0DLC, msg.length);
	for(uint8_t i = 0; i < (msg.length); i++){
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
     37a:	e5 e0       	ldi	r30, 0x05	; 5
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	ec 0f       	add	r30, r28
     380:	fd 1f       	adc	r31, r29
     382:	e0 0f       	add	r30, r16
     384:	f1 1f       	adc	r31, r17
     386:	e0 80       	ld	r14, Z
     388:	6e 2d       	mov	r22, r14
     38a:	86 e3       	ldi	r24, 0x36	; 54
     38c:	8f 0d       	add	r24, r15
     38e:	0e 94 2b 03 	call	0x656	; 0x656 <mcp2515_write>
		printf("data:%d at i = %d\r\n", msg.data[i], i);
     392:	1f 93       	push	r17
     394:	0f 93       	push	r16
     396:	1f 92       	push	r1
     398:	ef 92       	push	r14
     39a:	df 92       	push	r13
     39c:	cf 92       	push	r12
     39e:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>

void can_transmit(can_msg msg){
	mcp2515_write(MCP_TXB0SIDH, msg.id >> 3);
	mcp2515_write(MCP_TXB0SIDL, msg.id << 5); 
	mcp2515_write(MCP_TXB0DLC, msg.length);
	for(uint8_t i = 0; i < (msg.length); i++){
     3a2:	f3 94       	inc	r15
     3a4:	0f 2d       	mov	r16, r15
     3a6:	10 e0       	ldi	r17, 0x00	; 0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0a 15       	cp	r16, r10
     3b6:	1b 05       	cpc	r17, r11
     3b8:	04 f3       	brlt	.-64     	; 0x37a <can_transmit+0x8a>
		mcp2515_write(MCP_TXB0D0 + i, msg.data[i]);
		printf("data:%d at i = %d\r\n", msg.data[i], i);
	}
	mcp2515_request_to_send(0);
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <mcp2515_request_to_send>
	
	printf("Sending:\r\ndata: %c\r\nlength: %d\r\nid: %d\r\n\n", msg.data[0], msg.length, msg.id);
     3c0:	9f 92       	push	r9
     3c2:	8f 92       	push	r8
     3c4:	bf 92       	push	r11
     3c6:	af 92       	push	r10
     3c8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ca:	1f 92       	push	r1
     3cc:	8f 93       	push	r24
     3ce:	86 e6       	ldi	r24, 0x66	; 102
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	9f 93       	push	r25
     3d4:	8f 93       	push	r24
     3d6:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>
}
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	2c 96       	adiw	r28, 0x0c	; 12
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	bf 90       	pop	r11
     402:	af 90       	pop	r10
     404:	9f 90       	pop	r9
     406:	8f 90       	pop	r8
     408:	08 95       	ret

0000040a <__vector_1>:

ISR(INT0_vect){
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	2f 93       	push	r18
     416:	3f 93       	push	r19
     418:	4f 93       	push	r20
     41a:	5f 93       	push	r21
     41c:	6f 93       	push	r22
     41e:	7f 93       	push	r23
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	af 93       	push	r26
     426:	bf 93       	push	r27
     428:	ef 93       	push	r30
     42a:	ff 93       	push	r31
	can_receive();
     42c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <can_receive>
}
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	bf 91       	pop	r27
     436:	af 91       	pop	r26
     438:	9f 91       	pop	r25
     43a:	8f 91       	pop	r24
     43c:	7f 91       	pop	r23
     43e:	6f 91       	pop	r22
     440:	5f 91       	pop	r21
     442:	4f 91       	pop	r20
     444:	3f 91       	pop	r19
     446:	2f 91       	pop	r18
     448:	0f 90       	pop	r0
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	0f 90       	pop	r0
     44e:	1f 90       	pop	r1
     450:	18 95       	reti

00000452 <joystick_init>:
#include "joystick.h"
#include "can.h"

//enum position{Left, Right, Up, Down, Neutral};

int joystick_init(uint8_t channel, int samples){
     452:	9f 92       	push	r9
     454:	af 92       	push	r10
     456:	bf 92       	push	r11
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	98 2e       	mov	r9, r24
     46a:	5b 01       	movw	r10, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46c:	2f ef       	ldi	r18, 0xFF	; 255
     46e:	8f e7       	ldi	r24, 0x7F	; 127
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	21 50       	subi	r18, 0x01	; 1
     474:	80 40       	sbci	r24, 0x00	; 0
     476:	90 40       	sbci	r25, 0x00	; 0
     478:	e1 f7       	brne	.-8      	; 0x472 <joystick_init+0x20>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <joystick_init+0x2a>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <joystick_init+0x2c>
	uint8_t pos = 0;
	int center = 0;
	_delay_ms(100);
	for(int i=0; i<samples; i++){
     47e:	16 16       	cp	r1, r22
     480:	17 06       	cpc	r1, r23
     482:	04 f5       	brge	.+64     	; 0x4c4 <joystick_init+0x72>
     484:	c0 e0       	ldi	r28, 0x00	; 0
     486:	d0 e0       	ldi	r29, 0x00	; 0
     488:	00 e0       	ldi	r16, 0x00	; 0
     48a:	10 e0       	ldi	r17, 0x00	; 0
		pos = adc_read(channel);
		printf("value: %d\r\n", pos);
     48c:	0f 2e       	mov	r0, r31
     48e:	f0 e9       	ldi	r31, 0x90	; 144
     490:	ef 2e       	mov	r14, r31
     492:	f1 e0       	ldi	r31, 0x01	; 1
     494:	ff 2e       	mov	r15, r31
     496:	f0 2d       	mov	r31, r0
int joystick_init(uint8_t channel, int samples){
	uint8_t pos = 0;
	int center = 0;
	_delay_ms(100);
	for(int i=0; i<samples; i++){
		pos = adc_read(channel);
     498:	89 2d       	mov	r24, r9
     49a:	0e 94 66 00 	call	0xcc	; 0xcc <adc_read>
		printf("value: %d\r\n", pos);
     49e:	c8 2e       	mov	r12, r24
     4a0:	d1 2c       	mov	r13, r1
     4a2:	1f 92       	push	r1
     4a4:	8f 93       	push	r24
     4a6:	ff 92       	push	r15
     4a8:	ef 92       	push	r14
     4aa:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>
		center = center + (int)pos;
     4ae:	0c 0d       	add	r16, r12
     4b0:	1d 1d       	adc	r17, r13

int joystick_init(uint8_t channel, int samples){
	uint8_t pos = 0;
	int center = 0;
	_delay_ms(100);
	for(int i=0; i<samples; i++){
     4b2:	21 96       	adiw	r28, 0x01	; 1
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	ac 16       	cp	r10, r28
     4be:	bd 06       	cpc	r11, r29
     4c0:	59 f7       	brne	.-42     	; 0x498 <joystick_init+0x46>
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <joystick_init+0x76>

//enum position{Left, Right, Up, Down, Neutral};

int joystick_init(uint8_t channel, int samples){
	uint8_t pos = 0;
	int center = 0;
     4c4:	00 e0       	ldi	r16, 0x00	; 0
     4c6:	10 e0       	ldi	r17, 0x00	; 0
		printf("value: %d\r\n", pos);
		center = center + (int)pos;
	}
	//printf("sum: %d\r\n", center);
	center = center/samples;
	return center;
     4c8:	c8 01       	movw	r24, r16
     4ca:	b5 01       	movw	r22, r10
     4cc:	0e 94 25 06 	call	0xc4a	; 0xc4a <__divmodhi4>
     4d0:	cb 01       	movw	r24, r22
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	cf 90       	pop	r12
     4e2:	bf 90       	pop	r11
     4e4:	af 90       	pop	r10
     4e6:	9f 90       	pop	r9
     4e8:	08 95       	ret

000004ea <normalize_output_joystick>:

int normalize_output_joystick(uint8_t value, int center){
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	eb 01       	movw	r28, r22
	int position = 0;
	if((int)value <= center){
     4f8:	28 2f       	mov	r18, r24
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	62 17       	cp	r22, r18
     4fe:	73 07       	cpc	r23, r19
     500:	24 f1       	brlt	.+72     	; 0x54a <__stack+0x4b>
		position = (((float)value/(float)center)*100)-100;
     502:	68 2f       	mov	r22, r24
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 2a 05 	call	0xa54	; 0xa54 <__floatunsisf>
     50e:	6b 01       	movw	r12, r22
     510:	7c 01       	movw	r14, r24
     512:	be 01       	movw	r22, r28
     514:	dd 0f       	add	r29, r29
     516:	88 0b       	sbc	r24, r24
     518:	99 0b       	sbc	r25, r25
     51a:	0e 94 2c 05 	call	0xa58	; 0xa58 <__floatsisf>
     51e:	9b 01       	movw	r18, r22
     520:	ac 01       	movw	r20, r24
     522:	c7 01       	movw	r24, r14
     524:	b6 01       	movw	r22, r12
     526:	0e 94 82 04 	call	0x904	; 0x904 <__divsf3>
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	48 ec       	ldi	r20, 0xC8	; 200
     530:	52 e4       	ldi	r21, 0x42	; 66
     532:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3>
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	48 ec       	ldi	r20, 0xC8	; 200
     53c:	52 e4       	ldi	r21, 0x42	; 66
     53e:	0e 94 15 04 	call	0x82a	; 0x82a <__subsf3>
     542:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fixsfsi>
     546:	cb 01       	movw	r24, r22
     548:	33 c0       	rjmp	.+102    	; 0x5b0 <__stack+0xb1>
	}
	else if((int)value > center){
		position = ((((255-(float)value)/(255-(float) center))*(-100)))+100;
     54a:	68 2f       	mov	r22, r24
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 2a 05 	call	0xa54	; 0xa54 <__floatunsisf>
     556:	9b 01       	movw	r18, r22
     558:	ac 01       	movw	r20, r24
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	8f e7       	ldi	r24, 0x7F	; 127
     560:	93 e4       	ldi	r25, 0x43	; 67
     562:	0e 94 15 04 	call	0x82a	; 0x82a <__subsf3>
     566:	6b 01       	movw	r12, r22
     568:	7c 01       	movw	r14, r24
     56a:	be 01       	movw	r22, r28
     56c:	dd 0f       	add	r29, r29
     56e:	88 0b       	sbc	r24, r24
     570:	99 0b       	sbc	r25, r25
     572:	0e 94 2c 05 	call	0xa58	; 0xa58 <__floatsisf>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	8f e7       	ldi	r24, 0x7F	; 127
     580:	93 e4       	ldi	r25, 0x43	; 67
     582:	0e 94 15 04 	call	0x82a	; 0x82a <__subsf3>
     586:	9b 01       	movw	r18, r22
     588:	ac 01       	movw	r20, r24
     58a:	c7 01       	movw	r24, r14
     58c:	b6 01       	movw	r22, r12
     58e:	0e 94 82 04 	call	0x904	; 0x904 <__divsf3>
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	48 ec       	ldi	r20, 0xC8	; 200
     598:	52 ec       	ldi	r21, 0xC2	; 194
     59a:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	48 ec       	ldi	r20, 0xC8	; 200
     5a4:	52 e4       	ldi	r21, 0x42	; 66
     5a6:	0e 94 16 04 	call	0x82c	; 0x82c <__addsf3>
     5aa:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fixsfsi>
     5ae:	cb 01       	movw	r24, r22
	}
	return position;
}

     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	08 95       	ret

000005be <send_position>:
void send_position(int position){
	printf("position: %d\r\n", position);
     5be:	df 92       	push	r13
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	2c 97       	sbiw	r28, 0x0c	; 12
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	d8 2e       	mov	r13, r24
	can_msg msg;
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	8c e9       	ldi	r24, 0x9C	; 156
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	9f 93       	push	r25
     5e8:	8f 93       	push	r24
     5ea:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>
	msg.id = 1;
	msg.length = 1;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	08 2f       	mov	r16, r24
     5f4:	8b 83       	std	Y+3, r24	; 0x03
     5f6:	9c 83       	std	Y+4, r25	; 0x04
	msg.data[0] = (char)position;
     5f8:	e8 2e       	mov	r14, r24
     5fa:	89 83       	std	Y+1, r24	; 0x01
     5fc:	9a 83       	std	Y+2, r25	; 0x02
	can_transmit(msg);
     5fe:	f1 2c       	mov	r15, r1
     600:	10 e0       	ldi	r17, 0x00	; 0
     602:	2d 2d       	mov	r18, r13
     604:	3e 81       	ldd	r19, Y+6	; 0x06
     606:	4f 81       	ldd	r20, Y+7	; 0x07
     608:	58 85       	ldd	r21, Y+8	; 0x08
     60a:	69 85       	ldd	r22, Y+9	; 0x09
     60c:	7a 85       	ldd	r23, Y+10	; 0x0a
     60e:	8b 85       	ldd	r24, Y+11	; 0x0b
     610:	9c 85       	ldd	r25, Y+12	; 0x0c
     612:	0e 94 78 01 	call	0x2f0	; 0x2f0 <can_transmit>
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	2c 96       	adiw	r28, 0x0c	; 12
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	08 95       	ret

0000063a <mcp2515_read>:
	SPI_MasterTransmit(MCP_CNF3);
	SPI_MasterTransmit(0b00000110);
	*/
}

uint8_t mcp2515_read(uint8_t address){
     63a:	cf 93       	push	r28
     63c:	c8 2f       	mov	r28, r24
	uint8_t result;
	
	PORTB &= ~(1<<PB4);
     63e:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_MasterTransmit(MCP_READ);
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     646:	8c 2f       	mov	r24, r28
     648:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	result = SPI_MasterReceive();
     64c:	0e 94 a4 03 	call	0x748	; 0x748 <SPI_MasterReceive>
	
	PORTB |= (1<<PB4);
     650:	c4 9a       	sbi	0x18, 4	; 24
	
	return result;
}
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	d8 2f       	mov	r29, r24
     65c:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4);
     65e:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_WRITE);
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     666:	8d 2f       	mov	r24, r29
     668:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     66c:	8c 2f       	mov	r24, r28
     66e:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     672:	c4 9a       	sbi	0x18, 4	; 24
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <mcp2515_reset>:

void mcp2515_reset(void){
	PORTB &= ~(1<<PB4);
     67a:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_RESET);
     67c:	80 ec       	ldi	r24, 0xC0	; 192
     67e:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     682:	c4 9a       	sbi	0x18, 4	; 24
     684:	08 95       	ret

00000686 <mcp2515_init>:
int status;

void mcp2515_init(void){
	uint8_t value;

	SPI_MasterInit();
     686:	0e 94 95 03 	call	0x72a	; 0x72a <SPI_MasterInit>
	mcp2515_reset();
     68a:	0e 94 3d 03 	call	0x67a	; 0x67a <mcp2515_reset>
	
	value = mcp2515_read(MCP_CANSTAT);
     68e:	8e e0       	ldi	r24, 0x0E	; 14
     690:	0e 94 1d 03 	call	0x63a	; 0x63a <mcp2515_read>
	if((value & MODE_MASK) != MODE_CONFIG){
     694:	80 7e       	andi	r24, 0xE0	; 224
     696:	80 38       	cpi	r24, 0x80	; 128
     698:	21 f0       	breq	.+8      	; 0x6a2 <mcp2515_init+0x1c>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     69a:	8b ea       	ldi	r24, 0xAB	; 171
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <puts>
     6a2:	08 95       	ret

000006a4 <mcp2515_request_to_send>:
	PORTB |= (1<<PB4);
}


void mcp2515_request_to_send(uint8_t buffer){
	PORTB &= ~(1<<PB4);
     6a4:	c4 98       	cbi	0x18, 4	; 24
	switch(buffer){
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	51 f0       	breq	.+20     	; 0x6be <mcp2515_request_to_send+0x1a>
     6aa:	28 f0       	brcs	.+10     	; 0x6b6 <mcp2515_request_to_send+0x12>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	59 f0       	breq	.+22     	; 0x6c6 <mcp2515_request_to_send+0x22>
     6b0:	89 30       	cpi	r24, 0x09	; 9
     6b2:	69 f0       	breq	.+26     	; 0x6ce <mcp2515_request_to_send+0x2a>
     6b4:	10 c0       	rjmp	.+32     	; 0x6d6 <mcp2515_request_to_send+0x32>
	case 0:
		SPI_MasterTransmit(MCP_RTS_TX0);
     6b6:	81 e8       	ldi	r24, 0x81	; 129
     6b8:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	break;
     6bc:	14 c0       	rjmp	.+40     	; 0x6e6 <mcp2515_request_to_send+0x42>
	case 1:
		SPI_MasterTransmit(MCP_RTS_TX1);
     6be:	82 e8       	ldi	r24, 0x82	; 130
     6c0:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	break;
     6c4:	10 c0       	rjmp	.+32     	; 0x6e6 <mcp2515_request_to_send+0x42>
	case 2:
		SPI_MasterTransmit(MCP_RTS_TX2);
     6c6:	84 e8       	ldi	r24, 0x84	; 132
     6c8:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	break;
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <mcp2515_request_to_send+0x42>
	case 9:
		SPI_MasterTransmit(MCP_RTS_ALL);
     6ce:	87 e8       	ldi	r24, 0x87	; 135
     6d0:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	break;
     6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <mcp2515_request_to_send+0x42>
	default:
		printf("Not a valid entry\n\r try again");
     6d6:	8d ed       	ldi	r24, 0xDD	; 221
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>
	break;
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
	}
	PORTB |= (1<<PB4);
     6e6:	c4 9a       	sbi	0x18, 4	; 24
     6e8:	08 95       	ret

000006ea <mcp2515_read_status>:
}

uint8_t mcp2515_read_status(void){
	uint8_t result;
	PORTB &= ~(1<<PB4);
     6ea:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_READ_STATUS);
     6ec:	80 ea       	ldi	r24, 0xA0	; 160
     6ee:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	result = SPI_MasterReceive();
     6f2:	0e 94 a4 03 	call	0x748	; 0x748 <SPI_MasterReceive>
	PORTB |= (1<<PB4);
     6f6:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
     6f8:	08 95       	ret

000006fa <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t data_mask, uint8_t data){
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	18 2f       	mov	r17, r24
     702:	d6 2f       	mov	r29, r22
     704:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);
     706:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_BITMOD);
     708:	85 e0       	ldi	r24, 0x05	; 5
     70a:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     70e:	81 2f       	mov	r24, r17
     710:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	SPI_MasterTransmit(data_mask);
     714:	8d 2f       	mov	r24, r29
     716:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     71a:	8c 2f       	mov	r24, r28
     71c:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	PORTB |= (1<<PB4);
     720:	c4 9a       	sbi	0x18, 4	; 24
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	08 95       	ret

0000072a <SPI_MasterInit>:
#define SCK PB7

//Needed for initializing the SPI as a master
void SPI_MasterInit(void){
	// Set MOSI and SCK output, all others input, set CS as output
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);
     72a:	87 b3       	in	r24, 0x17	; 23
     72c:	80 6b       	ori	r24, 0xB0	; 176
     72e:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);
     730:	be 98       	cbi	0x17, 6	; 23
	
	// Enable SPI, Master, set clock rate fck/16 & select mode 00
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     732:	8d b1       	in	r24, 0x0d	; 13
     734:	81 65       	ori	r24, 0x51	; 81
     736:	8d b9       	out	0x0d, r24	; 13

	SPCR &= ~(1<<CPOL);		//Not required
     738:	6b 98       	cbi	0x0d, 3	; 13
	SPCR &= ~(1<<CPHA);		//Not required
     73a:	6a 98       	cbi	0x0d, 2	; 13

	PORTB |= (1<<SS);
     73c:	c4 9a       	sbi	0x18, 4	; 24
     73e:	08 95       	ret

00000740 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData){
	// Start transmission 
	SPDR = cData;
     740:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete 
	while(!(SPSR & (1<<SPIF)));
     742:	77 9b       	sbis	0x0e, 7	; 14
     744:	fe cf       	rjmp	.-4      	; 0x742 <SPI_MasterTransmit+0x2>
}
     746:	08 95       	ret

00000748 <SPI_MasterReceive>:


char SPI_MasterReceive(void){
	SPI_MasterTransmit('a');
     748:	81 e6       	ldi	r24, 0x61	; 97
     74a:	0e 94 a0 03 	call	0x740	; 0x740 <SPI_MasterTransmit>
	return SPDR;
     74e:	8f b1       	in	r24, 0x0f	; 15
}  
     750:	08 95       	ret

00000752 <SRAM_init>:
	//DDRC |= (1 << PC3);
	//PORTC = 0x04;
	volatile char *ext_ram = (char *) 0x1800;
	//printf("\r\n\n\nInitiating SRAM...\r\n");
	
	MCUCR |= (1<<SRE);
     752:	85 b7       	in	r24, 0x35	; 53
     754:	80 68       	ori	r24, 0x80	; 128
     756:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<5);
     758:	80 b7       	in	r24, 0x30	; 48
     75a:	80 62       	ori	r24, 0x20	; 32
     75c:	80 bf       	out	0x30, r24	; 48
     75e:	08 95       	ret

00000760 <main>:
#define HORIZONTAL 0
#define VERTICAL 1

int main(void)
{	int rec;
	USART_Init(MYUBRR);
     760:	8f e1       	ldi	r24, 0x1F	; 31
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 06 04 	call	0x80c	; 0x80c <USART_Init>
	
	fdevopen(USART_Transmit, USART_Receive);
     768:	61 e1       	ldi	r22, 0x11	; 17
     76a:	74 e0       	ldi	r23, 0x04	; 4
     76c:	8d e0       	ldi	r24, 0x0D	; 13
     76e:	94 e0       	ldi	r25, 0x04	; 4
     770:	0e 94 4d 06 	call	0xc9a	; 0xc9a <fdevopen>
	
	clock_timer();
     774:	0e 94 57 00 	call	0xae	; 0xae <clock_timer>
	SRAM_init();
     778:	0e 94 a9 03 	call	0x752	; 0x752 <SRAM_init>
	can_init();
     77c:	0e 94 84 00 	call	0x108	; 0x108 <can_init>
	
	int centerH = joystick_init(HORIZONTAL, 10);
     780:	6a e0       	ldi	r22, 0x0A	; 10
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 29 02 	call	0x452	; 0x452 <joystick_init>
     78a:	5c 01       	movw	r10, r24
	//printf("CENTER: %d\r\n", centerH);
	
	int centerV = joystick_init(VERTICAL, 10);
     78c:	6a e0       	ldi	r22, 0x0A	; 10
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	0e 94 29 02 	call	0x452	; 0x452 <joystick_init>
     796:	6c 01       	movw	r12, r24
	}*/
	//***************** SENDING JOYSTICK POSITIONS OVER CAN TO NODE 2 **************/
	
	while (1){
		int valueH = adc_read(HORIZONTAL);
		printf("ADC output X: %d\r\n", valueH);
     798:	0f 2e       	mov	r0, r31
     79a:	fb ef       	ldi	r31, 0xFB	; 251
     79c:	ef 2e       	mov	r14, r31
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	ff 2e       	mov	r15, r31
     7a2:	f0 2d       	mov	r31, r0
		int valueV = adc_read(VERTICAL);
		printf("ADC output Y: %d\r\n", valueV);
     7a4:	0e e0       	ldi	r16, 0x0E	; 14
     7a6:	12 e0       	ldi	r17, 0x02	; 2
		//printf("Vertical output: %d\r\n", outputV);
	}*/
	//***************** SENDING JOYSTICK POSITIONS OVER CAN TO NODE 2 **************/
	
	while (1){
		int valueH = adc_read(HORIZONTAL);
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	0e 94 66 00 	call	0xcc	; 0xcc <adc_read>
     7ae:	d8 2f       	mov	r29, r24
		printf("ADC output X: %d\r\n", valueH);
     7b0:	1f 92       	push	r1
     7b2:	8f 93       	push	r24
     7b4:	ff 92       	push	r15
     7b6:	ef 92       	push	r14
     7b8:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>
		int valueV = adc_read(VERTICAL);
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 66 00 	call	0xcc	; 0xcc <adc_read>
     7c2:	c8 2f       	mov	r28, r24
		printf("ADC output Y: %d\r\n", valueV);
     7c4:	1f 92       	push	r1
     7c6:	8f 93       	push	r24
     7c8:	1f 93       	push	r17
     7ca:	0f 93       	push	r16
     7cc:	0e 94 98 06 	call	0xd30	; 0xd30 <printf>
		send_position(normalize_output_joystick(valueH, centerH));
     7d0:	b5 01       	movw	r22, r10
     7d2:	8d 2f       	mov	r24, r29
     7d4:	0e 94 75 02 	call	0x4ea	; 0x4ea <normalize_output_joystick>
     7d8:	0e 94 df 02 	call	0x5be	; 0x5be <send_position>
		send_position(normalize_output_joystick(valueV, centerV));
     7dc:	b6 01       	movw	r22, r12
     7de:	8c 2f       	mov	r24, r28
     7e0:	0e 94 75 02 	call	0x4ea	; 0x4ea <normalize_output_joystick>
     7e4:	0e 94 df 02 	call	0x5be	; 0x5be <send_position>
     7e8:	2f ef       	ldi	r18, 0xFF	; 255
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	9c e2       	ldi	r25, 0x2C	; 44
     7ee:	21 50       	subi	r18, 0x01	; 1
     7f0:	80 40       	sbci	r24, 0x00	; 0
     7f2:	90 40       	sbci	r25, 0x00	; 0
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <main+0x8e>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <main+0x98>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <main+0x9a>
     7fa:	8d b7       	in	r24, 0x3d	; 61
     7fc:	9e b7       	in	r25, 0x3e	; 62
     7fe:	08 96       	adiw	r24, 0x08	; 8
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	9e bf       	out	0x3e, r25	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	8d bf       	out	0x3d, r24	; 61
     80a:	ce cf       	rjmp	.-100    	; 0x7a8 <main+0x48>

0000080c <USART_Init>:
#include "uart.h"

void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
     80c:	9c bf       	out	0x3c, r25	; 60
	UBRR1L = (unsigned char)ubrr;
     80e:	80 b9       	out	0x00, r24	; 0
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     810:	88 e1       	ldi	r24, 0x18	; 24
     812:	81 b9       	out	0x01, r24	; 1
	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (1<<URSEL1)|(1<<USBS1)|(3<<UCSZ10);
     814:	8e e8       	ldi	r24, 0x8E	; 142
     816:	8c bf       	out	0x3c, r24	; 60
     818:	08 95       	ret

0000081a <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) );
     81a:	15 9b       	sbis	0x02, 5	; 2
     81c:	fe cf       	rjmp	.-4      	; 0x81a <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR1 = data;
     81e:	83 b9       	out	0x03, r24	; 3
     820:	08 95       	ret

00000822 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) );
     822:	17 9b       	sbis	0x02, 7	; 2
     824:	fe cf       	rjmp	.-4      	; 0x822 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR1;
     826:	83 b1       	in	r24, 0x03	; 3
     828:	08 95       	ret

0000082a <__subsf3>:
     82a:	50 58       	subi	r21, 0x80	; 128

0000082c <__addsf3>:
     82c:	bb 27       	eor	r27, r27
     82e:	aa 27       	eor	r26, r26
     830:	0e 94 2d 04 	call	0x85a	; 0x85a <__addsf3x>
     834:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_round>
     838:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_pscA>
     83c:	38 f0       	brcs	.+14     	; 0x84c <__addsf3+0x20>
     83e:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_pscB>
     842:	20 f0       	brcs	.+8      	; 0x84c <__addsf3+0x20>
     844:	39 f4       	brne	.+14     	; 0x854 <__addsf3+0x28>
     846:	9f 3f       	cpi	r25, 0xFF	; 255
     848:	19 f4       	brne	.+6      	; 0x850 <__addsf3+0x24>
     84a:	26 f4       	brtc	.+8      	; 0x854 <__addsf3+0x28>
     84c:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_nan>
     850:	0e f4       	brtc	.+2      	; 0x854 <__addsf3+0x28>
     852:	e0 95       	com	r30
     854:	e7 fb       	bst	r30, 7
     856:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_inf>

0000085a <__addsf3x>:
     85a:	e9 2f       	mov	r30, r25
     85c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_split3>
     860:	58 f3       	brcs	.-42     	; 0x838 <__addsf3+0xc>
     862:	ba 17       	cp	r27, r26
     864:	62 07       	cpc	r22, r18
     866:	73 07       	cpc	r23, r19
     868:	84 07       	cpc	r24, r20
     86a:	95 07       	cpc	r25, r21
     86c:	20 f0       	brcs	.+8      	; 0x876 <__addsf3x+0x1c>
     86e:	79 f4       	brne	.+30     	; 0x88e <__addsf3x+0x34>
     870:	a6 f5       	brtc	.+104    	; 0x8da <__addsf3x+0x80>
     872:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_zero>
     876:	0e f4       	brtc	.+2      	; 0x87a <__addsf3x+0x20>
     878:	e0 95       	com	r30
     87a:	0b 2e       	mov	r0, r27
     87c:	ba 2f       	mov	r27, r26
     87e:	a0 2d       	mov	r26, r0
     880:	0b 01       	movw	r0, r22
     882:	b9 01       	movw	r22, r18
     884:	90 01       	movw	r18, r0
     886:	0c 01       	movw	r0, r24
     888:	ca 01       	movw	r24, r20
     88a:	a0 01       	movw	r20, r0
     88c:	11 24       	eor	r1, r1
     88e:	ff 27       	eor	r31, r31
     890:	59 1b       	sub	r21, r25
     892:	99 f0       	breq	.+38     	; 0x8ba <__addsf3x+0x60>
     894:	59 3f       	cpi	r21, 0xF9	; 249
     896:	50 f4       	brcc	.+20     	; 0x8ac <__addsf3x+0x52>
     898:	50 3e       	cpi	r21, 0xE0	; 224
     89a:	68 f1       	brcs	.+90     	; 0x8f6 <__addsf3x+0x9c>
     89c:	1a 16       	cp	r1, r26
     89e:	f0 40       	sbci	r31, 0x00	; 0
     8a0:	a2 2f       	mov	r26, r18
     8a2:	23 2f       	mov	r18, r19
     8a4:	34 2f       	mov	r19, r20
     8a6:	44 27       	eor	r20, r20
     8a8:	58 5f       	subi	r21, 0xF8	; 248
     8aa:	f3 cf       	rjmp	.-26     	; 0x892 <__addsf3x+0x38>
     8ac:	46 95       	lsr	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	a7 95       	ror	r26
     8b4:	f0 40       	sbci	r31, 0x00	; 0
     8b6:	53 95       	inc	r21
     8b8:	c9 f7       	brne	.-14     	; 0x8ac <__addsf3x+0x52>
     8ba:	7e f4       	brtc	.+30     	; 0x8da <__addsf3x+0x80>
     8bc:	1f 16       	cp	r1, r31
     8be:	ba 0b       	sbc	r27, r26
     8c0:	62 0b       	sbc	r22, r18
     8c2:	73 0b       	sbc	r23, r19
     8c4:	84 0b       	sbc	r24, r20
     8c6:	ba f0       	brmi	.+46     	; 0x8f6 <__addsf3x+0x9c>
     8c8:	91 50       	subi	r25, 0x01	; 1
     8ca:	a1 f0       	breq	.+40     	; 0x8f4 <__addsf3x+0x9a>
     8cc:	ff 0f       	add	r31, r31
     8ce:	bb 1f       	adc	r27, r27
     8d0:	66 1f       	adc	r22, r22
     8d2:	77 1f       	adc	r23, r23
     8d4:	88 1f       	adc	r24, r24
     8d6:	c2 f7       	brpl	.-16     	; 0x8c8 <__addsf3x+0x6e>
     8d8:	0e c0       	rjmp	.+28     	; 0x8f6 <__addsf3x+0x9c>
     8da:	ba 0f       	add	r27, r26
     8dc:	62 1f       	adc	r22, r18
     8de:	73 1f       	adc	r23, r19
     8e0:	84 1f       	adc	r24, r20
     8e2:	48 f4       	brcc	.+18     	; 0x8f6 <__addsf3x+0x9c>
     8e4:	87 95       	ror	r24
     8e6:	77 95       	ror	r23
     8e8:	67 95       	ror	r22
     8ea:	b7 95       	ror	r27
     8ec:	f7 95       	ror	r31
     8ee:	9e 3f       	cpi	r25, 0xFE	; 254
     8f0:	08 f0       	brcs	.+2      	; 0x8f4 <__addsf3x+0x9a>
     8f2:	b0 cf       	rjmp	.-160    	; 0x854 <__addsf3+0x28>
     8f4:	93 95       	inc	r25
     8f6:	88 0f       	add	r24, r24
     8f8:	08 f0       	brcs	.+2      	; 0x8fc <__addsf3x+0xa2>
     8fa:	99 27       	eor	r25, r25
     8fc:	ee 0f       	add	r30, r30
     8fe:	97 95       	ror	r25
     900:	87 95       	ror	r24
     902:	08 95       	ret

00000904 <__divsf3>:
     904:	0e 94 96 04 	call	0x92c	; 0x92c <__divsf3x>
     908:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_round>
     90c:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_pscB>
     910:	58 f0       	brcs	.+22     	; 0x928 <__divsf3+0x24>
     912:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_pscA>
     916:	40 f0       	brcs	.+16     	; 0x928 <__divsf3+0x24>
     918:	29 f4       	brne	.+10     	; 0x924 <__divsf3+0x20>
     91a:	5f 3f       	cpi	r21, 0xFF	; 255
     91c:	29 f0       	breq	.+10     	; 0x928 <__divsf3+0x24>
     91e:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_inf>
     922:	51 11       	cpse	r21, r1
     924:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_szero>
     928:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_nan>

0000092c <__divsf3x>:
     92c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_split3>
     930:	68 f3       	brcs	.-38     	; 0x90c <__divsf3+0x8>

00000932 <__divsf3_pse>:
     932:	99 23       	and	r25, r25
     934:	b1 f3       	breq	.-20     	; 0x922 <__divsf3+0x1e>
     936:	55 23       	and	r21, r21
     938:	91 f3       	breq	.-28     	; 0x91e <__divsf3+0x1a>
     93a:	95 1b       	sub	r25, r21
     93c:	55 0b       	sbc	r21, r21
     93e:	bb 27       	eor	r27, r27
     940:	aa 27       	eor	r26, r26
     942:	62 17       	cp	r22, r18
     944:	73 07       	cpc	r23, r19
     946:	84 07       	cpc	r24, r20
     948:	38 f0       	brcs	.+14     	; 0x958 <__divsf3_pse+0x26>
     94a:	9f 5f       	subi	r25, 0xFF	; 255
     94c:	5f 4f       	sbci	r21, 0xFF	; 255
     94e:	22 0f       	add	r18, r18
     950:	33 1f       	adc	r19, r19
     952:	44 1f       	adc	r20, r20
     954:	aa 1f       	adc	r26, r26
     956:	a9 f3       	breq	.-22     	; 0x942 <__divsf3_pse+0x10>
     958:	35 d0       	rcall	.+106    	; 0x9c4 <__divsf3_pse+0x92>
     95a:	0e 2e       	mov	r0, r30
     95c:	3a f0       	brmi	.+14     	; 0x96c <__divsf3_pse+0x3a>
     95e:	e0 e8       	ldi	r30, 0x80	; 128
     960:	32 d0       	rcall	.+100    	; 0x9c6 <__divsf3_pse+0x94>
     962:	91 50       	subi	r25, 0x01	; 1
     964:	50 40       	sbci	r21, 0x00	; 0
     966:	e6 95       	lsr	r30
     968:	00 1c       	adc	r0, r0
     96a:	ca f7       	brpl	.-14     	; 0x95e <__divsf3_pse+0x2c>
     96c:	2b d0       	rcall	.+86     	; 0x9c4 <__divsf3_pse+0x92>
     96e:	fe 2f       	mov	r31, r30
     970:	29 d0       	rcall	.+82     	; 0x9c4 <__divsf3_pse+0x92>
     972:	66 0f       	add	r22, r22
     974:	77 1f       	adc	r23, r23
     976:	88 1f       	adc	r24, r24
     978:	bb 1f       	adc	r27, r27
     97a:	26 17       	cp	r18, r22
     97c:	37 07       	cpc	r19, r23
     97e:	48 07       	cpc	r20, r24
     980:	ab 07       	cpc	r26, r27
     982:	b0 e8       	ldi	r27, 0x80	; 128
     984:	09 f0       	breq	.+2      	; 0x988 <__divsf3_pse+0x56>
     986:	bb 0b       	sbc	r27, r27
     988:	80 2d       	mov	r24, r0
     98a:	bf 01       	movw	r22, r30
     98c:	ff 27       	eor	r31, r31
     98e:	93 58       	subi	r25, 0x83	; 131
     990:	5f 4f       	sbci	r21, 0xFF	; 255
     992:	3a f0       	brmi	.+14     	; 0x9a2 <__divsf3_pse+0x70>
     994:	9e 3f       	cpi	r25, 0xFE	; 254
     996:	51 05       	cpc	r21, r1
     998:	78 f0       	brcs	.+30     	; 0x9b8 <__divsf3_pse+0x86>
     99a:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_inf>
     99e:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_szero>
     9a2:	5f 3f       	cpi	r21, 0xFF	; 255
     9a4:	e4 f3       	brlt	.-8      	; 0x99e <__divsf3_pse+0x6c>
     9a6:	98 3e       	cpi	r25, 0xE8	; 232
     9a8:	d4 f3       	brlt	.-12     	; 0x99e <__divsf3_pse+0x6c>
     9aa:	86 95       	lsr	r24
     9ac:	77 95       	ror	r23
     9ae:	67 95       	ror	r22
     9b0:	b7 95       	ror	r27
     9b2:	f7 95       	ror	r31
     9b4:	9f 5f       	subi	r25, 0xFF	; 255
     9b6:	c9 f7       	brne	.-14     	; 0x9aa <__divsf3_pse+0x78>
     9b8:	88 0f       	add	r24, r24
     9ba:	91 1d       	adc	r25, r1
     9bc:	96 95       	lsr	r25
     9be:	87 95       	ror	r24
     9c0:	97 f9       	bld	r25, 7
     9c2:	08 95       	ret
     9c4:	e1 e0       	ldi	r30, 0x01	; 1
     9c6:	66 0f       	add	r22, r22
     9c8:	77 1f       	adc	r23, r23
     9ca:	88 1f       	adc	r24, r24
     9cc:	bb 1f       	adc	r27, r27
     9ce:	62 17       	cp	r22, r18
     9d0:	73 07       	cpc	r23, r19
     9d2:	84 07       	cpc	r24, r20
     9d4:	ba 07       	cpc	r27, r26
     9d6:	20 f0       	brcs	.+8      	; 0x9e0 <__divsf3_pse+0xae>
     9d8:	62 1b       	sub	r22, r18
     9da:	73 0b       	sbc	r23, r19
     9dc:	84 0b       	sbc	r24, r20
     9de:	ba 0b       	sbc	r27, r26
     9e0:	ee 1f       	adc	r30, r30
     9e2:	88 f7       	brcc	.-30     	; 0x9c6 <__divsf3_pse+0x94>
     9e4:	e0 95       	com	r30
     9e6:	08 95       	ret

000009e8 <__fixsfsi>:
     9e8:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fixunssfsi>
     9ec:	68 94       	set
     9ee:	b1 11       	cpse	r27, r1
     9f0:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_szero>
     9f4:	08 95       	ret

000009f6 <__fixunssfsi>:
     9f6:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_splitA>
     9fa:	88 f0       	brcs	.+34     	; 0xa1e <__fixunssfsi+0x28>
     9fc:	9f 57       	subi	r25, 0x7F	; 127
     9fe:	98 f0       	brcs	.+38     	; 0xa26 <__fixunssfsi+0x30>
     a00:	b9 2f       	mov	r27, r25
     a02:	99 27       	eor	r25, r25
     a04:	b7 51       	subi	r27, 0x17	; 23
     a06:	b0 f0       	brcs	.+44     	; 0xa34 <__fixunssfsi+0x3e>
     a08:	e1 f0       	breq	.+56     	; 0xa42 <__fixunssfsi+0x4c>
     a0a:	66 0f       	add	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	88 1f       	adc	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	1a f0       	brmi	.+6      	; 0xa1a <__fixunssfsi+0x24>
     a14:	ba 95       	dec	r27
     a16:	c9 f7       	brne	.-14     	; 0xa0a <__fixunssfsi+0x14>
     a18:	14 c0       	rjmp	.+40     	; 0xa42 <__fixunssfsi+0x4c>
     a1a:	b1 30       	cpi	r27, 0x01	; 1
     a1c:	91 f0       	breq	.+36     	; 0xa42 <__fixunssfsi+0x4c>
     a1e:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_zero>
     a22:	b1 e0       	ldi	r27, 0x01	; 1
     a24:	08 95       	ret
     a26:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_zero>
     a2a:	67 2f       	mov	r22, r23
     a2c:	78 2f       	mov	r23, r24
     a2e:	88 27       	eor	r24, r24
     a30:	b8 5f       	subi	r27, 0xF8	; 248
     a32:	39 f0       	breq	.+14     	; 0xa42 <__fixunssfsi+0x4c>
     a34:	b9 3f       	cpi	r27, 0xF9	; 249
     a36:	cc f3       	brlt	.-14     	; 0xa2a <__fixunssfsi+0x34>
     a38:	86 95       	lsr	r24
     a3a:	77 95       	ror	r23
     a3c:	67 95       	ror	r22
     a3e:	b3 95       	inc	r27
     a40:	d9 f7       	brne	.-10     	; 0xa38 <__fixunssfsi+0x42>
     a42:	3e f4       	brtc	.+14     	; 0xa52 <__fixunssfsi+0x5c>
     a44:	90 95       	com	r25
     a46:	80 95       	com	r24
     a48:	70 95       	com	r23
     a4a:	61 95       	neg	r22
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	8f 4f       	sbci	r24, 0xFF	; 255
     a50:	9f 4f       	sbci	r25, 0xFF	; 255
     a52:	08 95       	ret

00000a54 <__floatunsisf>:
     a54:	e8 94       	clt
     a56:	09 c0       	rjmp	.+18     	; 0xa6a <__floatsisf+0x12>

00000a58 <__floatsisf>:
     a58:	97 fb       	bst	r25, 7
     a5a:	3e f4       	brtc	.+14     	; 0xa6a <__floatsisf+0x12>
     a5c:	90 95       	com	r25
     a5e:	80 95       	com	r24
     a60:	70 95       	com	r23
     a62:	61 95       	neg	r22
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	8f 4f       	sbci	r24, 0xFF	; 255
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	99 23       	and	r25, r25
     a6c:	a9 f0       	breq	.+42     	; 0xa98 <__floatsisf+0x40>
     a6e:	f9 2f       	mov	r31, r25
     a70:	96 e9       	ldi	r25, 0x96	; 150
     a72:	bb 27       	eor	r27, r27
     a74:	93 95       	inc	r25
     a76:	f6 95       	lsr	r31
     a78:	87 95       	ror	r24
     a7a:	77 95       	ror	r23
     a7c:	67 95       	ror	r22
     a7e:	b7 95       	ror	r27
     a80:	f1 11       	cpse	r31, r1
     a82:	f8 cf       	rjmp	.-16     	; 0xa74 <__floatsisf+0x1c>
     a84:	fa f4       	brpl	.+62     	; 0xac4 <__floatsisf+0x6c>
     a86:	bb 0f       	add	r27, r27
     a88:	11 f4       	brne	.+4      	; 0xa8e <__floatsisf+0x36>
     a8a:	60 ff       	sbrs	r22, 0
     a8c:	1b c0       	rjmp	.+54     	; 0xac4 <__floatsisf+0x6c>
     a8e:	6f 5f       	subi	r22, 0xFF	; 255
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	8f 4f       	sbci	r24, 0xFF	; 255
     a94:	9f 4f       	sbci	r25, 0xFF	; 255
     a96:	16 c0       	rjmp	.+44     	; 0xac4 <__floatsisf+0x6c>
     a98:	88 23       	and	r24, r24
     a9a:	11 f0       	breq	.+4      	; 0xaa0 <__floatsisf+0x48>
     a9c:	96 e9       	ldi	r25, 0x96	; 150
     a9e:	11 c0       	rjmp	.+34     	; 0xac2 <__floatsisf+0x6a>
     aa0:	77 23       	and	r23, r23
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatsisf+0x54>
     aa4:	9e e8       	ldi	r25, 0x8E	; 142
     aa6:	87 2f       	mov	r24, r23
     aa8:	76 2f       	mov	r23, r22
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__floatsisf+0x5e>
     aac:	66 23       	and	r22, r22
     aae:	71 f0       	breq	.+28     	; 0xacc <__floatsisf+0x74>
     ab0:	96 e8       	ldi	r25, 0x86	; 134
     ab2:	86 2f       	mov	r24, r22
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	2a f0       	brmi	.+10     	; 0xac4 <__floatsisf+0x6c>
     aba:	9a 95       	dec	r25
     abc:	66 0f       	add	r22, r22
     abe:	77 1f       	adc	r23, r23
     ac0:	88 1f       	adc	r24, r24
     ac2:	da f7       	brpl	.-10     	; 0xaba <__floatsisf+0x62>
     ac4:	88 0f       	add	r24, r24
     ac6:	96 95       	lsr	r25
     ac8:	87 95       	ror	r24
     aca:	97 f9       	bld	r25, 7
     acc:	08 95       	ret

00000ace <__fp_inf>:
     ace:	97 f9       	bld	r25, 7
     ad0:	9f 67       	ori	r25, 0x7F	; 127
     ad2:	80 e8       	ldi	r24, 0x80	; 128
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	08 95       	ret

00000ada <__fp_nan>:
     ada:	9f ef       	ldi	r25, 0xFF	; 255
     adc:	80 ec       	ldi	r24, 0xC0	; 192
     ade:	08 95       	ret

00000ae0 <__fp_pscA>:
     ae0:	00 24       	eor	r0, r0
     ae2:	0a 94       	dec	r0
     ae4:	16 16       	cp	r1, r22
     ae6:	17 06       	cpc	r1, r23
     ae8:	18 06       	cpc	r1, r24
     aea:	09 06       	cpc	r0, r25
     aec:	08 95       	ret

00000aee <__fp_pscB>:
     aee:	00 24       	eor	r0, r0
     af0:	0a 94       	dec	r0
     af2:	12 16       	cp	r1, r18
     af4:	13 06       	cpc	r1, r19
     af6:	14 06       	cpc	r1, r20
     af8:	05 06       	cpc	r0, r21
     afa:	08 95       	ret

00000afc <__fp_round>:
     afc:	09 2e       	mov	r0, r25
     afe:	03 94       	inc	r0
     b00:	00 0c       	add	r0, r0
     b02:	11 f4       	brne	.+4      	; 0xb08 <__fp_round+0xc>
     b04:	88 23       	and	r24, r24
     b06:	52 f0       	brmi	.+20     	; 0xb1c <__fp_round+0x20>
     b08:	bb 0f       	add	r27, r27
     b0a:	40 f4       	brcc	.+16     	; 0xb1c <__fp_round+0x20>
     b0c:	bf 2b       	or	r27, r31
     b0e:	11 f4       	brne	.+4      	; 0xb14 <__fp_round+0x18>
     b10:	60 ff       	sbrs	r22, 0
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__fp_round+0x20>
     b14:	6f 5f       	subi	r22, 0xFF	; 255
     b16:	7f 4f       	sbci	r23, 0xFF	; 255
     b18:	8f 4f       	sbci	r24, 0xFF	; 255
     b1a:	9f 4f       	sbci	r25, 0xFF	; 255
     b1c:	08 95       	ret

00000b1e <__fp_split3>:
     b1e:	57 fd       	sbrc	r21, 7
     b20:	90 58       	subi	r25, 0x80	; 128
     b22:	44 0f       	add	r20, r20
     b24:	55 1f       	adc	r21, r21
     b26:	59 f0       	breq	.+22     	; 0xb3e <__fp_splitA+0x10>
     b28:	5f 3f       	cpi	r21, 0xFF	; 255
     b2a:	71 f0       	breq	.+28     	; 0xb48 <__fp_splitA+0x1a>
     b2c:	47 95       	ror	r20

00000b2e <__fp_splitA>:
     b2e:	88 0f       	add	r24, r24
     b30:	97 fb       	bst	r25, 7
     b32:	99 1f       	adc	r25, r25
     b34:	61 f0       	breq	.+24     	; 0xb4e <__fp_splitA+0x20>
     b36:	9f 3f       	cpi	r25, 0xFF	; 255
     b38:	79 f0       	breq	.+30     	; 0xb58 <__fp_splitA+0x2a>
     b3a:	87 95       	ror	r24
     b3c:	08 95       	ret
     b3e:	12 16       	cp	r1, r18
     b40:	13 06       	cpc	r1, r19
     b42:	14 06       	cpc	r1, r20
     b44:	55 1f       	adc	r21, r21
     b46:	f2 cf       	rjmp	.-28     	; 0xb2c <__fp_split3+0xe>
     b48:	46 95       	lsr	r20
     b4a:	f1 df       	rcall	.-30     	; 0xb2e <__fp_splitA>
     b4c:	08 c0       	rjmp	.+16     	; 0xb5e <__fp_splitA+0x30>
     b4e:	16 16       	cp	r1, r22
     b50:	17 06       	cpc	r1, r23
     b52:	18 06       	cpc	r1, r24
     b54:	99 1f       	adc	r25, r25
     b56:	f1 cf       	rjmp	.-30     	; 0xb3a <__fp_splitA+0xc>
     b58:	86 95       	lsr	r24
     b5a:	71 05       	cpc	r23, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	08 94       	sec
     b60:	08 95       	ret

00000b62 <__fp_zero>:
     b62:	e8 94       	clt

00000b64 <__fp_szero>:
     b64:	bb 27       	eor	r27, r27
     b66:	66 27       	eor	r22, r22
     b68:	77 27       	eor	r23, r23
     b6a:	cb 01       	movw	r24, r22
     b6c:	97 f9       	bld	r25, 7
     b6e:	08 95       	ret

00000b70 <__mulsf3>:
     b70:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsf3x>
     b74:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_round>
     b78:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_pscA>
     b7c:	38 f0       	brcs	.+14     	; 0xb8c <__mulsf3+0x1c>
     b7e:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_pscB>
     b82:	20 f0       	brcs	.+8      	; 0xb8c <__mulsf3+0x1c>
     b84:	95 23       	and	r25, r21
     b86:	11 f0       	breq	.+4      	; 0xb8c <__mulsf3+0x1c>
     b88:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_inf>
     b8c:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_nan>
     b90:	11 24       	eor	r1, r1
     b92:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_szero>

00000b96 <__mulsf3x>:
     b96:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_split3>
     b9a:	70 f3       	brcs	.-36     	; 0xb78 <__mulsf3+0x8>

00000b9c <__mulsf3_pse>:
     b9c:	95 9f       	mul	r25, r21
     b9e:	c1 f3       	breq	.-16     	; 0xb90 <__mulsf3+0x20>
     ba0:	95 0f       	add	r25, r21
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	55 1f       	adc	r21, r21
     ba6:	62 9f       	mul	r22, r18
     ba8:	f0 01       	movw	r30, r0
     baa:	72 9f       	mul	r23, r18
     bac:	bb 27       	eor	r27, r27
     bae:	f0 0d       	add	r31, r0
     bb0:	b1 1d       	adc	r27, r1
     bb2:	63 9f       	mul	r22, r19
     bb4:	aa 27       	eor	r26, r26
     bb6:	f0 0d       	add	r31, r0
     bb8:	b1 1d       	adc	r27, r1
     bba:	aa 1f       	adc	r26, r26
     bbc:	64 9f       	mul	r22, r20
     bbe:	66 27       	eor	r22, r22
     bc0:	b0 0d       	add	r27, r0
     bc2:	a1 1d       	adc	r26, r1
     bc4:	66 1f       	adc	r22, r22
     bc6:	82 9f       	mul	r24, r18
     bc8:	22 27       	eor	r18, r18
     bca:	b0 0d       	add	r27, r0
     bcc:	a1 1d       	adc	r26, r1
     bce:	62 1f       	adc	r22, r18
     bd0:	73 9f       	mul	r23, r19
     bd2:	b0 0d       	add	r27, r0
     bd4:	a1 1d       	adc	r26, r1
     bd6:	62 1f       	adc	r22, r18
     bd8:	83 9f       	mul	r24, r19
     bda:	a0 0d       	add	r26, r0
     bdc:	61 1d       	adc	r22, r1
     bde:	22 1f       	adc	r18, r18
     be0:	74 9f       	mul	r23, r20
     be2:	33 27       	eor	r19, r19
     be4:	a0 0d       	add	r26, r0
     be6:	61 1d       	adc	r22, r1
     be8:	23 1f       	adc	r18, r19
     bea:	84 9f       	mul	r24, r20
     bec:	60 0d       	add	r22, r0
     bee:	21 1d       	adc	r18, r1
     bf0:	82 2f       	mov	r24, r18
     bf2:	76 2f       	mov	r23, r22
     bf4:	6a 2f       	mov	r22, r26
     bf6:	11 24       	eor	r1, r1
     bf8:	9f 57       	subi	r25, 0x7F	; 127
     bfa:	50 40       	sbci	r21, 0x00	; 0
     bfc:	9a f0       	brmi	.+38     	; 0xc24 <__mulsf3_pse+0x88>
     bfe:	f1 f0       	breq	.+60     	; 0xc3c <__mulsf3_pse+0xa0>
     c00:	88 23       	and	r24, r24
     c02:	4a f0       	brmi	.+18     	; 0xc16 <__mulsf3_pse+0x7a>
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	bb 1f       	adc	r27, r27
     c0a:	66 1f       	adc	r22, r22
     c0c:	77 1f       	adc	r23, r23
     c0e:	88 1f       	adc	r24, r24
     c10:	91 50       	subi	r25, 0x01	; 1
     c12:	50 40       	sbci	r21, 0x00	; 0
     c14:	a9 f7       	brne	.-22     	; 0xc00 <__mulsf3_pse+0x64>
     c16:	9e 3f       	cpi	r25, 0xFE	; 254
     c18:	51 05       	cpc	r21, r1
     c1a:	80 f0       	brcs	.+32     	; 0xc3c <__mulsf3_pse+0xa0>
     c1c:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_inf>
     c20:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_szero>
     c24:	5f 3f       	cpi	r21, 0xFF	; 255
     c26:	e4 f3       	brlt	.-8      	; 0xc20 <__mulsf3_pse+0x84>
     c28:	98 3e       	cpi	r25, 0xE8	; 232
     c2a:	d4 f3       	brlt	.-12     	; 0xc20 <__mulsf3_pse+0x84>
     c2c:	86 95       	lsr	r24
     c2e:	77 95       	ror	r23
     c30:	67 95       	ror	r22
     c32:	b7 95       	ror	r27
     c34:	f7 95       	ror	r31
     c36:	e7 95       	ror	r30
     c38:	9f 5f       	subi	r25, 0xFF	; 255
     c3a:	c1 f7       	brne	.-16     	; 0xc2c <__mulsf3_pse+0x90>
     c3c:	fe 2b       	or	r31, r30
     c3e:	88 0f       	add	r24, r24
     c40:	91 1d       	adc	r25, r1
     c42:	96 95       	lsr	r25
     c44:	87 95       	ror	r24
     c46:	97 f9       	bld	r25, 7
     c48:	08 95       	ret

00000c4a <__divmodhi4>:
     c4a:	97 fb       	bst	r25, 7
     c4c:	07 2e       	mov	r0, r23
     c4e:	16 f4       	brtc	.+4      	; 0xc54 <__divmodhi4+0xa>
     c50:	00 94       	com	r0
     c52:	07 d0       	rcall	.+14     	; 0xc62 <__divmodhi4_neg1>
     c54:	77 fd       	sbrc	r23, 7
     c56:	09 d0       	rcall	.+18     	; 0xc6a <__divmodhi4_neg2>
     c58:	0e 94 39 06 	call	0xc72	; 0xc72 <__udivmodhi4>
     c5c:	07 fc       	sbrc	r0, 7
     c5e:	05 d0       	rcall	.+10     	; 0xc6a <__divmodhi4_neg2>
     c60:	3e f4       	brtc	.+14     	; 0xc70 <__divmodhi4_exit>

00000c62 <__divmodhi4_neg1>:
     c62:	90 95       	com	r25
     c64:	81 95       	neg	r24
     c66:	9f 4f       	sbci	r25, 0xFF	; 255
     c68:	08 95       	ret

00000c6a <__divmodhi4_neg2>:
     c6a:	70 95       	com	r23
     c6c:	61 95       	neg	r22
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255

00000c70 <__divmodhi4_exit>:
     c70:	08 95       	ret

00000c72 <__udivmodhi4>:
     c72:	aa 1b       	sub	r26, r26
     c74:	bb 1b       	sub	r27, r27
     c76:	51 e1       	ldi	r21, 0x11	; 17
     c78:	07 c0       	rjmp	.+14     	; 0xc88 <__udivmodhi4_ep>

00000c7a <__udivmodhi4_loop>:
     c7a:	aa 1f       	adc	r26, r26
     c7c:	bb 1f       	adc	r27, r27
     c7e:	a6 17       	cp	r26, r22
     c80:	b7 07       	cpc	r27, r23
     c82:	10 f0       	brcs	.+4      	; 0xc88 <__udivmodhi4_ep>
     c84:	a6 1b       	sub	r26, r22
     c86:	b7 0b       	sbc	r27, r23

00000c88 <__udivmodhi4_ep>:
     c88:	88 1f       	adc	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	5a 95       	dec	r21
     c8e:	a9 f7       	brne	.-22     	; 0xc7a <__udivmodhi4_loop>
     c90:	80 95       	com	r24
     c92:	90 95       	com	r25
     c94:	bc 01       	movw	r22, r24
     c96:	cd 01       	movw	r24, r26
     c98:	08 95       	ret

00000c9a <fdevopen>:
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	31 f4       	brne	.+12     	; 0xcb2 <fdevopen+0x18>
     ca6:	61 15       	cp	r22, r1
     ca8:	71 05       	cpc	r23, r1
     caa:	19 f4       	brne	.+6      	; 0xcb2 <fdevopen+0x18>
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	3a c0       	rjmp	.+116    	; 0xd26 <fdevopen+0x8c>
     cb2:	8b 01       	movw	r16, r22
     cb4:	ec 01       	movw	r28, r24
     cb6:	6e e0       	ldi	r22, 0x0E	; 14
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 bf 08 	call	0x117e	; 0x117e <calloc>
     cc2:	fc 01       	movw	r30, r24
     cc4:	89 2b       	or	r24, r25
     cc6:	91 f3       	breq	.-28     	; 0xcac <fdevopen+0x12>
     cc8:	80 e8       	ldi	r24, 0x80	; 128
     cca:	83 83       	std	Z+3, r24	; 0x03
     ccc:	01 15       	cp	r16, r1
     cce:	11 05       	cpc	r17, r1
     cd0:	71 f0       	breq	.+28     	; 0xcee <fdevopen+0x54>
     cd2:	13 87       	std	Z+11, r17	; 0x0b
     cd4:	02 87       	std	Z+10, r16	; 0x0a
     cd6:	81 e8       	ldi	r24, 0x81	; 129
     cd8:	83 83       	std	Z+3, r24	; 0x03
     cda:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
     cde:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <__data_end+0x1>
     ce2:	89 2b       	or	r24, r25
     ce4:	21 f4       	brne	.+8      	; 0xcee <fdevopen+0x54>
     ce6:	f0 93 23 02 	sts	0x0223, r31	; 0x800223 <__data_end+0x1>
     cea:	e0 93 22 02 	sts	0x0222, r30	; 0x800222 <__data_end>
     cee:	20 97       	sbiw	r28, 0x00	; 0
     cf0:	c9 f0       	breq	.+50     	; 0xd24 <fdevopen+0x8a>
     cf2:	d1 87       	std	Z+9, r29	; 0x09
     cf4:	c0 87       	std	Z+8, r28	; 0x08
     cf6:	83 81       	ldd	r24, Z+3	; 0x03
     cf8:	82 60       	ori	r24, 0x02	; 2
     cfa:	83 83       	std	Z+3, r24	; 0x03
     cfc:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end+0x2>
     d00:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__data_end+0x3>
     d04:	89 2b       	or	r24, r25
     d06:	71 f4       	brne	.+28     	; 0xd24 <fdevopen+0x8a>
     d08:	f0 93 25 02 	sts	0x0225, r31	; 0x800225 <__data_end+0x3>
     d0c:	e0 93 24 02 	sts	0x0224, r30	; 0x800224 <__data_end+0x2>
     d10:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end+0x4>
     d14:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <__data_end+0x5>
     d18:	89 2b       	or	r24, r25
     d1a:	21 f4       	brne	.+8      	; 0xd24 <fdevopen+0x8a>
     d1c:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <__data_end+0x5>
     d20:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <__data_end+0x4>
     d24:	cf 01       	movw	r24, r30
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <printf>:
     d30:	a0 e0       	ldi	r26, 0x00	; 0
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ee e9       	ldi	r30, 0x9E	; 158
     d36:	f6 e0       	ldi	r31, 0x06	; 6
     d38:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__prologue_saves__+0x20>
     d3c:	ae 01       	movw	r20, r28
     d3e:	4b 5f       	subi	r20, 0xFB	; 251
     d40:	5f 4f       	sbci	r21, 0xFF	; 255
     d42:	fa 01       	movw	r30, r20
     d44:	61 91       	ld	r22, Z+
     d46:	71 91       	ld	r23, Z+
     d48:	af 01       	movw	r20, r30
     d4a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end+0x2>
     d4e:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__data_end+0x3>
     d52:	0e 94 de 06 	call	0xdbc	; 0xdbc <vfprintf>
     d56:	e2 e0       	ldi	r30, 0x02	; 2
     d58:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__epilogue_restores__+0x20>

00000d5c <puts>:
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <__data_end+0x2>
     d68:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <__data_end+0x3>
     d6c:	23 81       	ldd	r18, Z+3	; 0x03
     d6e:	21 ff       	sbrs	r18, 1
     d70:	1b c0       	rjmp	.+54     	; 0xda8 <puts+0x4c>
     d72:	8c 01       	movw	r16, r24
     d74:	d0 e0       	ldi	r29, 0x00	; 0
     d76:	c0 e0       	ldi	r28, 0x00	; 0
     d78:	f8 01       	movw	r30, r16
     d7a:	81 91       	ld	r24, Z+
     d7c:	8f 01       	movw	r16, r30
     d7e:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__data_end+0x2>
     d82:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__data_end+0x3>
     d86:	db 01       	movw	r26, r22
     d88:	18 96       	adiw	r26, 0x08	; 8
     d8a:	ed 91       	ld	r30, X+
     d8c:	fc 91       	ld	r31, X
     d8e:	19 97       	sbiw	r26, 0x09	; 9
     d90:	88 23       	and	r24, r24
     d92:	31 f0       	breq	.+12     	; 0xda0 <puts+0x44>
     d94:	09 95       	icall
     d96:	89 2b       	or	r24, r25
     d98:	79 f3       	breq	.-34     	; 0xd78 <puts+0x1c>
     d9a:	df ef       	ldi	r29, 0xFF	; 255
     d9c:	cf ef       	ldi	r28, 0xFF	; 255
     d9e:	ec cf       	rjmp	.-40     	; 0xd78 <puts+0x1c>
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	09 95       	icall
     da4:	89 2b       	or	r24, r25
     da6:	19 f0       	breq	.+6      	; 0xdae <puts+0x52>
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	9f ef       	ldi	r25, 0xFF	; 255
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <puts+0x56>
     dae:	8d 2f       	mov	r24, r29
     db0:	9c 2f       	mov	r25, r28
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	08 95       	ret

00000dbc <vfprintf>:
     dbc:	ab e0       	ldi	r26, 0x0B	; 11
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 ee       	ldi	r30, 0xE4	; 228
     dc2:	f6 e0       	ldi	r31, 0x06	; 6
     dc4:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__prologue_saves__>
     dc8:	6c 01       	movw	r12, r24
     dca:	7b 01       	movw	r14, r22
     dcc:	8a 01       	movw	r16, r20
     dce:	fc 01       	movw	r30, r24
     dd0:	17 82       	std	Z+7, r1	; 0x07
     dd2:	16 82       	std	Z+6, r1	; 0x06
     dd4:	83 81       	ldd	r24, Z+3	; 0x03
     dd6:	81 ff       	sbrs	r24, 1
     dd8:	cc c1       	rjmp	.+920    	; 0x1172 <vfprintf+0x3b6>
     dda:	ce 01       	movw	r24, r28
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	3c 01       	movw	r6, r24
     de0:	f6 01       	movw	r30, r12
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	f7 01       	movw	r30, r14
     de6:	93 fd       	sbrc	r25, 3
     de8:	85 91       	lpm	r24, Z+
     dea:	93 ff       	sbrs	r25, 3
     dec:	81 91       	ld	r24, Z+
     dee:	7f 01       	movw	r14, r30
     df0:	88 23       	and	r24, r24
     df2:	09 f4       	brne	.+2      	; 0xdf6 <vfprintf+0x3a>
     df4:	ba c1       	rjmp	.+884    	; 0x116a <vfprintf+0x3ae>
     df6:	85 32       	cpi	r24, 0x25	; 37
     df8:	39 f4       	brne	.+14     	; 0xe08 <vfprintf+0x4c>
     dfa:	93 fd       	sbrc	r25, 3
     dfc:	85 91       	lpm	r24, Z+
     dfe:	93 ff       	sbrs	r25, 3
     e00:	81 91       	ld	r24, Z+
     e02:	7f 01       	movw	r14, r30
     e04:	85 32       	cpi	r24, 0x25	; 37
     e06:	29 f4       	brne	.+10     	; 0xe12 <vfprintf+0x56>
     e08:	b6 01       	movw	r22, r12
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 19 0a 	call	0x1432	; 0x1432 <fputc>
     e10:	e7 cf       	rjmp	.-50     	; 0xde0 <vfprintf+0x24>
     e12:	91 2c       	mov	r9, r1
     e14:	21 2c       	mov	r2, r1
     e16:	31 2c       	mov	r3, r1
     e18:	ff e1       	ldi	r31, 0x1F	; 31
     e1a:	f3 15       	cp	r31, r3
     e1c:	d8 f0       	brcs	.+54     	; 0xe54 <vfprintf+0x98>
     e1e:	8b 32       	cpi	r24, 0x2B	; 43
     e20:	79 f0       	breq	.+30     	; 0xe40 <vfprintf+0x84>
     e22:	38 f4       	brcc	.+14     	; 0xe32 <vfprintf+0x76>
     e24:	80 32       	cpi	r24, 0x20	; 32
     e26:	79 f0       	breq	.+30     	; 0xe46 <vfprintf+0x8a>
     e28:	83 32       	cpi	r24, 0x23	; 35
     e2a:	a1 f4       	brne	.+40     	; 0xe54 <vfprintf+0x98>
     e2c:	23 2d       	mov	r18, r3
     e2e:	20 61       	ori	r18, 0x10	; 16
     e30:	1d c0       	rjmp	.+58     	; 0xe6c <vfprintf+0xb0>
     e32:	8d 32       	cpi	r24, 0x2D	; 45
     e34:	61 f0       	breq	.+24     	; 0xe4e <vfprintf+0x92>
     e36:	80 33       	cpi	r24, 0x30	; 48
     e38:	69 f4       	brne	.+26     	; 0xe54 <vfprintf+0x98>
     e3a:	23 2d       	mov	r18, r3
     e3c:	21 60       	ori	r18, 0x01	; 1
     e3e:	16 c0       	rjmp	.+44     	; 0xe6c <vfprintf+0xb0>
     e40:	83 2d       	mov	r24, r3
     e42:	82 60       	ori	r24, 0x02	; 2
     e44:	38 2e       	mov	r3, r24
     e46:	e3 2d       	mov	r30, r3
     e48:	e4 60       	ori	r30, 0x04	; 4
     e4a:	3e 2e       	mov	r3, r30
     e4c:	2a c0       	rjmp	.+84     	; 0xea2 <vfprintf+0xe6>
     e4e:	f3 2d       	mov	r31, r3
     e50:	f8 60       	ori	r31, 0x08	; 8
     e52:	1d c0       	rjmp	.+58     	; 0xe8e <vfprintf+0xd2>
     e54:	37 fc       	sbrc	r3, 7
     e56:	2d c0       	rjmp	.+90     	; 0xeb2 <vfprintf+0xf6>
     e58:	20 ed       	ldi	r18, 0xD0	; 208
     e5a:	28 0f       	add	r18, r24
     e5c:	2a 30       	cpi	r18, 0x0A	; 10
     e5e:	40 f0       	brcs	.+16     	; 0xe70 <vfprintf+0xb4>
     e60:	8e 32       	cpi	r24, 0x2E	; 46
     e62:	b9 f4       	brne	.+46     	; 0xe92 <vfprintf+0xd6>
     e64:	36 fc       	sbrc	r3, 6
     e66:	81 c1       	rjmp	.+770    	; 0x116a <vfprintf+0x3ae>
     e68:	23 2d       	mov	r18, r3
     e6a:	20 64       	ori	r18, 0x40	; 64
     e6c:	32 2e       	mov	r3, r18
     e6e:	19 c0       	rjmp	.+50     	; 0xea2 <vfprintf+0xe6>
     e70:	36 fe       	sbrs	r3, 6
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <vfprintf+0xc4>
     e74:	8a e0       	ldi	r24, 0x0A	; 10
     e76:	98 9e       	mul	r9, r24
     e78:	20 0d       	add	r18, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	92 2e       	mov	r9, r18
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <vfprintf+0xe6>
     e80:	ea e0       	ldi	r30, 0x0A	; 10
     e82:	2e 9e       	mul	r2, r30
     e84:	20 0d       	add	r18, r0
     e86:	11 24       	eor	r1, r1
     e88:	22 2e       	mov	r2, r18
     e8a:	f3 2d       	mov	r31, r3
     e8c:	f0 62       	ori	r31, 0x20	; 32
     e8e:	3f 2e       	mov	r3, r31
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <vfprintf+0xe6>
     e92:	8c 36       	cpi	r24, 0x6C	; 108
     e94:	21 f4       	brne	.+8      	; 0xe9e <vfprintf+0xe2>
     e96:	83 2d       	mov	r24, r3
     e98:	80 68       	ori	r24, 0x80	; 128
     e9a:	38 2e       	mov	r3, r24
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <vfprintf+0xe6>
     e9e:	88 36       	cpi	r24, 0x68	; 104
     ea0:	41 f4       	brne	.+16     	; 0xeb2 <vfprintf+0xf6>
     ea2:	f7 01       	movw	r30, r14
     ea4:	93 fd       	sbrc	r25, 3
     ea6:	85 91       	lpm	r24, Z+
     ea8:	93 ff       	sbrs	r25, 3
     eaa:	81 91       	ld	r24, Z+
     eac:	7f 01       	movw	r14, r30
     eae:	81 11       	cpse	r24, r1
     eb0:	b3 cf       	rjmp	.-154    	; 0xe18 <vfprintf+0x5c>
     eb2:	98 2f       	mov	r25, r24
     eb4:	9f 7d       	andi	r25, 0xDF	; 223
     eb6:	95 54       	subi	r25, 0x45	; 69
     eb8:	93 30       	cpi	r25, 0x03	; 3
     eba:	28 f4       	brcc	.+10     	; 0xec6 <vfprintf+0x10a>
     ebc:	0c 5f       	subi	r16, 0xFC	; 252
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	9f e3       	ldi	r25, 0x3F	; 63
     ec2:	99 83       	std	Y+1, r25	; 0x01
     ec4:	0d c0       	rjmp	.+26     	; 0xee0 <vfprintf+0x124>
     ec6:	83 36       	cpi	r24, 0x63	; 99
     ec8:	31 f0       	breq	.+12     	; 0xed6 <vfprintf+0x11a>
     eca:	83 37       	cpi	r24, 0x73	; 115
     ecc:	71 f0       	breq	.+28     	; 0xeea <vfprintf+0x12e>
     ece:	83 35       	cpi	r24, 0x53	; 83
     ed0:	09 f0       	breq	.+2      	; 0xed4 <vfprintf+0x118>
     ed2:	59 c0       	rjmp	.+178    	; 0xf86 <vfprintf+0x1ca>
     ed4:	21 c0       	rjmp	.+66     	; 0xf18 <vfprintf+0x15c>
     ed6:	f8 01       	movw	r30, r16
     ed8:	80 81       	ld	r24, Z
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	0e 5f       	subi	r16, 0xFE	; 254
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	88 24       	eor	r8, r8
     ee2:	83 94       	inc	r8
     ee4:	91 2c       	mov	r9, r1
     ee6:	53 01       	movw	r10, r6
     ee8:	13 c0       	rjmp	.+38     	; 0xf10 <vfprintf+0x154>
     eea:	28 01       	movw	r4, r16
     eec:	f2 e0       	ldi	r31, 0x02	; 2
     eee:	4f 0e       	add	r4, r31
     ef0:	51 1c       	adc	r5, r1
     ef2:	f8 01       	movw	r30, r16
     ef4:	a0 80       	ld	r10, Z
     ef6:	b1 80       	ldd	r11, Z+1	; 0x01
     ef8:	36 fe       	sbrs	r3, 6
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <vfprintf+0x146>
     efc:	69 2d       	mov	r22, r9
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <vfprintf+0x14a>
     f02:	6f ef       	ldi	r22, 0xFF	; 255
     f04:	7f ef       	ldi	r23, 0xFF	; 255
     f06:	c5 01       	movw	r24, r10
     f08:	0e 94 0e 0a 	call	0x141c	; 0x141c <strnlen>
     f0c:	4c 01       	movw	r8, r24
     f0e:	82 01       	movw	r16, r4
     f10:	f3 2d       	mov	r31, r3
     f12:	ff 77       	andi	r31, 0x7F	; 127
     f14:	3f 2e       	mov	r3, r31
     f16:	16 c0       	rjmp	.+44     	; 0xf44 <vfprintf+0x188>
     f18:	28 01       	movw	r4, r16
     f1a:	22 e0       	ldi	r18, 0x02	; 2
     f1c:	42 0e       	add	r4, r18
     f1e:	51 1c       	adc	r5, r1
     f20:	f8 01       	movw	r30, r16
     f22:	a0 80       	ld	r10, Z
     f24:	b1 80       	ldd	r11, Z+1	; 0x01
     f26:	36 fe       	sbrs	r3, 6
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <vfprintf+0x174>
     f2a:	69 2d       	mov	r22, r9
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x178>
     f30:	6f ef       	ldi	r22, 0xFF	; 255
     f32:	7f ef       	ldi	r23, 0xFF	; 255
     f34:	c5 01       	movw	r24, r10
     f36:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strnlen_P>
     f3a:	4c 01       	movw	r8, r24
     f3c:	f3 2d       	mov	r31, r3
     f3e:	f0 68       	ori	r31, 0x80	; 128
     f40:	3f 2e       	mov	r3, r31
     f42:	82 01       	movw	r16, r4
     f44:	33 fc       	sbrc	r3, 3
     f46:	1b c0       	rjmp	.+54     	; 0xf7e <vfprintf+0x1c2>
     f48:	82 2d       	mov	r24, r2
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	88 16       	cp	r8, r24
     f4e:	99 06       	cpc	r9, r25
     f50:	b0 f4       	brcc	.+44     	; 0xf7e <vfprintf+0x1c2>
     f52:	b6 01       	movw	r22, r12
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 19 0a 	call	0x1432	; 0x1432 <fputc>
     f5c:	2a 94       	dec	r2
     f5e:	f4 cf       	rjmp	.-24     	; 0xf48 <vfprintf+0x18c>
     f60:	f5 01       	movw	r30, r10
     f62:	37 fc       	sbrc	r3, 7
     f64:	85 91       	lpm	r24, Z+
     f66:	37 fe       	sbrs	r3, 7
     f68:	81 91       	ld	r24, Z+
     f6a:	5f 01       	movw	r10, r30
     f6c:	b6 01       	movw	r22, r12
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 19 0a 	call	0x1432	; 0x1432 <fputc>
     f74:	21 10       	cpse	r2, r1
     f76:	2a 94       	dec	r2
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	82 1a       	sub	r8, r18
     f7c:	91 08       	sbc	r9, r1
     f7e:	81 14       	cp	r8, r1
     f80:	91 04       	cpc	r9, r1
     f82:	71 f7       	brne	.-36     	; 0xf60 <vfprintf+0x1a4>
     f84:	e8 c0       	rjmp	.+464    	; 0x1156 <vfprintf+0x39a>
     f86:	84 36       	cpi	r24, 0x64	; 100
     f88:	11 f0       	breq	.+4      	; 0xf8e <vfprintf+0x1d2>
     f8a:	89 36       	cpi	r24, 0x69	; 105
     f8c:	41 f5       	brne	.+80     	; 0xfde <vfprintf+0x222>
     f8e:	f8 01       	movw	r30, r16
     f90:	37 fe       	sbrs	r3, 7
     f92:	07 c0       	rjmp	.+14     	; 0xfa2 <vfprintf+0x1e6>
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	0c 5f       	subi	r16, 0xFC	; 252
     f9e:	1f 4f       	sbci	r17, 0xFF	; 255
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <vfprintf+0x1f6>
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	07 2e       	mov	r0, r23
     fa8:	00 0c       	add	r0, r0
     faa:	88 0b       	sbc	r24, r24
     fac:	99 0b       	sbc	r25, r25
     fae:	0e 5f       	subi	r16, 0xFE	; 254
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	f3 2d       	mov	r31, r3
     fb4:	ff 76       	andi	r31, 0x6F	; 111
     fb6:	3f 2e       	mov	r3, r31
     fb8:	97 ff       	sbrs	r25, 7
     fba:	09 c0       	rjmp	.+18     	; 0xfce <vfprintf+0x212>
     fbc:	90 95       	com	r25
     fbe:	80 95       	com	r24
     fc0:	70 95       	com	r23
     fc2:	61 95       	neg	r22
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	8f 4f       	sbci	r24, 0xFF	; 255
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	f0 68       	ori	r31, 0x80	; 128
     fcc:	3f 2e       	mov	r3, r31
     fce:	2a e0       	ldi	r18, 0x0A	; 10
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	a3 01       	movw	r20, r6
     fd4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__ultoa_invert>
     fd8:	88 2e       	mov	r8, r24
     fda:	86 18       	sub	r8, r6
     fdc:	45 c0       	rjmp	.+138    	; 0x1068 <vfprintf+0x2ac>
     fde:	85 37       	cpi	r24, 0x75	; 117
     fe0:	31 f4       	brne	.+12     	; 0xfee <vfprintf+0x232>
     fe2:	23 2d       	mov	r18, r3
     fe4:	2f 7e       	andi	r18, 0xEF	; 239
     fe6:	b2 2e       	mov	r11, r18
     fe8:	2a e0       	ldi	r18, 0x0A	; 10
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	25 c0       	rjmp	.+74     	; 0x1038 <vfprintf+0x27c>
     fee:	93 2d       	mov	r25, r3
     ff0:	99 7f       	andi	r25, 0xF9	; 249
     ff2:	b9 2e       	mov	r11, r25
     ff4:	8f 36       	cpi	r24, 0x6F	; 111
     ff6:	c1 f0       	breq	.+48     	; 0x1028 <vfprintf+0x26c>
     ff8:	18 f4       	brcc	.+6      	; 0x1000 <vfprintf+0x244>
     ffa:	88 35       	cpi	r24, 0x58	; 88
     ffc:	79 f0       	breq	.+30     	; 0x101c <vfprintf+0x260>
     ffe:	b5 c0       	rjmp	.+362    	; 0x116a <vfprintf+0x3ae>
    1000:	80 37       	cpi	r24, 0x70	; 112
    1002:	19 f0       	breq	.+6      	; 0x100a <vfprintf+0x24e>
    1004:	88 37       	cpi	r24, 0x78	; 120
    1006:	21 f0       	breq	.+8      	; 0x1010 <vfprintf+0x254>
    1008:	b0 c0       	rjmp	.+352    	; 0x116a <vfprintf+0x3ae>
    100a:	e9 2f       	mov	r30, r25
    100c:	e0 61       	ori	r30, 0x10	; 16
    100e:	be 2e       	mov	r11, r30
    1010:	b4 fe       	sbrs	r11, 4
    1012:	0d c0       	rjmp	.+26     	; 0x102e <vfprintf+0x272>
    1014:	fb 2d       	mov	r31, r11
    1016:	f4 60       	ori	r31, 0x04	; 4
    1018:	bf 2e       	mov	r11, r31
    101a:	09 c0       	rjmp	.+18     	; 0x102e <vfprintf+0x272>
    101c:	34 fe       	sbrs	r3, 4
    101e:	0a c0       	rjmp	.+20     	; 0x1034 <vfprintf+0x278>
    1020:	29 2f       	mov	r18, r25
    1022:	26 60       	ori	r18, 0x06	; 6
    1024:	b2 2e       	mov	r11, r18
    1026:	06 c0       	rjmp	.+12     	; 0x1034 <vfprintf+0x278>
    1028:	28 e0       	ldi	r18, 0x08	; 8
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <vfprintf+0x27c>
    102e:	20 e1       	ldi	r18, 0x10	; 16
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <vfprintf+0x27c>
    1034:	20 e1       	ldi	r18, 0x10	; 16
    1036:	32 e0       	ldi	r19, 0x02	; 2
    1038:	f8 01       	movw	r30, r16
    103a:	b7 fe       	sbrs	r11, 7
    103c:	07 c0       	rjmp	.+14     	; 0x104c <vfprintf+0x290>
    103e:	60 81       	ld	r22, Z
    1040:	71 81       	ldd	r23, Z+1	; 0x01
    1042:	82 81       	ldd	r24, Z+2	; 0x02
    1044:	93 81       	ldd	r25, Z+3	; 0x03
    1046:	0c 5f       	subi	r16, 0xFC	; 252
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <vfprintf+0x29c>
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 5f       	subi	r16, 0xFE	; 254
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	a3 01       	movw	r20, r6
    105a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__ultoa_invert>
    105e:	88 2e       	mov	r8, r24
    1060:	86 18       	sub	r8, r6
    1062:	fb 2d       	mov	r31, r11
    1064:	ff 77       	andi	r31, 0x7F	; 127
    1066:	3f 2e       	mov	r3, r31
    1068:	36 fe       	sbrs	r3, 6
    106a:	0d c0       	rjmp	.+26     	; 0x1086 <vfprintf+0x2ca>
    106c:	23 2d       	mov	r18, r3
    106e:	2e 7f       	andi	r18, 0xFE	; 254
    1070:	a2 2e       	mov	r10, r18
    1072:	89 14       	cp	r8, r9
    1074:	58 f4       	brcc	.+22     	; 0x108c <vfprintf+0x2d0>
    1076:	34 fe       	sbrs	r3, 4
    1078:	0b c0       	rjmp	.+22     	; 0x1090 <vfprintf+0x2d4>
    107a:	32 fc       	sbrc	r3, 2
    107c:	09 c0       	rjmp	.+18     	; 0x1090 <vfprintf+0x2d4>
    107e:	83 2d       	mov	r24, r3
    1080:	8e 7e       	andi	r24, 0xEE	; 238
    1082:	a8 2e       	mov	r10, r24
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <vfprintf+0x2d4>
    1086:	b8 2c       	mov	r11, r8
    1088:	a3 2c       	mov	r10, r3
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <vfprintf+0x2d6>
    108c:	b8 2c       	mov	r11, r8
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <vfprintf+0x2d6>
    1090:	b9 2c       	mov	r11, r9
    1092:	a4 fe       	sbrs	r10, 4
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <vfprintf+0x2f8>
    1096:	fe 01       	movw	r30, r28
    1098:	e8 0d       	add	r30, r8
    109a:	f1 1d       	adc	r31, r1
    109c:	80 81       	ld	r24, Z
    109e:	80 33       	cpi	r24, 0x30	; 48
    10a0:	21 f4       	brne	.+8      	; 0x10aa <vfprintf+0x2ee>
    10a2:	9a 2d       	mov	r25, r10
    10a4:	99 7e       	andi	r25, 0xE9	; 233
    10a6:	a9 2e       	mov	r10, r25
    10a8:	09 c0       	rjmp	.+18     	; 0x10bc <vfprintf+0x300>
    10aa:	a2 fe       	sbrs	r10, 2
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <vfprintf+0x2fe>
    10ae:	b3 94       	inc	r11
    10b0:	b3 94       	inc	r11
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <vfprintf+0x300>
    10b4:	8a 2d       	mov	r24, r10
    10b6:	86 78       	andi	r24, 0x86	; 134
    10b8:	09 f0       	breq	.+2      	; 0x10bc <vfprintf+0x300>
    10ba:	b3 94       	inc	r11
    10bc:	a3 fc       	sbrc	r10, 3
    10be:	11 c0       	rjmp	.+34     	; 0x10e2 <vfprintf+0x326>
    10c0:	a0 fe       	sbrs	r10, 0
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <vfprintf+0x314>
    10c4:	b2 14       	cp	r11, r2
    10c6:	88 f4       	brcc	.+34     	; 0x10ea <vfprintf+0x32e>
    10c8:	28 0c       	add	r2, r8
    10ca:	92 2c       	mov	r9, r2
    10cc:	9b 18       	sub	r9, r11
    10ce:	0e c0       	rjmp	.+28     	; 0x10ec <vfprintf+0x330>
    10d0:	b2 14       	cp	r11, r2
    10d2:	60 f4       	brcc	.+24     	; 0x10ec <vfprintf+0x330>
    10d4:	b6 01       	movw	r22, r12
    10d6:	80 e2       	ldi	r24, 0x20	; 32
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 19 0a 	call	0x1432	; 0x1432 <fputc>
    10de:	b3 94       	inc	r11
    10e0:	f7 cf       	rjmp	.-18     	; 0x10d0 <vfprintf+0x314>
    10e2:	b2 14       	cp	r11, r2
    10e4:	18 f4       	brcc	.+6      	; 0x10ec <vfprintf+0x330>
    10e6:	2b 18       	sub	r2, r11
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <vfprintf+0x332>
    10ea:	98 2c       	mov	r9, r8
    10ec:	21 2c       	mov	r2, r1
    10ee:	a4 fe       	sbrs	r10, 4
    10f0:	10 c0       	rjmp	.+32     	; 0x1112 <vfprintf+0x356>
    10f2:	b6 01       	movw	r22, r12
    10f4:	80 e3       	ldi	r24, 0x30	; 48
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 19 0a 	call	0x1432	; 0x1432 <fputc>
    10fc:	a2 fe       	sbrs	r10, 2
    10fe:	17 c0       	rjmp	.+46     	; 0x112e <vfprintf+0x372>
    1100:	a1 fc       	sbrc	r10, 1
    1102:	03 c0       	rjmp	.+6      	; 0x110a <vfprintf+0x34e>
    1104:	88 e7       	ldi	r24, 0x78	; 120
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 c0       	rjmp	.+4      	; 0x110e <vfprintf+0x352>
    110a:	88 e5       	ldi	r24, 0x58	; 88
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	b6 01       	movw	r22, r12
    1110:	0c c0       	rjmp	.+24     	; 0x112a <vfprintf+0x36e>
    1112:	8a 2d       	mov	r24, r10
    1114:	86 78       	andi	r24, 0x86	; 134
    1116:	59 f0       	breq	.+22     	; 0x112e <vfprintf+0x372>
    1118:	a1 fe       	sbrs	r10, 1
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <vfprintf+0x364>
    111c:	8b e2       	ldi	r24, 0x2B	; 43
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <vfprintf+0x366>
    1120:	80 e2       	ldi	r24, 0x20	; 32
    1122:	a7 fc       	sbrc	r10, 7
    1124:	8d e2       	ldi	r24, 0x2D	; 45
    1126:	b6 01       	movw	r22, r12
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 19 0a 	call	0x1432	; 0x1432 <fputc>
    112e:	89 14       	cp	r8, r9
    1130:	38 f4       	brcc	.+14     	; 0x1140 <vfprintf+0x384>
    1132:	b6 01       	movw	r22, r12
    1134:	80 e3       	ldi	r24, 0x30	; 48
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 19 0a 	call	0x1432	; 0x1432 <fputc>
    113c:	9a 94       	dec	r9
    113e:	f7 cf       	rjmp	.-18     	; 0x112e <vfprintf+0x372>
    1140:	8a 94       	dec	r8
    1142:	f3 01       	movw	r30, r6
    1144:	e8 0d       	add	r30, r8
    1146:	f1 1d       	adc	r31, r1
    1148:	80 81       	ld	r24, Z
    114a:	b6 01       	movw	r22, r12
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 19 0a 	call	0x1432	; 0x1432 <fputc>
    1152:	81 10       	cpse	r8, r1
    1154:	f5 cf       	rjmp	.-22     	; 0x1140 <vfprintf+0x384>
    1156:	22 20       	and	r2, r2
    1158:	09 f4       	brne	.+2      	; 0x115c <vfprintf+0x3a0>
    115a:	42 ce       	rjmp	.-892    	; 0xde0 <vfprintf+0x24>
    115c:	b6 01       	movw	r22, r12
    115e:	80 e2       	ldi	r24, 0x20	; 32
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 19 0a 	call	0x1432	; 0x1432 <fputc>
    1166:	2a 94       	dec	r2
    1168:	f6 cf       	rjmp	.-20     	; 0x1156 <vfprintf+0x39a>
    116a:	f6 01       	movw	r30, r12
    116c:	86 81       	ldd	r24, Z+6	; 0x06
    116e:	97 81       	ldd	r25, Z+7	; 0x07
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <vfprintf+0x3ba>
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	9f ef       	ldi	r25, 0xFF	; 255
    1176:	2b 96       	adiw	r28, 0x0b	; 11
    1178:	e2 e1       	ldi	r30, 0x12	; 18
    117a:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__epilogue_restores__>

0000117e <calloc>:
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	86 9f       	mul	r24, r22
    1188:	80 01       	movw	r16, r0
    118a:	87 9f       	mul	r24, r23
    118c:	10 0d       	add	r17, r0
    118e:	96 9f       	mul	r25, r22
    1190:	10 0d       	add	r17, r0
    1192:	11 24       	eor	r1, r1
    1194:	c8 01       	movw	r24, r16
    1196:	0e 94 db 08 	call	0x11b6	; 0x11b6 <malloc>
    119a:	ec 01       	movw	r28, r24
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	29 f0       	breq	.+10     	; 0x11aa <calloc+0x2c>
    11a0:	a8 01       	movw	r20, r16
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	0e 94 07 0a 	call	0x140e	; 0x140e <memset>
    11aa:	ce 01       	movw	r24, r28
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	08 95       	ret

000011b6 <malloc>:
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	91 05       	cpc	r25, r1
    11c2:	10 f4       	brcc	.+4      	; 0x11c8 <malloc+0x12>
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <__flp>
    11cc:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <__flp+0x1>
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	a0 e0       	ldi	r26, 0x00	; 0
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	30 97       	sbiw	r30, 0x00	; 0
    11da:	19 f1       	breq	.+70     	; 0x1222 <malloc+0x6c>
    11dc:	40 81       	ld	r20, Z
    11de:	51 81       	ldd	r21, Z+1	; 0x01
    11e0:	02 81       	ldd	r16, Z+2	; 0x02
    11e2:	13 81       	ldd	r17, Z+3	; 0x03
    11e4:	48 17       	cp	r20, r24
    11e6:	59 07       	cpc	r21, r25
    11e8:	c8 f0       	brcs	.+50     	; 0x121c <malloc+0x66>
    11ea:	84 17       	cp	r24, r20
    11ec:	95 07       	cpc	r25, r21
    11ee:	69 f4       	brne	.+26     	; 0x120a <malloc+0x54>
    11f0:	10 97       	sbiw	r26, 0x00	; 0
    11f2:	31 f0       	breq	.+12     	; 0x1200 <malloc+0x4a>
    11f4:	12 96       	adiw	r26, 0x02	; 2
    11f6:	0c 93       	st	X, r16
    11f8:	12 97       	sbiw	r26, 0x02	; 2
    11fa:	13 96       	adiw	r26, 0x03	; 3
    11fc:	1c 93       	st	X, r17
    11fe:	27 c0       	rjmp	.+78     	; 0x124e <malloc+0x98>
    1200:	00 93 2a 02 	sts	0x022A, r16	; 0x80022a <__flp>
    1204:	10 93 2b 02 	sts	0x022B, r17	; 0x80022b <__flp+0x1>
    1208:	22 c0       	rjmp	.+68     	; 0x124e <malloc+0x98>
    120a:	21 15       	cp	r18, r1
    120c:	31 05       	cpc	r19, r1
    120e:	19 f0       	breq	.+6      	; 0x1216 <malloc+0x60>
    1210:	42 17       	cp	r20, r18
    1212:	53 07       	cpc	r21, r19
    1214:	18 f4       	brcc	.+6      	; 0x121c <malloc+0x66>
    1216:	9a 01       	movw	r18, r20
    1218:	bd 01       	movw	r22, r26
    121a:	ef 01       	movw	r28, r30
    121c:	df 01       	movw	r26, r30
    121e:	f8 01       	movw	r30, r16
    1220:	db cf       	rjmp	.-74     	; 0x11d8 <malloc+0x22>
    1222:	21 15       	cp	r18, r1
    1224:	31 05       	cpc	r19, r1
    1226:	f9 f0       	breq	.+62     	; 0x1266 <malloc+0xb0>
    1228:	28 1b       	sub	r18, r24
    122a:	39 0b       	sbc	r19, r25
    122c:	24 30       	cpi	r18, 0x04	; 4
    122e:	31 05       	cpc	r19, r1
    1230:	80 f4       	brcc	.+32     	; 0x1252 <malloc+0x9c>
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	61 15       	cp	r22, r1
    1238:	71 05       	cpc	r23, r1
    123a:	21 f0       	breq	.+8      	; 0x1244 <malloc+0x8e>
    123c:	fb 01       	movw	r30, r22
    123e:	93 83       	std	Z+3, r25	; 0x03
    1240:	82 83       	std	Z+2, r24	; 0x02
    1242:	04 c0       	rjmp	.+8      	; 0x124c <malloc+0x96>
    1244:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__flp+0x1>
    1248:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__flp>
    124c:	fe 01       	movw	r30, r28
    124e:	32 96       	adiw	r30, 0x02	; 2
    1250:	44 c0       	rjmp	.+136    	; 0x12da <malloc+0x124>
    1252:	fe 01       	movw	r30, r28
    1254:	e2 0f       	add	r30, r18
    1256:	f3 1f       	adc	r31, r19
    1258:	81 93       	st	Z+, r24
    125a:	91 93       	st	Z+, r25
    125c:	22 50       	subi	r18, 0x02	; 2
    125e:	31 09       	sbc	r19, r1
    1260:	39 83       	std	Y+1, r19	; 0x01
    1262:	28 83       	st	Y, r18
    1264:	3a c0       	rjmp	.+116    	; 0x12da <malloc+0x124>
    1266:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <__brkval>
    126a:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <__brkval+0x1>
    126e:	23 2b       	or	r18, r19
    1270:	41 f4       	brne	.+16     	; 0x1282 <malloc+0xcc>
    1272:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1276:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    127a:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <__brkval+0x1>
    127e:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <__brkval>
    1282:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1286:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    128a:	21 15       	cp	r18, r1
    128c:	31 05       	cpc	r19, r1
    128e:	41 f4       	brne	.+16     	; 0x12a0 <malloc+0xea>
    1290:	2d b7       	in	r18, 0x3d	; 61
    1292:	3e b7       	in	r19, 0x3e	; 62
    1294:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1298:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    129c:	24 1b       	sub	r18, r20
    129e:	35 0b       	sbc	r19, r21
    12a0:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <__brkval>
    12a4:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <__brkval+0x1>
    12a8:	e2 17       	cp	r30, r18
    12aa:	f3 07       	cpc	r31, r19
    12ac:	a0 f4       	brcc	.+40     	; 0x12d6 <malloc+0x120>
    12ae:	2e 1b       	sub	r18, r30
    12b0:	3f 0b       	sbc	r19, r31
    12b2:	28 17       	cp	r18, r24
    12b4:	39 07       	cpc	r19, r25
    12b6:	78 f0       	brcs	.+30     	; 0x12d6 <malloc+0x120>
    12b8:	ac 01       	movw	r20, r24
    12ba:	4e 5f       	subi	r20, 0xFE	; 254
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	24 17       	cp	r18, r20
    12c0:	35 07       	cpc	r19, r21
    12c2:	48 f0       	brcs	.+18     	; 0x12d6 <malloc+0x120>
    12c4:	4e 0f       	add	r20, r30
    12c6:	5f 1f       	adc	r21, r31
    12c8:	50 93 29 02 	sts	0x0229, r21	; 0x800229 <__brkval+0x1>
    12cc:	40 93 28 02 	sts	0x0228, r20	; 0x800228 <__brkval>
    12d0:	81 93       	st	Z+, r24
    12d2:	91 93       	st	Z+, r25
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <malloc+0x124>
    12d6:	e0 e0       	ldi	r30, 0x00	; 0
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	cf 01       	movw	r24, r30
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <free>:
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <free+0xa>
    12ee:	81 c0       	rjmp	.+258    	; 0x13f2 <free+0x10c>
    12f0:	fc 01       	movw	r30, r24
    12f2:	32 97       	sbiw	r30, 0x02	; 2
    12f4:	13 82       	std	Z+3, r1	; 0x03
    12f6:	12 82       	std	Z+2, r1	; 0x02
    12f8:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <__flp>
    12fc:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <__flp+0x1>
    1300:	10 97       	sbiw	r26, 0x00	; 0
    1302:	81 f4       	brne	.+32     	; 0x1324 <free+0x3e>
    1304:	20 81       	ld	r18, Z
    1306:	31 81       	ldd	r19, Z+1	; 0x01
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <__brkval>
    1310:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <__brkval+0x1>
    1314:	28 17       	cp	r18, r24
    1316:	39 07       	cpc	r19, r25
    1318:	51 f5       	brne	.+84     	; 0x136e <free+0x88>
    131a:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <__brkval+0x1>
    131e:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <__brkval>
    1322:	67 c0       	rjmp	.+206    	; 0x13f2 <free+0x10c>
    1324:	ed 01       	movw	r28, r26
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	ce 17       	cp	r28, r30
    132c:	df 07       	cpc	r29, r31
    132e:	40 f4       	brcc	.+16     	; 0x1340 <free+0x5a>
    1330:	4a 81       	ldd	r20, Y+2	; 0x02
    1332:	5b 81       	ldd	r21, Y+3	; 0x03
    1334:	9e 01       	movw	r18, r28
    1336:	41 15       	cp	r20, r1
    1338:	51 05       	cpc	r21, r1
    133a:	f1 f0       	breq	.+60     	; 0x1378 <free+0x92>
    133c:	ea 01       	movw	r28, r20
    133e:	f5 cf       	rjmp	.-22     	; 0x132a <free+0x44>
    1340:	d3 83       	std	Z+3, r29	; 0x03
    1342:	c2 83       	std	Z+2, r28	; 0x02
    1344:	40 81       	ld	r20, Z
    1346:	51 81       	ldd	r21, Z+1	; 0x01
    1348:	84 0f       	add	r24, r20
    134a:	95 1f       	adc	r25, r21
    134c:	c8 17       	cp	r28, r24
    134e:	d9 07       	cpc	r29, r25
    1350:	59 f4       	brne	.+22     	; 0x1368 <free+0x82>
    1352:	88 81       	ld	r24, Y
    1354:	99 81       	ldd	r25, Y+1	; 0x01
    1356:	84 0f       	add	r24, r20
    1358:	95 1f       	adc	r25, r21
    135a:	02 96       	adiw	r24, 0x02	; 2
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	9b 81       	ldd	r25, Y+3	; 0x03
    1364:	93 83       	std	Z+3, r25	; 0x03
    1366:	82 83       	std	Z+2, r24	; 0x02
    1368:	21 15       	cp	r18, r1
    136a:	31 05       	cpc	r19, r1
    136c:	29 f4       	brne	.+10     	; 0x1378 <free+0x92>
    136e:	f0 93 2b 02 	sts	0x022B, r31	; 0x80022b <__flp+0x1>
    1372:	e0 93 2a 02 	sts	0x022A, r30	; 0x80022a <__flp>
    1376:	3d c0       	rjmp	.+122    	; 0x13f2 <free+0x10c>
    1378:	e9 01       	movw	r28, r18
    137a:	fb 83       	std	Y+3, r31	; 0x03
    137c:	ea 83       	std	Y+2, r30	; 0x02
    137e:	49 91       	ld	r20, Y+
    1380:	59 91       	ld	r21, Y+
    1382:	c4 0f       	add	r28, r20
    1384:	d5 1f       	adc	r29, r21
    1386:	ec 17       	cp	r30, r28
    1388:	fd 07       	cpc	r31, r29
    138a:	61 f4       	brne	.+24     	; 0x13a4 <free+0xbe>
    138c:	80 81       	ld	r24, Z
    138e:	91 81       	ldd	r25, Z+1	; 0x01
    1390:	84 0f       	add	r24, r20
    1392:	95 1f       	adc	r25, r21
    1394:	02 96       	adiw	r24, 0x02	; 2
    1396:	e9 01       	movw	r28, r18
    1398:	99 83       	std	Y+1, r25	; 0x01
    139a:	88 83       	st	Y, r24
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	9b 83       	std	Y+3, r25	; 0x03
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    13a4:	e0 e0       	ldi	r30, 0x00	; 0
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	12 96       	adiw	r26, 0x02	; 2
    13aa:	8d 91       	ld	r24, X+
    13ac:	9c 91       	ld	r25, X
    13ae:	13 97       	sbiw	r26, 0x03	; 3
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	19 f0       	breq	.+6      	; 0x13ba <free+0xd4>
    13b4:	fd 01       	movw	r30, r26
    13b6:	dc 01       	movw	r26, r24
    13b8:	f7 cf       	rjmp	.-18     	; 0x13a8 <free+0xc2>
    13ba:	8d 91       	ld	r24, X+
    13bc:	9c 91       	ld	r25, X
    13be:	11 97       	sbiw	r26, 0x01	; 1
    13c0:	9d 01       	movw	r18, r26
    13c2:	2e 5f       	subi	r18, 0xFE	; 254
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	82 0f       	add	r24, r18
    13c8:	93 1f       	adc	r25, r19
    13ca:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <__brkval>
    13ce:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <__brkval+0x1>
    13d2:	28 17       	cp	r18, r24
    13d4:	39 07       	cpc	r19, r25
    13d6:	69 f4       	brne	.+26     	; 0x13f2 <free+0x10c>
    13d8:	30 97       	sbiw	r30, 0x00	; 0
    13da:	29 f4       	brne	.+10     	; 0x13e6 <free+0x100>
    13dc:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__flp+0x1>
    13e0:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__flp>
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <free+0x104>
    13e6:	13 82       	std	Z+3, r1	; 0x03
    13e8:	12 82       	std	Z+2, r1	; 0x02
    13ea:	b0 93 29 02 	sts	0x0229, r27	; 0x800229 <__brkval+0x1>
    13ee:	a0 93 28 02 	sts	0x0228, r26	; 0x800228 <__brkval>
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <strnlen_P>:
    13f8:	fc 01       	movw	r30, r24
    13fa:	05 90       	lpm	r0, Z+
    13fc:	61 50       	subi	r22, 0x01	; 1
    13fe:	70 40       	sbci	r23, 0x00	; 0
    1400:	01 10       	cpse	r0, r1
    1402:	d8 f7       	brcc	.-10     	; 0x13fa <strnlen_P+0x2>
    1404:	80 95       	com	r24
    1406:	90 95       	com	r25
    1408:	8e 0f       	add	r24, r30
    140a:	9f 1f       	adc	r25, r31
    140c:	08 95       	ret

0000140e <memset>:
    140e:	dc 01       	movw	r26, r24
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <memset+0x6>
    1412:	6d 93       	st	X+, r22
    1414:	41 50       	subi	r20, 0x01	; 1
    1416:	50 40       	sbci	r21, 0x00	; 0
    1418:	e0 f7       	brcc	.-8      	; 0x1412 <memset+0x4>
    141a:	08 95       	ret

0000141c <strnlen>:
    141c:	fc 01       	movw	r30, r24
    141e:	61 50       	subi	r22, 0x01	; 1
    1420:	70 40       	sbci	r23, 0x00	; 0
    1422:	01 90       	ld	r0, Z+
    1424:	01 10       	cpse	r0, r1
    1426:	d8 f7       	brcc	.-10     	; 0x141e <strnlen+0x2>
    1428:	80 95       	com	r24
    142a:	90 95       	com	r25
    142c:	8e 0f       	add	r24, r30
    142e:	9f 1f       	adc	r25, r31
    1430:	08 95       	ret

00001432 <fputc>:
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	fb 01       	movw	r30, r22
    143c:	23 81       	ldd	r18, Z+3	; 0x03
    143e:	21 fd       	sbrc	r18, 1
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <fputc+0x16>
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	9f ef       	ldi	r25, 0xFF	; 255
    1446:	2c c0       	rjmp	.+88     	; 0x14a0 <fputc+0x6e>
    1448:	22 ff       	sbrs	r18, 2
    144a:	16 c0       	rjmp	.+44     	; 0x1478 <fputc+0x46>
    144c:	46 81       	ldd	r20, Z+6	; 0x06
    144e:	57 81       	ldd	r21, Z+7	; 0x07
    1450:	24 81       	ldd	r18, Z+4	; 0x04
    1452:	35 81       	ldd	r19, Z+5	; 0x05
    1454:	42 17       	cp	r20, r18
    1456:	53 07       	cpc	r21, r19
    1458:	44 f4       	brge	.+16     	; 0x146a <fputc+0x38>
    145a:	a0 81       	ld	r26, Z
    145c:	b1 81       	ldd	r27, Z+1	; 0x01
    145e:	9d 01       	movw	r18, r26
    1460:	2f 5f       	subi	r18, 0xFF	; 255
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	31 83       	std	Z+1, r19	; 0x01
    1466:	20 83       	st	Z, r18
    1468:	8c 93       	st	X, r24
    146a:	26 81       	ldd	r18, Z+6	; 0x06
    146c:	37 81       	ldd	r19, Z+7	; 0x07
    146e:	2f 5f       	subi	r18, 0xFF	; 255
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	37 83       	std	Z+7, r19	; 0x07
    1474:	26 83       	std	Z+6, r18	; 0x06
    1476:	14 c0       	rjmp	.+40     	; 0x14a0 <fputc+0x6e>
    1478:	8b 01       	movw	r16, r22
    147a:	ec 01       	movw	r28, r24
    147c:	fb 01       	movw	r30, r22
    147e:	00 84       	ldd	r0, Z+8	; 0x08
    1480:	f1 85       	ldd	r31, Z+9	; 0x09
    1482:	e0 2d       	mov	r30, r0
    1484:	09 95       	icall
    1486:	89 2b       	or	r24, r25
    1488:	e1 f6       	brne	.-72     	; 0x1442 <fputc+0x10>
    148a:	d8 01       	movw	r26, r16
    148c:	16 96       	adiw	r26, 0x06	; 6
    148e:	8d 91       	ld	r24, X+
    1490:	9c 91       	ld	r25, X
    1492:	17 97       	sbiw	r26, 0x07	; 7
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	17 96       	adiw	r26, 0x07	; 7
    1498:	9c 93       	st	X, r25
    149a:	8e 93       	st	-X, r24
    149c:	16 97       	sbiw	r26, 0x06	; 6
    149e:	ce 01       	movw	r24, r28
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	08 95       	ret

000014aa <__ultoa_invert>:
    14aa:	fa 01       	movw	r30, r20
    14ac:	aa 27       	eor	r26, r26
    14ae:	28 30       	cpi	r18, 0x08	; 8
    14b0:	51 f1       	breq	.+84     	; 0x1506 <__ultoa_invert+0x5c>
    14b2:	20 31       	cpi	r18, 0x10	; 16
    14b4:	81 f1       	breq	.+96     	; 0x1516 <__ultoa_invert+0x6c>
    14b6:	e8 94       	clt
    14b8:	6f 93       	push	r22
    14ba:	6e 7f       	andi	r22, 0xFE	; 254
    14bc:	6e 5f       	subi	r22, 0xFE	; 254
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	8f 4f       	sbci	r24, 0xFF	; 255
    14c2:	9f 4f       	sbci	r25, 0xFF	; 255
    14c4:	af 4f       	sbci	r26, 0xFF	; 255
    14c6:	b1 e0       	ldi	r27, 0x01	; 1
    14c8:	3e d0       	rcall	.+124    	; 0x1546 <__ultoa_invert+0x9c>
    14ca:	b4 e0       	ldi	r27, 0x04	; 4
    14cc:	3c d0       	rcall	.+120    	; 0x1546 <__ultoa_invert+0x9c>
    14ce:	67 0f       	add	r22, r23
    14d0:	78 1f       	adc	r23, r24
    14d2:	89 1f       	adc	r24, r25
    14d4:	9a 1f       	adc	r25, r26
    14d6:	a1 1d       	adc	r26, r1
    14d8:	68 0f       	add	r22, r24
    14da:	79 1f       	adc	r23, r25
    14dc:	8a 1f       	adc	r24, r26
    14de:	91 1d       	adc	r25, r1
    14e0:	a1 1d       	adc	r26, r1
    14e2:	6a 0f       	add	r22, r26
    14e4:	71 1d       	adc	r23, r1
    14e6:	81 1d       	adc	r24, r1
    14e8:	91 1d       	adc	r25, r1
    14ea:	a1 1d       	adc	r26, r1
    14ec:	20 d0       	rcall	.+64     	; 0x152e <__ultoa_invert+0x84>
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <__ultoa_invert+0x48>
    14f0:	68 94       	set
    14f2:	3f 91       	pop	r19
    14f4:	2a e0       	ldi	r18, 0x0A	; 10
    14f6:	26 9f       	mul	r18, r22
    14f8:	11 24       	eor	r1, r1
    14fa:	30 19       	sub	r19, r0
    14fc:	30 5d       	subi	r19, 0xD0	; 208
    14fe:	31 93       	st	Z+, r19
    1500:	de f6       	brtc	.-74     	; 0x14b8 <__ultoa_invert+0xe>
    1502:	cf 01       	movw	r24, r30
    1504:	08 95       	ret
    1506:	46 2f       	mov	r20, r22
    1508:	47 70       	andi	r20, 0x07	; 7
    150a:	40 5d       	subi	r20, 0xD0	; 208
    150c:	41 93       	st	Z+, r20
    150e:	b3 e0       	ldi	r27, 0x03	; 3
    1510:	0f d0       	rcall	.+30     	; 0x1530 <__ultoa_invert+0x86>
    1512:	c9 f7       	brne	.-14     	; 0x1506 <__ultoa_invert+0x5c>
    1514:	f6 cf       	rjmp	.-20     	; 0x1502 <__ultoa_invert+0x58>
    1516:	46 2f       	mov	r20, r22
    1518:	4f 70       	andi	r20, 0x0F	; 15
    151a:	40 5d       	subi	r20, 0xD0	; 208
    151c:	4a 33       	cpi	r20, 0x3A	; 58
    151e:	18 f0       	brcs	.+6      	; 0x1526 <__ultoa_invert+0x7c>
    1520:	49 5d       	subi	r20, 0xD9	; 217
    1522:	31 fd       	sbrc	r19, 1
    1524:	40 52       	subi	r20, 0x20	; 32
    1526:	41 93       	st	Z+, r20
    1528:	02 d0       	rcall	.+4      	; 0x152e <__ultoa_invert+0x84>
    152a:	a9 f7       	brne	.-22     	; 0x1516 <__ultoa_invert+0x6c>
    152c:	ea cf       	rjmp	.-44     	; 0x1502 <__ultoa_invert+0x58>
    152e:	b4 e0       	ldi	r27, 0x04	; 4
    1530:	a6 95       	lsr	r26
    1532:	97 95       	ror	r25
    1534:	87 95       	ror	r24
    1536:	77 95       	ror	r23
    1538:	67 95       	ror	r22
    153a:	ba 95       	dec	r27
    153c:	c9 f7       	brne	.-14     	; 0x1530 <__ultoa_invert+0x86>
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	61 05       	cpc	r22, r1
    1542:	71 05       	cpc	r23, r1
    1544:	08 95       	ret
    1546:	9b 01       	movw	r18, r22
    1548:	ac 01       	movw	r20, r24
    154a:	0a 2e       	mov	r0, r26
    154c:	06 94       	lsr	r0
    154e:	57 95       	ror	r21
    1550:	47 95       	ror	r20
    1552:	37 95       	ror	r19
    1554:	27 95       	ror	r18
    1556:	ba 95       	dec	r27
    1558:	c9 f7       	brne	.-14     	; 0x154c <__ultoa_invert+0xa2>
    155a:	62 0f       	add	r22, r18
    155c:	73 1f       	adc	r23, r19
    155e:	84 1f       	adc	r24, r20
    1560:	95 1f       	adc	r25, r21
    1562:	a0 1d       	adc	r26, r0
    1564:	08 95       	ret

00001566 <__prologue_saves__>:
    1566:	2f 92       	push	r2
    1568:	3f 92       	push	r3
    156a:	4f 92       	push	r4
    156c:	5f 92       	push	r5
    156e:	6f 92       	push	r6
    1570:	7f 92       	push	r7
    1572:	8f 92       	push	r8
    1574:	9f 92       	push	r9
    1576:	af 92       	push	r10
    1578:	bf 92       	push	r11
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	ca 1b       	sub	r28, r26
    1590:	db 0b       	sbc	r29, r27
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	09 94       	ijmp

0000159e <__epilogue_restores__>:
    159e:	2a 88       	ldd	r2, Y+18	; 0x12
    15a0:	39 88       	ldd	r3, Y+17	; 0x11
    15a2:	48 88       	ldd	r4, Y+16	; 0x10
    15a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    15a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    15a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    15aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    15ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    15ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    15b0:	b9 84       	ldd	r11, Y+9	; 0x09
    15b2:	c8 84       	ldd	r12, Y+8	; 0x08
    15b4:	df 80       	ldd	r13, Y+7	; 0x07
    15b6:	ee 80       	ldd	r14, Y+6	; 0x06
    15b8:	fd 80       	ldd	r15, Y+5	; 0x05
    15ba:	0c 81       	ldd	r16, Y+4	; 0x04
    15bc:	1b 81       	ldd	r17, Y+3	; 0x03
    15be:	aa 81       	ldd	r26, Y+2	; 0x02
    15c0:	b9 81       	ldd	r27, Y+1	; 0x01
    15c2:	ce 0f       	add	r28, r30
    15c4:	d1 1d       	adc	r29, r1
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	ed 01       	movw	r28, r26
    15d2:	08 95       	ret

000015d4 <_exit>:
    15d4:	f8 94       	cli

000015d6 <__stop_program>:
    15d6:	ff cf       	rjmp	.-2      	; 0x15d6 <__stop_program>
